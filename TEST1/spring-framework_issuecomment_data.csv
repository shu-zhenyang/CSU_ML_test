,id,user_login,user_id,body
0,453396588,spring-projects-issues,16028288,"**[skzr.org](https://jira.spring.io/secure/ViewProfile.jspa?name=skzr.org@gmail.com)** commented
```xml
<task:executor id=""foo"" threadNamePrefix=""bar-"">
```
you can write:
```xml
<task:executor id=""bar""/>
```
or you can write:
```xml
<bean id=""applicationEventMulticaster"" class=""org.springframework.context.event.SimpleApplicationEventMulticaster"">

<!-- 	<property name=""taskExecutor"" ref=""springEvent""/> -->

    	<property name=""taskExecutor"">
    		<bean class=""org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"">
    			<property name=""threadNamePrefix"" value=""bar""/>
    		</bean>
    	</property>
</bean>
```
"
1,453430003,spring-projects-issues,16028288,"**[wu wen ](https://jira.spring.io/secure/ViewProfile.jspa?name=wuwen)** commented

+1
"
2,453465380,spring-projects-issues,16028288,"**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented

A little more background. [RFC 7807](https://tools.ietf.org/html/rfc7807) suggests the use of error specific media types (e.g. ""application/problem+json"", ""application/problem+xml"") which suggests those might be appended to the Accept header in addition to media types for a successful response. So while the ""produces"" condition on an `@RequestMapping` is binding and forces the response to use that media type, once an error is raised, we need a reset and let the error response make a fresh choice about the media type to use.
"
3,453430005,spring-projects-issues,16028288,"**[haiepng liang](https://jira.spring.io/secure/ViewProfile.jspa?name=heber)** commented

+1
"
4,453430006,spring-projects-issues,16028288,"**[Iker Hernaez](https://jira.spring.io/secure/ViewProfile.jspa?name=i.hernaez)** commented

+1
"
5,582858203,Artur-,260340,"Now that I read javadocs more carefully, is this related to
> WARNING: Note that ""classpath*:"" when combined with Ant-style patterns will only work reliably with at least one root directory before the pattern starts, unless the actual target files reside in the file system. This means that a pattern like ""classpath*:*.xml"" will not retrieve files from the root of jar files but rather only from the root of expanded directories. This originates from a limitation in the JDK's ClassLoader.getResources() method which only returns file system locations for a passed-in empty String (indicating potential roots to search). This ResourcePatternResolver implementation is trying to mitigate the jar root lookup limitation through URLClassLoader introspection and ""java.class.path"" manifest evaluation; however, without portability guarantees.

?"
6,743016497,wlizhi,39363556,"Nested is implemented through savepoint, which is essentially in a transaction, so it still uses the same database connection. Only 'REQUIRES_NEW' gets a new connection.

@quaff "
7,743021201,quaff,143040,"> Nested is implemented through savepoint, which is essentially in a transaction, so it still uses the same database connection. Only 'REQUIRES_NEW' gets a new connection.
> 
> @quaff

updated."
8,802826427,sbrannen,104798,"Related issues:

- #25443
- #27534"
9,889876753,cvmocanu,59873,"It's very disappointing to see the Spring team refusing to split the vulnerable class into a separate module. This would indeed be a braking change (people who actually use that class would have to manually bring-in a new dependency), but I think it would affect very few people.

Pushing for better tools (like CodeQL, if it's indeed better) is a fair point, and I'm going to try to at least get it considered, but it may take many months (or even years) in a large organization to change tools.
In the mean time, we have to feel the pain.
And while the source of the pain is the processes of the organization, it wouldn't be too difficult for the Spring team to fix this issue.

Another thing to ponder: why is it that, from 276 libraries, `spring-web` is the only one that causes issues?"
10,895291437,HashZhang,15627489,"Thanks for reply. 

> `BeanUtils` rely heavily on introspection, uses cache techniques; profiling might be the way to pinpoint the problem; but a test case scenario is needed.

I checked the source code for 5.3.x, there is no cache for ResolvableType currently which result in Many ResolvableType objects are created while make one call of `BeanUtils.copyproeperties`

> By using experimental VM options; you are in a very specific case; normally the issue should be reproduced with production ready environment; when making a library it is customary to use the most stable tech stack possible.

**That's not the point**. After upgrade to Spring 5.3.x, we observed large increase in YoungGC frequency (Before upgrade: One YoungGC in every 20s; After upgrade: One YoungGC in every 1s). The objects created(not promoted) is increased from 200MB/s to nearly 2GB/s. Therefore **I tried to find the problem** and then I found **very large amount of ResolvableType objects were created** which took up large amount of memory. To **prove that**, I provided a simple Test here which use Experimental flags (just for limiting the memory and proving there are much more memory used than before). And my Test  prove that there are large amount of memory consumed compared with the case not upgraded (**If you check jmap -histo, you would find they are taken up mainly by ResolvableType**). "
11,912942532,snicoll,490484,Superseded by #27349
12,987781676,poutsma,330665,"After team discussion, we have decided not to invest in `ListenableFuture`. It can easily be converted into a `CompletableFuture`, which has Kotlin support through `kotlinx-coroutines-jdk8`.

Thank you for submitting a PR, though."
13,993477596,jhoeller,1263688,"We're tracking the AspectJ 1.9.8 RCs in spring-projects/spring-framework#27537 (for 6.0 M1), so I'm repurposing this ticket for AspectJ 1.9.8 GA (in 6.0 M2)."
14,996888679,be-hase,903482,"To give you another example, `grpc-kotlin` supports customizing coroutine context.
https://github.com/grpc/grpc-kotlin/issues/66

Being able to customize the context makes it much easier to propagate MDCs and Brave's Tracing.
e.g. https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-slf4j/kotlinx.coroutines.slf4j/-m-d-c-context/index.html

Please consider it."
15,1001999366,snicoll,490484,"> I don't need context caching: all the contrary. 

That's not [how things are working](https://docs.spring.io/spring-framework/docs/current/reference/html/testing.html#testcontext-ctx-management-caching), and the reason why this issue has been moved to the Spring Framework issue tracker.

> I would like to do the same in spring-boot: each test should create its own context and run in parallel

Unfortunately, that isn't the same thing at all. `@SpringBootTest` or any test that uses `SpringExtension` is an ""integration test"" and benefit from the context caching feature. 

> Let me know if my explanation is clearer now or if you need additional info.

I understood you from the get-go. If you want to trick the cache, you could add a fake property with a different value for each test. This would turn each test into a different key and not use the context cache at all. There might be other options and, perhaps, things that need clarification in the reference guide."
16,1013172812,sbrannen,104798,"Related Issue:

- spring-projects/spring-boot#29754"
17,1014156493,tomasbjerre,439571,"The difference is the dependencies needed. It is nice not to have Feign and all its transitives on classpath. My library has only one dependency, and it is on `spring-web`."
18,1025766095,snicoll,490484,"We're trying to design an interface that allows a `BeanPostProcessor` to opt-in for providing a code contributor that replaces what it does at runtime. The current model is implementing an interface that returns a contributor based on a `RootBeanDefinition`, similar to `MergedBeanDefinitionPostProcessor#postProcessMergedBeanDefinition`.

While the processor would be excluded by default at runtime, it would be nice if it could indicate that it needs to run again.  If we want such a feature, the phase at which the `BeanFactory` is processed should become a high-level concept, something like ""build-time"" vs. ""runtime"" vs. ""optimized-runtime"".
"
19,1026624943,illidan80,53393926,"Getting this error constantly on **Alpine**, started right after we migrated from Spring 2.3.7 to 2.6.2"
20,1026669026,sdeleuze,141109,@rstoyanchev I [migrate the sample to Java](https://github.com/sdeleuze/webfluxMemoryRetroProject) in order to allow you to validate it is not related to our Kotlin integration.
21,1026669072,rstoyanchev,401908,"Closing as outdated, along with related issue. The Javadoc issue seems to have been cleaned up since."
22,1026671905,pivotal-cla,16822967,"@elgleidson Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=27993)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=27993) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
23,1026674139,pivotal-cla,16822967,@elgleidson Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=27993)!
24,1026690933,sbrannen,104798,"> When running parallel tests with the `@SpringBootTest` annotation t**here is a bug that is causing the caching of the application context, even when using the annotation `@DirtiesContext` to force context re-creation.** Affected spring-boot versions (the one I tried): `2.5.2` and `2.6.2`

This is not a bug. On the contrary, as documented in the [Parallel Test Execution](https://docs.spring.io/spring-framework/docs/current/reference/html/testing.html#testcontext-parallel-test-execution) section of the reference manual, using `@DirtiesContext` with parallel test execution is not supported.

As mentioned in https://github.com/spring-projects/spring-framework/issues/27858#issuecomment-1001999366, ""If you want to trick the cache, you could add a fake property with a different value for each test."" That would result in a different `ApplicationContext` for each test class, but it would also result in an increase in the number of application contexts managed by the cache. If you want to reduce the size of the cache, you can do that via the `spring.test.context.cache.maxSize` (as [documented](https://docs.spring.io/spring-framework/docs/current/reference/html/testing.html#testcontext-ctx-management-caching) in the reference manual).

> I don't need context caching: all the contrary. **I want that integration tests run in parallel, each using its own context to achieve full isolation**. It is possible to achieve this behavior with vanilla JUnit: you just need to ""manually setup"" your ""test context"" for each test and then run the test in parallel.

There is currently no way to completely disable context caching in the TestContext framework (see #18295). So, if you need each test class to have its own `ApplicationContext`, the only way to achieve that at the moment with the TestContext framework is to ensure that each test class declares context configuration that results in a unique key for the cache (as suggested by @snicoll in https://github.com/spring-projects/spring-framework/issues/27858#issuecomment-1001999366).

In light of that, I am closing this issue.


"
25,1026710687,sbrannen,104798,"Indeed, this effectively a duplicate of #25940.

> I have created a small project showcasing this problem (https://github.com/filiphr/spring-java-17-duplicate-class-definition).

I don't see any code in that repo. There's only a README file."
26,1026711963,rstoyanchev,401908,"**Team decision:** Recently we reviewed a request #27773 to ensure the `InputStream` is closed but decided that converters do not have enough context to do that. Here we'll ensure that they consistently don't close the `InputStream` by using `StreamUtils#nonClosing`. This is something that was done a long time ago in 6661788748daccfc8d08b4a17a66beb4f01fc7b8 but not applied the the Jackson converter at the time. Later, the writing side of Jackson was included 7be7e5beb4e7d808761f06e386b359d45a0890d8, but not for reading. "
27,1026715944,filiphr,6012094,">I don't see any code in that repo. There's only a README file.

Really silly of me, I forgot to also push the classes 🤦. I have pushed the changes there now as well. Let me know what you think and whether this is something that can be addresses in Spring 5, the other issue is targeted towards Spring 6.

>Indeed, this effectively a duplicate of #25940.

That's why I expected, but wanted to make sure. "
28,1026722694,sbrannen,104798,"Related issues:

- #25940 
- #27622"
29,1026736077,sbrannen,104798,"> I'm guessing that the JDK thinks that the `com.example.issue.aopissue.service.IssueConfiguration$$Lambda$638/0x0000000800e796e0` type resides in same package as `java.util.function.Supplier` and therefore in the `java.lang` module instead of being local to your module, and I'm wondering if that's perhaps a bug in the JDK.

For the sake of clarity, after investigating this issue, there does not appear to be an issue with the JDK. Rather:

- Spring AOP is attempting to create a CGLIB-based proxy for the lambda expression.
- You therefore need `--add-opens java.base/java.lang=ALL-UNNAMED` on Java 16 or higher in order to allow CGLIB to create the class-based proxy for the lambda expression.

Note that `--add-opens java.base/java.lang=ALL-UNNAMED` is not necessary on Java 9 through Java 15.

For the time being, people can use the `--add-opens` workaround.

However, the Spring team will investigate a way to avoid the creation of CGLIB-based proxies for lambda expressions. A JDK dynamic proxy should always suffice for a class that can only ever be used via the _functional interface_ it implements. Dynamic proxies should also be used for lambda expressions and method references even if `proxyTargetClass` has been set to `true`.

"
30,1026746432,sbrannen,104798,It looks like the code examples for `The following test works fine` and `This test fails` are identical. Can you please update this PR's description?
31,1026781215,jhoeller,1263688,"@bclozel with OkHttp 4.x remaining binary compatible with OkHttp 3 (just deprecating a few methods but keeping them around as pointed out above), we also got the option of sticking with an OkHttp 3.14.9 baseline for compilation in `spring-web` - and keeping up runtime compatibility against OkHttp 4.x, possibly with dedicated tests in a separate module that runs our tests against OkHttp 4.9.3.

In any case, I'm not in favor of a general OkHttp 4 baseline on our end (at the core framework level). The majority of existing applications will be using OkHttp 3.14 with regular Java still (initially at least), so retaining compatibility there seems sensible, and the easiest enforcement is to keep compiling against the common OkHttp 3.14 API (seeing it as a Java API jar to compile against, not necessarily as a suggested runtime dependency version). On a separate note, Spring Boot 3 may decide to go with OkHttp 4.9.3 as its managed version or even drop OkHttp dependency management completely.

And if we ever decide to deprecate OkHttp support in `spring-web` altogether, we can still do so within the Spring Framework 6.x generation. Within 5.3.x, I'd rather avoid a deprecation step at this point."
32,1026785289,jhoeller,1263688,"In revisiting our load-time weaving setup for 6.0, we might be able to enforce early initialization of the bean configurer aspect independent from the declaration order (which can be brittle with component scanning in general), avoiding the need for custom `@DependsOn` declarations to begin with. From that perspective, we do not intend to promote the depends-on workaround with a well-defined bean name as in PR #1544."
33,1026787138,jhoeller,1263688,"Closing this PR based on https://github.com/spring-projects/spring-framework/issues/13658#issuecomment-1026785289 since we're trying to address the problem from a different angle, and for the depends-on workaround, it doesn't really matter whether the aspect bean name is ""internal"" for the time being.

Thanks for the PR, in any case!"
34,1026790524,jhoeller,1263688,"Start timeouts were technically meant as a hint in the sense of ""to be ignored if it cannot be respected"", just like transaction timeouts or statement timeouts with JDBC which are often effectively ignored by the driver implementation as well.

That said, since the only implementation which actually supported start timeouts (WorkManagerTaskExecutor) went away in 6.0, I'd rather deprecate the method in 5.3.x and possibly remove it in 6.0 completely. I'll repurpose this issue accordingly."
35,1026824823,elgleidson,3411190,"> It looks like the code examples for `The following test works fine` and `This test fails` are identical. Can you please update this PR's description?

Done."
36,1026835468,bclozel,103264,"Thanks @jhoeller - I'm closing this PR as a result.
We'll keep this arrangement around for the time being and we might revisit it in the 6.x timeframe.

We'll defer to the Spring Boot team on the auto-configuration and dependency management decisions.

Thanks @larsgrefer for the contribution!"
37,1026907386,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
38,1026944906,kp185128,76436857,Please find the example link https://github.com/kp185128/Spring-upgrade-2.6.3
39,1027171579,sbrannen,104798,"@AbstractCoderX, are you planning on submitting a PR with the ""switch expression"" changes?"
40,1027184686,AbstractCoderX,38766980,"> @AbstractCoderX, are you planning on submitting a PR with the ""switch expression"" changes?

I will do it this week"
41,1027661748,snicoll,490484,"@loiclefevre please refrain from opening duplicate PRs. If you need to amend your existing PR, pushing to an existing branch will update your existing PR. As you've created the PR from main, it might close itself if you upgrade the remote but you can reopen the PR and push force it."
42,1027680154,typik89,19478444,I've tried with Java and seen the same 
43,1027852481,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
44,1028027444,jhoeller,1263688,"`ReflectiveMethodExecutor` is trying to get the interface method if possible as well, just like `ReflectivePropertyAccessor`. I'm not quite sure why this isn't kicking in here, we'll have a look."
45,1028034442,scantor,8268662,"From my earlier JDK spelunking, I would speculate that it's because the base class they use for the LinkedHashSet iterators doesn't in fact implement Iterator (or anything else). The subclasses do, but the hasNext method itself is declared on the Abstract base class that doesn't, so it's probably not spotting the interface. It's a bit of an odd layout."
46,1028177866,vladimirfx,1281463,"Hit by this while trying Spring GraphQL with validation in the classpath. This makes it impossible to call suspended `@QueryMapping` methods. 
Hibernate Validator issue is prioritized as Minor and unlikely to be fixed soon. Can validation be disabled at HandlerMethod level OR concrete method level?"
47,1028331910,marschall,471021,"Awesome, thanks a lot!"
48,1028381392,roma2341,7004017,"Requires_new is king of side effects. When i began to wrote integration tests i understood that this propagation prevents my transactions from rollback, but i didnt expect this behaviour would make my database dirty after a test, i had transactional annotation on my test methods and i know that requires_new starts new transaction so it wouldn't be rolled-back, only outer transaction would be rolled-back. And i don't know how to avoid this behaviour in my tests, only way is to not to use requires_new. And what is weird i have never heard about this problem when read articles about testing spring applications. And why i also dont like requires_new is that it can make my program throw pessimistic lock exceptions and it's very hard to find a reason"
49,1028683800,jhoeller,1263688,"Some debugging reveals that it is indeed the interface declaration in a subclass, late-binding a method from the superclass to an interface method, which is not being discovered by our `getInterfaceMethodIfPossible` algorithm here. I'll revisit this to pass along the original target class, not just operating on the method's declaring class."
50,1028929270,thake,12547985,"A similar problem seems to exist for the `consumes` property. Given the following controller:

```kotlin
@RestController
@RequestMapping(""/hal-documents"")
class MyController {
    @PostMapping(
        consumes = [""""""application/hal+json;profile=""my-resource-v1""""""""],
        produces = [""""""application/hal+json;profile=""my-resource-v1""""""""]
    )
    fun postVersion1(@RequestBody request : String) = ""version-1""

    @PostMapping(
        consumes = [""""""application/hal+json;profile=""my-resource-v2""""""""],
        produces = [""""""application/hal+json;profile=""my-resource-v2""""""""]
    )
    fun postVersion2(@RequestBody request : String) = ""version-2"";
}
```
A request that provides a request body with the content type `application/hal+json;profile=""my-resource-v2""` is being routed to `postVersion1` but should be routed to `postVersion2`.

"
51,1028932751,arunsai271,52828333,I'm facing the same issue that am not able to inject a list of strings into origins parameter of @CrossOrigin. Can anyone help me how to inject list of allowed hosts from application.properties ?
52,1028972785,snicoll,490484,"With our design evolving where certain components can provide both the regular runtime behavior and something that can generate a pre-processed version of it, it became apparent that it's odd to rely on an optional dependency of javapoet. 

We've decided to give the repackaging another try."
53,1029745943,snicoll,490484,@sharunthomas The versions that you are using are EOL so we will need to upgrade first. It is also unclear why you are reporting a RabitMQ clustering issue to the Spring Framework. Please upgrade first and follow-up with a StackOverflow question if necessary.
54,1029754043,snicoll,490484,Thanks again @An1s9n!
55,1029788872,sharunthomas,17807916,"@snicoll This is not a RabbitMQ clustering issue, clustered env is working fine. The issue is in the spring boot app, which means I have provided a list of host and port values of RabblitMQ cluster instead of a single hostname and port. 
 It supposedly should connect to the second node if the first one fails, but what I can see is the app trying to connect to the same host and port after the failure of the first node.
Is it because of the version that I'm using?? is there any associated known issues in StompBrokerRelayMessageHandler related to this??"
56,1029791662,snicoll,490484,"I didn't mean to say that this was an issue with the server. The code you've shared is not part of the Spring Framework so I can only guess you suspect this is related. As I've indicated, you are using versions that are EOL so I am afraid we can't provide you support until you upgrade if you're still experiencing an issue after doing so."
57,1029798712,sharunthomas,17807916,"This is the WebSocket config file where I was using this code

```
public class WebsocketConfig extends AbstractWebSocketMessageBrokerConfigurer{
------
-----
    @Override
    public void configureMessageBroker(MessageBrokerRegistry registry) {
    ---- 
         StompBrokerRelayRegistration messageBrokerRegistry = registry.enableStompBrokerRelay()
                          .setTcpClient(**createTcpClient()**);


private Reactor2TcpClient<byte[]> createTcpClient() {
      final List<InetSocketAddress> addressList = new ArrayList<>();
      for (String hostnamesWithPort:hostnamesWithPorts) {
          String[] hostNameAndPort = StringUtils.split(hostnamesWithPort,':');  // consider there are 3 nodes added here
          addressList.add(new InetSocketAddress(hostNameAndPort[0], Integer.parseInt(hostNameAndPort[1])));
      }
      final RoundRobinList<InetSocketAddress> addresses = new RoundRobinList<>(addressList);
      Supplier<InetSocketAddress> addressSupplier = new Supplier<InetSocketAddress>() {
          @Override
          public InetSocketAddress get() {
             return addresses.get();
          }
      };
      StompDecoder decoder = new StompDecoder();
      Reactor2StompCodec codec = new Reactor2StompCodec(new StompEncoder(), decoder);
      return new Reactor2TcpClient<>(addressSupplier, codec);
  }


public class RoundRobinList<T> {

        private Iterator<T> iterator;
        private final Collection<T> elements;

        public RoundRobinList(Collection<T> elements)
        {
            this.elements = elements;
            iterator = this.elements.iterator();
        }

        synchronized public T get()
        {
            if (iterator.hasNext())
            {
                return iterator.next();
            } else
            {
                iterator = elements.iterator();
                return iterator.next();
            }
        }

        public int size()
        {
            return elements.size();
        }
    }
}

```



**This is the whole code, may be related to the version but I'm confused if this the right way to add multiple hosts to the stomp websocket config ????**"
58,1029804282,snicoll,490484,"@sharunthomas I think I made it clear what support we can provide to you. Please respect our time and I also invite you to review [the guidelines for contributing](https://github.com/spring-projects/spring-boot/blob/master/CONTRIBUTING.adoc#using-github-issues), where  we states we prefer to use GitHub issues only for bugs and enhancements."
59,1029894479,jhoeller,1263688,"We aim for a complete Hibernate 6.0 support story in our own 6.0 M3, not sure yet how far we'll go (native API via `orm.hibernate6`? or just with JPA? keeping up Hibernate 5.x support in parallel? etc): #22128

That said, it's definitely worth considering what we could do in 5.3.x to allow for using Hibernate 6.0 with our JPA support at least. We might want to leniently tolerate it at runtime for a start, even without full alignment yet. Let's use this ticket for it."
60,1029900031,odrotbohm,128577,"Once I avoided read-only transactions by rather using a simple `@Transactional` the integration tests using Hibernate 6 CR1 on a Boot 3 M1 ran just fine. I.e. it might be just that particular issue for starters. That's why I thought I'd open the ticket around something actionable. But of course, as you see fit.

Oh, H6 is JakartaEE based. I guess that is a showstopper for any support of it in our 5.x generation."
61,1029941352,sbrannen,104798,"### Available Workarounds 

The easiest way to work around this issue when using Spring Boot is by adding the following to your `application.properties` (or YAML) file.

```properties
spring.aop.proxy-target-class=false
```

If you're using Spring Framework without Spring Boot, ensure that `@EnableAspectJAutoProxy` is not declared as `@EnableAspectJAutoProxy(proxyTargetClass = true)`. In other words, keep the `proxyTargetClass = false` default behavior.

----

If you do not wish to make either of the above changes to your application configuration, you can run your application (or tests) using `--add-opens java.base/java.lang=ALL-UNNAMED` as mentioned in https://github.com/spring-projects/spring-framework/issues/27971#issuecomment-1025177347."
62,1029976175,typik89,19478444,"It seems that it's not a webflux issue.
I created a test to reproduce behavior when objects created during the running of a pipeline of creating byteArray aggregate are held in the heap memory for a long time after finishing the pipeline: https://github.com/typik89/webfluxMemoryRetroProject/blob/main/src/test/kotlin/ru/typik/reactor/MemoryLeakTest.kt
When I run the test with -xmx1000MB, I see 6-7 log messages about ByteArray being created and after that, I see OutOfMemoryError and test fails.
When I run the test with -xmx2000MB, the test works fine in an infinite loop. I create a heap dump and I see 9 ByteArrays with a size of about 130MB. It seems that Reactor holds 9 results of pipeline in the heap and other results are released successfully. I don't understand why it happens and what is this magical number 9 and how I can configure it.
"
63,1029996399,jhoeller,1263688,"Good point, there's no classic JPA binding for it anymore, it's exclusively built on `jakarta.persistence` indeed. And it won't be usable with `orm.hibernate5` either due to plenty of incompatibilities in the native Hibernate API. Alright, so Hibernate ORM 6.0 becomes a Spring Framework 6.0 only topic then :-)"
64,1029998635,jhoeller,1263688,"Alright, so we'll definitely sort out `HibernateJpaDialect` compatibility for 6.0 M3 for a start, using this ticket. Full Hibernate 6.0 alignment - or even Hibernate 6.0 baselining - might take longer anyway, let's use #22128 for that part then."
65,1030002911,poutsma,330665,"As part of this effort, we would also deprecate the current streaming support in `DefaultPartHttpMessageReader`."
66,1030003408,poutsma,330665,"We are considering to introduce a different way to handle streaming multipart support, because of inherent problems in the current model. See the description #28006. It would be great if you could share your thoughts in that issue."
67,1030143741,odrotbohm,128577,"I just realized that the API I found and suggested as workaround (never tested using it myself, though) also already exists in 5.6.5. I.e. we could try to just move that in 6.0 but stick to the Hibernate 5.x baseline."
68,1030349668,jhoeller,1263688,"It turns out that it is indeed straightforward to support both Hibernate 5.6 and 6.0 through a revision of `HibernateJpaDialect` where it retrieves the current JDBC connection differently. The correct replacement is `getJdbcCoordinator().getLogicalConnection().getPhysicalConnection()` for obtaining the current connection held by the session, as far as the connection release mode is appropriate for it. This seems to work fine on 5.6 as well as 6.0.

The other area affected is `HibernateJpaVendorAdapter` and its selection of default dialects for the database enum. Those dialects seem to be deprecated now, the Informix dialect is even gone completely. However, this shouldn't be a big deal since we recommend explicit Hibernate dialect configuration in any case (rather than relying on our database enum).

From that perspective, we seem to be covered in terms of JPA compatibility, so I'll close this ticket right away. The main remaining part for #22128 is whether we want/need an `orm.hibernate6` package next to `orm.hibernate5`, or possibly as a replacement for `orm.hibernate5`. This mostly depends on what we are going to recommend for existing `orm.hibernate5` users: staying on Hibernate 5.6, upgrading to Hibernate 6.0 via `orm.hibernate6`, or upgrading to Hibernate 6.0 via JPA."
69,1030579184,snicoll,490484,"@philwebb thanks for the report. I am not sure we should change that. I think that the intention is that you might configure an aspect of the `DefaultMessageListenerContainer` that this factory configures. If you do, the intention is that you actually provide a valid  component. My take is that we should rather not call the method if we don't have a `PlatformTransactionManager`.

@jhoeller added the nullability on this one so I'll defer to him."
70,1030606774,izeye,1059363,This seems to need to be removed from the milestone as it has been closed without changes.
71,1030610728,bclozel,103264,Thanks @izeye 
72,1030620527,snicoll,490484,"Good catch, thanks again @izeye."
73,1030627771,sbrannen,104798,Indeed... thanks for catching AND fixing my typo. 👍 
74,1030628753,sbrannen,104798,"@Ferioney, I confirmed that the change submitted in 5d7a632965aff allows your sample application to pass without any changes.

Please add the following to your `pom.xml` and let us know if you run into any issues.

```xml
	<properties>
		<java.version>17</java.version>
		<spring-framework.version>5.3.16-SNAPSHOT</spring-framework.version>
	</properties>

<!-- ... -->

	<repositories>
		<repository>
			<id>repository.spring.snapshot</id>
			<name>Spring Snapshot Repository</name>
			<url>https://repo.spring.io/snapshot</url>
		</repository>
	</repositories>

```"
75,1030631443,sbrannen,104798,"Superseded by #27976 and actually already addressed in `main` in e5af4aa608746faf55ddb96c352f6c95065a9d93.

Thanks, @jhoeller "
76,1030673234,sbrannen,104798,"This has been merged into `main` in 1e0e477833c90d13d60b4f8ed0649ab7bb3e1541 and polished in 04fbfddb13e45a729a93d88c5aee8092bff2ca9c.

Thanks

----

In the future, please refrain from submitting PRs for such small changes. 

We prefer that people collect several related changes and submit a single PR for all of them. Otherwise, we end up spending a lot of time managing individual PRs."
77,1030685567,sbrannen,104798,"This has been merged into `5.3.x` and `main` in 920be8e1b201fa947b07941eeace62ecf0f431a9 and slightly revised in eb84c843736aaa555d9078a544280bd70b714fbb.

Thanks for making your first contribution to the Spring Framework! 👍 "
78,1030685658,snicoll,490484,Your description indicates Stack overflow but you haven't shared the logs. Can you do that so that we can check if that is related to Spring Boot?
79,1030687187,ForteScarlet,40045247,"Main class:
```kotlin
@SpringBootApplication
class AnnotationDemo2Application

fun main(args: Array<String>) {
    runApplication<AnnotationDemo2Application>(*args)
}

@JvmRepeatable(Bar::class)
annotation class Foo(val value: Bar = Bar())
annotation class Bar(vararg val value: Foo)


@RestController
class HelloController {

    @Foo
    @Foo
    @GetMapping(""/a"")
    fun hi() = ""hello""
}
```



↓ This is the entire log generated by the relevant code from the start:
<details>
<summary> full debug log </summary>
<pre>
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v2.6.3)

2022-02-06 03:35:17.229  INFO 32820 --- [           main] c.e.a.AnnotationDemo2ApplicationKt       : Starting AnnotationDemo2ApplicationKt using Java 1.8.0_322 on ForteScarlet with PID 32820 (G:\code\javaProjects\annotation-demo2\target\classes started by forte in G:\code\javaProjects\annotation-demo2)
2022-02-06 03:35:17.231 DEBUG 32820 --- [           main] c.e.a.AnnotationDemo2ApplicationKt       : Running with Spring Boot v2.6.3, Spring v5.3.15
2022-02-06 03:35:17.231  INFO 32820 --- [           main] c.e.a.AnnotationDemo2ApplicationKt       : No active profile set, falling back to default profiles: default
2022-02-06 03:35:17.231 DEBUG 32820 --- [           main] o.s.boot.SpringApplication               : Loading source class com.example.annotationdemo2.AnnotationDemo2Application
2022-02-06 03:35:17.263 DEBUG 32820 --- [           main] ConfigServletWebServerApplicationContext : Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@37654521
2022-02-06 03:35:17.277 DEBUG 32820 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
2022-02-06 03:35:17.285 DEBUG 32820 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory'
2022-02-06 03:35:17.367  WARN 32820 --- [           main] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanDefinitionStoreException: Failed to read candidate component class: file [G:\code\javaProjects\annotation-demo2\target\classes\com\example\annotationdemo2\HelloController.class]; nested exception is java.lang.StackOverflowError
2022-02-06 03:35:17.660 ERROR 32820 --- [           main] o.s.boot.SpringApplication               : Application run failed

org.springframework.beans.factory.BeanDefinitionStoreException: Failed to read candidate component class: file [G:\code\javaProjects\annotation-demo2\target\classes\com\example\annotationdemo2\HelloController.class]; nested exception is java.lang.StackOverflowError
	at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.scanCandidateComponents(ClassPathScanningCandidateComponentProvider.java:457) ~[spring-context-5.3.15.jar:5.3.15]
	at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:316) ~[spring-context-5.3.15.jar:5.3.15]
	at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.doScan(ClassPathBeanDefinitionScanner.java:276) ~[spring-context-5.3.15.jar:5.3.15]
	at org.springframework.context.annotation.ComponentScanAnnotationParser.parse(ComponentScanAnnotationParser.java:128) ~[spring-context-5.3.15.jar:5.3.15]
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:296) ~[spring-context-5.3.15.jar:5.3.15]
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:250) ~[spring-context-5.3.15.jar:5.3.15]
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:207) ~[spring-context-5.3.15.jar:5.3.15]
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:175) ~[spring-context-5.3.15.jar:5.3.15]
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:331) ~[spring-context-5.3.15.jar:5.3.15]
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:247) ~[spring-context-5.3.15.jar:5.3.15]
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:311) ~[spring-context-5.3.15.jar:5.3.15]
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:112) ~[spring-context-5.3.15.jar:5.3.15]
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:746) ~[spring-context-5.3.15.jar:5.3.15]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:564) ~[spring-context-5.3.15.jar:5.3.15]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145) ~[spring-boot-2.6.3.jar:2.6.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732) [spring-boot-2.6.3.jar:2.6.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:414) [spring-boot-2.6.3.jar:2.6.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:302) [spring-boot-2.6.3.jar:2.6.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1303) [spring-boot-2.6.3.jar:2.6.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1292) [spring-boot-2.6.3.jar:2.6.3]
	at com.example.annotationdemo2.AnnotationDemo2ApplicationKt.main(AnnotationDemo2Application.kt:28) [classes/:na]
Caused by: java.lang.StackOverflowError: null
	at org.springframework.util.ConcurrentReferenceHashMap.getReference(ConcurrentReferenceHashMap.java:264) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.util.ConcurrentReferenceHashMap.get(ConcurrentReferenceHashMap.java:235) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:323) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AttributeMethods.forAnnotationType(AttributeMethods.java:252) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:96) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:106) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-5.3.15.jar:5.3.15]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_322]
	at org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-5.3.15.jar:5.3.15]
	at org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:343) ~[spring-core-5.3.15.jar:5.3.15]


Process finished with exit code 1

</pre>
</details>"
80,1030706040,philwebb,519772,"The exception is coming from Spring Framework's meta-annotation processing code.

It's interesting that Kotlin allows this:

```kotlin
@JvmRepeatable(Bar::class)
annotation class Foo(val value: Bar = Bar())

annotation class Bar(vararg val value: Foo)
```

With the following java code:
```java
@interface Foo {
	Bar value();
}

@interface Bar {
	Foo value();
}
```

The compiler fails with ""Cycle detected: a cycle exists between annotation attributes of Bar and Foo""

I guess Framework will need an additional guard.
"
81,1030740369,diguage,2121467,"> In the future, please refrain from submitting PRs for such small changes.
> 
> We prefer that people collect several related changes and submit a single PR for all of them. Otherwise, we end up spending a lot of time managing individual PRs.


👌🏻
Yesterday, I wrote a test about `AbstractRoutingDataSource`, reviewed the code, and submitted PRs for the changes. Sorry for the small changes.

I will try to submit big revisions in the future."
82,1030828397,angusoid,4958840,"This one caused me some headaches and made my userbase a DDoS army. 

Good job for figuring this one out! 
"
83,1030833448,gavenkoa,273770,@puertajennifer `@JsonNaming` has nothing with POST form + `x-www-form-urlencoded`. Jackson is not used when you submit a form.
84,1030860036,sbrannen,104798,"> I guess Framework will need an additional guard.

Yes, if Kotlin allows that to be compiled (which I also find a bit strange), I suppose we should at least guard against infinite recursion in our annotation processing.

----

@ForteScarlet, what is your concrete use case for declaring recursive annotations?


"
85,1030861081,gavenkoa,273770,"Related questions with workarounds:

* https://stackoverflow.com/questions/34945172/binding-snake-case-request-parameters-to-a-spring-form
* https://stackoverflow.com/questions/8986593/how-to-customize-parameter-names-when-binding-spring-mvc-command-objects

I don't like `OncePerRequestFilter` which is global, not per mapping. Or custom `ExtendedServletRequestDataBinder` to accept new kind of annotation on form parameters..."
86,1030864423,ForteScarlet,40045247,"@sbrannen 
I have a `@Filter` and `@Filters` to represent the filtering of events, like: 
```kotlin
@Filter(""hello"")
@Filter(""hi"")
suspend fun Event.onEvent() {
    // ...
}

```
Also, I would like to nest additional matching logic in the `@Filter`,  like:
```kotlin
@Filter(""hello"", or = Filters(Filter(value = ""hi"", user = [""123"", ""456""])))
suspend fun Event.onEvent() {
    // ...
}
```

Their source codes are here: https://github.com/ForteScarlet/simpler-robot/blob/3cf422e4161cd1128e60599ad2cc176ec989c47d/boots/simboot-core-annotation/src/main/kotlin/love/forte/simboot/annotation/Filter.kt

"
87,1031218772,rstoyanchev,401908,Superseded by #27948.
88,1031339983,rstoyanchev,401908,"Thanks for the report. This was previously reported in #27899 and fixed in 5.3.15, which was already released so you should be able to just upgrade for the fix."
89,1031348582,jhoeller,1263688,"I agree with @snicoll here: The design of those dedicated factory classes - with only setters, no getters - suggests that each setter method should only be called with a non-null argument, or simply skipped. If we decide to change this design, we'll have to redeclare all applicable setter methods with nullable arguments there. However, I'd rather suggest the existing design.

A side note: We have nullable setter arguments in other places but mostly just when getter methods exist that might have to return null in case nothing has been set (yet). This is required for consistency since otherwise tools (and also the Kotlin compiler) cannot infer property-level nullability for such a setter/getter pair."
90,1031357203,rstoyanchev,401908,I'm not sure if prototype scope applies to an `@Aspect` and I'm not sure what it would mean. Can you clarify what your expectation with that declaration? @jhoeller is this even an expected combination?
91,1031373527,rstoyanchev,401908,"There was another request #24236 for a new type of `ApplicationContext` that was declined recently, but this one comes from a different angle but I'm wondering how common the need is. I'll move it into the triage queue for consideration. "
92,1031383316,ZhongGuoDragon,68063139,"see code class  `org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl` you will see if you use `@Aspect(perthis())` or `@Aspect((pertarget))` it will create `PerTargetInstantiationModelPointcut`

> if (aspectInstanceFactory.getAspectMetadata().isLazilyInstantiated()) {
> 			// Static part of the pointcut is a lazy type.
> 			Pointcut preInstantiationPointcut = Pointcuts.union(
> 					aspectInstanceFactory.getAspectMetadata().getPerClausePointcut(), this.declaredPointcut);
> 
> 			// Make it dynamic: must mutate from pre-instantiation to post-instantiation state.
> 			// If it's not a dynamic pointcut, it may be optimized out
> 			// by the Spring AOP infrastructure after the first evaluation.
> 			this.pointcut = new PerTargetInstantiationModelPointcut(
> 					this.declaredPointcut, preInstantiationPointcut, aspectInstanceFactory);
> 			this.lazy = true;
> 		}

it will create tow pointcut but the second pointcut without args binding, it will throw exception `Caused by: java.lang.IllegalArgumentException: warning no match for this type name: ss [Xlint:invalidAbsoluteTypeName]`
if you use like below:

```java
@Aspect(""perthis(execution(* com.tom.test.demo..*(..)))"")
@Component
@Scope(""prototype"")
public class AspectJ {

    @Before(""execution(* com.tom.test.demo..*(..)) && args(ss)"")
    public <T extends String> void pointCut(JoinPoint joinPoint,String ss) {
        System.out.println(""????????????????????????"");
    }
}
```
"
93,1031413088,rstoyanchev,401908,Thanks for the suggestion but we'll keep the code as it is.
94,1031453278,snicoll,490484,"Reviewing what we did in Spring Native to support this feature, it looks like that adding multiple init/destroy method names could be enough to support this use case, if we'd honor `MergedBeanDefinitionPostProcessor`. 

The current code registers detected method as externally managed. We could rather ""just"" register it and let the new code invokes the method. "
95,1031500290,rstoyanchev,401908,"As far as I can see, this is all within the `RSocketServerAutoConfiguration`. There is no server transport initialization in the Spring Framework. @philwebb now that you've created https://github.com/spring-projects/spring-boot/issues/29550, is there is any reason to still keep this issue open?"
96,1031515718,ekuleshov,440954,"> As far as I can see, this is all within the `RSocketServerAutoConfiguration`. There is no server transport initialization in the Spring Framework. @philwebb now that you've created [spring-projects/spring-boot#29550](https://github.com/spring-projects/spring-boot/issues/29550), is there is any reason to still keep this issue open?

Please see my `rSocketWebsocketRouteProvider()` bean override that enables server-side compression. But with that stuff enabled I was unable to confirm compression working between client and server.

The #29550 issue is about removing the need in such override and allowing to configure server-side compression with autoconfig, server properties, etc... But the compression either does not work or my configuration change is not correct one."
97,1031618417,sbrannen,104798,"@ForteScarlet, thanks for providing the concrete use case and the link to the source code.

I see in the Javadoc that you have examples of using `@Filter` and `@Filters` in Java code. Out of curiosity, have you tried compiling those Java examples?

The reason I ask is that I know recursive annotations cannot be defined/compiled in Java (although it works with the Kotlin compiler), and I'm wondering if those Kotlin-compiled recursive annotations are actually usable in Java applications.

In any case, we'll investigate what we can do to avoid throwing exceptions (or resulting in a stack overflow) if recursive annotations are encountered while processing annotations in Spring Framework."
98,1031653018,gabac,50061,"I assume I should have opened the bug here rather than in spring-cloud: https://github.com/spring-cloud/spring-cloud-gateway/issues/2512

Google Cloud Run has the same issue with not compliant IPv6 addresses "
99,1031673702,rstoyanchev,401908,"It might make more sense for this issue to be in https://github.com/reactor/reactor-core/issues, but it cannot be transferred across organizations. I'm going to close this as it does not seem like anything we can fix in the Spring Framework, but more comments welcome, once you find out more about the root cause.

/cc @simonbasle "
100,1031676693,Hakky54,16032204,"I also have the same issue. I wanted to refactor the code below:

[github/mutual-tls-ssl/SSLConfig.java](https://github.com/Hakky54/mutual-tls-ssl/blob/ca34a84fc4d6cd62fc675ec148e52d1fedd800ff/client/src/main/java/nl/altindag/client/SSLConfig.java#L24)

```java
@Component
public class SSLConfig {

    @Bean
    @Scope(""prototype"")
    public SSLFactory sslFactory(
            @Value(""${client.ssl.one-way-authentication-enabled:false}"") boolean oneWayAuthenticationEnabled,
            @Value(""${client.ssl.two-way-authentication-enabled:false}"") boolean twoWayAuthenticationEnabled,
            @Value(""${client.ssl.key-store:}"") String keyStorePath,
            @Value(""${client.ssl.key-store-password:}"") char[] keyStorePassword,
            @Value(""${client.ssl.trust-store:}"") String trustStorePath,
            @Value(""${client.ssl.trust-store-password:}"") char[] trustStorePassword) {
        SSLFactory sslFactory = null;

        if (oneWayAuthenticationEnabled) {
            sslFactory = SSLFactory.builder()
                    .withTrustMaterial(trustStorePath, trustStorePassword)
                    .withProtocols(""TLSv1.3"")
                    .build();
        }

        if (twoWayAuthenticationEnabled) {
            sslFactory = SSLFactory.builder()
                    .withIdentityMaterial(keyStorePath, keyStorePassword)
                    .withTrustMaterial(trustStorePath, trustStorePassword)
                    .withProtocols(""TLSv1.3"")
                    .build();
        }

        return sslFactory;
    }

}
```

Into the following snippet:
```java
@Component
public class SSLConfig {

    @Bean
    @Scope(""prototype"")
    @ConditionalOnExpression(""${client.ssl.one-way-authentication-enabled} == true and ${client.ssl.two-way-authentication-enabled} == false"")
    public SSLFactory sslFactory(@Value(""${client.ssl.trust-store:}"") String trustStorePath,
                                 @Value(""${client.ssl.trust-store-password:}"") char[] trustStorePassword) {

        return SSLFactory.builder()
                .withTrustMaterial(trustStorePath, trustStorePassword)
                .withProtocols(""TLSv1.3"")
                .build();
    }


    @Bean
    @Scope(""prototype"")
    @ConditionalOnExpression(""${client.ssl.two-way-authentication-enabled} == true and ${client.ssl.one-way-authentication-enabled} == false"")
    public SSLFactory sslFactory(@Value(""${client.ssl.key-store:}"") String keyStorePath,
                                 @Value(""${client.ssl.key-store-password:}"") char[] keyStorePassword,
                                 @Value(""${client.ssl.trust-store:}"") String trustStorePath,
                                 @Value(""${client.ssl.trust-store-password:}"") char[] trustStorePassword) {

        return SSLFactory.builder()
                .withIdentityMaterial(keyStorePath, keyStorePassword)
                .withTrustMaterial(trustStorePath, trustStorePassword)
                .withProtocols(""TLSv1.3"")
                .build();
    }

}
```

However it fails. When I set debug on I see that the first is not matched because the expression is evaluated into negative. But the second method should pass, however that one is never evaluated. 

I don't think this is a must option as there is a workaround such as not using method overloading/ and use different method name or combine it in a single method. However it will give a better DX if this would just work out of the box. Looking forward to have this feature 😄 

Any news regarding this issue?"
101,1031678041,ForteScarlet,40045247,"@sbrannen 
I have tried to simply test `@Filter` in a Java project, but without deliberately caring about recursion.
 
But I just went and tried again, and the code is roughly as follows:
```java
    @Filter(value = ""Hello.+"", and = @Filters(@Filter(""Hello\\d+"")))
    @Filter(""Hi"")
    @Listener
    public void onEvent(FriendMessageEvent event) {
        System.out.println(event);
        System.out.println(event.getMessageContent().getPlainText());
    }
```
In the IDE, it functions as expected and works fine.

I also packaged it with the application plugin and tested it locally from my computer and it works fine.

In the IDE, I simply tried to compile using the following JDKs:
- azul-1.8.0_322
- corretto-11.0.14
- openjdk-17

🤔From the results, it appears that the recursive annotations compile and work.



"
102,1031749828,AbstractCoderX,38766980,@sbrannen https://github.com/spring-projects/spring-framework/pull/28014
103,1031757187,jxblum,5247119,"Thank you @rstoyanchev.

For sure, I am uncertain how common the need is as I only had a single request arise in SBDG (using Apache Geode) for such an `ApplicationContext`. However, it would compliment the refreshability of an XML [Web] based `ApplicationContext`. As we know most users have switched to _Spring Boot auto-configuration_ and use Annotation/Java based config to further customize their application configuration. To be clear, my thinking was simply that this would be a nice addition, but not strictly necessary if the team does not see the need or benefit. Just trying to give back to the core Spring Framework in whatever way I can."
104,1031857962,philwebb,519772,It's certainly an edge case. For the [documentation in question](https://docs.spring.io/spring-boot/docs/2.7.x-SNAPSHOT/reference/htmlsingle/#howto.messaging.disable-transacted-jms-session) we're trying to reconfigure a `DefaultJmsListenerContainerFactoryConfigurer` that has it's `setTransactionManager` called by some other code. I'll open a Boot issue to see if we can offer an alternative `configure` method that doesn't set the transaction manager.
105,1031930957,rfelgent,10388386,"I am sorry for you @Hakky54 - you walked into the same trap like me and others :-(

@jholler, I do understand your hint regarding ""more or less"" by design and I do love your suggestions regarding
""... so at the very least we need to document this properly... and we could possibly raise exceptions in case of condition mismatches among overloaded methods for the same bean definition..."""
106,1031974792,sumedhsakdeo,773250,"Hitting this issue as well. Any updates? 
What is the workaround, catching exception in createPropertySource() is not helping."
107,1032014276,fprochazka,158625,"Simply disallowing to declare more methods with the same name on the same configuration class (and guarding that with an exception) would suffice to prevent others from walking into the same trap :+1: 

I guess this could be even easily made into an ErrorProne check for example :thinking:  "
108,1032059742,Hakky54,16032204,I have forked the repo and made it working for this specific use case. It was a bit tricky because of some unit tests which still needed to pass. Anyone of the spring-framework team here? Just curious if it is worth to submit a PR as I am wondering if the team is considering to have this kind of capability for allowing of creating a bean conditionally while using method overload.
109,1032066743,ZhongGuoDragon,68063139,"> I'm not sure if prototype scope applies to an `@Aspect` and I'm not sure what it would mean. Can you clarify what your expectation with that declaration? @jhoeller is this even an expected combination?

the args bingding only create advise invoking.
see org.springframework.aop.aspectj.annotation.ReflectiveAspectJAdvisorFactory
method:
public Advice getAdvice(Method candidateAdviceMethod, AspectJExpressionPointcut expressionPointcut,
			MetadataAwareAspectInstanceFactory aspectInstanceFactory, int declarationOrder, String aspectName)
............
		if (argNames != null) {
			springAdvice.setArgumentNamesFromStringArray(argNames);
		}
		springAdvice.calculateArgumentBindings();
.............
if you use @Aspect(perthis()) or @Aspect(pertarget)
args pointcut expression and need advise method arg binding mode,it will create union pointcut but the second AspectJExpressionPointcut havn't args binding will throw Caused by: java.lang.IllegalArgumentException: warning no match for this type name: ss [Xlint:invalidAbsoluteTypeName]
"
110,1032325099,bclozel,103264,"Looking at [PatternMappingFilterProxy](https://github.com/spring-projects/spring-framework/blob/a0c97e4c36e5e07bc13bab4409ec740332a57871/spring-test/src/main/java/org/springframework/test/web/servlet/setup/PatternMappingFilterProxy.java), it seems that valid patterns are one of:
* prefix matching like `/*`, `/prefix/*`
* suffix matching like `/some/*.html`
* strict matching like `/sample`

In your case, does `/*` work in your sample application?"
111,1032328023,Deycoesr,33995808,`/*` can work
112,1032341847,Deycoesr,33995808,"Tomcat filter support url pattern `*`, see [FilterMap.java#L134](https://github.com/apache/tomcat/blob/7a33227760aa64dd50f2784923b9f0c849975d68/java/org/apache/tomcat/util/descriptor/web/FilterMap.java#L134).  
But [PatternMappingFilterProxy](https://github.com/spring-projects/spring-framework/blob/a0c97e4c36e5e07bc13bab4409ec740332a57871/spring-test/src/main/java/org/springframework/test/web/servlet/setup/PatternMappingFilterProxy.java) not support `*`"
113,1032346694,bclozel,103264,"I guess it would be nice to enhance a bit the Javadoc of this class. This is really replicating the behavior with Servlet mappings in general (see Servlet spec, ""Specification of Mappings"" section 12.2). In this case, `""*""` is treated as an exact match.

I'm not sure we should copy Tomcat's behavior here as it's not consistent with Servlet mapping in general - even though changing the behavior here is unlikely to break existing applications."
114,1032405995,snicoll,490484,There's no need to create a duplicate.
115,1032414660,philjoseph,4303547,"Hello AspectJ team, so is the GA for version 1.9.8, that will be the first GA for Java 17, currently depending on the optimization @sbrannen mentioned 25 days ago ? "
116,1032419428,sergeykad,12783618,@snicoll Can you then reopen the original issue?
117,1032424556,snicoll,490484,"There are a number of comments after the issue was closed that we've all seen. If the issue hasn't been reopened, that's because we're not considering implementing this at this time. This may be revisited in the future, in which case the issue will be reopened."
118,1032432398,ASarco,9863532,"This causes another problem, if by mistake a a uri like this is built: `http://localhost:8085api/something`  (missing slash between the port and the path), the previous regex would still extract the correct port number and path. However with this change, it will extract `8085api` as the port and of course will throw a NumberFormatException. "
119,1032443301,kriegaex,1537384,"No @philjoseph, that optimisation is already merged. Actually, we had stable versions for 1.9.8 - currently RC3 - for a long time and could have declared any of them final. Actually, I wanted to celebrate my committer status for AspectJ by cutting the release, even though technically it is not necessary, because I can already deploy to Maven Central ob behalf of the organisation. I just cannot directly commit and always have to trigger Andy Clement to merge my PRs for every little commit. Because internal Eclipse processes are rather Byzyntine, I still do not have committer status for AspectJ proper (only for AJDT), so I simply did not ""push the release button"". Sorry to have no more exciting (feature-wise) or better justified excuse for you. Maybe I should just deploy a release. For further oprimisations (Andy fixed a few minor bugs since 1.9.8.RC3), there is always the next release. But if you simply want to use Java 17, just use RC3. It does not contain the optimisation you talked about yet, though. That will be in the next Maven Central version."
120,1032469230,sbrannen,104798,"This is actually by design.

The result of invoking `toString()` on a synthesized annotation is identical to the result of invoking `toString()` on the same non-synthesized annotation on Java 8. In fact we used to have tests in place to verify that, but those broke once we started building the framework on Java 9, since Java 9 changed the output format for `toString()` in annotations.

See:

- #19211
- commit faf6e5d8fa05d25504a2f8dcd1ced4931aa82f11

In any case, it does not appear that the JDK format has changed since Java 9, so I'll go ahead and update to the newer format."
121,1032475087,jhoeller,1263688,"Ah ok, I wasn't aware of the change between JDK 8 and 9 there. If 5.3.x is currently aligned with the JDK 8 toString format there, we could also simply upgrade to the JDK 9+ format for 6.0."
122,1032517393,rstoyanchev,401908,"Hi @jxblum, thanks for bringing this up. We've discussed it a bit this morning. It's a multi-faceted topic with a few dimensions. To start, the reasons for the present hierarchy are bit historical, but generally speaking the need for the refreshable aspect is declining, with most applications these days simply being restarted. We might even take the opportunity to simplify and make a few deprecations in this area, especially as it relates to support for older, web.xml style deployments.

On the XML config side, refreshability helps if the config is changed for example, but we were wondering what the actual case for refreshability that you've run into is. What actually needs or benefits from refreshing, or did you simply find yourself having to extend from `AbstractRefreshableApplicationContext`? If there is a link to an underlying issue or discussion on that, it would be great to link.

Overall, you can see we're not looking to expand the hierarchy, and there are some guidance we could provide on the implementation side and/or potential workarounds, but before we go there, it'd be great to learn about the case.
"
123,1032527710,Hakky54,16032204,"I have created a PR to make this feature working, see here for the details: https://github.com/spring-projects/spring-framework/pull/28019 Would love to get everyones input ❤️ "
124,1032541715,sbrannen,104798,"Interestingly enough, it turns out there are actually 2 bugs (🐛) lurking behind the scenes here.

1. Spring's `toString()` for synthesized annotations in fact did not match the JDK 8 behavior for class attributes. Spring used `Class#getName`; JDK 8 used `Class#toString`.
2. JDK 9+ incorrectly invokes `Enum#toString` for enum attributes; whereas, the commit I am about to push will use `Enum#name`, since an enum can in fact override `toString()` (for example, with `return name().toLowerCase()`).

I'll see if the OpenJDK team is willing to update the `toString()` implementation for annotations to use `Enum#name`."
125,1032547658,rstoyanchev,401908,"There is a prior, related discussion in this https://github.com/spring-projects/spring-framework/issues/17949#issuecomment-453429220. 

Generally speaking, a `produces` format is chosen mainly given the type and sub-type of the media type. Parameters provide additional information, but their meaning and relevance is unknown to the framework.

If `produces` declares a media type with a parameter in it, and if the same parameter is also present in the media type from the Accept header, we'll make sure the two match. In all other cases (parameter present in `produces` but not in Accept header or vice versa), parameters have no impact and effectively considered a match. 

So even though charset is not in the Accept header (and shouldn't be I think, see #22788), it's still considered a match, and so effectively there is one matching parameter for each mapping. It's unclear which is or should be a more specific match. More generally, given a full range of cases with 1 or more of the same or different parameters on either side, it would be hard to imagine a good solution for matching and sorting based on parameters.

Note that for `consumes` we currently do not have the same matching where if the same parameter is present in both the `consumes` and the request content-type. It's something we could consider. On the `produces` side it was added for the case of `app/atom+xml;type=feed` vs `app/atom+xml;type=entry`, see #21670, but again for this to work, both `produces` conditions have to have the same parameter, and Accept header has to have it too. 

"
126,1032562019,rstoyanchev,401908,Thanks for figuring out the root cause!
127,1032593365,rstoyanchev,401908,I'll close this as superseded by #27606. Any further discussion can go on there.
128,1032612539,odrotbohm,128577,"Thanks for that, Jürgen. Verified working as expected now! 🙇"
129,1032713575,sbrannen,104798,"> I'll see if the OpenJDK team is willing to update the `toString()` implementation for annotations to use `Enum#name`.

See: https://bugs.openjdk.java.net/browse/JDK-8281462"
130,1032764371,sbrannen,104798,"Please note that this PR currently [fails the build](https://ci.spring.io/builds/178015).

Please address any issues (using `./gradlew build` to verify build completes) and push changes to this PR."
131,1032952991,jxblum,5247119,"Hi @rstoyanchev - Yes, I was actually trying to find the core Spring Framework team such a GitHub Issue ticket to refer to discussing the user's use case and requirements in more detail.

I have to apologize, but unfortunately, I interact with many users, customers and VMW field engineers over the course of an engagement, using many different mediums (Email, StackOverflow, Slack, Pivotal Tracker, the VMW customer commercial (JIRA?) issue ticketing system, etc), especially when it involves commercial GemFire customers.

I reviewed the [Issue tickets](https://github.com/spring-projects/spring-boot-data-geode/issues) in SBDG, both _Open_ and _Closed_, and could not find a ticket discussing this use case.  Sometimes, the information is customer sensitive and therefore only exists in VMW's customer issue tracking system. I will do some more digging.

Fortunately, I did add a [comment](https://github.com/spring-projects/spring-boot-data-geode/blob/1.6.3/spring-geode/src/main/java/org/springframework/geode/context/annotation/RefreshableAnnotationConfigApplicationContext.java#L55-L61) to my `RefreshableAnnotationConfigApplicationContext` class that briefly describes what the user/customer was attempting to accomplish.  This is very GemFire/Apache Geode specific.

In a nutshell, unlike other data store support we have in Spring [Data] (e.g. Redis, MongoDB, or even JDBC/JPA), it is possible with SDG, and by extension, SBDG, to configure and bootstrap servers, or rather ""peer members"" of a GemFire/Geode distributed system (cluster) using Spring [Boot]. This is to say, the Spring [Boot] application is actually a ""peer member of the cluster"" and will act as such.

In certain cases, although rare, a user might want their Spring Boot app to participate in the cluster as a peer member rather than simply be a ""client"" to the cluster (data affinity, functional capabilities, etc).

For any number of reasons, a GemFire/Geode peer can get kicked out of the cluster, for example when the member is sick (OOME, hardware failure). Usually, it is more likely the peer member might get kicked out due to a temporary network issues (glitches), for example the member is momentarily unreachable causing a potential split brain scenario. Basically, the peer member become ""unresponsive"".

When the peer member is forced out, it immediately tries to auto-reconnect (default behavior, and most commonly used by GemFire/Geode users and customers).  Once reconnected, the old GemFire/Geode objects (cache, Regions, etc) are stale and the cache is rebuilt on that member, proceeding to rehydrate itself (inside a fence and merge process).

This means the necessarily ""_Singleton_"" Spring container beans representing the GemFire/Geode objects (cache, Regions, etc) are all now invalid.

I don't remember the users/customers' entire story, but they did not want to bring down the entire (monolithic) application, most likely because they were integrating with other transactional systems. They only wanted to refresh the GemFire/Geode objects.

I believe my experimental implementation of the `RefreshableAnnotationConfigApplicationContext` worked for them, though I rarely get all the details or any feedback to the effect. It is entirely possibly they went in a different direction in the end as well. I don't entirely know. You know how it is.

Anyway, I thought this to be an interesting enough use case to warrant further consideration at the core Spring Framework level. Additionally, it was not totally out of the ordinary given we had similar implementations for XML [Web] based `ApplicationContexts`, even if an application's configuration is externally managed, as is the case with XML.

Sorry for the long winded details. I am happy to answer additional questions in a meeting if you prefer. I am also equally happy this was acknowledged and if it ultimately gets turned down, I am fine with that. I just wanted to present the option since I did some initial ground work in this area already.

Regards,
-j
"
132,1033256758,a364176773,19943636,"> Sorry for the slow reply.
> 
> I think that `CorsConfiguration` should remain simple, and should not surprise in cases where input is collected in other ways, that could lead to a potential surprise. So, at the risk of some duplication (between spring-webmvc and spring-webflux), I think the support for splitting should be done in `RequestMappingHandlerMapping`, at the point of collection, and be documented as a feature on the respective `@CrossOrigin` attributes. Currently the annotation does not have any mention of the capbaility but it's where the feature needs to apply and be advertised as such.
> 
> Second, for the implementation, I think we should stick to using "","" i.e. the common way of separating, but obviously the parsing will need to be smarter to iterate over the full string and ignore any port-related commas, i.e. within square brackets.

thx, I'm going to improve that logic"
133,1033406287,tombyong,603898,thanks @sbrannen !
134,1033459325,a364176773,19943636,@rstoyanchev I have finished the modification  PTAL
135,1033474285,BartRobeyns,6755488,"@snicoll that clarifies the release notes for me, thanks. 
I still think that an extra warning in the documentation that you shouldn't access @Bean methods from the @Configuration class itself would help users that are puzzled by the circular reference error mentioning only the @Configuration class; it's difficult for a user to understand how that @Configuration class can have an invalid circular reference to itself.
(But feel free to close this ticket without further action if you disagree)"
136,1033475871,snicoll,490484,@BartRobeyns the issue is still open so it means we are still considering documenting something.
137,1033517756,Ferioney,5508662,"@sbrannen checked and it worked as expected. 
Thank you!"
138,1033633063,a364176773,19943636,I believe it would bea great convenience to have this feature in place when we sometimes get frustrated with not being able to control the loading order of beans in other components
139,1033736462,ankitpec72,11033114,"Thank you for figuring this out. @zbykovskyi I am struggling with the same issues since last 3 Months. When can we expect the new release? 

Cheers!!"
140,1033741478,bclozel,103264,"The spring-context-indexer module declares its processor in `META-INF/services/javax.annotation.processing.Processor` as expected by javac. If this dependency is on the classpath, the compiler should find it, unless you've set specific options in your javac ant task.

Please check out your javac task and the [available options](https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html). If you need more assistance, please use StackOverflow.

Thanks!"
141,1033747684,poutsma,330665,"After considering the way (Reactor) Netty deals with multipart streaming, we have come up with an alternative to the token-based approach described above, so that headers and body contents are merged into one `PartData` object.

### Part Data objects

In this design, each part in a multipart HTTP message produces at least one `PartData` object containing both headers and a `DataBuffer` with data of the part. If the part is large enough to be split across multiple buffers (i.e. a file upload), the first `PartData` will be followed by subsequent objects. The final `PartData` for a particular part will have its
`isLast` property set to true.

For instance, a multipart message with a form field and a file will produce the following tokens:

1. a data object containing the headers and data of the form field part. `isLast` is true.
2. a data object containing header token containing headers and first buffer of data of the file part. `isLast` is false.
3. multiple data object tokens containing headers and buffers with the subsequent contents of the file
4. a data object containing header token containing headers and final buffer of data of the file part. `isLast` is true."
142,1033750928,sbrannen,104798,"In addition to what @bclozel said, I wanted to point out that you likely need to use the `<compilerarg ... />` element (for the `<javac>` element) to configure the `-processorpath` to include the location of the downloaded `spring-context-indexer` JAR.

Searching for ""ant ivy annotation processor"" on Google or Stack Overflow should return helpful results."
143,1033754382,renatomrcosta,1334354,"Hi, just noticed this issue when working with @Timed / @NewSpan annotations for Micrometer's TimedAspect and @NewSpan in Sleuth. In both cases, the measurements are erroneously finished at the first suspension point.

Looking forward to updates on this issue as well, and a big thanks to everyone doing work on it!"
144,1033835344,zbykovskyi,14358446,"> Thank you for figuring this out. @zbykovskyi I am struggling with the same issues since last 3 Months. When can we expect the new release?
> 
> Cheers!!

You can put files with fix locally to be the first in your classpath to override original files for now until official bugfix will be released

Cheers!"
145,1033839697,radonaldson54,11877606,@zbykovskyi Can you please give an example of the classpath for this and the file to include first?  We are trying to fix here and would really appreciate the help :-)  Thanks!
146,1033855430,ankitpec72,11033114,"> > Thank you for figuring this out. @zbykovskyi I am struggling with the same issues since last 3 Months. When can we expect the new release?
> > Cheers!!
> 
> You can put files with fix locally to be the first in your classpath to override original files for now until official bugfix will be released
> 
> Cheers!

You are our savior. Thanks a lot :)"
147,1033874503,zbykovskyi,14358446,"> @zbykovskyi Can you please give an example of the classpath for this and the file to include first? We are trying to fix here and would really appreciate the help :-) Thanks!

Copy the next original Spring files and put them in your project`s codebase in the same package:

- org.springframework.web.socket.sockjs.transport.session.**AbstractHttpSockJsSession.java**
- org.springframework.web.socket.sockjs.transport.handler.**AbstractHttpSendingTransportHandler.java**

Then apply patch from current pull request and compile your project. 
These fixed files will be before original files in the classpath. After official release just remove these files."
148,1034561201,a364176773,19943636,"@sbrannen @rstoyanchev  There is a timeout error in concourse- CI, I do not know what the specific error is, please help me to check"
149,1034561838,thake,12547985,"@rstoyanchev thanks for your fast response and for pointing out the discussion of #17949. I've not found this thread in my research.

> Generally speaking, a produces format is chosen mainly given the type and sub-type of the media type. Parameters provide > additional information, but their meaning and relevance is unknown to the framework.

Is there an easy way to provide the additional meaning of media type parameters to the framework? Somehow stating that the media type parameter should be part of content negotiation. Meaning that an `Accept` or `Content-Type` media type that has a parameter value different to the `consumes`/`produces` media type is not compatible. The only way I identified is by creating a custom `ProducesRequestCondition` which basically copy/pastes most of the `ProducesRequestCondition` and `ConsumesRequestCondition` and adds the special media type handling. This seems rather cumbersome and error-prone due to the complex matter of content negotiation.

>So even though charset is not in the Accept header (and shouldn't be I think, see https://github.com/spring-projects/spring-framework/issues/22788), it's still considered a match, and so effectively there is one matching parameter for each mapping. It's unclear which is or should be a more specific match. More generally, given a full range of cases with 1 or more of the same or different parameters on either side, it would be hard to imagine a good solution for matching and sorting based on parameters.

I agree that the Accept / Content-Type media type for ""+json"" types implicitly contains the UTF-8 charset as json is by default UTF-8 (see https://datatracker.ietf.org/doc/html/rfc7159#section-8.1) if not otherwise explicitly stated. If we follow this line of argumentation, we can also assume, that specifying a ""+json"" `produces`/`consumes` media type without a charset matches the UTF-8 charset parameter. Thus `application/hal+json;profile=""my-resource-v1""` matches 2 parameters from the `Accept` media type `application/hal+json;profile=""my-resource-v1""`. The first one is explicitly stated with `profile` and the second one `charset` is implicit. As `application/hal+json;charset=UTF-8` only matches one parameter, it should be ranked lower.

> Note that for consumes we currently do not have the same matching where if the same parameter is present in both the consumes and the request content-type. It's something we could consider. On the produces side it was added for the case of app/atom+xml;type=feed vs app/atom+xml;type=entry, see https://github.com/spring-projects/spring-framework/issues/21670, but again for this to work, both produces conditions have to have the same parameter, and Accept header has to have it too.

I'll open a separate issue for the `consumes` part, as the cause of the problem seems to be different. (update: created #28024) "
150,1034598340,bclozel,103264,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug.

A quick search on StackOverflow shows multiple questions and answers discussing bean validation and lists."
151,1034717857,sbrannen,104798,"> There is a timeout error in concourse- CI, I do not know what the specific error is, please help me to check

A timeout on the CI server typically means that the CI server was under too much load at that point in time.

It's more important that you have successful local builds on your machine before pushing commits to your PR.

For example, I see that you are using `org.junit.jupiter.api.Assertions` which is forbidden in Spring Framework's Checkstyle rules. For assertions in tests, we [use AssertJ](https://github.com/spring-projects/spring-framework/wiki/Code-Style#assertions) exclusively.

Please make sure you get a passing build using `./gradlew build` locally before  pushing commits, and please push a commit that fixes any current issues breaking the build locally for you."
152,1034865875,sbrannen,104798,Reopening to address additional shortcomings in the `toString()` implementation for synthesized annotations.
153,1034917396,a364176773,19943636,"> > There is a timeout error in concourse- CI, I do not know what the specific error is, please help me to check
> 
> A timeout on the CI server typically means that the CI server was under too much load at that point in time.
> 
> It's more important that you have successful local builds on your machine before pushing commits to your PR.
> 
> For example, I see that you are using `org.junit.jupiter.api.Assertions` which is forbidden in Spring Framework's Checkstyle rules. For assertions in tests, we [use AssertJ](https://github.com/spring-projects/spring-framework/wiki/Code-Style#assertions) exclusively.
> 
> Please make sure you get a passing build using `./gradlew build` locally before pushing commits, and please push a commit that fixes any current issues breaking the build locally for you.

ok, thank you"
154,1035014933,a364176773,19943636,"@sbrannen 
![image](https://user-images.githubusercontent.com/19943636/153432948-3d520c53-b7d7-4e85-9963-9986f8f2869e.png)
I've compiled successfully, but concourse-ci is still hanging "
155,1035047885,sbrannen,104798,"> I've compiled successfully, 

Great!

> but concourse-ci is still hanging

Yeah, our CI server is timing out a lot lately. We'll have to see what we can do about that.

"
156,1035111111,liptga,1070360,"Exception being thrown:

```
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:132)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1655)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:312)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:658)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:369)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:99)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:79)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:75)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
	at com.sun.proxy.$Proxy2.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'scopedTarget.beanConditionalOnOtherBean' defined in file [C:\Daten\code\springbug\build\classes\java\main\at\liptakg\springbug\BeanConditionalOnOtherBean.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'at.liptakg.springbug.BeanConditionalOnProperty' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at app//org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:800)
	at app//org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:229)
	at app//org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1372)
	at app//org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1222)
	at app//org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at app//org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at app//org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at app//org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at app//org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at app//org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at app//org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:953)
	at app//org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)
	at app//org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at app//org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at app//org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:414)
	at app//org.springframework.boot.SpringApplication.run(SpringApplication.java:302)
	at app//org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:136)
	at app//org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)
	at app//org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)
	... 86 more
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'at.liptakg.springbug.BeanConditionalOnProperty' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at app//org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1799)
	at app//org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1355)
	at app//org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1309)
	at app//org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:887)
	at app//org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:791)
	... 104 more
```"
157,1035182949,bclozel,103264,"As explained in the [`@ConditionalOnBean` javadoc](https://github.com/spring-projects/spring-boot/blob/52ed7f74a0d87fad394f86fc958f048abad5821d/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnBean.java#L53-L56), this annotation is meant to be used in auto-configurations, where we're in control of the order of bean processing.

We can consider here that the condition works ""by accident"" in the first case and that declaring scopes changes the ordering. Doing so will fail the condition if the `BeanConditionalOnProperty` has not been processed yet.

I took your sample and turned those into ordered auto-configurations. Both tests are green.

```java
@Configuration(proxyBeanMethods = false)
public class FirstAutoConfiguration {

	@ConditionalOnProperty(name = BeanConditionalOnProperty.BEAN_EXISTS)
	@Scope(proxyMode = ScopedProxyMode.TARGET_CLASS)
	@Bean
	public BeanConditionalOnProperty beanConditionalOnProperty() {
		return new BeanConditionalOnProperty();
	}
}
```

```java
@Configuration(proxyBeanMethods = false)
@AutoConfigureAfter(FirstAutoConfiguration.class)
public class SecondAutoConfiguration {

	@ConditionalOnBean(BeanConditionalOnProperty.class)
	@Scope(proxyMode = ScopedProxyMode.TARGET_CLASS)
	@Bean
	public BeanConditionalOnOtherBean beanConditionalOnOtherBean(BeanConditionalOnProperty beanConditionalOnProperty) {
		return new BeanConditionalOnOtherBean(beanConditionalOnProperty);
	}

}
```

I'm closing this issue as it's working by design and this is a known limitation of the bean condition."
158,1035768249,kriegaex,1537384,"Release 1.9.8 is out, see also https://github.com/eclipse/org.aspectj/pull/121 and the [release announcement](https://www.eclipse.org/lists/aspectj-users/msg15534.html) I sent to the AspectJ users mailing list. Quote:

> Dear AspectJ users,
> 
> we have just released 1.9.8 (yes, finally). It is [available on Maven Central](https://repo1.maven.org/maven2/org/aspectj/aspectjtools/1.9.8/) already. The AspectJ installer can be found on [Aspectj.dev](https://aspectj.dev/maven/org/aspectj/installer/1.9.8/).
> 
> For more information, please read the [release notes](https://htmlpreview.github.io/?https://github.com/kriegaex/org.aspectj/blob/4b9d86acd096e5ee9e108ff0a450c420c880b6ea/docs/dist/doc/README-198.html).
> 
> See [AspectJ GitHub issue spring-projects/spring-framework#95](https://github.com/eclipse/org.aspectj/issues/95) for more information and for an example project showing how to upgrade to the latest AspectJ version when using [dev.aspectj:aspectj-maven-plugin:1.13.1](https://github.com/dev-aspectj/aspectj-maven-plugin).
> 
> Enjoy AspectJ!
> 
> The AspectJ team"
159,1035890208,kc910521,14857338,"ok, i have got the way.
i can implements PropertyPlaceholderHelper.PlaceholderResolver,
and  do caching placeholder names in method #resolvePlaceholder,
so that we can reuse the logic of resolver."
160,1035897301,joleDing,10474898,您好，您发的邮件已收到，我会尽快阅读并回复！！
161,1035897370,JKAK47,12482698," 你好，已收到你的邮件！我尽快回复。
 
 "
162,1035933595,bclozel,103264,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
163,1035935604,bclozel,103264,"The logback-access-spring-boot-starter depends on the Spring Boot web starter (with tomcat and Spring MVC) so the second behavior looks right to me.

As for why this doesn't work the same with Gradle 6.3, I think this is really a Gradle question.

You could start by requesting the dependency insights on the command line for each version and maybe looking at Gradle release notes. There's a big version gap here as well.

If you still need more help after that, please use Gradle forums or StackOverflow. Thanks!"
164,1036139247,guilroux,99480187,"Hello,

Looks like there is still a problem for the following case :
`ZonedDateTime current = ZonedDateTime.of(LocalDateTime.parse(""2021-03-28T00:31:00""), ZoneId.of(""Europe/Amsterdam""));
CronExpression cronExpression = CronExpression.parse(""0 5 0 * * *"");
ZonedDateTime next = cronExpression.next(current);`

In this case the value returned by `cronExpression.next()` is `2021-03-30T00:05` instead of the expected `2021-03-29T00:05`"
165,1036205125,sbrannen,104798,"@guilroux, please do not comment on closed tickets.

If you believe you have discovered a bug, please open a new ticket to report it.

Thanks"
166,1036279369,a364176773,19943636,"> I guess it would be nice to enhance a bit the Javadoc of this class. This is really replicating the behavior with Servlet mappings in general (see Servlet spec, ""Specification of Mappings"" section 12.2). In this case, `""*""` is treated as an exact match.
> 
> I'm not sure we should copy Tomcat's behavior here as it's not consistent with Servlet mapping in general - even though changing the behavior here is unlikely to break existing applications.

I believe most business developers think * is equivalent to /*, can I mention a PR for that?"
167,1036282294,sbrannen,104798,"Potentially related to:

-  #26266"
168,1036293057,sbrannen,104798,"> The context should be closed, when it fails loading. At least for tests.

If an `ApplicationContext` fails to load (i.e., complete the ""refresh"" action), it cannot be closed because it was never fully started/refreshed. In addition, I do not believe that the _Spring TestContext Framework_ retains a reference to any `ApplicationContext` that failed to start. Though, it may be the case that things are different when using Spring Boot's testing support -- for example, I noticed `SpringApplicationShutdownHook` in your screenshot.

----

Can you please expound on what you mean by ""fails loading""?

Also, please provide a sample application that demonstrates the issue you are encountering -- preferably as a Git repo or Zip file that we can download and run.

Stack traces for the failure scenarios would also be useful so that we can better see where things are going wrong."
169,1036333151,a364176773,19943636,"I support the idea that when the display indicates the collection bean I want, if the corresponding bean cannot be found,  should throw an exception to terminate the run"
170,1036441771,bclozel,103264,Closed with eca755e
171,1036455640,esimioni,3300747,"I have a different scenario, but probably with the same root cause.
I've been using `AspectJ` and `@Configurable` for 10 years in a project without issues.

Recently I have tried to use the config option `spring: main: lazy-initialization: true` and everything works fine, except for the `@Configurable` beans, which don't have their dependencies injected."
172,1036469569,bclozel,103264,The intent behind #28017 so far is documentation only. This PR changes the behavior and we didn't come to that conclusion yet. Would you like to amend this PR address the original issue?
173,1036485187,bclozel,103264,"Thanks for contributing - just so you're aware, issues that have not been assigned to a milestone or at least confirmed by a team member can be marked as invalid for many reasons. We're happy to get your help but we'd rather avoid wasting your time if the PR is not merged. As a side note, we tend to accept PRs that contribute tests."
174,1036495218,a364176773,19943636,"> Thanks for contributing - just so you're aware, issues that have not been assigned to a milestone or at least confirmed by a team member can be marked as invalid for many reasons. We're happy to get your help but we'd rather avoid wasting your time if the PR is not merged. As a side note, we tend to accept PRs that contribute tests.

Thank you for your patience, and I'll fill in the test cases later to aid in code review"
175,1036498091,a364176773,19943636,"> 

Could you please tell me exactly how to do that? @bclozel "
176,1036568689,sbrannen,104798,"@ForteScarlet, thanks for all of your feedback!

I was able to reproduce the problem and have pushed a draft implementation for a fix in https://github.com/sbrannen/spring-framework/commit/6cd1540b4fb14e0029f40e52adfbed9b1272dc66."
177,1036967199,Deycoesr,33995808,"Undertow [ServletPathMatches.java#L264](https://github.com/undertow-io/undertow/blob/327fd4560820150fee4d626b2902dfc2d74f9de4/servlet/src/main/java/io/undertow/servlet/handlers/ServletPathMatches.java#L264) also support `""*""`"
178,1037009650,a364176773,19943636,"> The intent behind #28017 so far is documentation only. This PR changes the behavior and we didn't come to that conclusion yet. Would you like to amend this PR address the original issue?

I think the #28017 solution is more than just documentation, it should be supported at the code level"
179,1037009781,happier233,14227874,"I made a mistake, this problem is not happened between multiple threads. I remove the multi thread code, I still happened.
Just When I put a variable with different type in the context, the expcetion will happen."
180,1037039080,a364176773,19943636,"> Thanks for contributing - just so you're aware, issues that have not been assigned to a milestone or at least confirmed by a team member can be marked as invalid for many reasons. We're happy to get your help but we'd rather avoid wasting your time if the PR is not merged. As a side note, we tend to accept PRs that contribute tests.

@bclozel I've supplemented the test cases"
181,1037052331,bclozel,103264,Closing in favor of #28041
182,1037221021,djouvin,74497327,"The second approach with a unified `PartData` (we could call it alternatively `PartFragment`) seems indeed more appealing and polyvalent. And it is simpler in design, thus probably more robust.

However, I think there is a way to still have a composite approach with an outer `Flux<Part>` (producing a `Flux<DataBuffer>` for each part's content), while still maintaining a correct relationship between the demand and the incoming data buffers, at least for the inner flux (part content).
For the outer flux, quantitative demand is not really useful anyway since parts may have completely different sizes. The `Flux<Part>` should work with `concatMap` but also with `flatMap` : the difference is that with `concatMap` the next part consumption would wait the whole previous part content pipeline to complete, whereas with `flatMap`, it is sufficient that the part content is fully produced to the next operator, but the content can be ""in transit / in processing"" in the content processing pipeline while the second part is produced (thus parallelizing a bit more the processing).

The conditions for this composite approach to work is to maintain the following predicates true:
- part demand and part content demand must not be mixed and must be processed differently
- a part content flux has to be subscribed *before* any other part is processed
  - the corollary is that the next part must not be delivered by the producer without the consumer having fully consumed, or explicitly cancelled the previous part's content flux : the part should thus expose an explicit `cancel` or `dispose` method (for example, by implementing the `Disposable` interface). We are bending here a little the reactive streams contract semantics (part content are in a way ""pre-subscribed""), but there is no other way to ensure parts are not skipped unintentionally by a prefetching operator
  - prefetch should not be used for part consumption on the outer flux, as it will never be honored by the producer, but it can be used for part content consumption on the inner flux (which behaves as a regular `Flux<DataBuffer>`)
  - the next part should be delivered to the outer flux consumer :
    - when the previous part's content delivery is complete,
    - or when all subscriptions to this part content are cancelled,
    - or when the part itself is cancelled or disposed,
  - and of course part demand is still there and the outer flux itself is not cancelled
- part content delivery should honore content demand as any data buffer flux would, until of course the end of the part is encountered (then the content flux is completed and the potentially remaining prefetched data buffer are retained by the producer)

I agree that the composite approach implementation is more complex, and I am not sure it is always interesting to have an outer `Flux<Part>`, because most of the time an HTTP stream has only one, or just a few, parts (so viewing parts as a `Flux` is not a must). It does however fit well with `flatMap` and `concatMap` operators.
And, it can be build on the `PartData` approach too (as it is now with the `PartToken` generator) : consumers would have the choice to consume either directly a `Flux<PartData>` or a `Flux<Part>` wrapping that `Flux<PartData>`."
183,1037237311,sbrannen,104798,"Hi @happier233,

Thanks for reporting your first issue for the Spring Framework. 👍 

This appears to be a bug in SpEL with regard to state tracking for the `SpelExpression.interpretedCount` field.

Specifically, `interpretedCount` is always incremented in `checkCompile(ExpressionState)` even if the call to `compileExpression()` fails with an exception.

We'll fix it."
184,1037564269,sbrannen,104798,"This has been fixed in `5.3.x` and `main`.

@ForteScarlet, feel free to try it out in an upcoming snapshot build for `5.3.16` and let us know if it works for you."
185,1038882025,sdeleuze,141109,I applied the discussed changes via 8eb618b480896092cae04d1c5e412f7a5dba0c9c on `5.3.x` and merged them to `main`.
186,1038973615,rstoyanchev,401908,Thanks for the suggestion and pull request.
187,1038974849,mazingcai,17950194,Watching
188,1038994512,rstoyanchev,401908,"Short of something like the `params` condition, I don't see a way to expose this. This is however not something we're looking to introduce. Aside from introducing additional syntax and/or annotation attributes, what's lacking is an algorithm that would handle this in the general case. "
189,1038995709,heowc,22594101,Thanks for the quick check 😁
190,1038997980,rstoyanchev,401908,"We can align `consumes` with the `produces` condition, along the lines of 8dc535c15c15a71ce29bc21a45e9daeb064dd35e, such that if a media type parameter is explicitly declared in the mapping **and** the same parameter is also present in the `Content-Type` header, then the two must match. "
191,1039064369,snicoll,490484,"We've refactored things so that creating such a unified context is necessary. Rather, each post processor is free to express that it wants to contribute to the bean instance. This makes for a much more flexible setup."
192,1039082764,snicoll,490484,We need #28047 to move forward on this one.
193,1039129828,rstoyanchev,401908,"In most places we use `PathPattern` to pattern matching to the input `RequestPath`. The matching uses `PathSegment#valueToMatch()` which returns a decoded path, also cleaned from path parameters. For static resources, however, we use the full path based on `PathContainer#value()`, which is the original, raw path. We might need to expose an additional `PathContainer#valueToMatch()` that returns the path cleaned from path parameters."
194,1039182825,wilkinsona,914682,"In the interests of avoiding wasted time, this was [originally proposed in the Spring Boot issue tracker](https://github.com/spring-projects/spring-boot/issues/29757). @nightswimmings, making the same proposal here without first addressing the problems that Phil and I already described is unlikely to be an efficient use of everyone's time."
195,1039191145,nightswimmings,9316403,"@wilkinsona 
I did not understand your comment on the Spring Boot tracker, I assumed you meant that current annotation did not have an attribute specified for it! ( _it couldn't be used as the type of the annotation's attribute as @DynamicPropertySource knows nothing about it_.) I understood from Phil that I cannot use a Consumer<T> in an annotation, but why not a class? The spec enumerates both Enum and Class. What is the problem of @CustomAnnotation(value = instance) ?



I am really sorry if what you were trying to tell me is that this approach is impossible by spec. Is this then not feasible?

```
public @interface DynamicPropertySource {
    public  DynamicPropertyRegistrable  value();
}
```"
196,1039210107,nightswimmings,9316403,"And still, I believe there must be a way to do it, by designing the @DynamicPropertySource in a way that it tries to cast the provided instance at runtime."
197,1039260375,wilkinsona,914682,">  Is this then not feasible?

No, unfortunately not. If you try it for yourself, you'll see that it does not compile.

It would compile if the attribute was a enum such as your `Testcontainers` enum. However, `@DynamicPropertySource` can't depend on an application-specific enum. It doesn't know anything about such an enum, and nor should it.

You may be able to implement something similar to what you want by making the attribute a `Class<? extends DynamicPropertyRegistrable>`. The test framework would then create an instance of this class and call `registerProperties`. However, you wouldn't be able to use your `Testcontainers` enum in this case as the test framework would have no way of knowing how to create the instance, i.e. which constant on the enum to use."
198,1039299092,nightswimmings,9316403,"Thanks for your patience, @wilkinsona. I really see no creative solution for this, after all your explanations, so I guess we can close it"
199,1039320247,srdo,4324588,"Closing, out of date"
200,1039770528,ForteScarlet,40045247,"@sbrannen I just tried version `5.3.16-SNAPSHOT` and so far it's all good, thanks a lot!"
201,1039940547,rstoyanchev,401908,"`ResourceWebHandler` isn't really meant to serve HTML pages. In Spring MVC there is the `ViewControllerRegistry` that lets you map a URL to an HTML view. There is no equivalent in WebFlux yet but you could use a simple controller:

```java
@Controller
class ViewController {

    @GetMapping
    public String handle() {
        return ""/welcome.html"";
    }

}
```
 "
202,1039940900,quaff,143040,"


> If one asks `ArrayToCollectionConverter` to convert an array to a `Collection` the delegating call to `CollectionFactory` results in a `LinkedHashMap`being used as conversion target. I think it makes sense to rather default to a `List` based implementation in that particular case, as arrays naturally allow duplicates and retain order and handing a `Collection` as conversion target kind of indicates no preference in whether to retain those semantics or rather drop duplicates.

`LinkedHashMap` should be `LinkedHashSet` here."
203,1040020698,bclozel,103264,"I think you're looking for `MockMvcWebTestClient#resultActionsFor`:

```java
FluxExchangeResult<Person> result = webTestClient.post().uri(""/people/123"")
				.exchange().returnResult(Person.class);

MockMvcWebTestClient.resultActionsFor(result).andExpect(mvcResult -> 
				assertThat(mvcResult.getResolvedException()).hasMessageContaining(""expected message"").isInstanceOf(MyCustomException.class));
```

Does this work?"
204,1040185457,snicoll,490484,This is a user-facing change that should be visible in the changelog so I've switched the issue type to enhancement.
205,1040195339,rstoyanchev,401908,"Thanks for the extra details. 

After a further discussion, this isn't something we plan to take on. Context hierarchy consistency is not a goal in and of itself. To a degree, there is a reason for the way it currently is, given that reloading Java config is not expected to provide new config. If anything we plan to scale down in this area rather expand the hierarchy further.

One idea discussed was closing and re-creating the context as a whole, which may or may not apply depending on what manages and uses the context. Alternatively, treating the entire app as a unit, and restart when needed is more likely what we would recommend. Apart from that, the rebuilding of caches and regions is arguably something that could be modelled and exposed as a feature in GemFire/Geode. The reloading of the entire ApplicationContext refresh for the same isn't something refreshable contexts were really meant for.

I believe @jhoeller will have some additional comments that will provide more guidance.

"
206,1040227335,rstoyanchev,401908,"@ekuleshov the sample is missing the customization snippets above, including the reference to a `backendController`. I've added all that and corrected a couple of other minor things, but I'm not able to reproduce the issue. Could you please update the sample to demonstrate the issue when run?
"
207,1040300255,MattWeiler,6591176,"We found that this issue occurred for our projects when we upgraded from **_Spring Boot_** version **_1.5.9-RELEASE_** to **_2.6.2_**.

_Does anyone know what the most recent version of **Spring Boot** is that is not affected by this?_"
208,1040305029,ekuleshov,440954,"> @ekuleshov the sample is missing the customization snippets above, including the reference to a `backendController`. I've added all that and corrected a couple of other minor things, but I'm not able to reproduce the issue. Could you please update the sample to demonstrate the issue when run?

@[rstoyanchev](https://github.com/rstoyanchev) are you looking at the `rsocket-compression` branch as per the url linked above?

I just checked that the same quote code is there.

Enabling server side compression:
https://github.com/maximdim/rsocket2/blob/664f938e18c57558030a0e87374dc471df1084a5/src/main/java/rsocket/backend/BackendConfig.java#L35

Enabling compression on the client:
https://github.com/maximdim/rsocket2/blob/664f938e18c57558030a0e87374dc471df1084a5/src/main/java/rsocket/client/BackendService.java#L54 

The main branch may not have the server's `acceptor` enabled, which in my tests broke the connection handshake or something, so the client couldn't connect. When this line is commented out compression works, but client is unable to call the server:
https://github.com/maximdim/rsocket2/blob/664f938e18c57558030a0e87374dc471df1084a5/src/main/java/rsocket/client/BackendService.java#L45"
209,1040347592,bclozel,103264,Have you tried `org.springframework.test.web.reactive.server.WebTestClient.RequestHeadersSpec#attribute`?
210,1040354124,jhoeller,1263688,"After a team discussion this morning, we are leaning towards a more radical step: **disallowing overloaded `@Bean` methods completely**, therefore raising an error in case of the same method name reappearing in any form. The original method overloading arrangement for factory methods was inspired by overloaded constructors, treated the same way by our constructor resolution algorithm. Unfortunately this causes more harm than good with `@Bean` methods where it is not obvious that all such same-named methods are part of the same bean definition, with all metadata expected to be equivalent. This was simply never meant to be used with mutually exclusive conditions, or any differing conditions to begin with.

The use cases for factory method overloading (just like with constructor overloading) are mostly related to optional arguments, with the ""greediest satisfiable"" factory method being calling, e.g. a variant with an optional argument, falling back to the overloaded method without the optional argument otherwise. In a modern-day Spring application, optional factory method arguments can be modeled in various forms, including `@Nullable` arguments and `Optional<...>` declarations, so there should not be any exclusive needs for factory method overloading anymore. That's why we are considering to disallow it completely for Spring Framework 6.0, ideally as of the 6.0 M3 release already.

Enforcing a strict non-overloading rule for `@Bean` methods would prevent accidental overloading that cannot ever work properly, as well as half-accidental overloading that might work by chance but not really by design. For exclusive conditions (""alternative beans""), it is always preferable to use distinct bean names, no matter whether there are optional arguments involved or not. After all, alternative beans with the same (or no) arguments can only be modeled with distinct method names according to Java language rules; this is a strong indication that method overloading for exclusive conditions is misguided, only accidentally working if the method arguments happen to differ between the alternative definitions."
211,1040355851,jhoeller,1263688,"Thanks for the PR and the use cases raised, however, we intend to proceed in a different direction and disallow `@Bean` method overloading completely. See https://github.com/spring-projects/spring-framework/issues/22609#issuecomment-1040354124 for an extensive explanation. "
212,1040372967,jhoeller,1263688,"As Rossen mentioned, the refreshable feature in application contexts was designed for picking up freshly modified configuration files: within a running application, on the same class loader. Since this cannot usually happen for annotation-based configuration, we intentionally never introduced a regular refreshable annotation-based application context. 

As a side note: We do have an `AnnotationConfigWebApplicationContext` variant, but the main reason there is compliance with the `ConfigurableWebApplicationContext` interface that we use for `web.xml`-driven configuration in a Servlet container. Refreshability is not the goal there, just alignment with the configuration style for XML-based web application contexts.

In terms of a reinitialization need for certain applications or certains parts of an application, our usual recommendation is to reboot at the deployment unit level: restarting the entire web application or the entire microservice, not refreshing an isolated Spring application context within a deployment unit that keeps running.

From a modern-day perspective, we are in the process of phasing out re-refreshable application contexts completely, at least outside of Servlet applications. We might even deprecate `ClassPathXmlApplicationContext` and `FileSystemXmlApplicationContext` soon.

Last but not least, for AOT processing in 6.0, we only support `GenericApplicationContext` variants that hold on to a fixed `BeanFactory` inside, without any re-refreshing support. This will even more strongly suggest `GenericApplicationContext` and `AnnotationConfigApplicationContext` as the common variants going forward."
213,1040378379,rstoyanchev,401908,Closing but thanks for raising and adding detail which can help others.
214,1040404823,jhoeller,1263688,"After a team discussion this morning, while we do understand the intention here, we have no plans to introduce such an inverse dependency annotation as a common first-class concept. Any such bean relationships can be programmatically expressed via `ConfigurableBeanFactory.registerDependentBean` (e.g. in a `BeanFactoryPostProcessor` as suggested above) already, in a separate piece of logic that understands the overall relationships in a given application context setup.

Conceptually, an annotation that introduces an understanding of a higher-level bean in a lower-level bean definition seems a bit backwards. In the example above, bean A should arguably not be aware of bean B, not even through metadata on its bean definition. It seems cleaner to put such dependency registrations in a separate place that conceptually knows about A as well as B. In particular for production setups, we prefer to strongly suggest such conceptual alignment.

For test setups, there is nothing wrong with declaring extra dependency declarations if needed, on inferring them from the overall setup (or even from annotation declarations) in a `BeanFactoryPostProcessor` - ideally via `ConfigurableBeanFactory.registerDependentBean` rather than `BeanDefinition.setDependsOn`, keeping the dependency declarations separate. We don't really see preferred use cases beyond such scenarios.

Thanks for raising the topic, in any case!"
215,1040433189,sbrannen,104798,Closed via 2cee63491d1fbb6e21a9044715d98838fec9a51b
216,1040435173,sbrannen,104798,"FYI: `SocketUtils` has been removed in Spring Framework 6.0 M3.

- #28054"
217,1040486079,trionfordring,36187302,Thank you for your guidance.
218,1040489752,sbrannen,104798,"@ForteScarlet, very glad to hear that it works for you!

Thanks for trying out the snapshot and letting us know."
219,1040650889,membersound,5269630,"While this might work, it would still be better if you could write `mvcResult` assertions directly in the `WebTestClient` builder method flow, like `.exchange().expect(mvcResult -> assertThat(mvcResult.getResolvedException()).hasMessageContaining(""expected message"").isInstanceOf(MyCustomException.class));`"
220,1040675727,bclozel,103264,"`MockMvcWebTestClient` transitively imports spring-webmvc classes, whereas `WebTestClient` has been designed initially for WebFlux usage. Implementing your suggestion would make Spring MVC a requirement here. This is not a change we want to introduce.

I'm closing this issue as a result."
221,1040719414,membersound,5269630,"Then the migration docs are a bit mislead, as they pretend that `WebTestClient` is a direct replacement for `MockMvc`:
https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.6-Release-Notes#using-webtestclient-for-testing-spring-mvc

> _This change also enables WebTestClient for Spring MVC in mock environments: classes annotated with @AutoConfigureMockMvc can get injected a WebTestClient. This makes our support complete, you can now use a single API to drive all your web tests!_

And I think being able to test with a single API, as suggested, would be indeed the best way.
"
222,1040733884,bclozel,103264,"`WebTestClient` is focusing mainly on HTTP messages. To me, this sentence means that you can use the same client for mock and live server integration tests. `MockMvcWebTestClient` provides a lot of additional features, but `MockMvc` is definitely not deprecated, so keeping it in your test suite is perfectly fine."
223,1040759812,pivotal-cla,16822967,"@NWuensche Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28056)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28056) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
224,1041255274,snicoll,490484,"FTR we've decided to backport this to `5.3.x` as well, see #28060 "
225,1041310886,sbrannen,104798,Can you please provide the stack trace showing the `IllegalStateException`?
226,1041321391,sbrannen,104798,"I've edited your comment to improve the formatting. You might want to check out this [Mastering Markdown guide](https://guides.github.com/features/mastering-markdown/) for future reference.

Specifically, please avoid the use of @-mentions for annotations. Instead, please ensure that annotations are formatted as literals or code snippets."
227,1041334919,kimkaesar,24259469,"Due to the fact that it's inside a citrix session, I couldn't copy the stacktrace and paste it here. 
I try my best to type it manually, forgive me if I made any typo.


```
java.lang.IllegalStateException: argument type mismatch
Endpoint [a.b.c.controller]
Method [public x.y.z.Response a.b.c.controller.foo(Bar)] with argument values:
[0] [type=java.util.Optional][value=Optional[Bar [.......]]
  at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:174)
  at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
  at org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.handleMatch(AbstractMethodMessageHandler.java:569)
  at org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.handleMatch(SimpAnnotationMethodMessageHandler.java:511)
  at org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.handleMatch(SimpAnnotationMethodMessageHandler.java:94)
  at org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.handleMessageInternal(AbstractMethodMessageHandler.java:524)
  at org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.handleMessage(AbstractMethodMessageHandler.java:458)
  at org.springframework.messaging.support.ExecutorSubscribableChannel$SendTask.run(ExecutorSubscribableChannel.java:144)
Caused by: java.lang.illegalArgumentException: argument type mismatch
  at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
  ... 10 more
```"
228,1041340012,poutsma,330665,"Merged in 7276752e7cbc87aead678ae84ec8a83e7603a141, thanks for submitting a PR!"
229,1041340773,poutsma,330665,"Thanks for the PR,  @vikeychen "
230,1041341543,snicoll,490484,"Given that AspectJ requires Java 11 at build-time, I am going to stick with `1.9.7` for now. If we decide to upgrade in the `5.3.x` line, we'll have either to use Java11 to build the project or use the toolchain (which only exists on `main`)."
231,1041343609,sbrannen,104798,"As stated in the Javadoc for `WebTestClient.UriSpec.uri(String, Object...)`:

> Specify the URI for the request using a URI template and URI variables. If a `UriBuilderFactory` was configured for the client (e.g. with a base URI) it will be used to expand the URI template.

By passing `uri.toString()`, you end up invoking this method which treats the URI string as a URI template and applies the base URI.

As stated in the Javadoc for `WebTestClient.UriSpec.uri(URI)`:

> Specify the URI using an absolute, fully constructed URI.

The `URI` used in your first example is not absolute and fully constructed, and the base URI is not applied.

Thus, the behavior you are experiencing is expected and by design; however, I think the Javadoc for `WebTestClient.UriSpec.uri(URI)` should state the difference more explicitly, and I'll repurpose this issue to address that.
"
232,1041347024,sbrannen,104798,"Thanks for providing the stack trace.

We'll look into it."
233,1041358090,SimoneGiusso,26305592,"> The URI used in your first example is not absolute and fully constructed, and the base URI is not applied.

This example works by adding the `@AutoConfigureWebTestClient`. In this case the base URI is not applied  but the test pass. This is not specified in the documentation neither. I think this is not expected and it's not coherent from a developer prospective:

- **Without** `@AutoConfigureWebTestClient` and with `@SpringBootTest(webEnvironment = RANDOM_PORT)`, the tests **don't work** without the base URI
- **With** `@AutoConfigureWebTestClient` and `@SpringBootTest(webEnvironment = RANDOM_PORT)`, the tests *work* without the base URI"
234,1041363340,sbrannen,104798,"Hi @NWuensche,

For single values supplied for an array-typed attribute in an annotation, we typically prefer to omit the braces. The presence of brackets in the `@Target` declaration in `@Repository`, `@Controller`, and `@Service` is therefore likely just a copy-n-paste error. 

I'll address that inconsistency in an upcoming commit.

As a side note, we typically do not accept PRs for minor formatting/style issues like this. 

In any case, thanks for submitting your first pull request for the Spring Framework.
"
235,1041367633,ewirch,1880345,"> Though, it may be the case that things are different when using Spring Boot's testing support

@sbrannen, you were right, Spring Boot's `SpringApplicationShutdownHook` is necessary to trigger the problem. I created an issue over there: https://github.com/spring-projects/spring-boot/issues/29874."
236,1041379365,membersound,5269630,"I can confirm that `.resultActionsFor()` is sufficient to support some validation actions on MockMvc that are not possible inside the WebTestClient builder flow.
"
237,1041382447,sbrannen,104798,"> This example works by adding the `@AutoConfigureWebTestClient`. In this case the base URI is not applied but the test pass. This is not specified in the documentation neither. I think this is not expected and it's not coherent from a developer prospective:

If you feel that something can be documented better in Javadoc or in the reference docs for the core Spring Framework, please let us know in this issue tracker.

Regarding the behavior of `WebTestClient` in combination with `@AutoConfigureWebTestClient` and `@SpringBootTest`, please open an issue in the [Spring Boot issue tracker](https://github.com/spring-projects/spring-boot/issues/new/choose).

Thanks
"
238,1041383349,sbrannen,104798,"> I'll address that inconsistency in an upcoming commit.

See e3ceb9b23dacbed3db0811b7535cbe07ccda58cb"
239,1041385463,sbrannen,104798,"> @sbrannen, you were right, Spring Boot's `SpringApplicationShutdownHook` is necessary to trigger the problem. I created an issue over there: [spring-projects/spring-boot#29874](https://github.com/spring-projects/spring-boot/issues/29874).

Thanks!"
240,1041416661,membersound,5269630,"Yes of course. The following equivalent fails:
```
webTestClient.get()
	.uri(""/error?format=csv"")
	.attribute(RequestDispatcher.ERROR_EXCEPTION, new RestClientException(""junit""))
	.attribute(RequestDispatcher.ERROR_MESSAGE, ""csv error"")
	.exchange()
	.expectBody(String.class)
	.returnResult().getResponseBody();

assertEquals(""csv error"", body);
```

Result
```
org.opentest4j.AssertionFailedError: 
Expected :csv error
Actual   :No message available
```"
241,1041434635,bclozel,103264,"Sorry, I got confused here.

Indeed, `MockMvc`'s `requestAttr` are meant as Servlet request attributes (so, as in the Servlet container). `WebTestClient` attributes are local to the request on the client side and are never sent over the wire; they can be used in `ExchangeFilterFunction`. In summary, those are different concepts.

Just like in #28051 - we're facing here a conceptual difference between `MockMvc` and `WebTestClient`. The first one drives the exchange from the server side and can act on server concepts. The latter drives tests from the client side and cannot drive server behavior since the prepared request could be sent over the wire: this is why we can use the same API against a live server with a real transport, which is not the case with `MockMvc`.

I'll close this issue as a known limitation of that approach. While we've enabled `WebTestClient` ""over `MockMvc`"", this doesn't mean that this is a replacement nor that it should cover all `MockMvc` features."
242,1041448746,sbrannen,104798,"Hi @filiphr,

Thanks for adding the code to your repo.

We will take that into account when investigating this issue, which we plan to do in conjunction with #25940.

> Let me know what you think and whether this is something that can be addresses in Spring 5, the other issue is targeted towards Spring 6.

We do not currently have any plans to address this in 5.3.x, but we will reassess that if we do something for 6.0.x.

I am therefore closing this as a duplicate of #25940."
243,1041460690,filiphr,6012094,">We do not currently have any plans to address this in 5.3.x, but we will reassess that if we do something for 6.0.x.

Thanks for letting me know @sbrannen. I am going to look for an alternative way to solve the problem that we are facing."
244,1041538911,kriegaex,1537384,"> Given that AspectJ requires Java 11 at build-time, I am going to stick with `1.9.7` for now.

Yes, this is true for compile-time weaving, because the AspectJ compiler is a fork of the Eclipse Java compiler, which was upgraded to 11 too. So we could not to avoid to have a couple hundred Java 11 class files in AJC's belly, even though we tried to lobby against moving from 8 to 11. AJC can still generate Java 8 files, though, and LTW with `aspectjweaver` also still works on Java 8. I wish it was different, but I think the build-time requirement is the lesser evil and feasible. It is not a limitation for end users who still need Java 8 compatibility when running Spring. I hope for you that the toolchain thing or the Java 11 upgrade for the build system is not going to be much of an effort or serious limitation for you and your team."
245,1041587225,bclozel,103264,"Looking at the `HttpMediaTypeNotSupportedException`, we have two types of constructors for this class:

* `HttpMediaTypeNotSupportedException(MediaType, java.util.List<org.springframework.http.MediaType>)` when the given media type is valid but not supported by the handler. We're providing the list of supported media types so that the client can know which types could be used instead
* `HttpMediaTypeNotSupportedException(java.lang.String)` when the given media type cannot be parsed (a `InvalidMediaTypeException` has been thrown) and performing content negotiation doesn't make sense

We could argue that the list of supported media types could be useful still, but at that point the main problem is that the given media type is invalid and so is the request as a result.

Could you expand on why this information is needed in your case? What are you trying to implement, where are you getting this exception? 
"
246,1041635651,dirweis,50779382,I agree that content negotiation won't work with own values but is this not a case for a fallback on the server-side to respond with 415 and let the client know which media types are supported?
247,1041721055,bclozel,103264,I don't see why we couldn't add that extra information in this case. Knowing more about your use case and how you found out about it would have helped. I'll schedule this as an enhancement.
248,1041871348,sbrannen,104798,"> I made a mistake, this problem is not happened between multiple threads. I remove the multi thread code, I still happened.

Are you positive that the same error occurs without concurrent use of the shared `expression` instance?

If so, could you please share an example without concurrent access which demonstrates that?"
249,1041877765,sbrannen,104798,"### Update

Using a simplified version of the original example, I can reliably reproduce a stack trace similar to the following.

```Exception in thread ""main"" java.lang.IllegalStateException: java.lang.IllegalStateException: Failed to instantiate CompiledExpression
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at java.util.concurrent.ForkJoinTask.getThrowableException(ForkJoinTask.java:593)
	at java.util.concurrent.ForkJoinTask.reportException(ForkJoinTask.java:677)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:735)
	at java.util.stream.ForEachOps$ForEachOp.evaluateParallel(ForEachOps.java:159)
	at java.util.stream.ForEachOps$ForEachOp$OfInt.evaluateParallel(ForEachOps.java:188)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.IntPipeline.forEach(IntPipeline.java:427)
	at java.util.stream.IntPipeline$Head.forEach(IntPipeline.java:584)
	at example.Main.main(Main.java:37)
Caused by: java.lang.IllegalStateException: Failed to instantiate CompiledExpression
	at org.springframework.expression.spel.standard.SpelCompiler.compile(SpelCompiler.java:114)
	at org.springframework.expression.spel.standard.SpelExpression.compileExpression(SpelExpression.java:527)
	at org.springframework.expression.spel.standard.SpelExpression.checkCompile(SpelExpression.java:498)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:274)
	at example.Main.evaluateExpression(Main.java:67)
	at java.util.stream.ForEachOps$ForEachOp$OfInt.accept(ForEachOps.java:204)
	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110)
	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
	at java.util.stream.ForEachOps$ForEachTask.compute(ForEachOps.java:290)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:175)
Caused by: java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    spel/Ex10.getValue(Ljava/lang/Object;Lorg/springframework/expression/EvaluationContext;)Ljava/lang/Object; @11: invokevirtual
  Reason:
    Type 'example/Main$Bean2' (current frame, stack[0]) is not assignable to 'example/Main$Bean1'
  Current Frame:
    bci: @11
    flags: { }
    locals: { 'spel/Ex10', 'java/lang/Object', 'org/springframework/expression/EvaluationContext' }
    stack: { 'example/Main$Bean2' }
  Bytecode:
    0x0000000: 2c12 0eb9 0014 0200 c000 16b6 001c b0  

	at java.lang.Class.getDeclaredConstructors0(Native Method)
	at java.lang.Class.privateGetDeclaredConstructors(Class.java:2671)
	at java.lang.Class.getConstructor0(Class.java:3075)
	at java.lang.Class.getDeclaredConstructor(Class.java:2178)
	at org.springframework.util.ReflectionUtils.accessibleConstructor(ReflectionUtils.java:185)
	at org.springframework.expression.spel.standard.SpelCompiler.compile(SpelCompiler.java:111)
	... 14 more
```

The key thing to note is:

`Type 'example/Main$Bean2' (current frame, stack[0]) is not assignable to 'example/Main$Bean1'`

Based on my current understanding of the issue, this means that the compiled expression `Class` (`spel/Ex10`) generated by the `SpelCompiler` contains references to types from custom registered variables from two different evaluations (in this case `Bean1` and `Bean2`) of the shared `SpelExpression`. Thus, there appears to be a concurrency issue with regard to the generation of the byte code for the compiled class.
"
250,1041894700,sbrannen,104798,"Related issue:

- #24265"
251,1042681177,happier233,14227874,"> Thus, there appears to be a concurrency issue with regard to the generation of the byte code for the compiled class.

Yes, I agree with that. In my project, I have an interface ""Order"" and there are multiple implementations. So I may invoke one SpelExpression with different implementations."
252,1042688606,happier233,14227874,"In the implementation `org.springframework.expression.spel.standard.SpelExpression#getValue`, all exception will be caught, include compile error. When the compile model is MIXED, it will be failover to normal ast to get value. But in `SpelExpression#checkCompile`, there is no exception catahing."
253,1042715310,kp185128,76436857,Any update?
254,1042773373,bclozel,103264,"This matter should be supported at the HTTP client library level and configured accordingly. Decoding the response body is not enough, as the component here should also convey the dedicated request headers and react differently depending on the response headers as well."
255,1043464899,jhoeller,1263688,"I ended up introducing an `enforceUniqueMethods` flag on the `@Configuration` annotation, by default set to `true`. This prevents accidental overloading by enforcing distinct `@Bean` method names for separate bean definitions (which includes ""alternative"" bean definitions with mutually exclusive conditions). This can be switched to `false` for the previous lenient acceptance of overloaded methods as factory method candidates for the same bean definition.

All in all, the default behavior should provide better guidance now. The error message shown when rejecting same-named `@Bean` methods in 6.0 hints at the `enforceUniqueMethods` flag for whoever intends to opt into the overloading behavior, or whoever has existing configuration classes which happen to rely on the overloading."
256,1044043158,Evanhelovex,34882843,The Title Means ConfigurationClasses has userless data 
257,1044118036,snicoll,490484,`spring.config.name` sounds like what you're explaining. Please note that this is the issue tracker for the Spring Framework and the feature you've described is in Spring Boot that has a dedicated issue tracker.
258,1044143504,snicoll,490484,@Evanhelovex I am not sure what you're trying to report here. A bug? A suggestion of improvements? Please clarify the intent. 
259,1044146409,snicoll,490484,This is trying to resolve an XSD for Spring Framework 3 that was released over 10 years ago. Can you identify which resource refers to http://www.springframework.org/schema/beans/spring-beans-3.0.xsd and update it to a more recent version? (or version-less).
260,1044205257,wilkinsona,914682,"Boot has no control over whether or not scheduling is enabled as it's done in your code via `@EnableScheduling`. If you'd like a global property that can override `@EnableScheduling` (similar to Spring Framework's `spring.jndi.ignore`) this would have to be a Framework change. We've transferred your issue for the Framework team's consideration.

In the meantime, you could structure your code so that your `@EnableScheduling`-annotated class can be excluded when running your tests. One way to achieve that would be to use something like`@Profile(""!test"")` on the class that enables scheduling and then activate the test profile in your tests where you do not want scheduling to be enabled."
261,1044220751,sbrannen,104798,"Closely related to:

-  #9628"
262,1044253771,Evanhelovex,34882843,"Sorry about this,It is A suggestion of improvements.
I think the Beandifinition scanned by @Component Scan can be removed from configurationClasses which saves some memory."
263,1044274816,sbrannen,104798,"> In my project, I have an interface ""Order"" and there are multiple implementations. So I may invoke one SpelExpression with different implementations.

Do the evaluated/compiled expressions all invoke only methods defined in your `Order` interface, and if so are there any generics involved in the method signatures?

Or does your expression invoke any method that is unique to a particular concrete implementation?"
264,1044278364,FrontierPsychiatrist,3382041,"@sdeleuze I think in a pure Reactor implementation this is easier since the call chain ""stays inside the framework"". It can be easily done by adding a `WebFilter` that uses `Mono.contextWrite`. Adding a `filter` in `coRouter` does not have the same effect as there will be another ""switch"" back to Reactor after the filter and the coroutine context will be ""forgotten""."
265,1044297927,snicoll,490484,Can you please share a benchmark that shows concretely what you're describing? Thanks!
266,1044301455,poutsma,330665,"Which version of Spring Framework are you using? There have been several fixes to the `DefaultPartHttpMessageReader` recently (i.e. #27939, #27612)."
267,1044364164,Evanhelovex,34882843,"org.springframework.context.annotation.ConfigurationClassParser#processConfigurationClass
before fixing：this.configurationClasses.put(configClass, configClass);
after fixing:
if(configClass.isImported()){
			this.configurationClasses.put(configClass, configClass);
		}"
268,1044367579,Evanhelovex,34882843,Could you understand what i am describing
269,1044372139,Evanhelovex,34882843,I mean that  BeanDefination scaned by the @compoentScan is already been registered in the beanDefinitionRegistry before added to the configurationclass.
270,1044376303,snicoll,490484,@Evanhelovex I am afraid I don't and this doesn't help me to I am afraid. This is also the reason why I am asking for a benchmark since you're claiming that it would save memory and we need to validate that before considering any change.
271,1044378481,sdyura,56878790,"with org.springframework:spring-core:5.3.14

a little class like this:
```
  @RestController
  @PreAuthorize(""hasAuthority('GLOBAL_ADMIN') or hasAuthority('MEMBER')"")
  public class AccessControlTestController {
    @GetMapping(""/v1/access_control_test"")
    String test() {
      return ""OK"";
    }
  }
```

seems to cause a nasty leak like this:

<img width=""1193"" alt=""Screenshot 2022-02-18 at 11 32 55 am"" src=""https://user-images.githubusercontent.com/56878790/154675089-c785f739-fc36-41af-ae7b-9c367e600745.png"">

when running integration tests, that leads to OutOfMemoryError
"
272,1044400322,iain-henderson,3457583,"Conflicts are caused by using constants for MediaTypes. With more input from the project owners, I'm willing to fix it."
273,1044484841,andre-fxcm,74022244,"It happens if I make it version-less or update the version too. Same problem.  

Also I looked in `spring.schema` of beans jar, and it has mappings for all versions inside it. Somehow though, after it can’t find it in the AOP jar which is first in classpath it tries to go out to the internet and fails and doesn’t go through the rest of the jars to get to beans jar `spring.schema`.

Do you follow what i mean?

Thanks,
-Andre
"
274,1044546406,bclozel,103264,"There's probably a reference to that specific XSD in a scanned file. It might be a dependency of your project?

We can't help you here unless you provide a sample application showing the exact problem."
275,1044640271,sbrannen,104798,"This has been fixed in `5.3.x` (for inclusion in 5.3.17) and `main`. See commit 94af2ca06bf711de03286999b1c64a703d6de552 for details.

Although we recommend that you not use the MIXED compiler mode in SpEL when frequently changing types used in the expression (such as a custom variable), this fix should allow you to do so. However, keep in mind that the compiler will continually try to compile expressions (generating classes for them on the fly) only to throw them away later, and at some point the compiler will determine that it does not make sense to continue trying (due to the `failedAttempts` threshold).

In other words, if you used MIXED mode in such scenarios you will not actually benefit from compiled expressions.

In the particular example provided, you could introduce a common interface that each of the types used as the `bean` variable can implement. If the method invoked on the `bean` variable comes from the common interface, SpEL should be able to reliably compile and reuse an expression based on that interface."
276,1044675675,bclozel,103264,"I'm closing this issue for now, as there's not so much traction for it. We can revisit this decision in the future.
The comment linked above points to an existing `DslJsonMessageConverter` implementation for Spring. This can be easily reused in applications in the meantime."
277,1044738305,Evanhelovex,34882843,"Regarding the problem of memory overflow, I have tested many times, and it does not happen, because the configClasses container stores metadata information. However, I still think that the beans scanned by @componentScan should not be put into the container, because no subsequent processing is done, which will lead to misleading understanding. For example, when I am thinking about why the beans scanned by componentScan are put into the container, loadBeanDefinitions does not handle these beans. These beans are already placed in the Spring container in the scan method(#doScan)."
278,1044752255,eagleandsanake,55678849,"I am tested this too, Although the size of metadata is pretty small，useless elements should not be put in the container at any time. "
279,1045026734,bclozel,103264,"This is basically a duplicate of #27168.

From a content negotiation point of view, we can't know if the intent is to get the entire JSON input as a String (using the `StringHttpMessageConverter`) or to get a single, deserialized, JSON String value. The same could be applied for other basic JSON types."
280,1045031752,pivotal-cla,16822967,"@walesu Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=25474)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=25474) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
281,1045032475,pivotal-cla,16822967,"@lee-garden Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=25196)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=25196) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
282,1045032598,pivotal-cla,16822967,"@gumuxiansheng Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=25463)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=25463) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
283,1045032996,pivotal-cla,16822967,"@huhuixin Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=23595)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=23595) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
284,1045033057,pivotal-cla,16822967,"@zhaoxc-git Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=23862)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=23862) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
285,1045033088,pivotal-cla,16822967,"@sparkie999 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=23863)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=23863) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
286,1045033134,pivotal-cla,16822967,"@august0228 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=24121)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=24121) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
287,1045037087,pivotal-cla,16822967,"@coderGJ Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=22571)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=22571) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
288,1045037244,pivotal-cla,16822967,"@xlj44400 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=22778)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=22778) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
289,1045037361,pivotal-cla,16822967,"@husancode Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=23031)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=23031) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
290,1045037384,pivotal-cla,16822967,"@terryrao Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=23182)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=23182) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
291,1045038519,pivotal-cla,16822967,"@jameskleeh Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=417)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=417) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
292,1045038550,pivotal-cla,16822967,"@alien11689 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=598)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=598) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
293,1045038575,pivotal-cla,16822967,"@hadri3n Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=716)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=716) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
294,1045038576,pivotal-cla,16822967,"@dcoraboeuf Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=752)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=752) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
295,1045038651,pivotal-cla,16822967,"@ghost Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1007)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1007) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
296,1045052152,ttddyy,459116,"I recently fixed a code using `SerializationUtils#deserialize` because it was flagged by a penetration test.
So, it would be nice to have such a notion, then users would be aware of the implication of using the method.
"
297,1045056703,bclozel,103264,"`Jackson2ObjectMapperBuilder` offers more flexibility there with multiple variants like `serializers` and `serializerByType` - registering serializers and deserializers in general, by type, as maps... In Spring Boot this can be done with a `Jackson2ObjectMapperBuilderCustomizer` bean.

I'm closing this issue as a result."
298,1045080534,bclozel,103264,Closing as we never got feedback from the reporter.
299,1045088529,bclozel,103264,"I suspect there is an actual bean cycle, since this infrastructure involves quite a bit of interfaces accessing additional dependencies. In the meantime, `AmqpProxyFactoryBean` has been removed in the upcoming 3.0. If there is still a problem with this, please report it to the spring-amqp team so they can find the source of the cycle."
300,1045095271,bclozel,103264,"Sorry for replying so late.
I don't think the `Formatter` interface was meant for such use cases involving remote I/O. This resolution should be done at a different stage / using other infrastructure. We don't plan on offering a reactive variant for this contract at the moment. I'm declining this issue as a result."
301,1045104696,bclozel,103264,"We don't typically document broker-specific behavior in our reference documentation (we already have quite a lot to deal with already), especially if it is quite niche.
Thanks for raising this, I believe that this issue documents what the community will need. I'm closing this now."
302,1045112491,bclozel,103264,"After reviewing this PR, I'm closing this for reasons explained in https://github.com/spring-projects/spring-framework/pull/27832#issuecomment-1003693721"
303,1045133189,bclozel,103264,Closing this issue as outdated.
304,1045134362,bclozel,103264,Declining as we didn't get much traction for this.
305,1045135861,bclozel,103264,Closing as this doesn't point to any possible optimization.
306,1045144773,bclozel,103264,I can't reproduce this with Spring Framework 5.3.x.
307,1045148689,bclozel,103264,Working as designed. Bean cycles are also rejected in recent Spring Boot versions.
308,1045149865,bclozel,103264,Closing as #1600 has been declined.
309,1045151820,bclozel,103264,These versions are not supported anymore.
310,1045154780,bclozel,103264,"Closing as we didn't get much requests for that from the community and we've been using the ""version-less"" variants for a long time now."
311,1045157728,bclozel,103264,Superseded by #22915
312,1045163654,bclozel,103264,We don't plan to address this subtle nullability-detection behavior in Spring web frameworks.
313,1045167981,bclozel,103264,Closing this issue as declined.
314,1045169338,bclozel,103264,Closing as this has been addressed in Spring Boot.
315,1045170400,bclozel,103264,Closing per https://github.com/spring-projects/spring-framework/issues/21958#issuecomment-453478715
316,1045176514,bclozel,103264,Closing has this matter has been resolved.
317,1045178212,bclozel,103264,Declining because of a lack of demand.
318,1045182663,bclozel,103264,Declining as we'd rather stick to the RFC here.
319,1045184832,bclozel,103264,"Closing per https://github.com/spring-projects/spring-framework/issues/22134#issuecomment-453480451, this question has been answered."
320,1045191565,bclozel,103264,"`Netty4ClientHttpRequestFactory` has been deprecated in 5.0 and removed in 6.0. We don't plan on addressing improvements there. This issue hasn't seen much activity since, so I'm suspecting this problem has been solved in the meantime at the Netty level."
321,1045197202,bclozel,103264,"Closing as this is not specific to WebClient, but rather a general context propagation issue with ThreadLocals. This should be addressed in Reactor directly. [Work has been done in Spring GraphQL in that direction](https://docs.spring.io/spring-graphql/docs/current-SNAPSHOT/reference/html/#execution-context)."
322,1045427200,prakashbxr85,24971063,"I am using spring-beans 5.3.14 and spring security 5.5.4 and getting same issue, tried to upgrade my project because of vulnerabilities. Please look into it.

Error: BeanDefinitionParserDelegate.getEnvironment causes NoSuchMethodError

Below dependencies has been used:

<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>3.8.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>aopalliance</groupId>
			<artifactId>aopalliance</artifactId>
			<version>1.0</version>
		</dependency>
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>3.1</version>
		</dependency>

		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>1.5</version>
		</dependency>

		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.2</version>
		</dependency>

		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.2</version>
		</dependency>

		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.3</version>
		</dependency>

		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.2.2</version>
		</dependency>

		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>2.0.7</version>
		</dependency>

		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>1.9.11</version>
		</dependency>

		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-core-asl</artifactId>
			<version>1.9.5</version>
		</dependency>
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>javax.annotation-api</artifactId>
			<version>1.3.2</version>
		</dependency>

		<dependency>
			<groupId>javax.ejb</groupId>
			<artifactId>javax.ejb-api</artifactId>
			<version>3.2</version>
		</dependency>
		<dependency>
			<groupId>javax.persistence</groupId>
			<artifactId>javax.persistence-api</artifactId>
			<version>2.2</version>
		</dependency>
		<dependency>
			<groupId>javax.resource</groupId>
			<artifactId>javax.resource-api</artifactId>
			<version>1.7</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		<dependency>
			<groupId>javax.transaction</groupId>
			<artifactId>jta</artifactId>
			<version>1.1</version>
		</dependency>
		<dependency>
			<groupId>jstl</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.17.0</version>
		</dependency>
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.2.2</version>
		</dependency>


		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.1.1</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/net.sf.opencsv/opencsv -->
		<dependency>
			<groupId>net.sf.opencsv</groupId>
			<artifactId>opencsv</artifactId>
			<version>1.7</version>
		</dependency>


		<!-- https://mvnrepository.com/artifact/org.apache.poi/poi -->
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>
			<version>3.9</version>
		</dependency>


		<!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml -->
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>3.9</version>
		</dependency>


		<!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml-schemas -->
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml-schemas</artifactId>
			<version>3.9</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/xml-resolver/xml-resolver -->
		<dependency>
			<groupId>xml-resolver</groupId>
			<artifactId>xml-resolver</artifactId>
			<version>1.2</version>
		</dependency>


		<!-- https://mvnrepository.com/artifact/org.springframework/spring-aop -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>5.3.14</version>
		</dependency>


		<!-- https://mvnrepository.com/artifact/org.springframework/spring-beans -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>5.3.14</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>5.3.14</version>
		</dependency>


		<!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>5.3.14</version>
		</dependency>


		<!-- https://mvnrepository.com/artifact/org.springframework/spring-context-support -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>5.3.14</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>5.3.14</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.springframework/spring-expression -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-expression</artifactId>
			<version>5.3.14</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>5.3.14</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-config -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>5.5.4</version>
		</dependency>


		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-core</artifactId>
			<version>5.5.4</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>5.5.4</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>5.3.14</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>5.3.14</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>5.3.14</version>
		</dependency>



		<dependency>
			<groupId>org.apache.xbean</groupId>
			<artifactId>xbean-spring</artifactId>
			<version>4.20</version>
		</dependency>


		<!-- https://mvnrepository.com/artifact/commons-dbcp/commons-dbcp -->
		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.4</version>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>2.6.3</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.6.3</version>
		</dependency>
 "
323,1045953096,bsreddy125,5966109,"> Which version of Spring Framework are you using? There have been several fixes to the `DefaultPartHttpMessageReader` recently (i.e. #27939, #27612).

2.6.2 and 2.5.5 versions, tried with both are causing same. Is  any configuration required in filters?"
324,1045962032,bclozel,103264,"Linking an 11 years old issue and pasting a POM doesn't qualify as a bug report.

Please provide the complete stacktrace as well as a minimal sample application that reproduces the problem (something we can git clone or download and run locally - for that you can use start.spring.io as a starting point)."
325,1045964274,snicoll,490484,@Evanhelovex I am going to close this now as there is no concrete information that you've provided that makes me think there is a problem and I can't justify spending time figuring out based on the code snippet you've shared. 
326,1045965356,snicoll,490484,Please don't post the same thing in two places. Give the SO question a chance to get replies and we can follow-up here if necessary.
327,1045967756,Evanhelovex,34882843,"Well, Stéphane，I'm in a serious attitude, let's explain it with screenshots, it won't break the existing functions through my modification, and it's helpful to read the source code, (org.springframework.context.annotation.ConfigurationClassParser#processConfigurationClass)
![image](https://user-images.githubusercontent.com/34882843/154793374-a07d335e-b9d3-43e3-b08e-587240a8128c.png)
![image](https://user-images.githubusercontent.com/34882843/154793400-32a407d6-8a2e-4388-a492-8cbf128583d2.png)

"
328,1045967785,dan-lind,433464,"I did not post the same thing twice. I posted my question on SO, and created this issue to highlight the fact that there is no official documentation whatsoever on how the WebClient retry mechanism works. "
329,1045977027,snicoll,490484,"You asked a question 10h ago with no indication whatsoever you are looking for support elsewhere. As I've said, let's give a chance for your question to be processed and we can adapt if necessary. "
330,1046022450,pivotal-cla,16822967,"@pengbina Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28078)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28078) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
331,1046022890,sbrannen,104798,"This has been merged into `main` in c5c926726dc46f5135645d79ddc12c4027e1d061 and revised in 8c6d59aaaf8d0ff31e7d91c6d0ed7de7cd9f518e.

Thanks"
332,1046038910,sbrannen,104798,"This has been merged into `main` in 01214b3473c4a9e4db66b2036b3c44d6ed7f1678 and slightly revised in be8224a5909f140122a1f25bc02a769b42d11e8f.

Thanks for making your first contribution to the Spring Framework, @terminux! 👍 "
333,1046039227,sbrannen,104798,"@LovelyJiuJiu, thanks for opening your first issue for the Spring Framework. 👍 

In case you missed it, the feature you requested has been implemented for 6.0. See https://github.com/spring-projects/spring-framework/pull/27818#issuecomment-1046038910."
334,1046045724,snicoll,490484,"`retryWhen` is [an operator](https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html#retryWhen-reactor.util.retry.Retry-)  available, for instance, on `Mono` and is part of Project Reactor so I don't think we should be documenting that here. That said, I think it is worth reconsidering to see at least if there is something we need to double check with regards to `WebClientRequestException`.

WDYT @rstoyanchev?"
335,1046183353,rfelgent,10388386,"@jhoeller thx 

- for improved exception logging
- and for the opt in configuration

"
336,1046315957,pivotal-cla,16822967,"@dfa1 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28084)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28084) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
337,1046316153,pivotal-cla,16822967,@dfa1 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28084)!
338,1046316154,pivotal-cla,16822967,@dfa1 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28084)!
339,1046370996,stefanozanella,1284066,"The workaround of adding `--add-opens=java.base/java.lang=ALL-UNNAMED` worked for me with Java 16. 
Another working alternative for me is `--illegal-access=permit`, as described [here](https://docs.oracle.com/en/java/javase/16/migrate/migrating-jdk-8-later-jdk-releases.html#GUID-2F61F3A9-0979-46A4-8B49-325BA0EE8B66)."
340,1046439539,mroccyen,22514893,"Hi, I test it and maked a same result, I found the problem.

1、when it is private
![image](https://user-images.githubusercontent.com/22514893/154883386-b9432c11-bf1e-4227-8d38-ab1398daf127.png)
![image](https://user-images.githubusercontent.com/22514893/154883697-a9a5b28c-dccb-49e3-ab42-d9d180bc8953.png)
![image](https://user-images.githubusercontent.com/22514893/154883826-f80d4dea-0079-4b16-84df-40eacbbdc642.png)

externallyManagedInitMethods value is 'org.springframework.issues.issue_28083.MyBean.init', but initMethod value is 'init',  invokeCustomInitMethod method will be invoked

2、when it is not private
![image](https://user-images.githubusercontent.com/22514893/154884230-676ab3d7-e464-4b35-b45f-d9743655390f.png)
![image](https://user-images.githubusercontent.com/22514893/154884379-06f1d9b4-cdbb-47ed-975b-41100e0ae60f.png)

externallyManagedInitMethods value is 'init', initMethod value is 'init',  invokeCustomInitMethod method will not be invoked

I found that the value of the location setting is as follows:
![image](https://user-images.githubusercontent.com/22514893/154884645-0002f159-59b6-495a-9051-369f76c3b728.png)

Is there a problem here?

"
341,1046551696,mroccyen,22514893,"![image](https://user-images.githubusercontent.com/22514893/154908064-c5144926-3189-4c96-bdbf-197c44dd327d.png)

![image](https://user-images.githubusercontent.com/22514893/154908435-0f897887-c194-414e-8ecd-e2225cdea163.png)

Both of the above modifications can get the correct answer.
"
342,1046563452,Evanhelovex,34882843,"configurationClasses contains mainly for processing here (org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader#loadBeanDefinitions), the components scanned by @CoponentScan have been registered with the BeanDefinitionRegistry (org.springframework.context.annotation.ComponentScanAnnotationParser#parse
), so these components should not exist in the configurationClasses container.
![image](https://user-images.githubusercontent.com/34882843/154910624-d94d87af-d72e-4e3e-b357-a2182e6cbdeb.png)
![image](https://user-images.githubusercontent.com/34882843/154910717-981f5dae-77d0-4937-981a-7f87f26d502d.png)
"
343,1046578799,snicoll,490484,"Duplicate of #28072 

@Evanhelovex As I've tried to indicate on several occasions, there is nothing in your report that I think it worth pursuing. Sharing a code snippet and screenshots is not how we determine that a change in the core container should be made. Rather, you should provide a sample that showcases a problem (a unit test) or a benchmark that reproduces the memory leak you're claiming. 

Also, the `configurationClasses` map is used to validate configuration classes down the road and this has nothing to do with the bean registry."
344,1046580256,snicoll,490484,@MrocCyen thanks but please do not share screenshots as it bloats the issue report. I've hidden those for now.
345,1046629229,Evanhelovex,34882843,"Thanks a lot for your answer, I see."
346,1046631365,mroccyen,22514893,"> @MrocCyen thanks but please do not share screenshots as it bloats the issue report. I've hidden those for now.

Sorry, I'll pay attention next time. 

Excuse me, is it correct for me to fix it like that above?
"
347,1046759488,snicoll,490484,"A brainstorming with @wilkinsona helped make progress on this one. We could call the exact same callbacks (i.e. `refresh` rather an specific method) together with a ""run level"" that would indicate in which mode we're running:

* Regular (current runtime with no optimizations)
* Pre-processing optiomization (#28065)
* Runtime with pre-processing optimization (this issue)

Having such a high-level concept could be reused by Spring Boot when it needs to initializes components prior to the BeanFactory or the context itself.
"
348,1046760833,snicoll,490484,"> Excuse me, is it correct for me to fix it like that above?

I haven't investigated this in detail so I can't say for sure."
349,1046892156,snicoll,490484,"For the record the AOT work in the core container may also use this. In Spring Native, the components that take part of the processing of the `ApplicationContext` are discovered in `spring.factories`. It was convenient to provide support for the *Aware interface but if we can replace this by a list of well-defined types, that would be more idiomatic as these components are not beans."
350,1046896506,christian-kocke,9567291,I would really appreciate this feature!
351,1047095048,Drezir,11374081,"I have tried to create this, please look at the patch I am sending. Thank you
[Option_to_disable_scheduling.patch.zip](https://github.com/spring-projects/spring-framework/files/8111110/Option_to_disable_scheduling.patch.zip)
."
352,1047491648,snicoll,490484,Superseded by #28091
353,1047599788,nesrinyesilkaya,76202242,"The latest spring boot version(2.6.3) is still using tomcat 9.0.56, if you upgrade the tomcat version externally, the problem seems to be fixed.
In your **build.gradle** file, add the following line.
`ext['tomcat.version'] = '9.0.58'`

Update: tomcat upgrade is not working, after a while, the same error was occurred again "
354,1047681975,poutsma,330665,"> 2.6.2 and 2.5.5 versions, tried with both are causing same.

That's Spring Boot 2.6.2, so Spring Framework 5.3.14.

I think this issue might related to #27939, which was fixed in Spring Framework 5.3.16 and will be in Spring Boot 2.6.4, due out this Thursday.

If you want to try the fix now, you can upgrade to Spring Boot 2.6.3, and set the `spring-framework.version` property to `5.3.16` in your `pom.xml` or `build.gradle`.



"
355,1047754684,snicoll,490484,"@xixingya thank you for the PR but that doesn't address #28025. What we're trying to do there is en equivalent of `List.of()` (or `Set.of()`)  where we could provide the collection implementation that we want to use, potentially reusing the existing algorithm to find out the closest one based on an existing instance."
356,1047813599,snicoll,490484,I was under the impression I could add that in `BeanFactoryUtils` but this introduces a package tangle. @jhoeller any idea?
357,1048082632,bsreddy125,5966109,"> > 2.6.2 and 2.5.5 versions, tried with both are causing same.
> 
> That's Spring Boot 2.6.2, so Spring Framework 5.3.14.
> 
> I think this issue might related to #27939, which was fixed in Spring Framework 5.3.16 and will be in Spring Boot 2.6.4, due out this Thursday.
> 
> If you want to try the fix now, you can upgrade to Spring Boot 2.6.3, and set the `spring-framework.version` property to `5.3.16` in your `pom.xml` or `build.gradle`.

With the mentioned versions experiencing some other error
""trace"": ""org.springframework.core.codec.DecodingException: Could not find first boundary\n\tat org.springframework.http.codec.multipart.MultipartParser$PreambleState.onComplete(MultipartParser.java:321)\

Is multipart upload dependent with server connection time out, initially i got 504 error then tried with10kb file then noticed decoding error


`application.yml` config
```spring:
  webflux:
    basepath: eap/consultation
    multipart:
      max-in-memory-size: 10MB
  data:
    mongodb:
      uri: ${MONGO_DB_URI:mongodb://localhost:27017/eap}
  codec:
    max-in-memory-size: 10MB
    log-request-details: true
  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB
      max-request-size: 10MB

server:
  port: 9103
  netty:
    initial-buffer-size: 10MB
    max-chunk-size: 10MB 
    connection-timeout: 300000
#logging.level.org.springframework.web.reactive.function.client.ExchangeFunctions: TRACE
#logging.level.reactor.netty.http.client.HttpClient: DEBUG
  
spring.mongodb.embedded.version: 5.0.5```"
358,1048311012,wickedev,5603687,"@sbrannen Currently, the change is applied only to the spring-r2dbc side, is it good to reflect the same change to the spring-jdbc side as well?"
359,1048503953,snicoll,490484,Spring Framework doesn't use the same convention (of not having a `@since` and then adding it if the class becomes public). I need someone else to double check if I am right (@jhoeller ?).
360,1048626280,poutsma,330665,"In an earlier comment (now deleted) I wrote that I could reproduce this, but I was wrong. Uploading multipart data from Chrome works fine for me.

From your comments I gather that both the `DefaultPartHttpMessageReader` and the `SynchronossPartHttpMessageReader` have problems with the data submitted by Angular, and that both work fine with data submitted from Postman. This suggest to me that Angular is sending malformed multipart data, but I cannot be sure unless I can reproduce the issue.

So if you'd like us to spend some time investigating, please take the time to provide a complete minimal sample (something that we can unzip or git clone, build, and deploy) that reproduces the problem."
361,1048632110,abbothzhang,5163638,Happy 11th birthday！
362,1048856109,MattWeiler,6591176,"I just tried **Spring Boot 2.3.7.RELEASE** and the same issue arose during **load testing**.
It's becoming a hard sell to business to let us try a new build with the latest version of tomcat.

_Does anyone actually know 100% what the issue is?_
As it stands, it seems that each team (_apache/tomcat, Spring, Linux/Ubuntu_) is passing the buck.

But if the above comment by **_nesrinyesilkaya_** is correct and upgrading to the latest version of Tomcat fixes the issue, it doesn't sound like an OS issue (_unless the latest Tomcat code has made changes to not use certain OS APIs_)."
363,1048876051,markt-asf,4690029,"To summarise the current status...

The original issue had multiple root causes. Bugs were fixed in Spring and Tomcat. There was also an [OS (Linux) bug](https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1924298) identified that remains unfixed.

If you see this issue reported in the Tomcat logs then the best thing you can do is:

- Use the test case described in the Ubuntu bug report to confirm that you are seeing the Linux bug
- Report it via your support channel for the OS and push for a fix

As of Tomcat 10.1.0-M8, 10.0.14, 9.0.56 and 8.5.74 Tomcat will both log a warning if the issue is detected and take steps to ensure that the bug does not impact the running of the application.

The Tomcat team is aware of some scenarios that will falsely trigger the detection of this bug. The current Tomcat release round (10.1.0-M11, 10.0.17, 9.0.59 and 8.5.76) will include improved detection that avoids those false positives. Hence why it is important to confirm you are seeing this issue with the test case attached to the Ubuntu bug report before reporting it to your OS vendor.

It is possible that other issues will have similar symptoms. As usual, test with the latest stable releases of Spring and Tomcat and, if you still see the problem, open an issue and provide a test case that demonstrates it and it will get investigated."
364,1049231056,chanaku,29289770,"Hi,
I working with 2.5.5 version, and this solution isn't help. 
still get the error: 
.w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.HttpMediaTypeNotSupportedException: Content type 'application/x-www-form-urlencoded' not supported]
"
365,1049490991,bsreddy125,5966109,"> In an earlier comment (now deleted) I wrote that I could reproduce this, but I was wrong. Uploading multipart data from Chrome works fine for me.
> 
> From your comments I gather that both the `DefaultPartHttpMessageReader` and the `SynchronossPartHttpMessageReader` have problems with the data submitted by Angular, and that both work fine with data submitted from Postman. This suggest to me that Angular is sending malformed multipart data, but I cannot be sure unless I can reproduce the issue.
> 
> So if you'd like us to spend some time investigating, please take the time to provide a complete minimal sample (something that we can unzip or git clone, build, and deploy) that reproduces the problem.

We are having this issue only in non prod environments. Its happening in when service deployed in docker containers in linux environments. In local its working. Is any decoding configuration or server level configuration required?"
366,1049679344,snicoll,490484,"Thanks again Johnny! I have backported the Objenesis version update in `5.3.x` as well, see 453c6d41f71acc54"
367,1049889321,poutsma,330665,"@guilroux Thank you for spotting this, without it users would have had invalid cron executions  in October.

I have completely revised the way `CronExpression` rolls forward temporal units, see https://github.com/spring-projects/spring-framework/commit/7e2106b850ea65866dc97d24d108c7fe1ea64c8c

Let me know if you see additional issues with this implementation, or have other concerns."
368,1049915035,poutsma,330665,"`initHandlerMappings` is called by [`Servlet::init`](https://javaee.github.io/javaee-spec/javadocs/javax/servlet/Servlet.html#init-javax.servlet.ServletConfig-), part of the Servlet environment (i.e. Tomcat). `Servlet::init` is called by the servlet container to indicate to a servlet that the servlet is being placed into service. Before `init` is called, the `ServletConfig` is not yet available, and that's required for the web application context to be instantiated. Therefore, `init` is the earliest possible moment where Spring Framework can safely instantiate beans such as handler mappings."
369,1049921951,poutsma,330665,">We are having this issue only in non prod environments. Its happening in when service deployed in docker containers in linux environments. In local its working. Is any decoding configuration or server level configuration required?

No additional configuration should be required, given that the size of the files you are sending are not that large (178,351 bytes, looking at the `Content-Length` header).

It's interesting that the bug only occurs in production. That would suggest that the HTTP headers or body are manipulated somehow in this environment.
To give a better indication of what's goin on, you  can try setting the `org.springframework.http.codec.multipart` log level to `TRACE`. That can give a lot of output, so I would suggest only doing that temporarily."
370,1050020314,cquoss,17934067,I will try - not promise - to provide a test including embedded artemis broker (maybe difficult) and in-mem h2 database (easy) in the example project above. Makes it easier to re-produce as right now configuration is for standalone broker and server h2 database. 
371,1050042920,brucelwl,13413715,"@poutsma 
but we can get the ``ServletContext`` before ``Servlet::init``
For example, implement the following interfaces:
``javax.servlet.ServletContainerInitializer#onStartup(Set<Class<?>> c, ServletContext ctx)``和``javax.servlet.ServletContextListener#contextInitialized(ServletContextEvent sce)``"
372,1050420149,pivotal-cla,16822967,"@AzZureman Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28105)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28105) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
373,1050421012,pivotal-cla,16822967,@AzZureman Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28105)!
374,1050606077,snicoll,490484,"`BeanMapEmitter` is not new and this issue tracker is not meant to address IDE misconfiguration you may have. If you can reproduce a problem on the command line using Maven or Gradle, please share a sample and we can reopen."
375,1050610873,livk-cloud,50291874,"![image](https://user-images.githubusercontent.com/50291874/155674377-4ea227aa-5ec7-46f5-bfd2-c58f3b7ff8f5.png)
![image](https://user-images.githubusercontent.com/50291874/155674404-470932a1-c5ba-4c8c-9b7c-fafd472ba30b.png)
I checked version 5.3.16 on github and found the same problem

![image](https://user-images.githubusercontent.com/50291874/155674966-20f9070e-0a72-4bdf-a38c-47d89fdea53f.png)
and I also tried using"
376,1050712959,rstoyanchev,401908,"Sorry but your question is quite unclear. Can you provide more details, if this for a client or server, how the client or server is configured, and what you would like to be able to do?
"
377,1050716544,rstoyanchev,401908,"The description is ambiguous since there are different places in the framework it could be referring to. Please, provide sample usage so we can review this in more detail.
"
378,1050723401,poutsma,330665,What problem are you trying to solve by having the `HandlerMappings` available earlier than `Servlet::init`?
379,1050735579,rstoyanchev,401908,"Indeed `selectObjectMapper` should ignore the `MappingJacksonValue` wrapper. Before `selectObjectMapper` was introduced we haven't had to consider the wrapper, e.g. in `canEncode`. It just hasn't come up as an issue but arguably that should also be checking against the value type."
380,1050742931,rstoyanchev,401908,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug.

As you investigate further, the error means the URL path neither has the 3 required path segments (serverId, sessionId, protocolId) required to handle the request by the protocol, and it is also none of the other expected, fixed URL paths such as the root path ""/"" when starting out, or ""/info"", or ""/websocket"".

You'll need to debug the sequence of URLs with understanding of what's expected to understand what happens. There is an [overview in our documentation](https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#websocket-fallback-sockjs-overview) and the protocol itself is not hard to read for further detail."
381,1050772040,cquoss,17934067,"Reproducer project has been updated to include an integration test (MainRouteIT).

https://github.com/cquoss/camel-quarkus-xa-from-jms-to-db/tree/topic

Test is still green since it is still WIP, but when looking into target/quarkus.log after running 'mvn verify' one sees the problem:

2022-02-25 12:14:16,506 [Camel (camel-1) thread #1 - JmsConsumer[foo]] [{camel.contextId=camel-1}] WARN org.apache.camel.component.jms.DefaultJmsMessageListenerContainer Setup of JMS message listener invoker failed for destination 'foo' - trying to recover. Cause: Cannot create durable subscription - client ID has not been set

No external set up of artemis broker needed any more since this test makes use of quarkiverse artemis test resource."
382,1050867295,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
383,1050870495,rstoyanchev,401908,"`InvocableHandlerMethod` calls `supportsParameter` before calling `resolveArgument` as the API is supposed to be used. The check in `HandlerMethodArgumentResolverComposite` is more of a defensive check, since `resolveArgument` is a public method that could be called from any other place. Thanks for the suggestion but we'll keep it as is."
384,1050874261,rstoyanchev,401908,"Please, avoid images when you can paste snippets of text."
385,1050878509,rstoyanchev,401908,"Thanks for getting in touch, but there is insufficient information to determine there is an actual issue vs an expected outcome, and as such it is better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug.

Consider creating a small sample to isolate the issue. If you suspect a SpEL issue, try using `SpelExpressionParser` to see if it can parse the expression and if the syntax used is supported."
386,1050889074,rstoyanchev,401908,"This is the Spring Framework project. Spring Cloud projects are under a different Github org, and the issue tracker you want is probably https://github.com/spring-cloud/spring-cloud-config."
387,1050897319,rstoyanchev,401908,"Thanks for the snippet and I haven't debugged to verify, but given that these are `@Configuration` classes within a Test class, is it possible they are each treated as configuration files, i.e. irrespective of `@Import`."
388,1050899779,rstoyanchev,401908,I've edited your comment to improve the formatting. You might want to check out this [Mastering Markdown guide](https://guides.github.com/features/mastering-markdown/) for future reference.
389,1050904669,brucelwl,13413715,"> What problem are you trying to solve by having the `HandlerMappings` available earlier than `Servlet::init`?

Because I want to intercept the ``handler`` corresponding to the ``httpServletRequest`` through the ``javax.servlet.Filter``, so I can add my own current limit statistics to the ``handler``. Therefore, I must know all ``HandlerMapping``, Coincidentally, I found that all ``HandlerMapping`` will be loaded in ``DispatcherServlet``, and method ``DispatcherServlet#getHandlerMappings`` is also provided, but the initialization time is a little over"
390,1050907608,rstoyanchev,401908,"Please, don't use images to point to code that is already on GitHub. While the image shows more, most often, other surrounding code needs to be examined too. So this is just not helpful and bloats the issue description."
391,1050918942,rstoyanchev,401908,"An argument about how an empty file should be treated, could be made on both sides. Considering the present behavior is now long standing, and the implementation issues described in https://github.com/spring-projects/spring-framework/issues/21372#issuecomment-453471835, it makes no sense to change this, and disrupt others who already depend on the present behavior.

I'm closing this but it can be re-opened if there is enough interest. Feel free to leave a comment with more details on the actual use case of how this happens.


"
392,1050922225,brucelwl,13413715,"> What problem are you trying to solve by having the `HandlerMappings` available earlier than `Servlet::init`?

In addition, loading ``HandlerMapping `` in advance can warm up, instead of initializing the ``HandlerMapping`` after the user request arrives, because it is locked in the servlet thread ``http-nio-8081-exec-xxx``, so the first request will be slow.

Therefore, it is suggested that the whole method ``DispatcherServlet#initStrategies(applicationContext)`` should be initialized in advance, not in the servlet thread"
393,1050942121,cquoss,17934067,"Well. Thanks. Looks much better now.

BTW, i finished on the reproducer project, see current commit:

https://github.com/cquoss/camel-quarkus-xa-from-jms-to-db/commit/042cb1044d6cc3495fa03c6ab948e769ef5a2d94

Only available integration test fails now because connection cannot be established."
394,1050984762,biergit,1071968,"Hey @rstoyanchev. You are right. I was wondering how to override an `@EventListener` implementation. I had a look at https://stackoverflow.com/a/66706450 and now managed to do what I want like this:
```
@Configuration
    static class ParentConfig {

        @EventListener(value = BeforeTestMethodEvent.class,id = ""parent"")
        public void beforeEach(BeforeTestMethodEvent e) {
            ListenerinheritanceissueApplicationTests.calledByParentConfigBeforeEach++;
        }

    }

    @Configuration
    static class ChildConfig extends ParentConfig {

        @Autowired
        private ApplicationEventMulticaster eventMulticaster;
        @EventListener(ContextRefreshedEvent.class)
        void removeParentEventListener(ContextRefreshedEvent e) {
            eventMulticaster.removeApplicationListeners(l -> {
                return l instanceof SmartApplicationListener
                        && ((SmartApplicationListener) l).getListenerId().equals(""parent"");
            });
        }
        @Override
        public void beforeEach(BeforeTestMethodEvent e) {
			// no call to super so there should be no invocation at all
        }

    }
``` "
395,1051088701,NWuensche,15856197,Thank you very much!
396,1051423330,jeanxu1,91338721,"I am seeing the same issue. it is not that intuitive and I thought it is a bug for connection leak as well.

What is the use case for  `queryForStream()` then? can you provide example of the `right` way of using it?

@sbrannen "
397,1051791790,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
398,1052934480,smunozudp,44512771,"@christian-kocke I found a repo with a work around of this issue, hope it helps. 
https://github.com/akkinoc/yaml-resource-bundle"
399,1053945993,snicoll,490484,"Duplicate of #28092

Please review the suggestions in the other issue you've already created."
400,1054110828,bclozel,103264,This looks related to #27802. I'm not sure why `BeanMap` is referring to the now excluded `BeanMapEmitter` type.
401,1054111884,jhoeller,1263688,"This seems like an accidental exclude of `BeanMap*` over just `BeanMap`, as part of the patch that we're applying for JDK 17 compatibility now. Sorry for the oversight, I'll fix this for 5.3.17."
402,1054113686,murainwood,5344159,"@jhoeller Wow,  thanks a lot!
So, I'm keeping springboot 2.5.9 (with spring core 5.3.15) now"
403,1054242843,sbrannen,104798,"> Possibly it's a Thymeleaf (3.0.14 -> 3.0.15) issue instead?

Yes, I assume it's an issue with Thymeleaf. 

I am not able to reproduce that `SpelEvaluationException` against `5.3.x` (i.e., 5.3.17 snapshots) or `main`.

For example, adding the following to one of the test methods in `SpelDocumentationTests` works without any issue.

```java
evaluate(""(T(Math).random() * 100.0) > 0"", true, Boolean.class);
evaluate(""T(Character).isUpperCase('Test'.charAt(0)) ? 'uppercase' : 'lowercase'"", ""uppercase"", String.class);
evaluate(""T(Character).isUpperCase('Test'.charAt(1)) ? 'uppercase' : 'lowercase'"", ""lowercase"", String.class);
```

In light of that I am closing this issue.

Please raise an issue with the Thymeleaf team."
404,1054251320,OrangeDog,675056,I missed it because I looked in thymeleaf-spring instead of thymeleaf: https://github.com/thymeleaf/thymeleaf/issues/878
405,1054466627,sbrannen,104798,"Please note that this breaks the existing `RollbackRuleTests.foundEnclosedExceptionWithEnclosingException()` test which means that the proposal is a breaking change.

In light of that, I am closing this PR."
406,1054469837,flozano,1159291,thanks a lot!
407,1054479663,sbrannen,104798,"This is by design and was originally implemented using `contains()` for use in XML configuration files where users often specified the _simple name_ of a custom exception type instead of the _fully qualified class name_.

You can see examples of this in the [reference docs](https://docs.spring.io/spring-framework/docs/current/reference/html/data-access.html#transaction-declarative-rolling-back).

```xml


<tx:advice id=""txAdvice"" transaction-manager=""txManager"">
  <tx:attributes>
    <tx:method name=""get*"" read-only=""true"" rollback-for=""NoProductInStockException""/>
    <tx:method name=""*""/>
  </tx:attributes>
</tx:advice>
```

With your proposal to use `equals()` instead of `contains()`, configuration like that would no longer work since `NoProductInStockException` would only ever be equal to the fully qualified class name if the `NoProductInStockException` was declared as a top-level class in the _default_ package -- which is rather unlikely.

Please take note of the [Javadoc for `RollbackRuleAttribute`](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/interceptor/RollbackRuleAttribute.html#RollbackRuleAttribute-java.lang.String-) as well:

> **NB**: Consider carefully how specific the pattern is, and whether to include package information (which is not mandatory). For example, ""Exception"" will match nearly anything, and will probably hide other rules. ""java.lang.Exception"" would be correct if ""Exception"" was meant to define a rule for all checked exceptions. With more unusual exception names such as ""BaseBusinessException"" there's no need to use a fully package-qualified name.

Similar documentation exists for the `rollbackForClassName` attribute in `@Transactional`.

----

The Javadoc for the `RollbackRuleAttribute(Class)` constructor states the following,

> Create a new instance of the RollbackRuleAttribute class.
> 
> This is the preferred way to construct a rollback rule that matches the supplied Exception class, its subclasses, and its nested classes.

However, that last sentence is not honored in the current implementation, since the type information (supplied via the `Class` reference) is not taken into account in the implementation of `getDepth(...)`.
"
408,1054506591,sbrannen,104798,"I reproduced the described behavior with the following test class.

```java
@SpringJUnitConfig
class InitMethodTests {

	@Test
	@DirtiesContext
	void test() {
		assertSoftly(softly -> {
			softly.assertThat(PublicLifecycleMethodBean.initCounter).as(""public init-method"").hasValue(1);
			softly.assertThat(PrivateLifecycleMethodBean.initCounter).as(""private init-method"").hasValue(1);
		});
	}

	@AfterAll
	static void afterAll() {
		assertSoftly(softly -> {
			softly.assertThat(PublicLifecycleMethodBean.destroyCounter).as(""public destroy-method"").hasValue(1);
			softly.assertThat(PrivateLifecycleMethodBean.destroyCounter).as(""private destroy-method"").hasValue(1);
		});
	}

	@Configuration
	static class Config {

		@Bean(initMethod = ""publicInit"", destroyMethod = ""publicDestroy"")
		Object publicLifecycleMethodBean() {
			return new PublicLifecycleMethodBean();
		}

		@Bean(initMethod = ""privateInit"", destroyMethod = ""privateDestroy"")
		Object privateLifecycleMethodBean() {
			return new PrivateLifecycleMethodBean();
		}

	}

	static class PublicLifecycleMethodBean {

		static final AtomicInteger initCounter = new AtomicInteger();
		static final AtomicInteger destroyCounter = new AtomicInteger();

		@PostConstruct
		public void publicInit() {
			initCounter.incrementAndGet();
		}

		@PreDestroy
		public void publicDestroy() {
			destroyCounter.incrementAndGet();
		}

	}

	static class PrivateLifecycleMethodBean {

		static final AtomicInteger initCounter = new AtomicInteger();
		static final AtomicInteger destroyCounter = new AtomicInteger();

		@PostConstruct
		private void privateInit() {
			initCounter.incrementAndGet();
		}

		@PreDestroy
		private void privateDestroy() {
			destroyCounter.incrementAndGet();
		}

	}

}
```

The ""private init-method"" **and** ""private destroy-method"" assertions fail due to 2 invocations."
409,1054507496,sbrannen,104798,Superseded by #28113
410,1054537004,aclement,226298,"Just a bit more context. I could have built my own proxy generation but it would have taken a while and I wasn't in a position to easily test it rigorously for all spring use cases. So I leveraged https://github.com/spring-projects/spring-framework/pull/1283 which replaced CGLIB with byte buddy because I knew that was passing the tests, and it would give me an easier route to pushing proxy generation to being something I could drive at build time rather than runtime. It had mechanisms for easily grabbing the bytecode for the proxy, and total control over the proxy naming (because when looking them up at runtime it had to exactly match what was created earlier).

Importantly it was also generating a more optimal proxy that was using less of the generated support classes for invoking some methods. For 'well known' interfaces that the proxy was implementing it was directly wiring up the invocations. Whereas CGLIB was using a general approach for all methods, leading to lots of new classes.  (However, hand crafting could have also performed these optimizations, obviously). 

The current version was definitely constructed as a building block. Ideally the necessary proxies could be more inferred rather than the user trying to work out what set of 'bits' they need to supply for proxy hints, or discovering it by trial and error when running the system is printing out the required hints.
"
411,1054538122,aclement,226298,The commit encompassing all these changes in spring-native is https://github.com/spring-projects-experimental/spring-native/commit/af0e804e49887b77567721b73efebb18e2992e79
412,1054636936,pivotal-cla,16822967,"@GatinMI Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28116)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28116) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
413,1054638485,bclozel,103264,"I agree with Sam and Stephane here, so I'll decline this issue.
Sorry this took so long to get a final answer on this."
414,1054647808,pivotal-cla,16822967,@GatinMI Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28116)!
415,1054775563,jzheaux,3627351,"Spring Security needs this in order to [support method security in co-routines](https://github.com/spring-projects/spring-security/pull/9867#discussion_r775001373). The existing method interceptor, `PrePostAdviceMethodInterceptor`, uses `CoroutineUtils.invokeSuspendFunction`; however, this has the notable downside of [skipping downstream method interceptors](https://github.com/jzheaux/spring-security-examples/tree/master/coroutine-advice)."
416,1055308165,Deycoesr,33995808,"`BeanMap` also have this problem

```java
public class TestBean {

    private String name;

    public String getName() {
        return name;
    }

    public TestBean setName(String name) {
        this.name = name;
        return this;
    }

    public static void main(String[] args) {
        BeanMap beanMap = BeanMap.create(new TestBean());
        beanMap.put(""name"", ""asd"");
        System.out.println(""beanMap = "" + beanMap);
    }
}
```

result:

<img width=""227"" alt=""image"" src=""https://user-images.githubusercontent.com/33995808/156157566-51214760-1ebc-44b3-b0c9-a0886ef5344f.png"">

see [BeanMapEmitter.java#L54](https://github.com/cglib/cglib/blob/5c947539c1218dc4ff1a14a7c36b4856b0ee6397/cglib/src/main/java/net/sf/cglib/beans/BeanMapEmitter.java#L54)"
417,1055317208,Deycoesr,33995808,Can use [ExtendedBeanInfo](https://github.com/spring-projects/spring-framework/blob/main/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java) replace here [ReflectUtils.java#L354](https://github.com/spring-projects/spring-framework/blob/27ee9cdcde26e0e2a024c4b48c833ff1f36ed4d5/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java#L354) ?
418,1055354567,pivotal-cla,16822967,"@szd1007 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28119)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28119) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
419,1055356449,pivotal-cla,16822967,@szd1007 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28119)!
420,1055394506,sbrannen,104798,"### Related Issues

- #8455
- #10762
- #27449"
421,1055414878,sbrannen,104798,"> Excuse me, is it correct for me to fix it like that above?

No, that would constitute a breaking change in behavior for `private` init/destroy methods with the same name declared at multiple levels in a class hierarchy.

We have decided to approach the fix differently, and I have therefore assigned this issue to myself."
422,1055416241,sbrannen,104798,"Thanks for the PR, but we have decided to approach the fix differently, and I have therefore assigned #28083 to myself."
423,1055616257,sbrannen,104798,"@vikeychen, I merged your tests in af14eea1ef76576acd07ba90cd0a656bd6b31969, since there was no need to rewrite the work you'd already done there. 

And it ended up being a bit nostalgic for me, since `Spr3775InitDestroyLifecycleTests` was a test class I wrote way back in 2007. 😉 

Thanks!"
424,1055650484,sbrannen,104798,"> Can use [ExtendedBeanInfo](https://github.com/spring-projects/spring-framework/blob/main/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java) replace here [ReflectUtils.java#L354](https://github.com/spring-projects/spring-framework/blob/27ee9cdcde26e0e2a024c4b48c833ff1f36ed4d5/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java#L354) ?

No. `ExtendedBeanInfo` resides in the `spring-beans` module. So it cannot be used in `ReflectUtils` which resides in the `spring-core` module.

In any case, `ReflectUtils` is part of our repackaged CGLIB patch, which is not intended to be used by third parties.

Why are you using this repackaged version of `ReflectUtils` directly?"
425,1055650757,vikeychen,3364975,"@sbrannen, wow it's been a long time! I'm glad I could be a little help. 🤓"
426,1055710299,sbrannen,104798,"Correction to my previous statement. The Javadoc for the `RollbackRuleAttribute(Class)` constructor is _mostly_ correct.

However, the documentation for rollback rules can be improved to warn that unintentional matches may arise if the name of a thrown exception _contains_ the name of a registered exception type.

I am therefore repurposing this issue to improve the documentation."
427,1055758397,zsiegel,304495,"This would be very helpful in regards to MDC context as mentioned above. 

I would be happy to put together a PR if any of the team members can point me in a direction that might be suitable to put this configuration? "
428,1055772944,bsreddy125,5966109,"> > We are having this issue only in non prod environments. Its happening in when service deployed in docker containers in linux environments. In local its working. Is any decoding configuration or server level configuration required?
> 
> No additional configuration should be required, given that the size of the files you are sending are not that large (178,351 bytes, looking at the `Content-Length` header).
> 
> It's interesting that the bug only occurs in production. That would suggest that the HTTP headers or body are manipulated somehow in this environment. To give a better indication of what's goin on, you can try setting the `org.springframework.http.codec.multipart` log level to `TRACE`. That can give a lot of output, so I would suggest only doing that temporarily.









``Postman request trace logs``:
----------------------------
2022-03-01 18:52:02.925 TRACE 1 --- [tor-thread-1255] o.s.h.codec.multipart.MultipartParser    : First boundary found @51 in DefaultDataBuffer (r: 0, w: 158, c: 158)
2022-03-01 18:52:02.927 TRACE 1 --- [tor-thread-1255] o.s.h.codec.multipart.MultipartParser    : Changed state: PREAMBLE -> HEADERS
2022-03-01 18:52:02.928 TRACE 1 --- [tor-thread-1255] o.s.h.codec.multipart.MultipartParser    : End of headers found @105 in DefaultDataBuffer (r: 0, w: 106, c: 106)
2022-03-01 18:52:02.928 TRACE 1 --- [tor-thread-1255] o.s.h.codec.multipart.MultipartParser    : Emitting headers: [Content-Disposition:""form-data; name=""file""; filename=""Food-bill.pdf"""", Content-Type:""application/pdf""]
2022-03-01 18:52:02.929 TRACE 1 --- [tor-thread-1255] o.s.http.codec.multipart.PartGenerator   : Changed state: INITIAL -> IN-MEMORY
2022-03-01 18:52:02.929 TRACE 1 --- [tor-thread-1255] o.s.h.codec.multipart.MultipartParser    : Changed state: HEADERS -> BODY
2022-03-01 18:52:03.859 TRACE 1 --- [tor-thread-1262] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 5977, c: 5977)
2022-03-01 18:52:03.862 TRACE 1 --- [tor-thread-1262] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 18:52:03.864 TRACE 1 --- [tor-thread-1262] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 18:52:03.865 TRACE 1 --- [tor-thread-1262] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:03:12.714 TRACE 1 --- [tor-thread-1365] o.s.h.codec.multipart.MultipartParser    : First boundary found @51 in DefaultDataBuffer (r: 0, w: 153, c: 153)
2022-03-01 19:03:12.715 TRACE 1 --- [tor-thread-1365] o.s.h.codec.multipart.MultipartParser    : Changed state: PREAMBLE -> HEADERS
2022-03-01 19:03:12.716 TRACE 1 --- [tor-thread-1365] o.s.h.codec.multipart.MultipartParser    : End of headers found @100 in DefaultDataBuffer (r: 0, w: 101, c: 101)
2022-03-01 19:03:12.717 TRACE 1 --- [tor-thread-1365] o.s.h.codec.multipart.MultipartParser    : Emitting headers: [Content-Disposition:""form-data; name=""file""; filename=""June.pdf"""", Content-Type:""application/pdf""]
2022-03-01 19:03:12.717 TRACE 1 --- [tor-thread-1365] o.s.http.codec.multipart.PartGenerator   : Changed state: INITIAL -> IN-MEMORY
2022-03-01 19:03:12.717 TRACE 1 --- [tor-thread-1365] o.s.h.codec.multipart.MultipartParser    : Changed state: HEADERS -> BODY
2022-03-01 19:03:13.303 TRACE 1 --- [tor-thread-1365] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 5982, c: 5982)
2022-03-01 19:03:13.305 TRACE 1 --- [tor-thread-1365] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:03:13.306 TRACE 1 --- [tor-thread-1365] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:03:13.307 TRACE 1 --- [tor-thread-1365] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:03:13.308 TRACE 1 --- [tor-thread-1365] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:03:13.309 TRACE 1 --- [tor-thread-1365] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:03:13.310 TRACE 1 --- [tor-thread-1365] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:03:13.310 TRACE 1 --- [tor-thread-1365] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:03:13.617 TRACE 1 --- [tor-thread-1344] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:03:13.620 TRACE 1 --- [tor-thread-1344] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:03:13.621 TRACE 1 --- [tor-thread-1344] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:03:13.623 TRACE 1 --- [tor-thread-1344] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:03:13.624 TRACE 1 --- [tor-thread-1344] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:03:13.626 TRACE 1 --- [tor-thread-1344] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:03:13.627 TRACE 1 --- [tor-thread-1344] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:03:13.629 TRACE 1 --- [tor-thread-1344] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:03:13.630 TRACE 1 --- [tor-thread-1344] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:03:13.632 TRACE 1 --- [tor-thread-1344] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:03:13.633 TRACE 1 --- [tor-thread-1344] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:03:13.635 TRACE 1 --- [tor-thread-1344] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:03:13.920 TRACE 1 --- [tor-thread-1372] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:03:13.922 TRACE 1 --- [tor-thread-1372] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:03:13.923 TRACE 1 --- [tor-thread-1372] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:03:13.924 TRACE 1 --- [tor-thread-1372] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:03:13.925 TRACE 1 --- [tor-thread-1372] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:03:13.925 TRACE 1 --- [tor-thread-1372] o.s.h.codec.multipart.MultipartParser    : Boundary found @1851 in DefaultDataBuffer (r: 0, w: 2080, c: 2080)
2022-03-01 19:03:13.926 TRACE 1 --- [tor-thread-1372] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:03:13.926 TRACE 1 --- [tor-thread-1372] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 1798, c: 1798)
2022-03-01 19:03:13.927 TRACE 1 --- [tor-thread-1372] o.s.h.codec.multipart.MultipartParser    : Changed state: BODY -> HEADERS
2022-03-01 19:03:13.927 TRACE 1 --- [tor-thread-1372] o.s.h.codec.multipart.MultipartParser    : End of headers found @91 in DefaultDataBuffer (r: 0, w: 228, c: 228)
2022-03-01 19:03:13.928 TRACE 1 --- [tor-thread-1372] o.s.h.codec.multipart.MultipartParser    : Emitting headers: [Content-Disposition:""form-data; name=""fileUploadModel"""", Content-Type:""application/json""]
2022-03-01 19:03:13.929 TRACE 1 --- [tor-thread-1372] o.s.http.codec.multipart.PartGenerator   : Emitting: DefaultFilePart{file (June.pdf)}
2022-03-01 19:03:13.929 TRACE 1 --- [tor-thread-1372] o.s.http.codec.multipart.PartGenerator   : Changed state: IN-MEMORY -> IN-MEMORY
2022-03-01 19:03:13.930 TRACE 1 --- [tor-thread-1372] o.s.h.codec.multipart.MultipartParser    : Changed state: HEADERS -> BODY
2022-03-01 19:03:13.930 TRACE 1 --- [tor-thread-1372] o.s.h.codec.multipart.MultipartParser    : Boundary found @131 in DefaultDataBuffer (r: 0, w: 136, c: 136)
2022-03-01 19:03:13.931 TRACE 1 --- [tor-thread-1372] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 78, c: 78)
2022-03-01 19:03:13.931 TRACE 1 --- [tor-thread-1372] o.s.h.codec.multipart.MultipartParser    : Changed state: BODY -> HEADERS
2022-03-01 19:03:13.931 TRACE 1 --- [tor-thread-1372] o.s.h.codec.multipart.MultipartParser    : Last boundary found in DefaultDataBuffer (r: 0, w: 4, c: 4)
2022-03-01 19:03:13.932 TRACE 1 --- [tor-thread-1372] o.s.h.codec.multipart.MultipartParser    : Changed state: HEADERS -> DISPOSED
2022-03-01 19:03:13.932 TRACE 1 --- [tor-thread-1372] o.s.http.codec.multipart.PartGenerator   : Emitting: DefaultPart{fileUploadModel}
2022-03-01 19:03:13.933 TRACE 1 --- [tor-thread-1372] o.s.h.c.m.MultipartHttpMessageReader     : [f01d3c1] Parsed {file=[DefaultFilePart{file (June.pdf)}], fileUploadModel=[DefaultPart{fileUploadModel}]}






===============================
``Web Request trace logs``:
-----------------------------
2022-03-01 19:08:44.787 TRACE 1 --- [tor-thread-1431] o.s.h.codec.multipart.MultipartParser    : First boundary found @38 in DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:08:44.788 TRACE 1 --- [tor-thread-1431] o.s.h.codec.multipart.MultipartParser    : Changed state: PREAMBLE -> HEADERS
2022-03-01 19:08:44.788 TRACE 1 --- [tor-thread-1431] o.s.h.codec.multipart.MultipartParser    : End of headers found @100 in DefaultDataBuffer (r: 0, w: 8153, c: 8153)
2022-03-01 19:08:44.789 TRACE 1 --- [tor-thread-1431] o.s.h.codec.multipart.MultipartParser    : Emitting headers: [Content-Disposition:""form-data; name=""file""; filename=""June.pdf"""", Content-Type:""application/pdf""]
2022-03-01 19:08:44.790 TRACE 1 --- [tor-thread-1431] o.s.http.codec.multipart.PartGenerator   : Changed state: INITIAL -> IN-MEMORY
2022-03-01 19:08:44.790 TRACE 1 --- [tor-thread-1431] o.s.h.codec.multipart.MultipartParser    : Changed state: HEADERS -> BODY
2022-03-01 19:08:44.791 TRACE 1 --- [tor-thread-1431] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8052, c: 8052)
2022-03-01 19:08:44.792 TRACE 1 --- [tor-thread-1431] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:08:44.793 TRACE 1 --- [tor-thread-1431] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:08:45.093 TRACE 1 --- [tor-thread-1417] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:08:45.095 TRACE 1 --- [tor-thread-1417] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:08:45.095 TRACE 1 --- [tor-thread-1417] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:08:45.096 TRACE 1 --- [tor-thread-1417] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:08:45.398 TRACE 1 --- [tor-thread-1417] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:08:45.399 TRACE 1 --- [tor-thread-1417] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:08:45.400 TRACE 1 --- [tor-thread-1417] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:08:45.401 TRACE 1 --- [tor-thread-1417] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:08:45.403 TRACE 1 --- [tor-thread-1417] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:08:45.404 TRACE 1 --- [tor-thread-1417] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:08:45.405 TRACE 1 --- [tor-thread-1417] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:08:45.405 TRACE 1 --- [tor-thread-1417] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:08:45.407 TRACE 1 --- [tor-thread-1417] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:08:45.407 TRACE 1 --- [tor-thread-1417] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:08:45.408 TRACE 1 --- [tor-thread-1417] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:08:45.409 TRACE 1 --- [tor-thread-1417] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:08:45.473 TRACE 1 --- [tor-thread-1429] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:08:45.474 TRACE 1 --- [tor-thread-1429] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:08:45.475 TRACE 1 --- [tor-thread-1429] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:08:45.476 TRACE 1 --- [tor-thread-1429] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:08:45.710 TRACE 1 --- [tor-thread-1431] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:08:45.711 TRACE 1 --- [tor-thread-1431] o.s.h.codec.multipart.MultipartParser    : Emitting body: DefaultDataBuffer (r: 0, w: 8192, c: 8192)
2022-03-01 19:08:45.712 TRACE 1 --- [tor-thread-1431] o.s.h.codec.multipart.MultipartParser    : Changed state: BODY -> DISPOSED
2022-03-01 19:08:45.712 TRACE 1 --- [tor-thread-1431] o.s.http.codec.multipart.PartGenerator   : Changed state: IN-MEMORY -> DISPOSED
2022-03-01 19:08:45.716 ERROR 1 --- [tor-thread-1431] a.w.r.e.AbstractErrorWebExceptionHandler : [ed723985]  500 Server Error for HTTP POST ""/upload/documentupload""
org.springframework.core.codec.DecodingException: Could not find end of body
	at org.springframework.http.codec.multipart.MultipartParser$BodyState.onComplete(MultipartParser.java:553) ~[spring-web-5.3.14.jar:5.3.14]"
429,1056062819,Deycoesr,33995808,I found this problem when using `BeanMap`
430,1056112923,hduyyg,32357991,"I think this rollback rule is fallible and needs more precise matching rules。
A lot of people don't really read documents。"
431,1056129412,philwebb,519772,I've pushed a branch [here](https://github.com/philwebb/spring-framework/tree/gh-28120) for review. Currently the package is under `org.springframework.aot.test.generator`.
432,1056661808,sdeleuze,141109,"Related topic : Spring Native we currently relies on [Hibernate Build-time enhancement](https://docs.jboss.org/hibernate/orm/5.4/topical/html_single/bytecode/BytecodeEnhancement.html#_build_time_enhancement) to perform Hibernate bytecode manipulation at build time. I mention that because:
 - It could be interesting to see how they implemented that.
 - This seems not super actively maintained (for example, no Gradle Kotlin DSL support if I remember correctly).
 - Using that imply painful additional build configuration, we may be interested by a more integrated approach.

Maybe a point to discuss with @mp911de, @schauder and @christophstrobl."
433,1056808959,snicoll,490484,"Discussed this proposal with @jhoeller and one important point is that the component in charge of the `refresh` should be the one opting-in for a certain behavior (rather than a flag that could be set externally by anything). A new `refresh(Mode mode)` could achieve that where the existing `refresh()` method calls it with the ""regular"" mode.

We've also discussed the possibility to introduce a `ModeAware`  interface that would let components declare they're interested in which mode the context is being refreshed."
434,1057066822,sbrannen,104798,I've edited your comment to improve the formatting. You might want to check out this [Mastering Markdown guide](https://guides.github.com/features/mastering-markdown/) for future reference.
435,1057104626,sbrannen,104798,"> I think this rollback rule is fallible and needs more precise matching rules。

I agree with you. I've raised #28125 to improve the documentation for `5.3.x`.

And we'll use _this_ issue to improve the behavior in `6.0`.

Specifically:

- If an _exception pattern_ is supplied as a `String` -- for example, in XML configuration or via `@Transactional(rollbackForClassName = ""example.CustomException"")` -- the existing `contains()` logic will continue to be used.
- If a concrete _exception type_ is supplied as a `Class` reference -- for example, via `@Transactional(rollbackFor = example.CustomException.class)` -- new logic will be implemented which honors the supplied type information, thereby avoiding an unintentional match against `example.CustomException2` when `example.CustomException` (without the `2)` was supplied as the exception type.
"
436,1057190983,drekbour,2863082,"Related SO https://stackoverflow.com/questions/26176038/activeprofiles-in-meta-annotation-and-on-test-class-not-working

This would be _very_ handy (as is the recent work on `@TestPropertySource` #23299) in making composed annotations to reduce boilerplate in tests."
437,1057266912,bclozel,103264,"Those are not meant to mutable; in several places we're wrapping the underlying collections with `Collections.unmodifiableMap`. So using `Collections.emptyMap()` is consistent with that approach.

I'm declining this PR as a result. Thanks!"
438,1057647497,sluk3r,6405801,please assign this issue to me? @sbrannen 
439,1057650912,dugenkui03,18216266,"@bclozel Thanks for your response.

In `mvc.method.annotation.PathVariableMapMethodArgumentResolver`, the original Map maybe immutable, but the returned value is mutable .
<img width=""1334"" alt=""image"" src=""https://user-images.githubusercontent.com/18216266/156494328-3def8d90-8e82-41c8-bbf3-30dfd0c980b7.png"">
Do you think is it nessary that return unmodifiable view of copy even the Map is not empty, for keep same support for `put` operation.




"
440,1057730506,bclozel,103264,For consistency we could indeed change that to make it immutable.
441,1057883946,wilkinsona,914682,"The difference in behaviour is because the `POST` that uses `@RequestBody` is being converted by Jackson, whereas the `GET` is being converted using a `ConversionService`. Jackson uses `DateTimeFormatter.ISO_LOCAL_DATE` by default for the conversion whereas the `ConversionService` uses `DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT)`.

We could consider changing these defaults for Spring Boot 3.0 so that they align. Beyond that, this issue is really a duplicate of spring-projects/spring-boot#30041."
442,1057883952,membersound,5269630,"Okay, so the workaround for the moment is:
```
spring.webflux.format.date=ISO
spring.webflux.format.time=ISO
spring.webflux.format.date-time=ISO
```"
443,1057887860,bclozel,103264,"Looking at this issue transferred from Spring Boot, we could reconsider in the 6.0 timeline the date time fallback formats to use ISO variants instead of `FormatStyle.SHORT`."
444,1058082616,sbrannen,104798,- Closing as a duplicate of #26985.
445,1059023469,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
446,1059023488,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
447,1059037744,sbrannen,104798,I've edited your comment to improve the formatting. You might want to check out this [Mastering Markdown guide](https://guides.github.com/features/mastering-markdown/) for future reference.
448,1059042459,sbrannen,104798,"> So spring framework need remove this code or change to the following:

You pasted quite a large amount of code which makes it difficult to understand what you are trying to convey.

Please explicitly state what changes you think are required.

In addition, please provide a sample application (or test) which demonstrates the failure you are describing."
449,1059061922,ikalinin1,17816729,@sbrannen  could you please take a look at this PR
450,1059084971,SushmitaGoswami,20486206,Is there any updates on this? May we know when will spring move to jakarta? Any approximate quarter?
451,1059113689,martin-g,232002,"Spring 6.x moved to Jakarta APIs.
M1 has been released several months ago."
452,1059123654,sbrannen,104798,"@SushmitaGoswami, see related blog post:

https://spring.io/blog/2021/09/02/a-java-17-and-jakarta-ee-9-baseline-for-spring-framework-6"
453,1059175386,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
454,1059177225,Richie94,7793923,"We just had a simple Restendpoint like from the producer like this with a Spring Boot 2.5.7 and Tomcat running.
```
@GetMapping(...)
fun returnFlux(...) : Flux<String>
....
```

And our consumer same Spring Boot 2.5.7 calling this endpoint with a Webflux Webclient.
When the request for the next element in our client took longer than 60s, in our client we received an PrematurCloseException and in the producer the onCancel Event was fired without the information, that it was the internal decision of the producer to cancel this thing due to a timeout. 
Im not right sure where it would be placed best, but I wished that the cancel event would be more descriptive so I would know faster: the cancel decision came from an internal timeout because of tomcat timeouts."
455,1059374820,jhoeller,1263688,"As Sam pointed out, `BeanMap` and its supporting classes are part of CGLIB (repackaged into `spring-core`). Standard JavaBeans setter methods need to be declared `void`, and that's what CGLIB is following; we are not going to deviate from that in our CGLIB fork (where we are not making use of CGLIB's `BeanMap` for any Spring features, it's just there because we happen to fully repackage the original CGLIB arrangement). Spring's own beans support is more lenient in that respect, but if you want that, you'll actually have to use Spring's `BeanWrapper`/ `DataBinder`/etc."
456,1059379083,sbrannen,104798,Related commit: 709a41fd437b7619156a7b74163ea9c5ebde1284
457,1059477966,pivotal-cla,16822967,"@Solyaris Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28136)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28136) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
458,1059578991,helderhernandez,47677287,"I managed to solve the problem by applying the following:
- [How to prevent parameter binding from interpreting commas in Spring 3.0.5?](https://stackoverflow.com/questions/4998748/how-to-prevent-parameter-binding-from-interpreting-commas-in-spring-3-0-5)
- [How to prevent Spring MVC from interpreting commas when converting to a Collection in Spring Boot?](https://stackoverflow.com/questions/42120588/how-to-prevent-spring-mvc-from-interpreting-commas-when-converting-to-a-collecti)

The trick is done by the following lines of code

```java
@InitBinder
public void initBinder(WebDataBinder binder) {
  binder.registerCustomEditor(String[].class, new StringArrayPropertyEditor(null));
}
```

My classes were as follows:

## Clase Search (works as a wrapper)
```java
public class Search {
	private String[] search = new String[] {};

	public Search() {
		super();
	}

	public Search(String[] search) {
		super();
		this.search = search;
	}

	public String[] getSearch() {
		return search;
	}

	public void setSearch(String[] search) {
		this.search = search;
	}

	public List<String> toList() {
		return Arrays.asList(this.search);
	}

	@Override
	public String toString() {
		return ""Search [search="" + Arrays.toString(search) + ""]"";
	}
}
```

## Endpoint
```java
@InitBinder
public void initBinder(WebDataBinder binder) {
  binder.registerCustomEditor(String[].class, new StringArrayPropertyEditor(null));
}

@GetMapping(""/search"")
@ResponseStatus(HttpStatus.OK)
@ApiOperation(value = ""Search providers"")
//@formatter:off
@ApiImplicitParams({
	@ApiImplicitParam(
	    name = ""search"", 
	    allowMultiple = true, 
	    dataType = ""string"", 
	    paramType = ""query"", 
	    value = ""Search by field: description""
	) 
})
//@formatter:on
public List<String> search(Search search) {
	System.out.println(search.toList().size());
	search.toList().forEach(System.out::println);
	
	//..... your code
}
```

## Results

![image](https://user-images.githubusercontent.com/47677287/156850371-aff595b9-9c4d-4c15-91c4-e13c4d67397e.png)

![image](https://user-images.githubusercontent.com/47677287/156850387-15ecb221-acfb-4d69-95f6-d3e15448af58.png)

"
459,1059642417,hantsy,854520,"> I've build a workaround for this issue: https://gist.github.com/pschichtel/830b7943ea43b7cb58cadd984b54b903

Hope this long-awaited fix will be included in Spring although it was a problem from Hibernate Validator.

"
460,1059661702,hantsy,854520,I created a [sample project](https://github.com/hantsy/spring-puzzles/tree/master/validation-ktco) based on the solution provided by @pschichtel .
461,1059716714,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
462,1059735102,lizongbo,1670666,"Sorry, not proficient enough in English. Thank you for your help in optimizing the typography format, after submitting Issue yesterday, I found that the typography was not neat, and after trying to adjust it, I found that the effect was still not very good.
I wrote the complete demo project, please refer to the attachment file 
[springquartzdemo.zip](https://github.com/spring-projects/spring-framework/files/8190366/springquartzdemo.zip), import the gradle project, and then configure it as a mysql server that can be connected in application.properties, and import quartz's /org/quartz/impl/jdbcjobstore/tables_mysql_innodb.sql in the database. Then run the class: com.lizongbo.springdemo.SpringQuartzBugTest with the main method, and then look at the console log and you can see that some of the methods are not running in the transaction.
Since most of the scenarios are triggered by executeInNonManagedTXLock, this method calls getNonManagedTXConnection to get the connection, and disables autoCommit through isDontSetNonManagedTXConnectionAutoCommitFalse judgment, so the actual business will hardly trigger bugs. 


![bug001](https://user-images.githubusercontent.com/1670666/156877468-3918f28c-b5cd-41b1-ab8c-2e9bd1a35412.png)
![bug002](https://user-images.githubusercontent.com/1670666/156877471-8e6e6ae4-26dd-4b46-bab9-6590ffa0931d.png)
![bug003](https://user-images.githubusercontent.com/1670666/156877472-eb9f5e62-b8f5-4236-a58e-a5ac7b9a8e8d.png)


"
463,1059757614,viktorardelean,4204475,@rstoyanchev Could you please give an update on this? I want to make sure that my approach on this is correct. Thanks!
464,1059787612,pivotal-cla,16822967,"@1Tickets Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28139)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28139) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
465,1059788290,pivotal-cla,16822967,@1Tickets Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28139)!
466,1059987598,sbrannen,104798,"> If you have code that relies on the `BeforeTestClassEvent`, you will need to ensure that the `ApplicationContext` has been loaded via a `TestExecutionListener` (likely a custom implementation) that is registered before the `EventPublishingTestExecutionListener` which implements `beforeTestClass(TestContext testContext)` and invokes `testContext#getApplicationContext()`.

For example, the following custom `TestExecutionListener` achieves that goal.

```java
@Order(0)
public class EagerLoadingTestExecutionListener implements TestExecutionListener {
	@Override
	public void beforeTestClass(TestContext testContext) {
		testContext.getApplicationContext();
	}
}
```"
467,1060001432,snicoll,490484,It turns out that the way a `RootBeanDefinition` for an inner bean is required and it goes beyons getting a bean name for it. I've updated the issue accordingly.
468,1060008440,Staticsubh,31039062,"@bclozel, @sdeleuze and @snicoll  Can you please help me resolve this issue?"
469,1060312497,Staticsubh,31039062,"I am still not able to upgrade from Spring 4 to Spring 5 because of this issue only. Please go through the issue #28140 .
Just for the information I have made changes as mentioned in the above comment by @MarcinCieslak "
470,1060324903,Staticsubh,31039062,We are also stuck with the same issue. #28140 . Any help here @jhoeller ??
471,1060682890,pivotal-cla,16822967,"@pengbina Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28143)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28143) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
472,1060683336,pengbina,8407180,20220307
473,1060728287,ajr3-gen,93659748,"@snicoll  @rstoyanchev  Can I please get someone to look at this?  We're going to have to upgrade to Jetty v10 eventually, and I'd like to get this blocking issue resolved before it becomes urgent.  Thanks."
474,1061541350,Staticsubh,31039062,@jhoeller Can you please help here.
475,1061608041,sbrannen,104798,"> In some cases, the existing mechanism for creating a `NamespaceHandler` may result in repeated creation of the handler.

Do you have a concrete use case where this is problematic?

In other words, what is the rationale for your proposed change?"
476,1061638159,y987425112,23693824,"This is old code
```
public NamespaceHandler resolve(String namespaceUri) {
		Map<String, Object> handlerMappings = getHandlerMappings();
		Object handlerOrClassName = handlerMappings.get(namespaceUri);
		if (handlerOrClassName == null) {
			return null;
		}
		else if (handlerOrClassName instanceof NamespaceHandler) {
			return (NamespaceHandler) handlerOrClassName;
		}
		else {
			String className = (String) handlerOrClassName;
			try {
				Class<?> handlerClass = ClassUtils.forName(className, this.classLoader);
				if (!NamespaceHandler.class.isAssignableFrom(handlerClass)) {
					throw new FatalBeanException(""Class ["" + className + ""] for namespace ["" + namespaceUri +
							""] does not implement the ["" + NamespaceHandler.class.getName() + ""] interface"");
				}
				NamespaceHandler namespaceHandler = (NamespaceHandler) BeanUtils.instantiateClass(handlerClass);
				namespaceHandler.init();
				handlerMappings.put(namespaceUri, namespaceHandler);
				return namespaceHandler;
			}
			catch (ClassNotFoundException ex) {
				throw new FatalBeanException(""Could not find NamespaceHandler class ["" + className +
						""] for namespace ["" + namespaceUri + ""]"", ex);
			}
			catch (LinkageError err) {
				throw new FatalBeanException(""Unresolvable class definition for NamespaceHandler class ["" +
						className + ""] for namespace ["" + namespaceUri + ""]"", err);
			}
		}
	}
```

When the type of handlerOrClassName is NamespaceHandler, end the method and no new NamespaceHandler will be created. However, if two threads run at the same time and both determine that the type of handlerOrClassName is not NamespaceHandler, the following code will run at the same time and create namespacehandler twice

```
else {

			String className = (String) handlerOrClassName;
			try {
				Class<?> handlerClass = ClassUtils.forName(className, this.classLoader);
				if (!NamespaceHandler.class.isAssignableFrom(handlerClass)) {
					throw new FatalBeanException(""Class ["" + className + ""] for namespace ["" + namespaceUri +
							""] does not implement the ["" + NamespaceHandler.class.getName() + ""] interface"");
				}
				NamespaceHandler namespaceHandler = (NamespaceHandler) BeanUtils.instantiateClass(handlerClass);
				namespaceHandler.init();
				handlerMappings.put(namespaceUri, namespaceHandler);
				return namespaceHandler;
			}
			catch (ClassNotFoundException ex) {
				throw new FatalBeanException(""Could not find NamespaceHandler class ["" + className +
						""] for namespace ["" + namespaceUri + ""]"", ex);
			}
			catch (LinkageError err) {
				throw new FatalBeanException(""Unresolvable class definition for NamespaceHandler class ["" +
						className + ""] for namespace ["" + namespaceUri + ""]"", err);
			}
		}
```

"
477,1061653526,sdeleuze,141109,I think I am going to update that PR to use `RuntimeHints` in `NativeConfigurationGenerator`.
478,1061862094,poutsma,330665,"The `KotlinBodySpec` was introduced as a workaround for [KT-5464](https://youtrack.jetbrains.com/issue/KT-5464). Since that issue has been fixed, we will replace the workaround (and `KotlinBodySpec`) in 6.0 with a normal extension function (see #28144), and expect Kotlin users to use the Java versions of `expectBody` and `expectBodyList`.

Is there a specific reason you'd like to have a `consumeListWith` instead of using `expectBodyList` ?"
479,1061885740,cheatmenot,19791487,+1
480,1061906719,sdeleuze,141109,"I have updated the PR to expose a single `public void generate(RuntimeHints hints, Path targetDirectory)` method in `NativeConfigurationGenerator`."
481,1062548081,Staticsubh,31039062,"Hi Team,

Any help here?
"
482,1062771489,snicoll,490484,Closed by https://github.com/spring-projects/spring-framework/commit/9ba927215edc7b8f936d6205d8f1c0c10b2202a2
483,1062772303,snicoll,490484,FTR we have a very hackish/temporary version in the meantime in `DefaultBeanRegistrationContributionProvider`.
484,1062995378,bclozel,103264,"I've just discussed this with @sdeleuze because I remembered a specific point about the AOT processing in Spring Native: this processing phase is triggered by the build plugins as they fork a JVM process using the application runtime classpath. This last point is necessary since all the classloader detections need to happen in a consistent fashion with the actual runtime behavior of the application.

Using Jackson as a required dependency means that build plugins would have to artificially add Jackson as a dependency to the runtime classpath, thus invalidating Jackson auto-detection during the AOT processing. This is why in Spring Native we chose to use/shade the vaadin ""android-json"" dependency to manipulate JSON. We had more specific needs there, such as reading/merging/writing JSON documents. In this case, since we're only writing a document out, maybe we should use a `StringBuffer` approach and avoid this problem completely?
"
485,1063017431,rstoyanchev,401908,"What you're doing with an asynchronous request before a handshake is not at all an expected scenario. Even from a Servlet container perspective, when you get off the Servlet container thread, you are expected to use `AsyncContext#dispatch` to continue processing on a Servlet container thread in order for everything to work. 

I can see that we don't expose dispatch on `ServerHttpAsyncRequestControl` but I'm not sure why you need to use that abstraction and not the HttpServletRequest directly especially for something like this. This brings back the point this isn't at all something expected.

You can consider simply blocking for the authentication, or using a redirect, or you can try starting an async request directly through the Servlet API and then dispatching back to the same URL, but again I don't know if you will run into any other issues with that.
"
486,1063389187,trisberg,78614,I'm getting some checkstyle violations trying to build. Could you fix them so I can try this out? Thanks.
487,1063895131,snicoll,490484,"I am blocked. I've added `AotContributingBeanPostProcessor` to the BPP that detects custom init and destroy methods. I am now left with the choice of mutating the `RootBeanDefinition`. From an AOT perspective, that's alright as the bean instance supplier is generated first (and therefore the contributors are invoked upfront).

From a context perspective, it is a little bit odd as `MergedDefinitionBeanPostProcessor` explicitly states that the methods of the base `BeanDefinition` class couldn't be invoked. 

Looking at things from a generic fashion, if `MergedDefinitionBeanPostProcessor` did register those using the API that was created as part of #28103, then this PP shouldn't even have to be an aot-contributing. It kind of shows in the current implementation where it mutates the `RootBeanDefinition` if necessary and always return a `null` contribution."
488,1064116581,sbrannen,104798,"Thanks for noticing this and bringing it to our attention.

I already fixed it in bc973d70016602e62ce9d8b9f8c712b05e67d69d, and you can see it fixed in the [5.3.17 snapshot](https://docs.spring.io/spring-framework/docs/5.3.17-SNAPSHOT/reference/html/web-reactive.html#webflux-filters-cors) ref docs."
489,1064172590,sbrannen,104798,"I tried building `main` (6.0 M3 snapshots) with OpenJ9 with Java 17 support, but I was unfortunately not aware that OpenJ9 does not support Java Flight Recorder and there are no plans to do so.

See:

- https://github.com/eclipse-openj9/openj9/issues/1876

The build fails immediately with compiler errors `package jdk.jfr does not exist`.

In light of that, I am closing this issue since OpenJ9 is currently not an option for building the Spring Framework."
490,1064186871,sbrannen,104798,"Reopening and repurposing this issue to _test_ Spring Framework with OpenJ9's Java 17 support.

We may achieve that with sample applications or potentially by running parts of the test suite with OpenJ9 even though we cannot compile the framework with OpenJ9."
491,1064333354,sdeleuze,141109,@bclozel @snicoll Could you please review the updated PR and let me know your advice?
492,1064858142,bclozel,103264,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
493,1064907063,sdeleuze,141109,"After various discussion with GraalVM team and @bclozel, I think we need to make the `reachableType` mandatory in our API since:
 - It allows to keep track of the reason of the inclusion of a hint
 - It improves the footprint by leveraging GraalVM static analysis, not just basic classpath checks
 - This is consistent with the design decision on GraalVM native configuation side which as been renamed to `jvm-reachability-metadata` to emphasis the reachability is a central concern here
 - It will likely allow us to have the same maintenability issue that on Spring Native with `@NativeHint`
 
Since annotation are currently not supported yet as relevant trigger (see [related GraalVM issue](https://github.com/oracle/graal/issues/4015)), we should implement a check to verify annotations are not used as `reachableType`."
494,1064909221,snicoll,490484,"courtesy of Google translate:

> When using an XML configuration file, if only one Bean is currently configured, the two methods of implementing BeanPostProcessor and BeanFactoryPostProcessor BeanPostProcessor will not be executed, but if another Service method is added, it will be executed. 

That sounds like a question that should be better suited to StackOverflow but I can't say for sure. Can you please attach a small sample that demonstrates what you've described? "
495,1064909896,lathspell,603223,"> Is there a specific reason you'd like to have a consumeListWith instead of using expectBodyList ?

It's a bit cumbersome to use:

```
           .expectBodyList<Person>().consumeWith<ListBodySpec<Person>> { result->
                val list = result.responseBody!!
                
                assertThat(....)
            }
```
"
496,1064922832,snicoll,490484,"> we should implement a check to verify annotations are not used as reachableType.

You can't reliably do that I am afraid. `TypeReference` won't tell you that. We do have specific checks for methods that take a `Class` as a shortcut though."
497,1064930196,snicoll,490484,"> Since they are designed to be used only AOT, spring.factories is not a good fit here

I don't necessarily disagree but it is disruptive to introduce another mechanism for that reason alone. There are many other concepts in the core container that behave differently when AOT is involved. For instance, we could imagine a class-level annotation on the type that provides some opt-in metadata that the transformer can use to ignore those entries.

I am not huge fan of the `factory.hint` package. Perhaps it is a smell that something named `RuntimeHintsRegistrar` is taking the bean factory as an argument?

cc @philwebb as I know he's been brainstorming on this topic as well."
498,1064935732,sdeleuze,141109,"> You can't reliably do that I am afraid. TypeReference won't tell you that. We do have specific checks for methods that take a Class as a shortcut though.

That's not a hard requirement, we can at least document it and do the check when we have the class. We could also maybe perform this check via ASM-based utility methods (I think we already have that implemented) when generating the config files since this will happen AOT."
499,1064936941,sdeleuze,141109,"@snicoll About your remark on `type` = `reachableType` in Spring Native, that's the case in a lot of `@NativeHint` indeed because we have a lot of hints that are using a ""Spring trigger"" which has a special meaning and special processing (it does not translate to `reachableType` in this case).

What I would like to do in Framework 6 is removing this special processing for ""Spring things"" which is not clearly defined and can't be check in a reliable way, and always translate to regular `reachableType`.

Since that's sadly not properly documented yet on GraalVM side, see examples of such files from the `jvm-reachability-metadata` repository:
`proxy-config.json`
```
[
  {
    ""condition"": {
      ""typeReachable"": ""org.jline.utils.Signals""
    },
    ""interfaces"": [
      ""sun.misc.SignalHandler""
    ]
  }
]
```
`resource-config.json`
```
{
  ""bundles"": [],
  ""resources"": {
    ""includes"": [
      {
        ""condition"": {
          ""typeReachable"": ""org.jline.terminal.TerminalBuilder""
        },
        ""pattern"": ""\\QMETA-INF/services/org.jline.terminal.spi.JansiSupport\\E""
      }
  ]
}
```
`reflect-config.json`
```
[
  {
    ""condition"": {
      ""typeReachable"": ""org.jline.terminal.impl.jansi.JansiNativePty""
    },
    ""name"": ""java.io.FileDescriptor"",
    ""queriedMethods"": [
      {
        ""name"": ""<init>"",
        ""parameterTypes"": [
          ""int""
        ]
      }
    ]
  }
]
```"
500,1064942653,Staticsubh,31039062,"Hi Team,
Any updates on this?"
501,1064962503,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
502,1064976629,sdeleuze,141109,"For this use case, it is probably shorter to do:
```
.expectBodyList<Person>().value<ListBodySpec<Person>> {                
                assertThat(it)...
            }
```

Also notice that `expectBodyList` is designed to provide nice shortcut like `responseSpec.expectBodyList<Foo>().contains(...)` so check if that apply to your use case or not.

Unless I miss something, I would not recommend to add a specific Kotlin extension for this since our regular policy is to stay close to the Java APIs and mainly provide shortcuts for reified type parameters.

That said, there is a remaining  painful point to solve here since in Java we can use `.expectBodyList<Person>().value()` while in Kotlin we have to specify the generic type explicitly `.expectBodyList<Person>().value<ListBodySpec<Person>> { }`. This should be fixed on Kotlin side not on Spring side.

I am not sure why [KT-40804](https://youtrack.jetbrains.com/issue/KT-40804) did not fix it, maybe it relates to a variation linked to [KT-5464](https://youtrack.jetbrains.com/issue/KT-5464) or [KT-22208](https://youtrack.jetbrains.com/issue/KT-22208). I will ask to Kotlin team.
"
503,1065158204,lathspell,603223,"Thanks for the tip, `value {}` is nice. Hopefully Kotlin fixes the generic type issues soon."
504,1065337198,philwebb,519772,@sbrannen We use this strategy in Spring Boot to find `@ConstructorBinding` annotations from nested classes. Can we reconsider deprecating it?
505,1065503794,ericyanush,1020116,"Github seems to have not liked the formatting of the content of the issue, so I'll close it and try re-submitting."
506,1065511103,bclozel,103264,"I'm sorry I can't transfer this issue across orgs, could you open this issue against [the Spring Cloud Gateway issue tracker](https://github.com/spring-cloud/spring-cloud-gateway/issues)?"
507,1065619792,lucasoares,10624972,Will this be fixed anytime soon?
508,1065835544,pivotal-cla,16822967,"@gorisanson Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28170)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28170) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
509,1065835787,pivotal-cla,16822967,@gorisanson Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28170)!
510,1065847857,snicoll,490484,"AFAIK, this should work. Can you move that code snippet in a project that we can run ourselves?

You can share it with us by attaching a zip to this issue or sharing a link to a GitHub repository. "
511,1065874785,PashaTurok,10261361,The problem was that I had to set classLoader for `AnnotationConfigApplicationContex` manually as `PathMatchingResourcePatternResolver` didn't find my config classes.
512,1065880146,sbrannen,104798,"This has been merged into `5.3.x` and `main`.

Thanks"
513,1065898593,razorree,14975254,"But that CacheErrorHandler doesn't solve this issue:
```Add @Cacheable implementation support for exception handling allowing the service method to be called instead of letting the provider exception to break the service [SPR-9295] ```
as underlying service is not called in case of IO (or other) Exceptions from cache."
514,1065899108,sbrannen,104798,"> Hi Sam, could you please also consider the problematic mix of `@DirtiesContext` and listening to test events?

I added a note regarding that (as well as dedicated integration tests) in d9c22e657fe86e999cbb4de1d1e0096435a828bf.

In addition, my initial commit for this issue (a2f02dbfc04d5d7463612848067bdde26c84b743) also briefly mentioned `@DirtiesContext`.

"
515,1065902297,sbrannen,104798,"Hi @philwebb,

I saw that you once used it in Boot's `ConfigurationPropertiesBean`, but that no longer seems to be the case.

Where is `TYPE_HIERARCHY_AND_ENCLOSING_CLASSES` still used in Spring Boot?"
516,1065912056,snicoll,490484,"Here is one: https://github.com/spring-projects/spring-boot/blob/de321b00b7d0f2c5c1c79a77e7241b43fbcd8313/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java#L559

We don't on `main` as the semantic of `@ConstructorBinding` has evolved in such a way that it is no longer necessary to search it this way."
517,1065925309,sbrannen,104798,"> The `Signer` and `TransferSigners` do not have same types. You are right, but as it was working before upgrade to `5.3.7` I expected it to keep working

@afattahi54, since `BeanUtils.copyProperties()` honors generics since Spring Framework 5.3, you will need to ensure that the source and target property types are compatible in terms of Java semantics.

> spring-beans version is 5.3.9, when Signer is a subtype of TransferSigners，use the BeanUtils.copyProperties(transferVO , transferRequest). the transferVO.signers is null. but when spring-beans version is 5.1.16.RELEASE is normal. I hope the new version is compatible with the previous version.

@bigdata-page, that can be addressed by using an upper-bounded wildcard for the target property type.

----

In commit 887389d3413c4a1036095cff6f9cdebb34af87fe, I added a table to the Javadoc for `BeanUtils.copyProperties()` which will hopefully help you and other users better understand the current semantics for property type matching.

![BeanUtils copyProperties](https://user-images.githubusercontent.com/104798/158028204-e3f78bed-8324-416c-b477-b4fcf0b77bb0.png)

"
518,1066015962,ZiYangZhou,8471932,傻逼请用英语
519,1066114231,sbrannen,104798,"> Why doesn't Spring set the lazy proxy's `TargetSource` to static?

That's a good question. I imagine that having a static `TargetSource` (which caches the resolved target bean) might make sense if the underlying bean is a singleton, but I may be overlooking something.

While looking into this issue, I noticed another issue which I reported in #28176.

The team will investigate both of these related issues.

----

As a side note, please note that _this_ issue applies not only to `@Lazy @Resource` fields but also to `@Lazy @Autowired` injection points. Thus, this issue applies to both `CommonAnnotationBeanPostProcessor.buildLazyResourceProxy(...)` and `ContextAnnotationAutowireCandidateResolver.buildLazyResolutionProxy(...)`."
520,1066116088,sbrannen,104798,"Thanks for the link and explanation, @snicoll.

If the search strategy is only used for `@ConstructorBinding` against Framework 5.3.x and is no longer used in Boot 3.0+ (relying on Framework 6.0+), is there still an issue with having the search strategy deprecated in Framework 5.3.x and removed in 6.0?"
521,1066152010,snicoll,490484,"I think so, yes. Our policy is to not rely on deprecated code unless absolutely necessary. Getting in this situation for the whole duration of the `2.x` line is far from ideal and we'd probably copy the code to avoid using deprecated code in framework.

While I have the opportunity, I disagree with the opening statements. It may have been introduced for a very specific use case but once it becomes public API, we can't really argue that this is the only use. It sounds like an addition in [TestContextAnnotationUtils](https://github.com/spring-projects/spring-framework/blob/main/spring-test/src/main/java/org/springframework/test/context/TestContextAnnotationUtils.java) is fixing the problem. It doesn't, at least for us.
"
522,1066824367,jomach,4804546,I just tested this and a temporary folder is still being create :( 
523,1066903609,jomach,4804546,"Hey, currently I need to build a upload endpoint that does not store data on this or holds the whole file in memory. This seems not to be possible right now due to this issue. When I activate streaming to true my controller never get's called. 
I'm not an Flux expert but something is wrong on this part of the code: 
PartGenerator.java:
```
private void newPart(State currentState, HttpHeaders headers) {
		if (isFormField(headers)) {
			changeStateInternal(new FormFieldState(headers));
			requestToken();
		}
		else if (!this.streaming) {
			changeStateInternal(new InMemoryState(headers));
			requestToken();
		}
		else {
			Flux<DataBuffer> streamingContent = Flux.create(contentSink -> {
				State newState = new StreamingState(contentSink);
				if (changeState(currentState, newState)) {
					contentSink.onRequest(l -> requestToken());
					requestToken();
				}
			});
			emitPart(DefaultParts.part(headers, streamingContent));
		}
	}
```

Better said I thing the issue is on the emiPart which holds to what @djouvin said. "
524,1067373098,ghost,10137,"> https://gist.github.com/pschichtel/830b7943ea43b7cb58cadd984b54b903

just added your workaround to my project and got around the arrayindexoutofbounds with hibernate-validator enabled. The project was using openapi generator to create a reactive kotlin api based on webflux. with reactive=true and useBeanValidation=true every query failed with arrayindexoutofbounds"
525,1067513172,Deycoesr,33995808,"> courtesy of Google translate:
> 
> > When using an XML configuration file, if only one Bean is currently configured, the two methods of implementing BeanPostProcessor and BeanFactoryPostProcessor BeanPostProcessor will not be executed, but if another Service method is added, it will be executed.
> 
> That sounds like a question that should be better suited to StackOverflow but I can't say for sure. Can you please attach a small sample that demonstrates what you've described?

I think he means. When only single Bean is registered, `BeanPostProcessor` doesn't work.

Like this:
```java
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanPostProcessor;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class TestBean implements BeanPostProcessor {

    @Override
    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
        System.out.println(""TestBean.postProcessBeforeInitialization"");
        return bean;
    }

    @Override
    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
        System.out.println(""TestBean.postProcessAfterInitialization"");
        return bean;
    }

    public static void main(String[] args) {
        new AnnotationConfigApplicationContext(TestBean.class);
    }
}
```
Console output:
```Logtalk
10:51:44.741 [main] DEBUG org.springframework.context.annotation.AnnotationConfigApplicationContext - Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@574caa3f
10:51:44.749 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
10:51:44.761 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerProcessor'
10:51:44.761 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerFactory'
10:51:44.762 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
10:51:44.763 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
10:51:44.765 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'testBean'
```
Not output `TestBean.postProcessBeforeInitialization` and `TestBean.postProcessAfterInitialization`.
"
526,1067525847,10zh,56636860,"like this:

Start by defining two services:

```java
package org.springframework.core.ioc.service.intf;

/**
 * @author pzh
 * createTime:2022/03/11/11:10
 */
public interface IOCService {
	String testIoc();
}


package org.springframework.core.ioc.service.intf;

/**
 * @author pzh
 * createTime:2022/03/11/16:23
 */
public interface IOCServiceTwo {
	String testIocTwo();
}

```

The implementation class:

```java
package org.springframework.core.ioc.service.impl;

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
import org.springframework.beans.factory.config.BeanPostProcessor;
import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.core.ioc.service.intf.IOCService;

/**
 * @author pzh
 * createTime:2022/03/11/11:11
 */
public class IOCServiceImpl implements IOCService, BeanFactoryPostProcessor,
      ApplicationContextAware, BeanPostProcessor, InitializingBean {
          
    public IOCServiceImpl(){
		System.out.println(""one con"");
	}

   @Override
   public String testIoc() {
      return ""One Test"";
   }

   @Override
   public Object postProcessBeforeInitialization(Object bean, String beanName)
         throws BeansException {
      System.out.println(""One postProcessBeforeInitialization"");
      return bean;
   }

   @Override
   public Object postProcessAfterInitialization(Object bean, String beanName)
         throws BeansException {
      System.out.println(""One postProcessAfterInitialization"");
      return bean;
   }

   @Override
   public void postProcessBeanFactory(
         ConfigurableListableBeanFactory beanFactory) throws BeansException {
      //可以执行初始化前的一些逻辑
      System.out.println(""one postProcessBeanFactory"");
   }

   @Override
   public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
      System.out.println(""one setApplicationContext:"" + applicationContext.getApplicationName());
   }


   @Override
   public void afterPropertiesSet() {
      System.out.println(""one afterPropertiesSet"");
   }
}



package org.springframework.core.ioc.service.impl;


import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
import org.springframework.beans.factory.config.BeanPostProcessor;
import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
import org.springframework.core.ioc.service.intf.IOCServiceTwo;

/**
 * @author pzh
 * createTime:2022/03/11/16:23
 */
public class IOCServiceTwoImpl implements IOCServiceTwo, BeanPostProcessor,
		BeanFactoryPostProcessor {
            
    public IOCServiceTwoImpl(){
		System.out.println(""two con"");
	}

	@Override
	public String testIocTwo() {
		return ""Two ioc"";
	}

	@Override
	public void postProcessBeanFactory(
			ConfigurableListableBeanFactory beanFactory) throws BeansException {
		System.out.println(""Two postProcessBeanFactory"");
	}

	@Override
	public Object postProcessBeforeInitialization(Object bean, String beanName)
			throws BeansException {
		System.out.println(""Two postProcessBeforeInitialization"");
		return BeanPostProcessor.super.postProcessBeforeInitialization(bean, beanName);
	}

	@Override
	public Object postProcessAfterInitialization(Object bean, String beanName)
			throws BeansException {
		System.out.println(""Two postProcessAfterInitialization"");
		return BeanPostProcessor.super.postProcessAfterInitialization(bean, beanName);
	}
}

```

Test file:

```java
@Test
public void testIocXml() {
   ApplicationContext applicationContext = new ClassPathXmlApplicationContext(
         ""classpath:application-ioc.xml"");
   IOCService iocService = applicationContext.getBean(IOCService.class);
   IOCServiceTwo iocServiceTwo = applicationContext.getBean(IOCServiceTwo.class);
   System.out.println(iocService.testIoc());
   System.out.println(iocServiceTwo.testIocTwo());
}
```

The configuration file(application-ioc.xml):

```xml
<?xml version=""1.0"" encoding=""UTF-8"" ?>
<beans xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xmlns=""http://www.springframework.org/schema/beans""
      xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd""
      default-autowire=""byName"">
   <bean id=""iocService"" class=""org.springframework.core.ioc.service.impl.IOCServiceImpl""/>
   <bean id=""iocServiceTwo"" class=""org.springframework.core.ioc.service.impl.IOCServiceTwoImpl""/>
</beans>
```

output:

```java
one con
one setApplicationContext:
one afterPropertiesSet
two con
one postProcessBeanFactory
Two postProcessBeanFactory
One Test
Two ioc
```

conclusion：

```markdown
Implementing BeanFactoryPostProcessor will cause the Bean to be pre-initialized. When all beans implement BeanFactoryPostProcessor, the BeanPostProcessor will fail
```

"
527,1067617233,jomach,4804546,this is related with https://github.com/spring-projects/spring-framework/issues/27743 right ?
528,1067648007,snicoll,490484,"@Deycoesr let's assume that's what the OP meant as this is pretty close to my understanding. The Javadoc of `BeanPostProcessor` states:

> An ApplicationContext can autodetect BeanPostProcessor beans in its bean definitions and apply those post-processors to any beans subsequently created. 

It's not a matter of one bean vs. several bean but rather that the only bean around is the BPP."
529,1067653748,snicoll,490484,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
530,1067657464,snicoll,490484,"I assume you meant `@Cacheable`. The cache abstraction is a straightforward arrangement where objects returned from the method is called. The optimistic locking is the least of your problem here as it would store the whole graph and not a single entity and that will lead to serve you outdated data.

There is a [warning in the doc](https://docs.spring.io/spring-framework/docs/current/reference/html/integration.html#cache-strategies) about this.

You should use the second level cache of your JPA provider for this. If you have more questions, please follow-up on StackOverflow. As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements."
531,1067669424,snicoll,490484,"Not sure what you mean. We can't ignore such error by default so if it thrown back at you, you'll get that, yes. You can provide your own implementation of the handler though that would ignore certain exceptions (and that will be treated as if the entry does not exist)."
532,1067678133,sdeleuze,141109,"I am closing this issue, we will comment here if/when we get a feedback from the Kotlin team."
533,1067686292,sdeleuze,141109,"I am not sure how this should be implemented and exposed, but indeed getting access to the `CoroutineContext` seems a valid use case."
534,1067704170,sdeleuze,141109,Moving this issue back to waiting for triage while we are waiting more information on https://github.com/spring-projects/spring-data-commons/issues/2532 side.
535,1067799759,sdeleuze,141109,"Compiler plugins, including Spring one, are maintained by Kotlin team, so this should likely be raised on their side with your repro."
536,1067800388,pivotal-cla,16822967,"@ahmadshahwan Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28181)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28181) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
537,1067801672,62mkv,5255127,"hy @Bryksin how has it been working for you? we also currently use Redis-backed cache (via redisson), but we have to implement it in the code level, along the lines of 
```
getFromCache(key).
.switchIfEmpty(getFromUpstream().delayUntil(value -> putToCache(key, value))
```
which I don't like too much, as caching should be treated a cross-cutting concern, easily disable-able if needed

I like the API of your library (https://github.com/Bryksin/redis-reactive-cache) but my coworkers are hesitant given apparent lack of community adoption :(

also would be interesting to learn of @simonbasle take on this approach 🙏 
"
538,1067801848,pivotal-cla,16822967,@ahmadshahwan Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28181)!
539,1067818938,sbrannen,104798,"#### Related Issues

- #27622"
540,1067819185,sbrannen,104798,"#### Related Issues

- #28138"
541,1067877272,Bryksin,9193359,"Hi @62mkv, unfortunately usage of the lib is very low, no time to focus on it properly
It was just MVP version and definitely has room for improvement, at least:
* Config property to enable/disable
* Exceptions and error handling (for example connection to redis failed, it should continue with method execution)
So yes, there is definitely room for improvement but no time, and community didn't pick it up. Though I would prefer Spring boot official solution rather then custom stuff

Though time is going but such important aspect as Cache continue to be ignored by Spring for reactive stuff by some reason..."
542,1067880751,poutsma,330665,"As of Spring Framework 5.3.13, we use [`Files.copy`](https://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#copy(java.nio.file.Path,%20java.nio.file.Path,%20java.nio.file.CopyOption...)) in a bounded elastic scheduler, see [here](https://github.com/spring-projects/spring-framework/blob/0c7e0002504f728d3ca3e182406d19ed3c4c9973/spring-web/src/main/java/org/springframework/http/codec/multipart/DefaultParts.java#L312).

Can you check whether you are facing the same performance issue when using the most recent version of Spring Framework?"
543,1067931407,rstoyanchev,401908,"`ModelAndView` is a simple holder of name value pairs and is the basic contract for the `DispatcherServlet` and related strategies like `HandlerAdapter` and `ViewResolver`. Flash attributes is a more opinionated solution that's supported mainly from annotated controllers where you are expected to have `RedirectAttributes` injected. 

I'm not sure what you're proposing from an API perspective, but adding flash attributes directly to a `ModelAndView` implies that you're also creating the `ModelAndView` within the controller method and I don't see why that's more convenient or necessary. More often we expect the model to be passed into the controller method so you can simply add to it and just return the view name in which case you can have `RedirectAttributes` passed in. 
"
544,1067994098,sbrannen,104798,"The reason that `CommonAnnotationBeanPostProcessor` and `ContextAnnotationAutowireCandidateResolver` both build a proxy for a `@Lazy` injection point with a non-static `TargetSource` is in order to allow the `BeanFactory` to dynamically determine how the bean is resolved. This is true even for singleton target beans in order to support edge cases where a `BeanDefinition` may have been removed since the last time the proxy was invoked.

In light of that, the team has decided to close this issue as ""works as designed"".

However, if you discover that the use of a non-static `TargetSource` in such cases leads to a performance bottleneck for a real application, please provide a sample project that reproduces the issue.

Thanks
"
545,1067998743,snicoll,490484,"@Bryksin with regards to ""ignoring for some reason"", this [comment](https://github.com/spring-projects/spring-framework/issues/17920#issuecomment-1006485410) above yours should help nuance that hopefully."
546,1068003664,sbrannen,104798,"Although the creation of two proxies for the same lazy injection point is unintentional, the team has decided to close this issue on the following grounds.

The only way for two such proxies to be created is if a `@Lazy @Resource` field has a name that does not match the name of a bean in the `ApplicationContext`, which should not be the case in practice.

When using `@Resource`, the developer is requesting that Spring perform dependency injection _by name_. When the field name does not match an existing bean name, Spring's dependency resolution mechanism falls back to dependency injection _by type_.

Thus, if a user wishes to use `@Lazy` with dependency injection _by type_, the injection point should be annotated with `@Autowired` or `@Inject` instead of `@Resource`. Otherwise, the user should ensure the `@Resource` field name matches an existing bean name or accept the fact that two lazy proxies are created for such scenarios.
"
547,1068015452,sijskes,1328869,"In the case where the creation of the ModelAndView is delegated away from the controller, and is created based on tests in this delegate, ModelAndView is a perfect return value from this delegate. RedirectAttributesModelMap is not different opinionated as the ModelMap in ModelAndView. Attributes stored in Model are also passed to a redirect, so why not RedirectAttributesModelMap attributes.

What you seem to indicate is that you want Model and FlashMap 'contained' in the Controller, and block designs where ModelAndView (with flashmap attributes) are created in  a controller delegate.

And this 'blockade' is exactly how it is currently implemented. The ModelMap (name,value pairs) contained in ModelAndView is not accessible and one can only add normal attributes to it. ModelAndView allows for a redirect view, but without the needed RedirectAttributesModelMap.flashAttributes.

I seek to change this, so one can create a redirect ModelAndView away from the controller, with the needed RedirectAttributesModelMap.flashAttributes.

I see no reason to allow ModalAndView attributes to be set, and to deny this to flash-attributes.



"
548,1068058600,sbrannen,104798,Now available on Maven Central: https://repo1.maven.org/maven2/io/projectreactor/reactor-bom/2020.0.17/
549,1068102439,bclozel,103264,"Java 17 is supported with the latest Spring Boot 2.5.x and 2.6.x. You should [look at the support timeline for Spring Boot](https://spring.io/projects/spring-boot#support) and choose there accordingly. I'm afraid Spring Framework 5.x [requires Servlet 3.1+, so Websphere 9+](https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-5.x#upgrading-to-version-50)."
550,1068130311,bclozel,103264,This should be reported against [the classgraph project](https://github.com/classgraph/classgraph) as it is the one performing the reflective access.
551,1068140409,snicoll,490484,Superseded by #28057
552,1068177149,AzZureman,3420444,Can i do something to move PR forward?
553,1068184484,philwebb,519772,We might be able to use `com.oracle.svm.core.configure.ResourceConfigurationParser` in the JUnit test to verify the JSON without needing a native image.
554,1068226339,brucelwl,13413715,@poutsma Can you tell me how to deal with this issue in the future?
555,1068303288,snicoll,490484,Actually the related issue doesn't deprecate the method so let's reopen this one.
556,1068345440,ctailor2,3526141,@trisberg I resolved the checkstyle violations and made some other updates.
557,1068347850,rstoyanchev,401908,"There is no intent to block anything to be honest, only some decisions from a number of years ago. Trying to recollect, so previously there was confusion with attributes from the ""default"" model ending up in redirect URLs (see #11462 and many related issues, both before and follow-ups). A specific goal was to clearly separate redirects from rendering, and encourage never using from the ""default"" model on redirect which is also a security concern. The reason this relates to flash attributes is they both apply to redirects and need to be exposed in the same places.

Here you're returning `ModelAndView` and therefore not using the ""default"" model, but if we did support methods to add redirect and flash attributes through ModelAndView they would be expected in related scenarios with a split Model and String or `View` instance (one as input and the other as output, in both combinations), but then it gets tricky to separate ""default"" model from non-default model use and moreover `Model` and `ModelMap` aren't even in web modules so not an option to add web methods there.

In any case, it's been like this for a long time and not revisited much or discussed so I'm not keen to revisit the current arrangement in `ModelAndView` and add more nuance. FWIW, based on the experience in WebFlux we added the [Rendering](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/reactive/result/view/Rendering.html) API which can be created within a controller method like `ModelAndView` and supports a variety of cases. If anything we could add something more along those lines.

I am also wondering if you've considered an approach with passing `RedirectAtributes` into your delegate?

"
558,1068405686,snicoll,490484,"Thanks a lot for the contribution @philwebb, @wilkinsona, and @mbhave. Apologies for the delay in merging this."
559,1068415130,keyzj,36663376,"@poutsma, hello!
Thank you for the example, but i don's see anyway that this could work. Your provided ```DefaultPartHttpMessageReader partReader``` just won't be used, because there're already registered instance of DefaultPartHttpMessageReader for MultipartHttpMessageReader.

You could enable streaming like this:
```java
@Configuration
public class StreamingCodecConfig implements WebFluxConfigurer {
    @Override
    public void configureHttpMessageCodecs(ServerCodecConfigurer config) {
        config.defaultCodecs().multipartReader(new MultipartHttpMessageReader(defaultPartHttpMessageReader()));
    }

    public DefaultPartHttpMessageReader defaultPartHttpMessageReader() {
        DefaultPartHttpMessageReader defaultPartHttpMessageReader = new DefaultPartHttpMessageReader();
        defaultPartHttpMessageReader.setStreaming(true);
        return defaultPartHttpMessageReader;
    }
}

```

But according to https://github.com/spring-projects/spring-framework/issues/27743 - request will hang forever (at least for me and @jomach)."
560,1068432389,ldap4life,31079559,Thanks this should suffice.
561,1068538806,jhoeller,1263688,"From my perspective, we could simply drop that debug log statement (or potentially downgrade it to trace level but I'd rather drop it right away). It was only really meant to help with setter method mismatches in the original bean property mapper, but given the flexible mapping strategies in a modern-day data class arrangement, such a log is indeed more confusing than helpful."
562,1068669097,catfishlty,12734411,"- Spring Boot Application with starter
- Spring Boot 2.6.4

Here're some tips when using custom starter. In my projects, if a `LocaleResolver` is setup in a custom starter, it won't work in the application.

So we need to make sure `LocaleResolver` is setup in application configuration but not starter configuration . For example, there're 2 repos named `test-demo` & `test-demo-starter`, which means `test-demo-starter` is used by `test-demo`. So make sure that `LocaleResolver` is setup in application config not starter config. For example, there're 2 repos named `test-demo` & `test-demo-starter`, which means `test-demo-starter` is used by `test-demo`.

#### `WebConfig` in `test-demo-starter`
```java
@Configuration
@ConditionalOnWebApplication
@ConditionalOnMissingBean(WebMvcConfig.class)
public class WebMvcConfig extends DelegatingWebMvcConfiguration {
   ...
}

public class CommonLocaleResolver implements LocaleResolver {
   ...
}
```

#### `CustomWebMvcConfig` in `test-demo`
```java
@Configuration
@ConditionalOnWebApplication
public class CustomWebMvcConfig extends WebMvcConfig {
    @Bean
    public LocaleResolver localeResolver() {
        return new CommonLocaleResolver();
    }

   ...
}
```

I hope it can help."
563,1068852745,bclozel,103264,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
564,1068876967,sdeleuze,141109,"Kotlin team confirmed this need to be fixed on Kotlin side, see [related comment in KT-5464](https://youtrack.jetbrains.com/issue/KT-5464#focus=Comments-27-5878033.0-0)."
565,1068877909,sdeleuze,141109,"See [related comment in KT-5464](https://youtrack.jetbrains.com/issue/KT-5464#focus=Comments-27-5878033.0-0) where we discussed the fact that while this is now usable with Kotlin 1.6+, Kotlin is still more verbose than Java so there is room for improvement."
566,1068908090,chancekim,39732992,"Hello, I think a limited encoder/decoder would be really helpful to many users.
Our company is using spring MVC with GSON and planning to change our application to the Webflux based application.
There is a common request and response classes which are using GSON annotations now, but we have to change those classes to use jackson annotations because Webflux doesn't provide GSON encoder/decoder.
I guess it is happening to many other companies, so I politely  request you reconsider of this issue."
567,1068914123,bclozel,103264,"Hi @chancekim - thanks for reaching out!
This is pretty late in the 5.3.x generation and we're working on the upcoming 6.0.x. Introducing a new feature in 5.3.x at this stage would be odd. Would that work for you if this is done for the 6.0.x line? What are your current plans for this MVC->WebFlux change?"
568,1068974848,jhoeller,1263688,"@mp911de This looks good to me so far, pretty much the only complaint I have is the use of `StringBuffer` (instead of `StringBuilder`) in `ExtendedTransactionDefinition`... Oh, and we seem to have a conflict in `DefaultDatabaseClientUnitTests` in the meantime.

From my perspective, we could include this in 6.0 M3 tomorrow. Any updates you'd like to make still? Any chance you could rebase and possibly squash the PR into one commit?"
569,1068979967,jhoeller,1263688,"Also, this fully addresses #27976 as far as I can see? Do we foresee anything left to do for R2DBC 0.9 beyond this PR? I guess it's rather going to be about R2DBC 1.0 then..."
570,1069081336,poutsma,330665,"Looking at the code you shared, I think you're running into problems because your component is dependant on the Servlet lifecycle as well as the Spring lifecycle.

So, instead of implementing a Servlet `Filter`, you should consider implementing `org.springframework.web.servlet.HandlerInterceptor`, as [handler interceptor are Spring components](https://www.baeldung.com/spring-mvc-handlerinterceptor) that live in the Spring lifecycle. Then, you can simply detect the handler mappings in your `ApplicationContextAware::setApplicationContext` implementation, which will be called before your `HandlerInterceptor` method implementations. I would also not implement `SmartLifecycle`, as all the initialization you need can be done in `setApplicationContext`.

As for the suggestion made in your original comment: `DispatcherServlet` is a Servlet that is instantiated by the web container (i.e. Tomcat). `DispatcherServlet` is not a Spring Bean, and therefore implementing `SmartInitializingSingleton` will not work.

As for implementing `ServletContainerInitializer`: I don't think that's going to help either, because Filters are executed (and initialized) before Servlets are, so you will most likely face the same problem of the servlet not being initialized yet. By implementing a handler interceptor as I suggested above, you are part of the same lifecycle of the `DispatcherServlet` that you're trying to query, so that seems the best way forward."
571,1069105510,sfussenegger,117516,"here's a simple implementation that might help with support for `spring.profiles.active` and `spring.profiles.include`:

```java
/**
 * <p>
 * resolve active profiles from {@link ActiveProfiles#profiles() @ActiveProfiles} by default and allow overriding (using
 * {@value AbstractEnvironment#ACTIVE_PROFILES_PROPERTY_NAME}) or adding
 * ({@value Profiles#INCLUDE_PROFILES_PROPERTY_NAME}) profiles using {@link System#getProperty(String) system
 * properties}
 * </p>
 * 
 * <p>
 * Usage:
 * </p>
 * 
 * <pre>
 * &#64;SpringBootTest
 * &#64;ActiveProfiles(profiles = ""testing"", resolver = ConfigurableActiveProfilesResolver.class)
 * public class Test {
 * 	// SNIP
 * }
 * </pre>
 */
public class ConfigurableActiveProfilesResolver extends DefaultActiveProfilesResolver {

	@Override
	public String[] resolve(final Class<?> testClass) {
		final String activeProperty = System.getProperty(AbstractEnvironment.ACTIVE_PROFILES_PROPERTY_NAME);
		if (StringUtils.hasText(activeProperty)) {
			return split(activeProperty);
		}

		// from @ActiveProfiles
		final String[] activeProfiles = super.resolve(testClass);

		final String includeProperty = System.getProperty(Profiles.INCLUDE_PROFILES_PROPERTY_NAME);
		if (StringUtils.hasText(includeProperty)) {
			return merge(activeProfiles, split(includeProperty));
		} else {
			return activeProfiles;
		}
	}

	/**
	 * @see org.springframework.core.env.AbstractEnvironment#doGetActiveProfiles()
	 */
	private String[] split(final String profiles) {
		return StringUtils.commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(profiles));
	}

	private String[] merge(final String[] activeProfiles, final String[] includeProfiles) {

		if (includeProfiles.length == 0) {
			return activeProfiles;
		} else if (activeProfiles.length == 0) {
			return includeProfiles;
		} else {
			// merge, ignore duplicates
			final String[] merged = new String[activeProfiles.length + includeProfiles.length];
			System.arraycopy(activeProfiles, 0, merged, 0, activeProfiles.length);
			System.arraycopy(includeProfiles, 0, merged, activeProfiles.length, includeProfiles.length);
			return merged;
		}
	}
}
```

Usage with unit tests:

```java
 @SpringBootTest
 @ActiveProfiles(profiles = ""testing"", resolver = ConfigurableActiveProfilesResolver.class)
 public class Test {
 	// SNIP
 }
 ```

Example usage from Maven

```xml
<plugin>
	<inherited>true</inherited>
	<artifactId>maven-failsafe-plugin</artifactId>
	<configuration>
		<systemPropertyVariables>
			<spring.profiles.include>mysql</spring.profiles.include>
			<spring.datasource.url>jdbc:mysql://${docker.container.mysql.ip}/test</spring.datasource.url>
			<spring.datasource.username>test</spring.datasource.username>
			<spring.datasource.password>test</spring.datasource.password>
		</systemPropertyVariables>
	</configuration>
</plugin>
```"
572,1069128340,mp911de,1035015,Happy to take care of both. R2DBC 0.9 baseline support is done after this PR is merged. I expect some future requests from users around stored procedures consumption once we have a broader R2DBC 0.9 adoption but time has to prove me right or wrong.
573,1069184992,sbrannen,104798,"For the `5.3.x` line, the team has decided not to deprecate the `TYPE_HIERARCHY_AND_ENCLOSING_CLASSES` search strategy.

Instead, we will add notes to the documentation to increase awareness of how the search strategy behaves.

In addition, we will reconsider deprecation/removal of the search strategy in `6.0.x`."
574,1069186174,sdeleuze,141109,The application used to validate it works as expected is https://github.com/sdeleuze/generate-native-config.
575,1069189493,poutsma,330665,"Looking at the stack trace, it looks like the method signature itself is fine (i.e. `controller.foo(Bar)`, but the argument somehow got resolved to `Optional<Bar>` instead of a plain `Bar`. 

I cannot reproduce this issue in a test. If you'd like us to spend more time investigating, please provide a complete minimal sample (something that we can unzip or git clone, build, and deploy) that reproduces the problem."
576,1069231793,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
577,1069248732,snicoll,490484,Moving to the next milestone since  we just introduce the infrastructure and we'd need to give some time for team to use it before deprecating `loadFactoryByNames`.
578,1069251469,sdeleuze,141109,Merged via 77e0100f42253ab26947cf2258ee9653e2ac811d.
579,1069256329,snicoll,490484,Superseded by PR #28131
580,1069268361,pardhukancharla,43738322,"Thanks for response @bclozel.
Can you suggest Higher version of Spring Framework(> 4.1.5.RELEASE)  which suits WAS 8.5.5.9 & Spring Boot 2.x?"
581,1069279979,bclozel,103264,That version doesn't exist I'm afraid. Only 5.x Framework versions are currently supported and Spring Boot is depending on those. See the list of [requirements here](https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-5.x#upgrading-to-version-50); you'll need to update your deployment stack.
582,1069415189,sbrannen,104798,"**Team Decision**: we have decided to deprecate the `TYPE_HIERARCHY_AND_ENCLOSING_CLASSES` search strategy in 6.0 M3, allowing consumers of 6.0 milestones and release candidates to provide feedback before potentially completely removing it and/or providing an alternate mechanism for achieving the same goal prior to 6.0 GA.

- see #28080 for details"
583,1069417294,jhoeller,1263688,Superseded by PR #28059.
584,1069428405,jhoeller,1263688,"Thanks, @mp911de! Merged for inclusion in 6.0 M3 now."
585,1069453131,rstoyanchev,401908,See commits linked the umbrella issue #27052.
586,1069673600,bclozel,103264,@Daniel-Mueller96 it looks like you have all the pieces available to craft a minimal repro for this issue. Could  you remove as much as possible (code and dependencies) and share a project we can git clone or download to reproduce the issue?
587,1069673601,Daniel-Mueller96,82331872,"@bclozel I can try that. Never really did this though. Therefore can not say that for sure
"
588,1069673605,scottfrederick,60661,@Daniel-Mueller96 You can create a zip file from the minimal sample application and attach the zip in a comment on this issue if that's easier than creating a git repository. 
589,1069673606,Daniel-Mueller96,82331872,"@bclozel @scottfrederick 
https://github.com/Daniel-Mueller96/Spring-boot-issue-30258 
This is the repo to clone. I made it as simple as i had the time for (its getting late here too)
There are two controllers, one is fixed and the other isnt. There are also two tests, one is fixed and the other isnt. 
Both test intentionally fail to show you the error and provide you with the 400 or 302 depending on the controller version.

edit:
i should say that i did not test wether this now works running the application normally."
590,1069788361,be-hase,903482,"> This would be very helpful in regards to MDC context as mentioned above.

Yes. This is very ver helpful for kotlin coroutine user."
591,1070387186,Staticsubh,31039062,Why this issue is not being triaged at least?
592,1070412689,Daniel-Mueller96,82331872,"I just updated the repo mentioned above with a clearer version and now also tested that this still works running normally by entering form components manually and sending them. The value of the object simply gets printed on stdout.
I also made the tests actually check for the error and not just fail."
593,1070504252,bclozel,103264,"This is due to: https://spring.io/blog/2020/10/29/notice-of-permissions-changes-to-repo-spring-io-fall-and-winter-2020

Your build configuration should not refer to the ""libs-release"" artifact repository."
594,1070877636,bclozel,103264,"Thanks for the repro project, that was really useful.

The main difference between the two controllers are indeed the method signature:

```java
// works
public String insertKlausur(KlausurInputDTO klausurInputDTO) {

// doesn't work
public String insertKlausur(KlausurInputDTO klausur) {
```

This happens because in the first instance, the argument is resolved from the `ModelAndView` using the parameter name. In your test setup the `KlausurInputDTO` instance is contributed to the model with its type name (first letter lowercased): `klausurInputDTO`. This explains why in the first case it's found and not the other one.

The core problem here is that your test setup is invalid. The usage of [`flashAttr` is odd here, as you're not testing a flash attribute that's been contributed by another controller handler before a redirect](https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-flash-attributes). You should be testing for a real HTML form input; this is after all the goal of a `MockMvc` test: checking that the HTTP behavior is right.

The following changes work:

```java
  @Test
  void test_7() throws Exception {
	    RequestBuilder builder = MockMvcRequestBuilders.post(""/klausuren"")
			.param(""lsfId"", ""1"")
			.param(""date"", ""2022-02-02"")
			.param(""startTime"", ""08:30"")
			.param(""endTime"", ""12:30"")
			.param(""present"", ""true"")
			.param(""name"", ""test"");
    mvc.perform(builder).andExpect(status().is(302));
  }
```

```java
public record KlausurInputDTO(Long lsfId, @DateTimeFormat(pattern = ""yyyy-MM-dd"") LocalDate date,
	@DateTimeFormat(pattern = ""HH:mm"") LocalTime startTime,
	@DateTimeFormat(pattern = ""HH:mm"") LocalTime endTime, 
	boolean present, String name) {
	
}
```

I'm closing this issue as this works as designed.
"
595,1070986696,snicoll,490484,"@ShinDongHun1 thanks but that kind of stylistic change is quite subjective and we don't usually accept such a PR. Besides, I don't see a problem with the current code."
596,1070993311,Daniel-Mueller96,82331872,Okay thanks for checking though
597,1071334230,ajr3-gen,93659748,"Thanks for getting back to me.  I'm afraid I'm having some trouble seeing the solution, though.  One of your suggestions is to block for the authentication, but I don't want to do that because it defeats the point of being asynchronous.  You also suggested a redirect, but (a) we don't want to change the behavior our clients are expecting, and (b) websocket clients aren't guaranteed to honor redirects (according to this: https://stackoverflow.com/questions/46962881/is-it-possible-to-seamlessly-redirect-websockets).

That leaves the third option, of dispatching to the same URL through the Servlet API.  I tried that, but it just caused a loop that exhausted memory, so either it doesn't work or I am not following what you had in mind.  Maybe you could expand on that?

I will say that `ServerHttpAsyncRequestControl` seemed like the right thing to use here, based on its brief description in the API Javadoc:  ""A control that can put the processing of an HTTP request in asynchronous mode during which the response remains open until explicitly closed.""  That's what we're doing here, and it _did_ work with Jetty9."
598,1071370645,jgslima,199610,"@rstoyanchev , I do not want to contribute to this vast amount of issues in the spring project. As it seems, the community creates an amount of issues greater than the capacity of yours to analyze them.

Feel free to just close the issue."
599,1072248192,saad14092,18527600,"I've tested using Spring Framework 5.3.13 and the issue is no longer relevant.

Thanks again for your reply !"
600,1072347170,bclozel,103264,"The error seems to be located in this class, which is part of your codebase.

```
com.versa.vnms.cdbadaptor.cdbdao.CDBTemplateDAO.init(CDBTemplateDAO.java:677)
```

If you believe this is a bug, please comment this issue after creating a sample and minimal application (using start.spring.io), ideally something we can git clone or download. Thanks!"
601,1072353144,shrijasathya,52460724,"@PostConstruct
    **public void init() {**

The init method declaration is the line number it points to"
602,1072393739,bclozel,103264,"It looks like the Python dev server is [only registering the `*.mjs` extension](https://github.com/python/cpython/blob/d27af88c1bcf3c6c185f81218b7bf86b38128ea9/Lib/mimetypes.py#L431) and is relying on [known files](https://github.com/python/cpython/blob/d27af88c1bcf3c6c185f81218b7bf86b38128ea9/Lib/mimetypes.py#L48-L58) for the rest. This server is meant for development only and not for production usage. Well-known servers such as [nginx](https://github.com/nginx/nginx/blob/828fb94e1dbe1c433edd39147ba085c4622c99ed/conf/mime.types#L8), [httpd](https://svn.apache.org/viewvc/httpd/httpd/trunk/docs/conf/mime.types?view=markup#l145) or [Tomcat](https://github.com/apache/tomcat/blob/76b2641ae9704822b9446426e3f330ab45672a9f/java/org/apache/catalina/startup/MimeTypeMappings.properties#L385) do not support those extensions.

Given that [registering additional extensions is quite easy](https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-config-content-negotiation), I don't think we should add those entries here. The main goal here is to remain in sync with those well-known servers, so I'm declining this PR as a result.

Thanks!"
603,1072648913,chrylis,2394512,"I know that a PR to remove `SocketUtils` has already been merged, but I will make a note requesting a revert of the removal. Despite the comment in the Javadoc to ""rely on a server's ability to start on a random port"", the assumption that the external dependency _has_ such an ability is not well-founded; the DynamoDB Local server, in particular, does not have this feature, and I'm using `findAvailableTcpPort` for this purpose. The only suitable replacement will be to clone the code anyway.

As an alternative, would moving this to Spring Test be sensible?"
604,1073238686,sbrannen,104798,"@mp911de, can you please take a look at this?"
605,1073248531,sbrannen,104798,"@cdalexndr, is there an existing issue associated with this ""fix""?

If not, can you please add more information to this PR's description to explain the rationale and what error cases the proposed change fixes?"
606,1073249445,cdalexndr,22418250,@sbrannen updated description
607,1073252753,sbrannen,104798,"## Related Issues

- #11019
- #11897
- #17123
- #10789
- #12619
"
608,1073271784,sbrannen,104798,"Hi @chrylis,

Thanks for the feedback.

> As an alternative, would moving this to Spring Test be sensible?

We are considering introducing an alternative (with reduced scope) for testing scenarios only in `spring-test`. If so, it could potentially look similar to [TestSocketUtils](https://github.com/spring-projects/spring-framework/blob/main/spring-core/src/testFixtures/java/org/springframework/core/testfixture/net/TestSocketUtils.java), though the final API might be different.

We will continue to deliberate this and listen to community feedback."
609,1073522716,snicoll,490484,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
610,1073654774,mp911de,1035015,"`previousIsolationLevel` should have been removed with the R2DBC 0.9 upgrade, it's an oversight.

Before R2DBC 0.9, we set and reset the Isolation Level on the connection (same as with JDBC). With R2DBC 0.9, if we set the Isolation Level, then the isolation level is only valid for the duration of a transaction and we expect the driver to reset the Isolation Level after the transaction. This is part of the `begin(TransactionDefinition)` contract."
611,1074029194,sbrannen,104798,"Thanks for the feedback and explanation, @mp911de.

I'll remove the obsolete code."
612,1074141472,sbrannen,104798,Blocked until #28208 is implemented
613,1074141998,sbrannen,104798,Blocked until #28207 is implemented
614,1074160853,sbrannen,104798,Please note that the team plans to introduce `TestSocketUtils` in Spring Framework 5.3.18. See #28210 for details.
615,1074160974,sbrannen,104798,Please note that the team plans to introduce `TestSocketUtils` in Spring Framework 5.3.18. See #28210 for details.
616,1074180728,sbrannen,104798,"Hi @oliverlockwood,

Thanks for raising the issue. It may be a regression.

To help use analyze this, can you please provide a minimal sample application (or test class) that reproduces the `BeanNotOfRequiredTypeException` you are encountering (preferably as a Git repository that we can check out or a ZIP file that we can download and run)?
"
617,1074626262,chancekim,39732992,"Hi @bclozel !
Yes, even though it will be included in the 6.0.x, it must be helpful, not only me but the others."
618,1074808003,bclozel,103264,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
619,1074953792,ascopes,73482956,"Can confirm that this also occurs in UnsupportedMediaTypeStatusException as well, where the implementation package name is leaked in the error reason.

`415 UNSUPPORTED_MEDIA_TYPE ""Content type 'application/x-yaml' not supported for bodyType=org.example.MyModelName`"
620,1075079917,snicoll,490484,Actually I am having some second thoughts on this one. @jhoeller what do you think?
621,1075082825,snicoll,490484,"Ignoring the exception, this is the expected behaviour. Fully qualified name is expected as an input here so it should be `TypeReference.of(""java.lang.int"")`."
622,1075085255,sbrannen,104798,"After putting more thought into this, I wonder if it's best to end the fluent API with `from(...)` instead of a verb or command like `search(...)`, `searchFrom(...)`, etc.

`MergedAnnotations` already has various `from(...)` and `on(...)` methods, so the new fluent API cannot start with either of those.

@philwebb recommended all new factory methods in `MergedAnnotations` start with the same prefix to make them easily discoverable, which of course makes a lot of sense. So we were thinking of `find*` and `search*` as a reasonable, meaningful prefix for these new methods.

However, if the final action in the fluent API is a method named `search*(...)`, it seems a bit odd to have the first method called `find*(...)` or `search*(...)`.

So, another idea I'm tinkering with is starting with a single static factory method for ""search options"" like this:

```java
MergedAnnotations annotations = MergedAnnotations.searchOptions()
	.typeHierarchy()
	.repeatableContainers(myRepeatableContainers)
	.annotationFilter(myCustomAnnotationFilter)
	.search(myClass);
```

One additional (unplanned) benefit of that is that the `SearchOptions` ""builder"" instance could actually be saved and reused to perform `.search(...)` on different classes/methods. However, I'm not sure how useful that would be in practice."
623,1075299471,sbrannen,104798,"Current proposal, based on brainstorming sessions and taking #28207 into account:

```java
MergedAnnotations
	.search(searchStrategy)
	.withEnclosingClasses(ClassUtils::isInnerClass)
	.withRepeatableContainers(repeatableContainers)
	.withAnnotationFilter(annotationFilter)
	.from(myClass);
```"
624,1075313586,snicoll,490484,"damn it, thanks again @izeye!"
625,1075327298,philwebb,519772,"Ha, I was about to suggest this :)

```java
MergedAnnotations
	.searching(searchStrategy)
	.withEnclosingClasses(ClassUtils::isInnerClass)
	.withRepeatableContainers(repeatableContainers)
	.withAnnotationFilter(annotationFilter)
	.from(myClass);
```"
626,1075329043,philwebb,519772,"I think convenience search methods are also worth considering. `SearchStrategy` tends to be one of the more common things to want to define.

```java
MergedAnnotations.searchingTypeHierarchy().with...().from(myClass)
```"
627,1075346098,sbrannen,104798,"> I think convenience search methods are also worth considering.

We definitely considered that approach, but the choice of meaningful (_and_ concise) names becomes challenging for any `SearchStrategy` other than `TYPE_HIERARCHY`.

```java
MergedAnnotations
	// .searchDirect()
	// .searchInheritedAnnotations()
	// .searchSuperclass()
	.searchTypeHierarchy()
	.withEnclosingClasses(ClassUtils::isInnerClass)
	.withRepeatableContainers(repeatableContainers)
	.withAnnotationFilter(annotationFilter)
	.from(myClass);
```

The above seems too vague, and the following seems too verbose.

```java
MergedAnnotations
	// .findDirectlyDeclaredAnnotations()
	// .findInheritedAnnotations()
	// .findSuperclassAnnotations()
	.findAnnotationsInTypeHierarchy()
	.withEnclosingClasses(ClassUtils::isInnerClass)
	.withRepeatableContainers(repeatableContainers)
	.withAnnotationFilter(annotationFilter)
	.from(myClass);
```

In the end, @jhoeller and I decided that it's probably best to let the user supply a `SearchStrategy` and rely on the documentation for those enum constants to _explain_ things, since people are accustomed to the increasing scope of the strategies in the context of enums; whereas, it becomes a bit more cumbersome to infer that increasing scope based solely on method names like the ones in the two preceding examples.

But... if you have better ideas for how to name all 4 convenience methods, by all means speak up. 👍 
"
628,1075998763,snicoll,490484,"Thanks for the report but we can't really help you with the information you've shared. If you want support, please take the time to share a minimal sample that reproduces the problem you've described. You can share it with us as a zip attached to this issue or as a link to a GitHub repository."
629,1076000488,snicoll,490484,"We should ""infer"" the close method at build time rather than letting the container do this at runtime. As we're using reflection to invoke the method, that would miss a hint anyway."
630,1076038579,snicoll,490484,Thanks for the suggestion but post-processing bean definitions asynchronously is not possible at the moment. See also #13410
631,1076085056,sbrannen,104798,"What do you mean by “call this API”?

How are you invoking the API?

MockMvc, WebTestClient, …?"
632,1076442042,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
633,1076581450,snicoll,490484,Thanks for the report. This is a duplicate of #28110. Please upgrade to `5.3.17`.
634,1076583872,dylan-tao,13051685,"> Thanks for the report. This is a duplicate of #28110. Please upgrade to `5.3.17`.

Sorry, I did not see, just in the test found the existence of this problem, thank you!"
635,1076596208,dylan-tao,13051685,"> Thanks for the report. This is a duplicate of #28110. Please upgrade to `5.3.17`.

i‘m using spring-boot-2.5.10，BeanMap.create(obj) ref is my framework core. Please confirm date of the next release, thanks!"
636,1076732670,pivotal-cla,16822967,"@dillonm79 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28224)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28224) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
637,1076733753,pivotal-cla,16822967,@dillonm79 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28224)!
638,1076964877,matiaspakua,20072974,"Hello all, working on the same problem in a project with Spring, K8s on Azure platform, where we tried two alternatives: 

1) first we tried putting @Lazy annotation on the beans where we think caused the problem (not the best option), and

2) second [THE SOLUTION], reading the comments where a few folks mention the diferences building on Ubuntu desktop and Ubuntu server, we decided to try our docker image based on maven 3, jdk8 but with ""maven-alpine"" instead of ""maven-ubuntu"". This was the solution for us. We hope this will be helpful."
639,1077044945,Adamatoma,56331604,"> What do you mean by “call this API”?
> 
> How are you invoking the API?
> 
> MockMvc, WebTestClient, …?

Hi sbrannen,
Thanks for replying! 
I put this part of code into a controller file in a java web spring-boot project as an restful API.
Then use postman to send requeset to invoke this API.

Hope the following code example helpful
```
@RestController
@RequestMapping(value = ""/testurl/url"", produces = ""application/json"")
public class emailController {
    @GetMapping
    public String search(@RequestParam(defaultValue = """") String email) {
        System.out.println(""Email should be an empty string if not provided: "" + email);
        return email;
    }
}
```
Then call this api with postman with GET Http request with url like`127.0.0.1:8080/testurl/url`"
640,1077345159,mhmdsalem1993,10787314,"Any updates on this issue, if its a spring issue or a usage issue?
I've the same exception https://github.com/reactor/reactor-netty/issues/2115 also "
641,1077472507,membersound,5269630,"As a workaround, could you provide the ""optimal"" module configuration for spring with `jdeps` and `jlink`?
For example:

`--add-modules $(jdeps --ignore-missing-deps --print-module-deps application.jar),java.xml,java.desktop,java.instrument,java.management,java.naming,java.prefs,java.rmi,java.scripting,java.sql,jdk.httpserver,jdk.jfr,jdk.unsupported,java.security.jgss`

Am I missing something, or is anything obsolete?"
642,1077583053,dsyer,124075,It depends which features you need at runtime. E.g. see my examples above https://github.com/spring-projects/spring-framework/issues/26884#issuecomment-928948327 which both have fewer modules than yours.
643,1077589791,bclozel,103264,Thanks @quaff !
644,1077599405,snicoll,490484,"There is `ReflectionUtils#doWithLocalFields` that is public and that you can use for whatever you need.

Please note that the Javadoc of `ReflectionUtils` states that this class is only intended for internal use. As such, updates to it will be done based on our own needs."
645,1077638354,oliverlockwood,6017680,"Yes @sbrannen.

I have created repo https://github.com/oliverlockwood/spring-framework-issue-28209 which demonstrates this clearly.

It turns out that the error case requires an AOP annotation to be applied to the interface being implemented (in this case, I've used `@Retryable`).

Please let me know if you need any further information, but I think it should now be pretty clear."
646,1077706698,sbrannen,104798,"Great idea, @quaff. Thanks! 👍 "
647,1077738463,vy,72137,"@rstoyanchev, I have reviewed the commits so far and they look great! :100: Thanks so much for working on this issue. :bow: Given [our experiences with RFC 7807 I shared earlier](/spring-projects/spring-boot/issues/19525#issuecomment-857551764), I would like to share some remarks:

### Loss of information while deserializing `ProblemDetail`

`ProblemDetail` is encouraged to be extended and users (certainly, we) will extend it. Further, RFC 7807 itself is also pretty open about this. This said, the current class doesn't provide a way to capture the extra information while getting deserialized from an extended `ProblemDetail` class. Consider the following use case:

1. Server contains a `RichProblemDetail` extending `ProblemDetail` with a `String host` field. It emits this from an HTTP endpoint to the client.
1. Client receives the JSON and deserializes it to `ProblemDetail` – the information of `host` field is totally lost.

I suggest introducing a generic field (e.g., `Map<String, Object> attributes`) to capture the information of unknown fields.

### Public `ProblemDetail` methods

`ProblemDetail` is implemented as a mutable class with many utility methods. For a class that is expected to be extended, this imposes considerable mundane work that needs to be implemented by users. Further, current model implies implementation difficulties for users embracing immutable models. Implementing `ProblemDetail` as an interface instead can address all these shortcomings."
648,1077768717,keyzj,36663376,"> I have a prototype implementation that works (in Groovy, but easily translatable in Java) : however, this impl is just managing the streaming case (not the non-streaming case).

Hello! Could you please provide your prototype? I'd like to have a look :)"
649,1077769185,ericlacher,11710592,"I gave up on my approach, as extending classes does not seem to be a good way to resolve nested paths. Nevertheless, I think the combine method needs a fix."
650,1077788949,dylan-tao,13051685,but i need this method，otherwise there is no point in starting the precache.
651,1077860977,brunoborges,129743,"> I suppose it's an open question for the JDK why `jdeps` thinks you need all those other modules when actually you don't, at least for the ""normal"" code paths.

@dsyer this is because `jdeps` doesn't look at codepath, but at class library dependencies, which means ""we don't know, this might need this class, because the import is there, so there goes the module!"""
652,1077873817,sharma-abhishek2023,36045626,"@snicoll  The issue was resolved, it turns out because the consumer having Jackson2ObjectMapperBuilder made our Converter not visible to COnversion service, we removed the constructer and made ObjectMapper as a private variable and now it is working, hence closing the ticket, Thanks "
653,1077982853,membersound,5269630,"> It depends which features you need at runtime. E.g. see my examples above [#26884 (comment)](https://github.com/spring-projects/spring-framework/issues/26884#issuecomment-928948327) which both have fewer modules than yours.

Would the docker build fail if a module is missing that my application would required?
I mean, is it guaranteed the missing module is not just discovered later during runtime?
"
654,1078294203,dsyer,124075,Pretty sure it’s a runtime error. Why don’t you try it and report back?
655,1078438544,keyzj,36663376,"Hello!

I'm currently on 5.3.17 Spring version and experiencing the same performance issue: on the uploading of the large file (2.3 gb) it's parted into buffers of 1024 size, so it takes ages to upload it.
"
656,1078833295,snicoll,490484,@KangChanSong the cache that you mention is a cache of resolvable types. `ResolvableType` does not have a link to `ResponseEntity` so I am afraid I don't understand the report. Can you point to the code that you believe is caching `ResponseEntity` objects?
657,1078952245,dmak,366965,"I have discovered that `AspectJExpressionPointcut` holds thousands of entries in field `shadowMatchCache`. The given cache is not capped, so potentially (however highly unlikely) can cause OOM during startup. The possible improvement could be that `AspectJExpressionPointcut` listens on context events e.g. is `ApplicationListener` and empties the cache once the context is started.

![image](https://user-images.githubusercontent.com/366965/160114010-9440dc88-b706-4690-822b-557eef2339e3.png)
"
658,1079086492,sbrannen,104798,"Hi @hughwphamill,

Thanks for opening your first issue for the Spring Framework. 👍🏻

> If your business logic uses JPA entity listeners then your application can't be properly tested in a `@Transactional` test.

You can still test the behavior of your JPA lifecycle callback methods with `@Transactional` test methods, but you need to take into account the semantics of the unit of work (first level cache) in your ORM tool (i.e., the ""persistence context"" in JPA terminology).

This usually means that you need to _flush_ the state of the unit of work to the underlying database.

In the [Avoid false positives when testing ORM code](https://docs.spring.io/spring-framework/docs/current/reference/html/testing.html#testcontext-tx-false-positives) note in the Testing chapter of the reference manual, we point out that invoking `entityManager.flush()` will help you to achieve this with JPA.

For your particular test class, you can make the `@PostPersist`, `@PreUpdate`, and `@PostUpdate` tests pass by invoking `entityManager.flush()` after each invocation of `repository.save(entity)`. To make the `@PostLoad` test pass, you additionally need to invoke `entityManager.clear()` after calling `entityManager.flush()`.

In summary, the behavior you have encountered is to be expected since all interactions with the unit of work occur within the same transaction.

To ensure that your JPA lifecycle callback methods are invoked, you have two choices.

1. Flush and clear the unit of work as described above within a `@Transactional` test.
2. Do not use `@Transactional` tests.

I will add a note to the reference manual to point out the need to `flush` and `clear` when using JPA lifecycle callback methods, in case other developers encounter this issue.
"
659,1079147363,sbrannen,104798,"> Are there better ways to test this?

Are you familiar with `org.springframework.test.web.servlet.result.ContentResultMatchers.contentTypeCompatibleWith(MediaType)` and `org.springframework.http.MediaType.isCompatibleWith(MediaType)`?"
660,1079208672,sbrannen,104798,"Thanks for creating the repo, @oliverlockwood. Much appreciated.

We'll look into it."
661,1079248940,rstoyanchev,401908,"@vy thanks for the review and comments. 

For `ProblemDetail` extensions, my thought was that sub-classes will use Jackson's `@JsonTypeInfo` (or similar) like is done in Zalando for example, but I've yet to confirm this end to end, which will be the goal for #28190. I suspect we might need an interface for a ""mix-in"" but I'm not sure until I try. I'm also thinking on the client side there could be an option to specify the class to deserialize to.

For `Map<String, Object> attributes`, it adds a level of nesting with an ""attributes"" key, which for once reveals a framework detail, and generally leads to questions about how to customize or eliminate this. An application might then try to add Jackson's `@JsonUnwrapped` which brings us back to extending.

For mutability, indeed immutable would be my preferred choice, but I'm just thinking, (de-)serialization friendliness aside, that the case here is rather specific. We're talking about an exception type, or a type carried within an exception that short-circuits regular handling and follows a straight line towards being serialized to the response body. Moreover, there are already reasons to allow mutability, such as when a `ResponseErrorException` is extended, or handled in places like `ResponseEntityExceptionHandler`. It doesn't feel like there are strong reasons against this while it certainly simplifies the situation in terms of (de-)serializing and extensions.
"
662,1079262801,fabianlem,4151213,"@sbrannen thanks for the quick reply
This is what I'm testing:
```
assertEquals(MediaType.APPLICATION_JSON_VALUE, response.getContentType());
```
### Sol 1: org.springframework.test.web.servlet.result.ContentResultMatchers.contentTypeCompatibleWith(MediaType)

Works!
```
MvcResult result = mockMvc.perform(get(""/{foo}/bar"", ""foo"")
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andReturn();
```

### Sol 2: org.springframework.http.MediaType.isCompatibleWith(MediaType)

Works!
```
assertTrue(MediaType.parseMediaType(response.getContentType()).isCompatibleWith(MediaType.APPLICATION_JSON));
//OR
assertTrue(MediaType.APPLICATION_JSON.isCompatibleWith(MediaType.parseMediaType(response.getContentType())));
```
#### Some thoughts

Although both solutions work, there is a lot of processing going on to get the MimeType from the response contentType
https://github.com/spring-projects/spring-framework/blob/5.3.x/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java#L198

it may be more performant to do something like this:
```
assertTrue(request.getContentType().contains(MediaType.APPLICATION_JSON_VALUE)
```

Though both solutions work it seems like there is too much overhead to get the `contentType`, because we already had it in the response at some point. I wonder if appending the character encoding by default is the most appropriate approach? 
Getting the contentType from the response header gives the same concatenated contentType.

I would advocate for a way to retrieve the contentType by itself as it was previously possible.
I think a better solution would be to append the character encoding in this method: MockHttpServletRequest.getContentTypeAsString 
As it stands the current implementation of `Request#getContentType` in spring-test is not representative of the behavior on spring-web

##### Other relevant observations
Using the result matcher in MockMvc also doesn't work. The issue here is that the expected MediaType is getting deprecated.
Example:
```
MvcResult result = mockMvc.perform(get(""/{foo}/bar"", ""foo"")
                .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8))
                .andReturn();
```

```
        public ResultMatcher contentType(MediaType contentType) {
		return result -> {
			String actual = result.getResponse().getContentType();
			assertNotNull(""Content type not set"", actual);
			assertEquals(""Content type"", contentType, MediaType.parseMediaType(actual));
		};
	}
```
https://github.com/spring-projects/spring-framework/blob/5.3.x/spring-test/src/main/java/org/springframework/test/web/servlet/result/ContentResultMatchers.java#L86
"
663,1079428690,rstoyanchev,401908,"Please, don't create additional issues for existing issues."
664,1079823601,pivotal-cla,16822967,"@lxbzmy Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28236)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28236) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
665,1079824219,pivotal-cla,16822967,@lxbzmy Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28236)!
666,1079894771,bclozel,103264,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
667,1080056709,KangChanSong,76604142,"This is a stack trace where `ResponseEntity` object is cached in to `ConcurrentReferenceHashMap`
![스크린샷 2022-03-28 오전 9 21 42](https://user-images.githubusercontent.com/76604142/160308037-fb648d76-5866-4ae9-8ad1-6d379da3fa36.png)


And another screenshot of a ResponseEntity  object and its incoming reference tree

<img width=""789"" alt=""스크린샷 2022-03-28 오전 9 18 36"" src=""https://user-images.githubusercontent.com/76604142/160307919-1ec04b0e-9d08-4d8f-9e9d-1cb89dcadb50.png"">

"
668,1080365427,hughwphamill,8106091,@sbrannen Thanks very much for the detailed explanation and for updating the docs!
669,1080575616,djouvin,74497327,"Here is the groovy code I used.
Note that to consume properly you should use concatMap with a 0 prefetch
[StreamingPartGenerator.zip](https://github.com/spring-projects/spring-framework/files/8362485/StreamingPartGenerator.zip)
."
670,1080687495,pivotal-cla,16822967,"@lifei-zhang-awx Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28242)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28242) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
671,1080689127,pivotal-cla,16822967,@lifei-zhang-awx Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28242)!
672,1080735311,sbrannen,104798,"Hi @lifei-zhang-awx,

Thanks for submitting your first PR to the Spring Framework.



> In XML file, the property name is 'integerProperty' while the field in the code is 'i'.

Setter injection in XML configuration is based on JavaBeans property naming conventions.

The property name is the name in the setter method, not the name of the field.

```java
    public void setIntegerProperty(int i) {
        this.i = i;
    }
```

Thus, the example XML configuration is correct as it is now.

In light of that that, I am closing this PR."
673,1080758202,mf81bln,1148067,"@poutsma 

We had an issue with Spring Boot 2.6.4 / Framework 5.3.16 on DST switch yesterday (March 27)
We're using a simple `TaskScheduler` bean and a method annotated with `@Scheduler(cron = ""0 30 2 * * ?"")`

The execution was just skipped when time was jumping from 2am to 3am. I've tried to...

- add the time zone to the taskScheduler
```
    @Bean
    public TaskScheduler taskScheduler(final TaskSchedulerBuilder taskSchedulerBuilder)
    {
        return taskSchedulerBuilder
            .poolSize(10)
            .customizers(taskScheduler -> taskScheduler.setClock(Clock.system(ZoneId.of(""Europe/Zurich""))))
            .build();
    }
```
-  add zone property to `@Scheduled`
```
    @Scheduled(cron = ""0 30 2 * * ?"", zone = ""Europe/Zurich"")
    public void run() { ... }
```

Both didn't work - tried it by resetting system time to 01:59:30am.

During debugging I found `CronTrigger.nextExecutionTime()` always returning `2022-03-28T02:30:00+02:00`
Is there anything else I have to configure so that the execution is not just skipped? Or do I need a custom handling for this?

I've checked documentation as well as previous issues / fixes and couldn't find any specifics on how to properly handle this scenario where an execution falls into the ""skipped"" time frame between 2am ... 3am


// edit:
I've also tried it with the newest versions Spring Boot 2.6.5 / Framework 5.3.17 (because [this](https://github.com/spring-projects/spring-framework/issues/28095) was fixed) and resetting the time of my machine to March 27, 01:59:30 - the execution was skipped again"
674,1080788809,rstoyanchev,401908,"The Java/Jakarta EE WebSocket API did not make it possible to initiate a WebSocket handshake at runtime and we've had to find ways to do it on each container. The way we did it on Jetty 9 made it possible to do what you want to do. However, the Jetty WebSocket API in Jetty changed significantly from 9 to 10, and we had to change too, even request an API change to enable what we needed to do, see https://github.com/eclipse/jetty.project/issues/5866. Now we're using the new API and the upgrade requires access to the `ServletContext`. You can [see the same](https://github.com/spring-projects/spring-framework/blob/50973f73c70723198752d6ded3ad6af2c05b5674/spring-websocket/src/main/java/org/springframework/web/socket/server/jetty/JettyRequestUpgradeStrategy.java#L66-L100) in the `main` branch which compiles against Jetty 10 and does not need reflection, i.e. this is not related to the use of reflection.

I'm afraid I don't know what else we can do about this. It's what we have to do in order to upgrade on Jetty 10+. I also don't know what your application does with WebSocket (STOMP, raw WebSocket, etc) to be able to suggest other changes like using WebFlux or otherwise dropping on a lower level, but I don't see any easy answers.
"
675,1080796236,sbrannen,104798,"@hughwphamill, you're welcome!

And thanks for providing feedback."
676,1080892243,rstoyanchev,401908,"@ekuleshov apologies for the delay. I have been able to reproduce this and the issue seems to be related to the client acceptor not being able to read anything from the `SETUP` payload. This is for any client acceptor, and it's reproducible with just RSocket Java. I've created https://github.com/rsocket/rsocket-java/issues/1045 to supersede this one.

Thanks for the report!"
677,1080940832,Tockra,1353859,"I run into the same issue.
Did you find a work around for it?
"
678,1081465306,snicoll,490484,"I can see that we have a `MethodParameter` implementation, `ReturnValueMethodParameter`, that keeps a reference to the actual return value. Spring HATEOAS seems to be using `ResolvableType#forMethodParameter` passing the actual `MethodParameter` implementation.

If the type is using `MethodParameterTypeProvider` I can see how that could have the side effect of keeping the return value in the cache there."
679,1081548070,Aliaksie,16516462,"+1 
Any progress here? :)
"
680,1081549096,jhoeller,1263688,"Indeed, and `ReturnValueMethodParameter` does not even do anything with the value itself, just obtaining the return value type on demand. Let's change this to a `ReturnTypeMethodParameter` that just holds on to the pre-determined value type."
681,1081570097,rstoyanchev,401908,Could you re-attach the demo project? The link is no longer working.
682,1081581042,poutsma,330665,"@mf81bln Please create a new issue instead of commenting on older, resolved issues. Feel free to ping me on said new issue.

FWIW, this works fine for me:
```java
cronExpression = CronExpression.parse(""0 30 2 * * ?""); // 01:59:30am
last =     ZonedDateTime.parse(""2022-03-26T01:59:30+01:00[Europe/Zurich]"");
expected = ZonedDateTime.parse(""2022-03-26T02:30:00+01:00[Europe/Zurich]"");
actual = cronExpression.next(last);
assertThat(actual).isEqualTo(expected);
```"
683,1081630112,rstoyanchev,401908,"Considering this is an old issue, today we would expect this to be declared in Java config. Can you clarify if this is still relevant and if so why? Generally, we don't intend to add additional attributes to the XML namespace."
684,1081642792,rstoyanchev,401908,Scheduling for 6.0 with a chance to explore a backport to 5.3.x.
685,1081660497,rstoyanchev,401908,"@rbri thanks for the analysis and proposals. Yes, it would be great to encapsulate this better within HtmlUnit and we'll work with you to use the new API. Ideally, we'd be able to detect the new API and use it conditionally for now, through reflection, in order to avoid a hard requirement for the HtmUnit version and allow a more lenient upgrade.

I'll re-purpose this issue to explore this change. Please, let us know when you have something we can experiment with."
686,1081661484,meme-lau,10671821,没事
687,1081711340,sbrannen,104798,"> Presently [DataClassRowMapper](https://github.com/spring-projects/spring-framework/blob/5.3.x/spring-jdbc/src/main/java/org/springframework/jdbc/core/DataClassRowMapper.java#L101) appears to _assume_ that all database columns use `snake_case`

This is by design.

`DataClassRowMapper` extends `BeanPropertyRowMapper`, and the class-level Javadoc for `BeanPropertyRowMapper` states:

> Column values are mapped based on matching the column name as obtained from result set meta-data to public setters for the corresponding properties. The names are matched either directly or by transforming a name separating the parts with underscores to the same name using ""camel"" case.
> 
> ...
> 
> To facilitate mapping between columns and fields that don't have matching names, try using column aliases in the SQL statement like `select fname as first_name from customer`.
> 
> ...
> 
> Please note that this class is designed to provide convenience rather than high performance. For best performance, consider using a custom `RowMapper` implementation.
>  "
688,1081723527,rbri,2544132,"@rstoyanchev sounds great, will update the current snapshot build and introduce a new method. Then you can check for the existence of this public method.
OK?
"
689,1081736920,valh1996,20521112,"Hi @Tockra & @Aliaksie,

My temporary solution is to protect these POST/PUT routes in a custom `WebSecurityConfigurerAdapter` using mvcMatchers : 
```java
@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true )
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        // code
        
        
        // Entry points
        http.authorizeRequests()
                .mvcMatchers(HttpMethod.PUT, ""/v1/users/{userId}"")
                    .access(""hasAnyRole('ADMIN', 'HR') or (hasAnyRole('CANDIDATE', 'EMPLOYEE') and @authorizationComponent.canEditUser(principal, #userId))"")

                .anyRequest().authenticated();
     
       // Apply JWT
        http.apply(new JwtTokenFilterConfigurer(jwtTokenProvider));
    }
}
```"
690,1081757172,jhoeller,1263688,"There is indeed a design convention for either the lower-cased name matching directly or the underscored name matching. However, this seems to be inconsistently implemented for constructor argument resolution in `DataClassRowMapper` where only the underscored naming is actually applied. I'll align this for 5.3.18."
691,1081793268,mf81bln,1148067,"@poutsma Sorry and thanks for your answer, I've created a new issue 👍 

Your example works because it's running on March 26, switch to DST happened on Sunday, March 27"
692,1081797729,mf81bln,1148067,"Addition:

cron under linux handles jobs falling in the skipped timeframe between 02:00:00am - 02:59:59am by running it immediately after the switch.

I'm looking either for a way to do/configure the same with a Scheduler (if it's not the default behaviour) or to configure how this should be handled, e.g. ""run the job at 03:30:00+02:00""."
693,1081818716,Tockra,1353859,"Okay, thank you valh. 
I know, that I can do the authentification there, but I would like to continue to use the @PreAuthorize feature.
I built following (not clear) solution.
I wrote a class ""ValidatorService"" which seems like this:
```java

@Service
@Validated
public class ValidateService {
    public MyDtoToValidate springValidation(@Valid final MyDtoToValidate myDtoToValidate) {
        return myDtoToValidate;
    }
}
```

Controller:
```java
// Autowire this.validateService
   @GetMapping(value = """")
   @PreAuthorize(""hasAuthority('SOME_RIGHT')"")
    public void exampleEndpoint(@RequestBody final MyDtoToValid dto) {
         this.validationService.springValidation(dto);

         // do stuff
    }
```

I write a own springValidation method for each dto. That works in java.

€dit: With a little bit generic magic you don't need to add own methods to the validatorService:

```java
@Service
@Validated
public class ValidateService {
    public <T> T springValidation(@Valid final T body) {
        return body;
    }
}
```
"
694,1081829513,valh1996,20521112,"> Okay, thank you valh. I know, that I can do the authentification there, but I would like to continue to use the @PreAuthorize feature. I built following (not clear) solution. I wrote a class ""ValidatorService"" which seems like this:
> 
> ```java
> @Service
> @Validated
> public class ValidateService {
>     public MyDtoToValidate springValidation(@Valid final MyDtoToValidate myDtoToValidate) {
>         return myDtoToValidate;
>     }
> }
> ```
> 
> Controller:
> 
> ```java
> // Autowire this.validateService
>    @GetMapping(value = """")
>    @PreAuthorize(""hasAuthority('SOME_RIGHT')"")
>     public void exampleEndpoint(@RequestBody final MyDtoToValid dto) {
>          this.validationService.springValidation(dto);
> 
>          // do stuff
>     }
> ```
> 
> I write a own springValidation method for each dto. That works in java.

This solution adds code and complicates things unlike the one I propose. The disadvantage is that there are role checks in two different places (in the controllers and in this file), but I think it's still better than adding an extra layer that adds maintenance."
695,1081838938,Tockra,1353859,"> two different places (in the controllers and in this file), but I think it's still better than adding an extra layer that adds maintenance.

I don't know. There is no further complex functionality. There is just one additional class and one simple method for each dto. It seems to be manageable. 
You need to add a seperate line in the controller method and a method, which has no functionality, but causes the @Valid check after the authorization check in the controller method. This is a small bunch of additional work, but fits better in our roles and rights concept than moving the check to the security class."
696,1081876744,sbrannen,104798,"This has been merged into `main` in 7f7fb58dd0dae86d22268a4b59ac7c72a6c22529 and polished in c8d0146bccf6c9089aed020fb629d3a1f36aea60.

The ""warning"" without official deprecation has also been backported to `5.3.x` (see #28246).

Thanks"
697,1081925283,ropoman,6105301,"	// Sunday at 4 am
	@Scheduled(cron = ""0 0 4 * * 0"")
	public boolean weeklyRun() {
I was surprised that my weekly cleanup run was not called. spring-boot-starter-parent 2.4.2"
698,1081931949,archiecobbs,545866,"> Generally, we don't intend to add additional attributes to the XML namespace.

OK then don't :) It won't hurt my feelings. This issue is a minor detail and not worth the trouble.

FWIW I still like to use XML for configuration. There is still value in being ""declarative"". Also I have a bunch of legacy code still using XML. It's nice when that code continues to function.

Thanks."
699,1081955721,sbrannen,104798,"> It turns out that the error case requires an AOP annotation to be applied to the interface being implemented (in this case, I've used `@Retryable`).

It's not because of the use of an annotation. Rather, the AOP advice for `@Retryable` makes use of an _introduction_ (i.e., it introduces the `org.springframework.retry.interceptor.Retryable` marker interface to the proxy), and the fix for #27971 does not take this into account.

That's why the diagnostics generated by Spring Boot include the following.

```
The bean is of type 'jdk.proxy2.$Proxy64' and implements:
	org.springframework.retry.interceptor.Retryable
	org.springframework.aop.SpringProxy
	org.springframework.aop.framework.Advised
	org.springframework.core.DecoratingProxy
```

Here we see that `org.springframework.retry.interceptor.Retryable` is included in the set of interfaces implemented by the proxy, but the lambda interface (`com.oliverlockwood.springframework.issue28209.ExampleInterface`) is not."
700,1081989112,bclozel,103264,"Could you open this issue against [Spring Security's issue tracker](https://github.com/spring-projects/spring-security/issues)?
Thanks!"
701,1081996004,doublewaters,35893428,what's wrong with it
702,1081997724,thisiswanghy,20765679,More details please
703,1082005667,PlexPt,15922823,JNDI Injection Vulnerability
704,1082016175,bclozel,103264,"If you'd like to report a security issue, please report it responsibly with the dedicated page: https://spring.io/security-policy"
705,1082166767,rbri,2544132,"Have made a new snapshot build - 2.61.0-SNAPSHOT.
There is a new method

    com.gargoylesoftware.htmlunit.WebRequest.getParameters()

    public List<NameValuePair> getParameters()

This method returns always all parameters used bei HtmlUnit when executing the web request (at least if i have done everything right).

From my point of view you have to skip the processing of uriComponents.getQueryParams() if you use the new method. The second loop on this.webRequest.getRequestParameters() has to be replaced by this.webRequest.getParameters().

@rstoyanchev Please try and report any findings / incompatibilities.
Will try to write some more unit tests to prove my impl.

"
706,1082230846,madorb,823868,"Thanks @jhoeller  - you mention ""lower-cased"" name matching directly, which is slightly different than what the documentation says `The names are matched either directly or by...`

if i have a class property and database column with exactly matching, but non-lowercase, names e.g. in my example above, would that still not be supported? "
707,1082517398,pygmalion0909,52371261,@heesuk-ahn Thank you! I solved it!
708,1082588346,Tomator01,43985073,when report  this cve?
709,1082703253,tukez,5762429,"We have a similar problem with Vavr collections. Right now we have a very ugly workaround, but I wonder if there is currently an easier way to solve this. Definitely needs an improvement.

Workaround:

```java
public class BaseEnableWebMvcConfig extends DelegatingWebMvcConfiguration {

    @Override
    protected RequestMappingHandlerAdapter createRequestMappingHandlerAdapter() {
        return new RequestMappingHandlerAdapter() {

            @Override
            protected InitBinderDataBinderFactory createDataBinderFactory(List<InvocableHandlerMethod> binderMethods) throws Exception {
                return new ServletRequestDataBinderFactory(binderMethods, getWebBindingInitializer()) {

                    @Override
                    protected ServletRequestDataBinder createBinderInstance(@Nullable Object target,
                                                                            String objectName,
                                                                            NativeWebRequest request) throws Exception {
                        return new ExtendedServletRequestDataBinder(target, objectName) {

                            @Override
                            protected AbstractPropertyBindingResult createDirectFieldBindingResult() {
                                var result = new VavrSupportingDirectFieldBindingResult(getTarget(),
                                                                                        getObjectName(),
                                                                                        isAutoGrowNestedPaths());
                                if (getConversionService() != null) {
                                    result.initConversion(getConversionService());
                                }
                                if (getMessageCodesResolver() != null) {
                                    result.setMessageCodesResolver(getMessageCodesResolver());
                                }
                                return result;
                            }

                        };
                    }

                };
            }

        };
    }

    public static class VavrSupportingDirectFieldBindingResult extends DirectFieldBindingResult {

        private static final long serialVersionUID = 1L;

        public VavrSupportingDirectFieldBindingResult(Object target, String objectName, boolean autoGrowNestedPaths) {
            super(target, objectName, autoGrowNestedPaths);
        }

        public VavrSupportingDirectFieldBindingResult(Object target, String objectName) {
            super(target, objectName);
        }

        @Override
        protected ConfigurablePropertyAccessor createDirectFieldAccessor() {
            if (getTarget() == null) {
                throw new IllegalStateException(""Cannot access fields on null target instance '"" + getObjectName() +
                                                ""'"");
            }
            return new VavrSupportingDirectFieldAccessor(getTarget());
        }

    }

    /**
     * Adapted from {@link DirectFieldAccessor} to support convert Vavr collections to JDK collections because only they
     * are supported in the base class ({@link AbstractNestablePropertyAccessor}) and the behaviour is hard to
     * override/extend.
     */
    private static class VavrSupportingDirectFieldAccessor extends AbstractNestablePropertyAccessor {

        private final Map<String, FieldPropertyHandler> fieldMap = new HashMap<>();

        public VavrSupportingDirectFieldAccessor(Object object) {
            super(object);
        }

        protected VavrSupportingDirectFieldAccessor(Object object,
                                                    String nestedPath,
                                                    VavrSupportingDirectFieldAccessor parent) {
            super(object, nestedPath, parent);
        }

        @Override
        @Nullable
        protected FieldPropertyHandler getLocalPropertyHandler(String propertyName) {
            FieldPropertyHandler propertyHandler = this.fieldMap.get(propertyName);
            if (propertyHandler == null) {
                Field field = ReflectionUtils.findField(getWrappedClass(), propertyName);
                if (field != null) {
                    propertyHandler = new FieldPropertyHandler(field);
                    this.fieldMap.put(propertyName, propertyHandler);
                }
            }
            return propertyHandler;
        }

        @Override
        protected VavrSupportingDirectFieldAccessor newNestedPropertyAccessor(Object object, String nestedPath) {
            return new VavrSupportingDirectFieldAccessor(object, nestedPath, this);
        }

        @Override
        protected NotWritablePropertyException createNotWritablePropertyException(String propertyName) {
            PropertyMatches matches = PropertyMatches.forField(propertyName, getRootClass());
            throw new NotWritablePropertyException(getRootClass(),
                                                   getNestedPath() + propertyName,
                                                   matches.buildErrorMessage(),
                                                   matches.getPossibleMatches());
        }

        private class FieldPropertyHandler extends PropertyHandler {

            private final Field field;

            public FieldPropertyHandler(Field field) {
                super(field.getType(), true, true);
                this.field = field;
            }

            @Override
            public TypeDescriptor toTypeDescriptor() {
                return new TypeDescriptor(this.field);
            }

            @Override
            public ResolvableType getResolvableType() {
                return ResolvableType.forField(this.field);
            }

            @Override
            @Nullable
            public TypeDescriptor nested(int level) {
                return TypeDescriptor.nested(this.field, level);
            }

            @SuppressWarnings(""rawtypes"")
            @Override
            @Nullable
            public Object getValue() throws Exception {
                try {
                    ReflectionUtils.makeAccessible(this.field);
                    Object value = this.field.get(getWrappedInstance());
                    if (value instanceof io.vavr.collection.Seq) {
                        return ((io.vavr.collection.Seq) value).toJavaList();
                    }
                    if (value instanceof io.vavr.collection.Set) {
                        return ((io.vavr.collection.Set) value).toJavaSet();
                    }
                    if (value instanceof io.vavr.collection.Map) {
                        return ((io.vavr.collection.Map) value).toJavaMap();
                    }
                    return value;
                } catch (IllegalAccessException ex) {
                    throw new InvalidPropertyException(getWrappedClass(),
                                                       this.field.getName(),
                                                       ""Field is not accessible"",
                                                       ex);
                }
            }

            @Override
            public void setValue(@Nullable Object value) throws Exception {
                try {
                    ReflectionUtils.makeAccessible(this.field);
                    this.field.set(getWrappedInstance(), value);
                } catch (IllegalAccessException ex) {
                    throw new InvalidPropertyException(getWrappedClass(),
                                                       this.field.getName(),
                                                       ""Field is not accessible"",
                                                       ex);
                }
            }
        }

    }

}
```"
710,1082777728,snicoll,490484,By implementing `CachingConfigurer`. I can see that the reference documentation can be improved there.
711,1082781260,ledoyen,6298315,"@Tomator01 This is not a CVE per se.

Using this tool to handle user input data can lead to a CVE.
However using it internally as `CacheResultInterceptor` was, will not result in a CVE."
712,1082782376,sbrannen,104798,"This is not a CVE in the core Spring Framework.

The purpose of this change is to inform anyone who had previously been using `SerializationUtils#deserialize` that it is dangerous to deserialize objects from untrusted sources.

The core Spring Framework does not use `SerializationUtils` to deserialize objects from untrusted sources.

If you believe you have discovered a security issue, please report it responsibly with the dedicated page: https://spring.io/security-policy

And please refrain from posting any additional comments to this commit.

Thank you"
713,1082788846,snicoll,490484,"So there are two requests here, really. The original one is about changing the defaults when importing dedicated XML configurations. Each XML file is self-contained and we have no desire to change that at this point.

The other request is about changing all beans to be lazy (typically in integration tests). The `BeanFactroyPostProcessor` above is a good solution for this (the method could be `static` though). Spring Boot has a similar solution that is exposed via the `spring.main.lazy-initialization` property."
714,1082793220,snicoll,490484,"We have no plans to deprecate and/or remove xml configuration, but we don't plan to make additional changes to it so I am going to close this."
715,1082795555,snicoll,490484,Spring Framework `5.3.x` is building against Java 8 and `Method.isAccessible` is not deprecated in this version. `canAccess` has been introduced in Java 9 so we can't use it.
716,1082809961,linghengqian,20187731,"If I understand correctly, this is the same usage as `extends CachingConfigurerSupport` which is outdated on Spring 6. If you search for `CachingConfigurerSupport`, you will get a lot of integration information related to `Ehcache 3`."
717,1082825132,starriesWEB,73122677,"Because I didn't see it on the official website docs, but it's solved now, thanks

> 通过实施`CachingConfigurer`. 我可以看到可以在那里改进参考文档。

"
718,1082832945,poutsma,330665,"@milios On 5.3.17, that test runs fine. There have many `CronExpression` fixes since 5.3.12, specifically #28038 comes to mind. "
719,1082926389,artem-smotrakov,19523081,Hi @sbrannen Does this address [CVE-2022-22963](https://tanzu.vmware.com/security/cve-2022-22963)?
720,1083198146,sdeleuze,141109,"@snicoll Could you please have a look to [this draft branch](https://github.com/sdeleuze/spring-framework/commits/runtime-hints-refinements) where:
 - I made reachable type mandatory by introducing condition since more could come later (see [related commit](https://github.com/sdeleuze/spring-framework/commit/e7a94d990933c342990bb287650b153dbd0fb1c2))
 - I added reachable type to `ResourceHints` as well (see [related commit](https://github.com/sdeleuze/spring-framework/commit/4a6ab943952a57089ef0b73d28eb00fd4ff028a1))

If you test it with sample native application, notice [GraalVM 22.1-dev](https://github.com/graalvm/graalvm-ce-dev-builds/releases) is required since GraalVM 22.0 is broken for some kind of conditional configuration."
721,1083211704,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
722,1083289448,sbrannen,104798,"> Does this address [CVE-2022-22963](https://tanzu.vmware.com/security/cve-2022-22963)?

No. That CVE is specific to Spring Cloud Function. See the corresponding [blog post](https://spring.io/blog/2022/03/29/cve-report-published-for-spring-cloud-function) for details.

"
723,1083519146,artem-smotrakov,19523081,"@sbrannen Oh sorry, I meant CVE-2022-22950 in Spring Framework. Does [this commit](https://github.com/spring-projects/spring-framework/commit/83ac65915871067c39a4fb255e0d484c785c0c11) address CVE-2022-22950?"
724,1083553691,victordfb,456180,I'm having the same issue here. It would be nice to have such feature. 
725,1084020237,rui-zhou-phx,97010056,with tomcat 9.0.58 I still saw this error
726,1084171105,LaSylv,14371287,Maybe dig around `@RecordApplicationEvents`/ `org.springframework.test.context.event.ApplicationEvents` ?
727,1084354670,wuaoya,45376267,Where can I check the version comparison of spring framework corresponding to spring boot，thank you.
728,1084373608,magJ,1804354,"@wuaoya There are a few ways to see which version of spring, a given version of spring-boot depends on.
One way is to use a website like mvnrepository.com, which lets you search and view maven dependency metadata.

Click on your version of spring-boot: https://mvnrepository.com/artifact/org.springframework.boot/spring-boot
Then on the artifact page, look at the version of spring-core referenced in the compile dependencies
https://mvnrepository.com/artifact/org.springframework.boot/spring-boot/2.6.5
![image](https://user-images.githubusercontent.com/1804354/161032661-426a8d39-ad54-4da3-9887-a7b4f45c76d1.png)
"
729,1084385841,yichanggeng,32290597,"This problem still exists in version 5.3.9。
""/a/spring/io"" match ""/a/{*var}"" result is var=""/spring/io"" , the ""/"" still exists"
730,1084391979,astiob,515193,"That’s (apparently) intentional and documented. This problem report was resolved by fixing the documentation (adding the missing slash), not changing the behaviour."
731,1084392268,yichanggeng,32290597,已经收到您的邮件！谢谢
732,1084444901,bclozel,103264,The team takes care of backporting issues. Thanks for the offer though!
733,1084445734,rstoyanchev,401908,@magJ are you on JDK 9+?
734,1084460260,luozhenyu,16633830,"> @magJ are you on JDK 9+?

@rstoyanchev Spring framework 4.3.x is widely used for years and some people upgrade JDK 8 to 11 to get better performance."
735,1084463234,magJ,1804354,"@rstoyanchev Yes, we have at least some projects that are using spring 4.x running on JDK 9+"
736,1084469683,Artur-,260340,If this is not backported then we and and/or somebody else will be forced to fork Spring 4 and release a custom version. Does not sound tempting
737,1084492488,pivotal-cla,16822967,"@lianyiwuming Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28264)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28264) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
738,1084505628,artem-smotrakov,19523081,"Hi @rstoyanchev Does this [address](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) the recent [vulnerability](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement) in Spring Framework?

Is Spring Framework 3.x vulnerable? I see the code is quite [similar](https://github.com/spring-projects/spring-framework/blob/v3.2.17.RELEASE/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java#L306)."
739,1084509902,bclozel,103264,"All dependencies are listed in the reference documentation of each Spring Boot release.

Here is the latest one: https://docs.spring.io/spring-boot/docs/current/reference/html/dependency-versions.html#appendix.dependency-versions"
740,1084513459,pivotal-cla,16822967,"@tubbynl Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28265)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28265) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
741,1084514442,pivotal-cla,16822967,@tubbynl Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28265)!
742,1084518932,jhoeller,1263688,"Please note that Spring Framework 4.x was *never* officially supported on a JDK higher than 8, not in open source and not for commercial support arrangements either. The official support range is JDK 6-8: https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Versions - running it on a newer JDK version is technically possible for certain scenarios, but anyone doing so has always been on their own in terms of support.

Also, Spring Framework 4.3.30 (the latest release before 4.x EOL) is on a December 2020 security patch level. Continued usage of that version misses out on 15 months of vulnerability patches and defensiveness measures that we applied to 5.x in the meantime. A patched version for the present CachedIntrospectionResults change would cover this particular attack vector on the unsupported JDK 9+ but might still keep you exposed to other vulnerabilities even in supported areas of the framework.

For older Spring versions, we strategically suggest an upgrade to 5.3.x, or tactically a workaround as suggested in our blog post: https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement"
743,1084523537,luozhenyu,16633830,"> Please note that Spring Framework 4.x was _never_ officially supported on a JDK higher than 8, not in open source and not for commercial support arrangements either. The official support range is JDK 6-8: https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Versions - running it on a newer JDK version is technically possible for certain scenarios, but anyone doing so has always been on their own in terms of support.
> 
> Also, Spring Framework 4.3.30 (the latest release before 4.x EOL) is on a December 2020 security patch level. Continued usage of that version misses out on 15 months of vulnerability patches and defensiveness measures that we applied to 5.x in the meantime. A patched version for the present CachedIntrospectionResults change would cover this particular attack vector on the unsupported JDK 9+ but might still keep you exposed to other vulnerabilities even in supported areas of the framework.
> 
> For older Spring versions, we strategically suggest an upgrade to 5.3.x, or tactically a workaround as suggested in our blog post: https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement

@jhoeller A bit disappointed but agree with you. I will upgrade to the latest version."
744,1084549410,dicer,219524,@artem-smotrakov  See https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement
745,1084550244,Artur-,260340,"> For older Spring versions, we strategically suggest an upgrade to 5.3.x, or tactically a workaround as suggested in our blog post: https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement

Thanks, if the ""workaround"" is actually a solution that solves the problem for users of older versions then we can probably survive with that for the cases where an upgrade is not possible (because of good or bad reasons)."
746,1084550565,artem-smotrakov,19523081,Hi @dicer My question is exactly about this announcement :) I am looking for a commit that fixe this issue.
747,1084552798,jhoeller,1263688,"@artem-smotrakov please note that the vulnerability only materializes on JDK 9+, and Spring Framework 3.x predated JDK 9+ by several years and did not even have full JDK 8 support yet. Running such old versions of Spring on a newer JDK version is technically possible for certain scenarios, but anyone doing so is on their own in terms of support.

Also, Spring Framework 3.2.18 (the latest release before 3.x EOL) is on a December 2016 security patch level. Continued usage of that version misses out on six years of vulnerability patches and defensiveness measures that we applied to 4.x and 5.x in the meantime. A patched version for the present CachedIntrospectionResults change would cover this particular attack vector on the unsupported JDK 9+ but might still keep you exposed to other vulnerabilities even in supported areas of the framework.

For older Spring versions, we strategically suggest an upgrade to 5.3.x, or tactically a workaround as suggested in our blog post: https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement"
748,1084575261,artem-smotrakov,19523081,"Hi @jhoeller All valid points, absolutely agree that it would be better to move to 5.3.x

If I understand correctly, this commit fixes the [CVE-2022-22965](https://tanzu.vmware.com/security/cve-2022-22965). I'd appreciate if someone for the Spring team confirmed that. Thanks!

https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15"
749,1084796984,orubel,274764,"Checked the class and just like the original issue noted above, it extends 'AbstractUrlHandlerMapping' and isn't implementing 'Ordered'


```
 */
public class SimpleUrlHandlerMapping extends AbstractUrlHandlerMapping {

	private final Map<String, Object> urlMap = new LinkedHashMap<>();


	/**
```

Quote from other patch:

""So when doing the post request i noticed that on the branch with the old version
Class: AbstractHandlerMapping
Method: public final HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {
Line: HandlerExecutionChain executionChain = this.getHandlerExecutionChain(handler, request); is called once and afterwards the interceptors are added to the list in Class: HandlerExecutionChain in the method
public void addInterceptor(HandlerInterceptor interceptor) { this.interceptorList.add(interceptor); }"""
750,1084920313,jan-olaveide,80393418,Very late to the party here @rstoyanchev. What is the status for accessing _RequestContext_ and other thread bound data in a _WebClient_ used in a vanilla web-mvc/non-reactive controller?
751,1084973075,rhanton,26878180,"@jhoeller Also disappointed here by disinterest in fixing this Critical severity issue. In our case, we do generally run apps as a separate war on tomcat and the only reason (to my chagrin) that I can't go to Spring 5.x is lack of support for the newer application server versions required from our operations engineers. Is my understanding here that the things I need to fear are POJO properties coming in as JSON objects with names like `""class.*"", ""Class.*"", ""*.class.*"", ""*.Class.*""` primarily?

I realize the security issues with doing so, but it'd be nifty if I had some POC exploit code I could try on existing applications to prove they are vulnerable or not."
752,1085052950,jhoeller,1263688,"@rhanton Are your operation engineers forcing you to stay on older versions of Tomcat? For all active branches of Tomcat, there will be patch releases shortly that close the attack vector on Tomcat's side (the resource exposure in the Tomcat ClassLoader) which will be a way to address the concerns for older (unpatched) versions of Spring. That said, please note that Spring Framework 4.x is nevertheless unsupported on JDK 9+; this is not a sensible operations arrangement to strategically stay on."
753,1085106342,rhanton,26878180,@jhoeller in short - yes. But that's really good to hear that Tomcat is trying to patch this issue as well (sadly we're past-EOL there too).
754,1085161004,rhanton,26878180,"@jhoeller Am I right in understanding that this DataBinder CVE should be moot if you're not working with form submissions via `@ModelAttribute`? If all my data goes back and forth via RESTful JSON, it seems like DataBinder never gets called, but I may be incorrect with that assertion. Sorry it's been years since I dealt heavily with ModelAttributes."
755,1085297274,yichanggeng,32290597,"ok , thank you!



------------------&nbsp;原始邮件&nbsp;------------------
发件人: ""Oleg ***@***.***&gt;; 
发送时间: 2022年3月31日(星期四) 晚上6:32
收件人: ***@***.***&gt;; 
抄送: ***@***.***&gt;; ***@***.***&gt;; 
主题: Re: [spring-projects/spring-framework] {*path} pattern (CaptureTheRestPathElement) includes undocumented leading slash in @PathVariable path (#27132)





 
That’s intentional and documented. This problem report was resolved by fixing the documentation (adding the missing slash), not changing the behaviour.
 
—
Reply to this email directly, view it on GitHub, or unsubscribe.
You are receiving this because you commented.Message ID: ***@***.***&gt;"
756,1085304976,wuaoya,45376267,"> @wuaoya There are a few ways to see which version of spring, a given version of spring-boot depends on. One way is to use a website like mvnrepository.com, which lets you search and view maven dependency metadata.
> 
> Click on your version of spring-boot: https://mvnrepository.com/artifact/org.springframework.boot/spring-boot Then on the artifact page, look at the version of spring-core referenced in the compile dependencies https://mvnrepository.com/artifact/org.springframework.boot/spring-boot/2.6.5 ![image](https://user-images.githubusercontent.com/1804354/161032661-426a8d39-ad54-4da3-9887-a7b4f45c76d1.png)

thank you so much."
757,1085514315,bclozel,103264,"The code snippet you're showing is outdated.
As explained in the issue template, if you bevieve you've found a security issue, this should be disclosed responsibly through secure channels. This is the kind of behavior that triggers 0day exploits for open source projects."
758,1085569299,jhoeller,1263688,"@rhanton That's the case indeed. The entire problem is tied to DataBinder as used for model attribute binding in MVC. With payload conversion (such as commonly done with JSON), there is no exposure to this vulnerability as far as we understand.

If you are even on an EOL branch of Tomcat, I'm really surprised that your operations team upgraded the JDK that far. Even a major Tomcat upgrade is usually a much lighter step to take than a JDK 9+ upgrade. We see plenty of systems on recent Spring and Tomcat versions but hanging on to JDK 8 instead.

In any case, we strongly recommend an upgrade to supported branches of Spring and Tomcat, or at least to a supported branch of one of them - otherwise there is no chance for vulnerabilities to be addressed from either side, not for this present case, not for other vulnerabilities from the past 15 months, and not for any upcoming cases either."
759,1085583295,skydreamerr,313681,"@bclozel we started to get exceptions after the upgrade.


> Caused by: org.springframework.beans.NotWritablePropertyException: Invalid property 'beanClassLoader' of bean class [org.eclipse.gemini.blueprint.service.importer.support.OsgiServiceProxyFactoryBean]: Bean property 'beanClassLoader' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?

The property has type `ClassLoader`:

https://github.com/eclipse/gemini.blueprint/blob/d671a74fe8aa631e8f006aad5e43d3b3f1be6359/core/src/main/java/org/eclipse/gemini/blueprint/service/importer/support/AbstractOsgiServiceImportFactoryBean.java#L215"
760,1085609314,marcelstoer,624195,"> Hi @jhoeller All valid points, absolutely agree that it would be better to move to 5.3.x
> 
> If I understand correctly, this commit fixes the [CVE-2022-22965](https://tanzu.vmware.com/security/cve-2022-22965). I'd appreciate if someone for the Spring team confirmed that. Thanks!
> 
> [002546b](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15)

I fully agree. I find it irritating that the issues here have no reference to the actual commit (or the other way around). That way you have to dig through the commit history and hope the commit message is the same as or similar enough to the issue title.

I did as you did and arrived at the same commit 👍 "
761,1085617134,bclozel,103264,@skydreamerr please create a new issue for this.
762,1085643503,marcelstoer,624195,"> For all active branches of Tomcat, there will be patch releases shortly that close the attack vector on Tomcat's side

Do you happen to have a reference for this? I wasn't able to find any discussion or announcement yet.

**Update**
Found it on their dev mailing list: https://markmail.org/search/?q=list%3Aorg.apache.tomcat.dev%2F+CVE-2022-22965+#query:list%3Aorg.apache.tomcat.dev%2F%20CVE-2022-22965%20+page:1+mid:z5y7spymskac3tez+state:results"
763,1085648629,snicoll,490484,@marcelstoer Did you check the [Tomcat Dev list](https://marc.info/?l=tomcat-dev&r=1&b=202204&w=2)?
764,1085651427,jhoeller,1263688,"@skydreamerr Why is that ""beanClassLoader"" property being populated through declarative configuration? `setBeanClassLoader` is a programmatic callback that the container itself calls via `BeanClassLoaderAware`, it's not meant to be populated explicitly. Please double-check the property configuration for that bean; maybe that explicit setting can simply be removed so that the container can perform its standard callback?"
765,1085664458,rstoyanchev,401908,@marcelstoer normally commits are linked to issues. This was not a normal case.
766,1085667388,marcelstoer,624195,"> @marcelstoer normally commits are linked to issues. This was not a normal case.

I understand and appreciate this. Maybe just edit this issue (+ #28262) and add something like ""Fixed by 002546b3e4b8d791ea6acccb81eb3168f51abb15"" to the description?"
767,1085712034,copernico,2268970,"> Hi @dicer My question is exactly about this announcement :) I am looking for a commit that fixe this issue.

Here you find the commits for both affected release series: https://github.com/SAP/project-kb/blob/vulnerability-data/statements/CVE-2022-22965/statement.yaml

(but I am not from the Spring team, so I am not providing the confirmation you were looking for :-| )"
768,1085734048,jhoeller,1263688,"We have a very defensive check against ClassLoader access in place now, for declarative references to ClassLoader properties specifically. In common application setup, there should never be a need to set a ClassLoader property declaratively. Could you provide some insight into what it is being configured there and where the value to the ClassLoader property is coming from?

Generally speaking, any such ClassLoader configuration should be left up to the container (`BeanClassLoaderAware.setBeanClassLoader` is handled automatically for any beans running in an ApplicationContext) or only to be found in programmatic setup code (programmatic `setClassLoader(...)` calls rather than declarative ""classLoader"" property references). If you got an XML bean definition declaratively specifying a ""classLoader"" property value, try relying on `BeanClassLoaderAware` instead (which many Spring-provided components support out of the box) or replace your custom ClassLoader setup with a programmatic `setClassLoader` call (equivalent to the original declarative declaration).

Last but not least, we are aware that this is technically a regression for isolated declarative configuration cases, as a side effect of a defensive security measure. If there are common scenarios where this regression remains unresolvable, we might specifically enable certain ClassLoader configuration scenarios again in a follow-up Spring Framework release. We aim to understand every such scenario first, considering alternatives before re-enabling declarative ClassLoader access for them."
769,1085788871,szwlhd,58344305,"@jhoeller  but what has changed from 5.2.19 to 5.2.20 everything was working fine in 5.2.19 but breaking with 5.2.20.
yes we are using XML bean.
"
770,1085828716,kennymacleod,6092156,"> @skydreamerr Why is that ""beanClassLoader"" property being populated through declarative configuration? `setBeanClassLoader` is a programmatic callback that the container itself calls via `BeanClassLoaderAware`, it's not meant to be populated explicitly. Please double-check the property configuration for that bean; maybe that explicit setting can simply be removed so that the container can perform its standard callback?

`BeanClassLoaderAware` is being used by the Felix OSGi framework, so I can see they may have a legitimate use for `BeanClassLoaderAware`. In this particular case, the fix for the CVE seems to be breaking pre-existing and valid functionality."
771,1085833813,bclozel,103264,"[The BOM is available on Maven Central](https://repo1.maven.org/maven2/org/springframework/spring-framework-bom/5.3.18/). A search index (official or unofficial) can take time to catch up with new artifacts. You can raise this issue with the maintainers of the search.maven.org website.
Thanks!"
772,1085834475,jhoeller,1263688,"This was a change in response to the current CVE which uses an attack vector via accidentally exposed ClassLoaders. As a consequence, ClassLoader access via declarative bindings has been severely restricted. Sorry for the inconvenience...

We'd like to understand which specific kind of bean you are configuring that needs to accept a declarative ""classLoader"" property. This is not commonly done, ClassLoaders are usually configured programmatically. If you could show the bean definition affected, we could evaluate alternatives or whether this suggests re-enabling as per my final paragraph above."
773,1085838157,bclozel,103264,"@kennymacleod please follow up on the dedicated issue here #28269, or create a new one if you believe your case is different.
What Juergen is merely pointing out here, is that the core container will honor this contract and that property configuration is not needed for this property."
774,1085840333,jhoeller,1263688,"@kennymacleod I'm sure it's a valid use case for `BeanClassLoaderAware` itself but that container callback is meant to only be called by the container itself, not specified via declarative user configuration. That's the part I'd like to understand, there is either double configuration here - or accidental overriding since the container will perform its standard `setBeanClassLoaderAware` call even when user configuration was passed into the same property before. Let's find out whether this is accidental for that specific OSGi setup scenario and whether it even had the intended effect before.

That said, as per my recent comment on #28269, we are aware that this is technically a regression for isolated declarative configuration cases, as a side effect of a defensive security measure. If there are common scenarios where this regression remains unresolvable, we might specifically enable certain ClassLoader configuration scenarios again in a follow-up Spring Framework release."
775,1085855578,kennymacleod,6092156,"Following on from the discussion started in #28261. 

The Eclipse Gemini Blueprints project uses the `BeanClassLoaderAware` interface. I don't pretend to understand the why's, I'm not affiliated with Gemini in any way, but our own application uses it as a core part of its OSGi layer. 

https://github.com/eclipse/gemini.blueprint/blob/master/core/src/main/java/org/eclipse/gemini/blueprint/service/importer/support/AbstractOsgiServiceImportFactoryBean.java

It appears that Gemini has had no updates since 2018, so the odds of them redesigning their stuff seems remote, but this leaves us in the unpleasant position of being unable to upgrade to 5.3.18"
776,1085890666,szwlhd,58344305,"This is snippet of my code the way I using. bean is configured through XML

```java
public class HazelcastClassLoaderSetter implements BeanPostProcessor
{
  private ClassLoader classLoader;

  public void setClassLoader(ClassLoader classLoader)
  {
    this.classLoader = classLoader;
  }

  @Override
  public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException
  {
    if (bean instanceof Config)
    {
      ((Config) bean).setClassLoader(classLoader);
    }
    return bean;
  }

}
```
"
777,1085937266,jhoeller,1263688,"@szwlhd alright, and where does the ClassLoader reference come from? Some XML reference to another bean?

If all you need to do there is pass the Spring-managed bean ClassLoader along to Hazelcast, the proper way to do this is to make `HazelcastClassLoaderSetter` implement `BeanClassLoaderAware` and accept the Spring application context ClassLoader via the `setBeanClassLoader` method in that interface. There is no need to do custom ClassLoader injection in such a scenario."
778,1086005940,Enerccio,1702602,"Are you sure that only Java 9+ is affected. By current attack vector, sure, but couldn't there be another one? What I mean is could there be another Class.property that can lead into this attack. "
779,1086009537,rstoyanchev,401908,Also the [follow-up blog post](https://spring.io/blog/2022/04/01/spring-framework-rce-mitigation-alternative) with Tomcat version numbers.
780,1086026582,orubel,274764,It looks like most mapping have moved away from AbstractHandlerMapping (which AbstractUrlHandlerMapping extends) and are now using DelegateHandlerMapping) - https://github.com/spring-projects/spring-data-rest/commit/4d7daa9f6e0b2edbf526b35fa330be392e67507b
781,1086049600,jhoeller,1263688,"To the best of our understanding, from a Spring perspective, this is indeed a Java 9+ only attack vector. It's essentially revisiting an old Class property attack vector that we closed for Java 6-8 many years ago, not having had any follow-ups in the meantime, now reopened at this late point for the unnoticed Java 9+ introduction of `Class.getModule().getClassLoader()`.

That said, our new defensiveness checks in Spring's property descriptors cover any access to ClassLoader properties, on any JDK versions. We do recommend an upgrade to the latest framework version for defensiveness against unknown attack vectors, even on JDK 8, it is just not a necessary step to take for the present CVE with its Java 9+ attack vector.

Last but not least, since the present issue is about access to public facilities on Tomcat's ClassLoader implementation, we also strongly recommend an upgrade to the just-released Tomcat patches, in particular for attack vectors outside of Spring."
782,1086057245,lizongbo,1670666,"[springquartzdemo.zip](https://github.com/spring-projects/spring-framework/files/8399165/springquartzdemo.zip)

this is the demo for reproduce bug"
783,1086172549,jhoeller,1263688,"To all affected here, we recommend revisiting each such rare case of custom ClassLoader injection since there is usually a preferable official mechanism to use instead. That said, we intend to relax this new ClassLoader defensiveness check to re-enable ClassLoader configuration properties in general, as far as possible without sacrificing the original defensiveness against accidental ClassLoader exposure. For that reason, I'm scheduling this ticket for 5.3.19, along with a backport to 5.2.21."
784,1086438307,quaff,143040,Removing `org.apache.catalina.valves.AccessLogValve` from Tomcat `conf/server.xml` is another alternative.
785,1086559866,bclozel,103264,"Those are the versions we compile against, they are not exposed as transitive dependencies nor anywhere in the published POMs.

When upgrading those, we ensure that no code change was required on our side. If there is, we work around those changes with reflection or detection to ensure we are compatible with both versions.

In short, you should not have to worry about those upgrades on the Spring Framework side. On the other hand, you should keep an eye on the changelogs of libraries you extensively use: the Framework integration often uses a small API surface of libraries for integration but your application might use a much larger part of their API."
786,1086578417,nkiesel,1134209,Great!  Is there a published list of transitive dependencies available?
787,1086669879,orubel,274764,"SOLVED. Issue is with setting `initApplicationContext()`' in a **starter**

```
		SimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();
		mapping.registerHandlers(urlMap)
		mapping.setUrlMap(urlMap);
		//mapping.setOrder(1);
		mapping.setInterceptors(new Object[]{ new ApiInterceptor(principleService, exchangeService, apiCacheService, apiProperties) })
		mapping.setApplicationContext(context);
		//mapping.initApplicationContext()
```
Commented it out (like above) and issue resolved itself

Closing with smack to head"
788,1086761057,rwinch,362503,"@quaff 

> Removing org.apache.catalina.valves.AccessLogValve from Tomcat conf/server.xml is another alternative.

Doing this prevents the exploit that has been circulating, but this is brittle because other properties on Tomcat internals can be set by an arbitrary user so I would not rely on this protecting your application."
789,1087161545,szwlhd,58344305,By when we are expecting 5.2.21 release ?
790,1087177987,snicoll,490484,@szwlhd we do our best to keep [our milestones page](https://github.com/spring-projects/spring-framework/milestones) accurate. You can figure it out yourself.
791,1087182412,szwlhd,58344305,Thanks a lot
792,1087192147,bclozel,103264,"@grubeninspekteur as you can imagine, this has been a stressful week for the Spring community. Discussing publicly the effectiveness of the fix and potential security issues is not the responsible way to share your concerns.

Please use the dedicated channels for that: https://spring.io/security-policy "
793,1087252289,grubeninspekteur,705835,"@bclozel Of course, the workload caused by the irresponsible disclosure of the vulnerability last week must have been immense and as Spring users we are grateful for your quick actions. I understand your policy of not discussing these matters publicly and have removed my comment. "
794,1087355860,max91,3336535,"Hello. Faced the following problem. Overridden LocaleResolver by deriving a new class. When starting the application from the idea, everything works fine, but if you pack the application in a jar package, then when you start app the bin conflicts with what is in the class DelegatingWebMvcConfiguration. Please tell me how to solve the problem. Spring version 5.3.18

```java
@Configuration
public class CustomWebMvcConfiguration extends DelegatingWebMvcConfiguration {

    public static final String COOKIE_NAME = ""lang"";
    public static final Locale DEFAULT_LOCALE = new Locale(""ru"");
    public static final TimeZone DEFAULT_TIMEZONE = TimeZone.getTimeZone(ZoneOffset.UTC);

    @Bean
    @NotNull
    @Override
    public LocaleResolver localeResolver() {
        CookieLocaleResolver resolver = new CookieLocaleResolver();
        resolver.setCookieName(COOKIE_NAME);
        resolver.setDefaultLocale(DEFAULT_LOCALE);
        resolver.setDefaultTimeZone(DEFAULT_TIMEZONE);
        return resolver;
    }

    @Bean
    public LocaleChangeInterceptor localeChangeInterceptor() {
        LocaleChangeInterceptor interceptor = new LocaleChangeInterceptor();
        interceptor.setParamName(COOKIE_NAME);
        return interceptor;
    }

}
```"
795,1087360049,jhoeller,1263688,"This turns out to be a follow-up to #27490 where we applied a fallback code path for CGLIB fast-class generation failures. In some AOP configuration scenarios, CglibAopProxy uses special optimized interceptors that unfortunately always insist on the fast-class; I've added the same fallback code path there so that all variants of CGLIB MethodProxy invocations are covered now."
796,1087390752,ud1,3882105,"There are two classes named `ServletServerHttpRequest`, first one `org.springframework.http.server.ServletServerHttpRequest` and the second `org.springframework.http.server.reactive.ServletServerHttpRequest`.
The `reactive.ServletServerHttpRequest getLocalAddress` method already uses `getLocalAddr()` method."
797,1087432144,jhoeller,1263688,"@wilkinsona would it be sufficient to let `postProcessConfiguration` delegate to a setter-specified `Consumer<Configuration>` instance - or possibly a custom `ConfigurationCustomizer` type, or a vararg of such a type? I assume you would build your own detection mechanism on top and then just pass such customizers, or an adapter around Boot's customizer bean type, to that new `LocalValidatorFactoryBean` setter method?

The main question for me is the use of a special customizer type. Would you want to reuse it in Boot? If you'll be doing a custom customizer type in any case, we could also simply go with `Consumer<Configuration>` at the core level so that there's no conflict of customizer types on the common Boot classpath."
798,1087474374,snicoll,490484,We're going to try to lazily infer this when `setTargetType` is available in AOT use cases.
799,1087503284,wilkinsona,914682,"> would it be sufficient to let postProcessConfiguration delegate to a setter-specified Consumer<Configuration> instance - or possibly a custom ConfigurationCustomizer type, or a vararg of such a type?

It would.

> The main question for me is the use of a special customizer type. Would you want to reuse it in Boot? If you'll be doing a custom customizer type in any case, we could also simply go with Consumer<Configuration> at the core level so that there's no conflict of customizer types on the common Boot classpath

If Framework provided a `ConfigurationCustomizer` interface, I can't see any reason not to reuse it in Boot. We'd look for `ConfigurationCustomizer` beans in the context and set them (or a composite of them if only single customizer is supported) on the `LocalValidatorFactoryBean` that we auto-configure.

> we could also simply go with Consumer<Configuration> at the core level

If it were a plain `Consumer` (after type erasure), we'd define our own interface and adapt it to `Consumer<Configuration>`.

In short, both would work pretty much equally well for Boot. I should also say that I don't consider this change to be urgent. It would be nice to deliver something in Boot 2.x, but it's far from essential. We could live with a change in Framework 6 and Boot 3 if that aligns better with Framework's goals/priorities."
800,1087571707,poutsma,330665,"I think this might be due to Java's runtime type erasure, and not Spring. Could you please provide us with a complete minimal sample (something that we can unzip or git clone, build, and deploy) that reproduces the issue?"
801,1087573623,poutsma,330665,"If you'd like us to spend some time investigating, please take the time to provide a complete minimal sample (something that we can unzip or git clone, build, and deploy) that reproduces the problem.
"
802,1087577233,poutsma,330665,@mp911de Does this ring a bell to you?
803,1087587573,mp911de,1035015,"That doesn't sound proper. Do you have a minimal reproducer for us? The log output doesn't indicate the origin of the `cancel` signal and without further details, we won't be able to diagnose what's happening here."
804,1087695408,poutsma,330665,"> I'm looking either for a way to do/configure the same with a Scheduler (if it's not the default behaviour) or to configure how this should be handled, e.g. ""run the job at 03:30:00+02:00"".

Scheduling the job at 2:30 AM will mean that your job will be skipped when transitioning to DST, because from the scheduler's perspective that time does not exist. The scheduler does not keep track of skipped jobs (as Linux' Vixie cron does), and there is no way to change that behavior. The only way is to change the schedule not to run during between 2AM and 3AM."
805,1087701577,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
806,1087701632,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
807,1087775902,bclozel,103264,Closed with b158110801d
808,1087898679,sijskes,1328869,"this was not a request for support. a kludge like the one suggested was already implemented. As to opinionated opinions, it was a suggestion for a much needed improvement of a incomplete and wrong api."
809,1088316470,morenice,1031962,"@mp911de @poutsma 
Thanks for the reply.
It has been confirmed that it occurs sometimes when API calls  as well as MongoDB queries.

And i wrote print stack trace at doOnCancel handler.
`.doOnCancel(() -> new Exception().printStackTrace()));`

backtrace with tracelog
```
2022-04-05 15:15:42.145  INFO 1 --- [ntLoopGroup-3-2] reactor.Mono.PeekFuseable.436            : | onComplete()
2022-04-05 15:15:42.146 DEBUG 1 --- [or-http-epoll-4] r.n.http.server.HttpServerOperations     : [aa6cb7c3-18, L:/10.240.6.232:9010 - R:/10.240.2.53:58428] Decreasing pending responses, now 0
2022-04-05 15:15:42.146 DEBUG 1 --- [or-http-epoll-4] r.n.http.server.HttpServerOperations     : [aa6cb7c3-18, L:/10.240.6.232:9010 - R:/10.240.2.53:58428] Last HTTP packet was sent, terminating the channel
2022-04-05 15:15:42.146 TRACE 1 --- [or-http-epoll-4] reactor.netty.channel.ChannelOperations  : [aa6cb7c3, L:/10.240.6.232:9010 - R:/10.240.2.53:58428] Disposing ChannelOperation from a channel

java.lang.Exception: ChannelOperation terminal stack
	at reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:465)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:469)
	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:384)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)

2022-04-05 15:15:42.146  INFO 1 --- [or-http-epoll-4] reactor.Mono.PeekFuseable.436            : | cancel()
java.lang.Exception
	at com.XXXXXXXXXXXXXXXXXX   -----> printStackTrace()
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.cancel(FluxPeekFuseable.java:152)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.cancel(FluxPeekFuseable.java:159)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.cancel(FluxMapFuseable.java:174)
	at reactor.core.publisher.MonoSingle$SingleSubscriber.doOnCancel(MonoSingle.java:108)
	at reactor.core.publisher.Operators$MonoInnerProducerBase.cancel(Operators.java:2784)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.drainLoop(Operators.java:2252)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.drain(Operators.java:2220)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.cancel(Operators.java:2032)
	at reactor.core.publisher.Operators.terminate(Operators.java:1240)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.cancel(MonoFlatMap.java:187)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.cancel(FluxContextWrite.java:141)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.cancel(FluxPeekFuseable.java:159)
	at reactor.core.publisher.FluxHide$SuppressFuseableSubscriber.cancel(FluxHide.java:157)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.cancel(FluxOnAssembly.java:654)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.drainLoop(Operators.java:2252)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.drain(Operators.java:2220)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.cancel(Operators.java:2032)
	at reactor.core.publisher.Operators.terminate(Operators.java:1240)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.cancel(MonoFlatMap.java:272)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.cancel(MonoFlatMap.java:188)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.cancel(FluxPeekFuseable.java:159)
	at reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.cancel(FluxDoFinally.java:151)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.cancel(FluxOnAssembly.java:654)
	at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.cancel(FluxDoOnEach.java:113)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.cancel(FluxPeek.java:153)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.cancel(FluxOnAssembly.java:654)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.drainLoop(Operators.java:2252)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.drain(Operators.java:2220)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.cancel(Operators.java:2032)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.drainLoop(Operators.java:2252)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.drain(Operators.java:2220)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.cancel(Operators.java:2032)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.drainLoop(Operators.java:2252)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.drain(Operators.java:2220)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.cancel(Operators.java:2032)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.cancel(MonoPeekTerminal.java:144)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.drainLoop(Operators.java:2252)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.drain(Operators.java:2220)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.cancel(Operators.java:2032)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.cancel(MonoIgnoreThen.java:143)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.cancel(MonoPeekTerminal.java:144)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.cancel(MonoPeekTerminal.java:144)
	at reactor.core.publisher.Operators.terminate(Operators.java:1240)
	at reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:469)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:469)
	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:384)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-04-05 15:15:42.149 DEBUG 1 --- [or-http-epoll-4] o.s.w.r.f.client.ExchangeFunctions       : [3a7b3160] Cancel signal (to close connection)
```
"
810,1088358200,mp911de,1035015,"Thanks a lot. The stack trace indicates that the connection (transport channel) was closed and therefore the `cancel` signal is being propagated across all operators. Since there's no preceding exception, it looks like a regular reaction when closing a channel via `HttpServerOperations`. As the `terminate` operation runs on an executor thread, it might be a race condition but my insights in that area are very shallow. 

In any case, the MongoDB driver isn't issuing any cancel signals here."
811,1088380140,Maarten-Damen,4824144,"Hi @jhoeller, 

Am I correctly assuming that this is the fix for CVE-2022-22950? And if so, would it be possible to update the documentation that the fix is also applied to 5.2.20? Since the CVE reports now only mention 5.3.17 as fix version for this CVE.

Some of the documentation mentions:
- https://tanzu.vmware.com/security/cve-2022-22950
- https://spring.io/blog/2022/03/28/cve-report-published-for-spring-framework  
- https://nvd.nist.gov/vuln/detail/CVE-2022-22950"
812,1088466129,sbrannen,104798,"This may be related to the changes made in conjunction with the following issue:

- #25263

In particular, see https://github.com/spring-projects/spring-framework/issues/25263#issuecomment-681836850."
813,1088500495,snicoll,490484,"I've tried to extract a strategy interface in https://github.com/snicoll/spring-framework/commit/60f769764bb19a206c1b8070b8b9854102b55b6d. I don't have an alternative implementation for the AOT use case but it could be as simple as getting the entities and the mapped resources and provide that back. 

It is a bit too magic though as the scope of what the initializer is not clearly specified. I have a feeling that the contract should be changed to produce something else. Maybe an intermediate object that contains the entities and mapped resources?"
814,1088515707,sbrannen,104798,"This is by design.

The key type for a `MultiValueMap` passed as an argument to a controller's handler method is always `String`. Only the value type can vary.

The following are the supported types for the keys and values of a `MultiValueMap` passed as an argument to a handler method.

- `MultiValueMap<String, String>`
- `MultiValueMap<String, MultipartFile>`
- `MultiValueMap<String, javax.servlet.http.Part>`

Search for ""`MultiValueMap`"" in the [Web Servlet](https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#spring-web) and [Web Reactive](https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html#spring-webflux) sections of the reference manual for details and examples.
"
815,1088746327,mikejhill,3606315,"This is a breaking issue for us. The patch seems to fix the problem. It looks like the optimization in #25986 didn't take into account cases where it would prevent a default value from being set. Although, frankly, I'm not sure how the optimization ever would have worked when non-writable property errors are suppressed:

```java
private Object setDefaultValue(PropertyTokenHolder tokens) {
    PropertyValue pv = createDefaultPropertyValue(tokens);
    /*
     * #setPropertyValue is effectively a no-op if the property is non-writable and non-writable exceptions are
     * suppressed (suppressNotWritablePropertyException).
     *
     * Before the optimization (#25986), exceptions would bubble up here and *later* be ignored if suppressed, causing
     * execution to escape without running any remaining instructions in this method. After the optimization, remaining
     * instructions do get executed, causing a different exception to be thrown (see PR description and comments below).
     */
    setPropertyValue(tokens, pv);
    /*
     * #getPropertyValue returns the value of the property read method for the backing instance. This is null if
     * #setPropertyValue was not completed (e.g., in the case that the property is not writable) and if the field does
     * not have a pre-existing value (e.g., private Object myField = null).
     */
    Object defaultValue = getPropertyValue(tokens);
    /*
     * This is presumably attempting to assert that the default value was set properly, but the default value never gets
     * set in the above cases, so an IllegalStateException is always thrown.
     */
    Assert.state(defaultValue != null, ""Default value must not be null"");
    return defaultValue;
}
```

The only preconditions I can find to trigger this are as follows:
- A property is included for binding that is non-writable (no setter)
- Non-writable exceptions are suppressed on the binder (`suppressNotWritablePropertyException`)
- The property has no default value at instantiation time (e.g., `private Object myField = null` with no default value provided by its getter)

I'm not familiar enough to know whether this is the right fix. In particular, I'm not certain that any of the other `setDefaultValue` callers are set up to properly handle null return values. But the patch definitely seems to fix the main issue for us."
816,1088785571,sbrannen,104798,"@Maarten-Damen, we have updated the published documentation."
817,1088861608,jhoeller,1263688,"The `setDefaultValue` method is only really called within auto-growing of non-existent properties. I'm having trouble reproducing this, could you please provide a unit test that fails before and passes after the PR?

Generally speaking, I don't see a need for yet another ignoreXxx property here. If there is a specific regression to be found here, we should make it work within the existing arrangement and the with existing ignore flags."
818,1088867976,sbrannen,104798,"Hi @seabamirum,

Thanks for creating your first issue for the Spring Framework. 👍 

Is the behavior you are describing something that worked prior to 5.3.16?

Also, please provide a simple application or test case that reproduces the behavior you are describing (for example, as a GitHub project or ZIP file attached to this issue that we can download and run locally)."
819,1088886317,jhoeller,1263688,"From a quick glance, it looks like we never supported this, taking the constructor parameter names into account for value retrieval but not for type conversion purposes. So only setter-derived property names are being exposed for PropertyEditor resolution, not constructor parameter names. We can certainly try to redefine this for exposing constructor parameter names there as well."
820,1088896179,sbrannen,104798,"Hi @SimonHarmonicMinor,

Thanks for making your first suggestion for the Spring Framework. 👍 

That's certainly an interesting proposal, and it would be rather powerful.

Unfortunately, the `MergedAnnotation` model and annotation search algorithms in Spring are already extremely complex. Introducing additional features on top of the `@AliasFor` support would therefore further complicate matters, and we have no intentions to introduce additional attributes (or features) for `@AliasFor`.

As you discovered, the use of custom composed annotations like `@AsyncFixedPool` and `@AsyncCachedPool` is the best way to reduce code duplication and avoid magic strings in your code base.

In light of the above, I am closing this issue."
821,1089390662,bclozel,103264,It looks like you're getting help on StackOverflow. This question is not about Spring Framework. Closing this as a result.
822,1089583856,quaff,143040,"> @quaff
> 
> > Removing org.apache.catalina.valves.AccessLogValve from Tomcat conf/server.xml is another alternative.
> 
> Doing this prevents the exploit that has been circulating, but this is brittle because other properties on Tomcat internals can be set by an arbitrary user so I would not rely on this protecting your application.

I knew it, this is the most convenient workaround if you can't upgrade either spring or tomcat at the first time. "
823,1089919462,vritser,16340478,Can I PR this issue? and which branch to check out from?
824,1089924733,snicoll,490484,@vritser thanks for the offer but this issue has already an assignee.
825,1090087347,fmbenhassine,1210553,Will this request be considered? I see it in the 6.x Backlog. It would be nice to have it in one of the milestones of SF 6.0. This would allow other projects to leverage the sequence-based incrementer from SF and avoid duplicate efforts like in [Batch](https://github.com/spring-projects/spring-batch/blob/main/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/database/support/SqlServerSequenceMaxValueIncrementer.java) and [Task](https://github.com/spring-cloud/spring-cloud-task/blob/main/spring-cloud-task-core/src/main/java/org/springframework/cloud/task/repository/support/SqlServerSequenceMaxValueIncrementer.java). cc @cppwfs
826,1090214942,vy,72137,"Thanks so much for the prompt reply @rstoyanchev. (Apologies for my late reaction; vacation + other priorities get in my way.)

> For `ProblemDetail` extensions, my thought was that sub-classes will use Jackson's `@JsonTypeInfo` (or similar) like is done in Zalando for example, but I've yet to confirm this end to end, which will be the goal for #28190. I suspect we might need an interface for a ""mix-in"" but I'm not sure until I try. I'm also thinking on the client side there could be an option to specify the class to deserialize to.

I am not able to follow your reasoning here. Libraries will expect a `ProblemDetail`. Using a mix-in that doesn't extend from `ProblemDetail` will simply break this contract. Why do you explicitly avoid making `ProblemDetail` more extension-friendly using an interface but rather opt for other alternatives? What would be the shortcomings of making `ProblemDetail` an interface?

> For `Map<String, Object> attributes`, it adds a level of nesting with an ""attributes"" key, which for once reveals a framework detail, and generally leads to questions about how to customize or eliminate this.

I see your point regarding the questions about how to customize or eliminate `attributes`. That said, how else can a user capture the unmapped information while deserializing?

> An application might then try to add Jackson's `@JsonUnwrapped` which brings us back to extending.

Sorry, but I couldn't follow. Would you mind elaborating on this, please? (I know what `@JsonUnwrapped` is.)

> For mutability, indeed immutable would be my preferred choice, but I'm just thinking, (de-)serialization friendliness aside, that the case here is rather specific. We're talking about an exception type, or a type carried within an exception that short-circuits regular handling and follows a straight line towards being serialized to the response body. Moreover, there are already reasons to allow mutability, such as when a `ResponseErrorException` is extended, or handled in places like `ResponseEntityExceptionHandler`.

Again, I am not able to follow. If `ErrorResponseException` (I think that is what you meant by `ResponseErrorException`, right?) is extended, a new `ProblemDetail` can be instantiated. How does making `ProblemDetail` mutable help here?

> It doesn't feel like there are strong reasons against this while it certainly simplifies the situation in terms of (de-)serializing and extensions.

Mind sharing a more tangible example on how mutability of `ProblemDetail` simplifies (de)serialization and/or extension?"
827,1090241966,snicoll,490484,"brainstorming with @jhoeller, we're more aiming towards replacing the `DefaultPersistenceUnitManager` by an implementation that would know about the scanned entities and mapped resources. "
828,1090301926,bclozel,103264,See https://github.com/spring-projects/spring-framework/issues/28260#issuecomment-1084518932
829,1090305258,snicoll,490484,"I had a look to the two commits and added some comments. 

I don't think making the reachable type mandatory in the API is warranted when the commit [does this](https://github.com/sdeleuze/spring-framework/commit/e7a94d990933c342990bb287650b153dbd0fb1c2#diff-fecc2ca0b690e2bebba4bd7fb8891e1f23d693375614584389310d3d06e3fbbcR857) at the same time. If we can't figure out a better reachable type in `AutowiredAnnotationBeanPostProcessor`, then I don't think we should be forced to write something like this.

I also think that making it mandatory in the method that creates the builder makes the API more fat. I'd welcome a different arrangement. Perhaps a validation that a condition is set when building the object? Still, I think it makes the API harder to use than it should and I am wondering if this is warranted."
830,1090344360,mf81bln,1148067,"@poutsma Thanks for the feedback 👍 
In this case I'll implement a workaround by extending `CronTrigger` and overriding `CronTrigger#nextExecutionTime`"
831,1090390093,poutsma,330665,"Since 5.3.14 Spring WebFlux `ServerResponse` instances overwrite headers that already exist, see #27741. This was by design.

I do not work on Spring Cloud Gateway, so I do not know how the resolution of #27741 relates to that project. Can you share any insights, @spencergibb ?
"
832,1090412621,spencergibb,594085,What version of gateway? We just made a change to merge response headers in https://github.com/spring-cloud/spring-cloud-gateway/pull/2547
833,1090669641,jgslima,199610,"Spring team,
I am considering closing this issue, unless you want to keep it open.
Did you have chance to analyze this?

Here, the lenghty application shutdown remains.

Thanks."
834,1090690658,jgslima,199610,I can see this issue is related to other issue I created: #27090 
835,1090744644,explorer-fullstack,62571748,"> What version of gateway? We just made a change to merge response headers in [spring-cloud/spring-cloud-gateway#2547](https://github.com/spring-cloud/spring-cloud-gateway/pull/2547)

@spencergibb - I've started facing this issue since I upgraded to Springboot 2.5.12 (spring-cloud-gateway-server:3.0.3). I've not upgraded the Spring cloud dependencies and kept it as it was at 2020.0.3

But this works just fine with Springboot 2.5.7 & the same version of spring-cloud-gateway-server:3.0.3. This is the reason why i thought spring-web upgrade to 5.3.18 (brought in by  Springboot 2.5.12) is causing this issue.

I also tested several other combinations and this is what I found:

Springboot 2.5.7 with spring-web: 5.3.13 & spring-cloud 2020.0.3 - No issue
Springboot 2.5.12 with spring-web: 5.3.18 & spring-cloud  2020.0.3 - Issue present
Springboot 2.5.12 with spring-web: 5.3.16 & spring-cloud  2020.0.3 - Issue present
Springboot 2.5.7 with spring-web: 5.3.18/16  &  spring-cloud  2020.0.3 - Issue present
Springboot 2.6.4 with spring-web: 5.3.16 & spring-cloud  2021.0.1 - Issue present
Springboot 2.6.6 with  spring-web: 5.3.18 & spring-cloud  2021.0.1 - Issue present


Im curious why the Springboot/spring-web upgrade causing this issue as the original issue is with NettyRoutingFilter which is part of spring-cloud-gateway-server jar

Do you know approximately when will you be releasing the general availability version which will include this fix?"
836,1090883968,kurenchuksergey,20335086,"Hello. I found this issue, because I have met strange behaviour. I just have a simple structure 
```
Class A {
   @Transaction
   void method()
}

@Transaction(readOnly = true)
class B exntend A {

}
```
And when I invoke 'method' on instance 'B', I still get transactionAttributes from the super class.
Is it correct behaviour [sbrannen](https://github.com/sbrannen) ?

@[elab](https://github.com/elab) Did you continue work on PR? Did you think about rewriting primary transaction attributes by any override (In your code it is secondaryObj). "
837,1091116097,bclozel,103264,"Please share a minimal, sample application that reproduces the problem. Ideally something we can git clone or unzip and run. You can use start.spring.io to create a new project and only add the requires dependencies to reproduce the problem.

Thanks!"
838,1091151898,Tao-Zhang-Myob,85595100,"Sorry, I was wrong. it's not for RestTemplate. It's for MVC. here is my code implementation:
```
@RequestMapping(path = ""/business/**"")
    public ResponseEntity<JsonNode> handleRequest(@RequestBody(required = false) String requestBody,
                                                  HttpMethod method,
                                                  HttpServletRequest request) {
        var response = myProxyService.proxyRequest(getProxyPath(request), method, requestBody, getToken(request));
        return new ResponseEntity(response.getBody(), getHeaders(response.getHeaders()), response.getStatusCode());
    }
```
and this is the value of response:
`<204,[Date:""Thu, 07 Apr 2022 06:52:16 GMT"", Connection:""keep-alive"", Vary:""Origin"", ""Access-Control-Request-Method"", ""Access-Control-Request-Headers"", Pragma:""no-cache"", Expires:""0"", Cache-Control:""no-cache, no-store, max-age=0, must-revalidate"", X-Frame-Options:""DENY"", X-XSS-Protection:""1; mode=block"", X-Content-Type-Options:""nosniff"", Strict-Transport-Security:""max-age=31536000; includeSubDomains"", Access-Control-Allow-Origin:""https://xxxx.com"", Access-Control-Allow-Credentials:""true"", Content-Security-Policy:""default-src 'self'""]>`

Did I use a wrong implementation?"
839,1091180260,snicoll,490484,"@Tao-Zhang-Myob Brian asked for a sample, not a partial code snippet. Please take the time to build a small project we can use to reproduce the issue. You can share it with us by pushing it to a GitHub repository or by attaching a zip to this issue."
840,1091352667,JamesLiuft,28916832,"I try gradlew javadoc,it works but something is wrong,i will go and handle errors."
841,1091376900,JamesLiuft,28916832,"<!--
!!! For Security Vulnerabilities, please go to https://spring.io/security-policy !!!
-->
**Affects:** \<Spring Framework version>

---
<!--
Thanks for taking the time to create an issue. Please read the following:

- Questions should be asked on Stack Overflow.
- For bugs, specify affected versions and explain what you are trying to do.
- For enhancements, provide context and describe the problem.

Issue or Pull Request? Create only one, not both. GitHub treats them as the same.
If unsure, start with an issue, and if you submit a pull request later, the
issue will be closed as superseded.
-->
##it looks like that some subject was generated,some was not.I do not known how to gennerate in one folder but not in every subject's doc folder##
F:\00OpenSource\SourceCode\spring-framework-5.3.x>gradlew.bat javadoc
fatal: not a git repository (or any of the parent directories): .git

> Task :spring-jdbc:compileJava
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-jdbc\src\main\java\org\springframework\jdbc\core\support\JdbcBeanDefinitionReader.java:110: 错误: 对query的引用不明确
                this.jdbcTemplate.query(sql, rs -> {
                                 ^
  org.springframework.jdbc.core.JdbcTemplate 中的方法 <T>query(java.lang.String,org.springframework.jdbc.core.ResultSetExtractor<T>) 和 org.springframework.jdbc.core.JdbcTemplate 中的方法 query(java.lang.String,org.springframework.jdbc.core.RowCallbackHandler) 都匹配
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-jdbc\src\main\java\org\springframework\jdbc\core\support\JdbcBeanDefinitionReader.java:110: 错误: 不兼容的类型: 无法推断类型变量 T
                this.jdbcTemplate.query(sql, rs -> {
                                       ^
    (参数不匹配; lambda 表达式中的返回类型错误
      缺少返回值)
2 个错误

> Task :spring-jdbc:compileJava FAILED

> Task :spring-messaging:compileJava
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-messaging\src\main\java\org\springframework\messaging\handler\annotation\reactive\PayloadMethodArgumentResolver.java:235: 错误: 不兼容的类型: 无法推断类型变量 V
                                                        .map(buffer -> decoder.decode(buffer, elementType, mimeType, hints))
                                                            ^
    (参数不匹配; java.util.function.Function<capture#1, 共 ? super org.springframework.core.io.buffer.DataBuffer,capture#2, 共 ? extends capture#3, 共 ?>无法转换为java.util.function.Function<? super org.springframework.core.io.buffer.DataBuffer,? extends capture#3, 共 ?>)
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-messaging\src\main\java\org\springframework\messaging\handler\annotation\reactive\PayloadMethodArgumentResolver.java:238: 错误: 不兼容的类型: reactor.core.publisher.Flux<java.lang.Object>无法转换为org.reactivestreams.Publisher<? extends capture#1, 共 ?>
                                                flux = flux.switchIfEmpty(Flux.error(() -> handleMissingBody(parameter, message)));
                                                                                    ^
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-messaging\src\main\java\org\springframework\messaging\handler\annotation\reactive\PayloadMethodArgumentResolver.java:249: 错误: 不兼容的类型: 无法推断类型变量 R
                                                        .map(buffer -> decoder.decode(buffer, elementType, mimeType, hints))
                                                            ^
    (参数不匹配; java.util.function.Function<capture#1, 共 ? super org.springframework.core.io.buffer.DataBuffer,capture#2, 共 ? extends capture#3, 共 ?>无法转换为java.util.function.Function<? super org.springframework.core.io.buffer.DataBuffer,? extends capture#3, 共 ?>)
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-messaging\src\main\java\org\springframework\messaging\handler\annotation\reactive\PayloadMethodArgumentResolver.java:252: 错误: 不兼容的类型: reactor.core.publisher.Mono<java.lang.Object>无法转换为reactor.core.publisher.Mono<? extends capture#1, 共 ?>
                                                mono = mono.switchIfEmpty(Mono.error(() -> handleMissingBody(parameter, message)));
                                                                                    ^
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-messaging\src\main\java\org\springframework\messaging\rsocket\DefaultRSocketRequester.java:290: 错误: 不兼容的类型: 无法推断类型变量 R
                                        .map(dataBuffer -> decoder.decode(dataBuffer, elementType, dataMimeType, EMPTY_HINTS));
                                            ^
    (参数不匹配; java.util.function.Function<capture#1, 共 ? super org.springframework.core.io.buffer.DataBuffer,capture#2, 共 ? extends capture#3, 共 ?>无法转换为java.util.function.Function<? super org.springframework.core.io.buffer.DataBuffer,? extends capture#3, 共 ?>)
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-messaging\src\main\java\org\springframework\messaging\rsocket\DefaultRSocketRequester.java:289: 警告: [cast] 出现冗余的到<any>的转换
                        return (Mono<T>) payloadMono.map(this::retainDataAndReleasePayload)
                               ^
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-messaging\src\main\java\org\springframework\messaging\rsocket\DefaultRSocketRequesterBuilder.java:211: 警告: [deprecation] org.springframework.messaging.rsocket.RSocketRequester.Builder中的connect(io.rsocket.transport.ClientTransport)已过时
        public Mono<RSocketRequester> connect(ClientTransport transport) {
                                      ^
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-messaging\src\main\java\org\springframework\messaging\rsocket\DefaultRSocketRequesterBuilder.java:205: 警告: [deprecation] org.springframework.messaging.rsocket.RSocketRequester.Builder中的connectWebSocket(java.net.URI)已过时
        public Mono<RSocketRequester> connectWebSocket(URI uri) {
                                      ^
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-messaging\src\main\java\org\springframework\messaging\rsocket\DefaultRSocketRequesterBuilder.java:199: 警告: [deprecation] org.springframework.messaging.rsocket.RSocketRequester.Builder中的connectTcp(java.lang.String,int)已过时
        public Mono<RSocketRequester> connectTcp(String host, int port) {
                                      ^
注: 某些消息已经过简化; 请使用 -Xdiags:verbose 重新编译以获得完整输出
5 个错误
4 个警告

> Task :spring-messaging:compileJava FAILED

> Task :spring-web:compileJava
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-web\src\main\java\org\springframework\http\client\MultipartBodyBuilder.java:148: 错误: 不兼容的类型: 无法推断org.springframework.http.client.MultipartBodyBuilder.PublisherPartBuilder<>的类型参数
                        PublisherPartBuilder<?, ?> builder = new PublisherPartBuilder<>(name, (PublisherEntity<?, ?>) part);
                                                                                     ^
    原因: 推论变量 P 具有不兼容的限制范围
      等式约束条件: capture#1, 共 ?
      上限: org.reactivestreams.Publisher<capture#2, 共 ?>,org.reactivestreams.Publisher<S>
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-web\src\main\java\org\springframework\http\client\reactive\AbstractClientHttpRequest.java:152: 错误: 不兼容的类型: 推断类型不符合上限
                                .map(Supplier::get).collect(Collectors.toList());
                                    ^
    推断: ? extends org.reactivestreams.Publisher<java.lang.Void>
    上限: java.lang.Object
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-web\src\main\java\org\springframework\http\codec\support\BaseCodecConfigurer.java:193: 警告: [deprecation] org.springframework.http.codec.CodecConfigurer.CustomCodecs中的withDefaultCodecConfig(java.util.function.Consumer<org.springframework.http.codec.CodecConfigurer.DefaultCodecConfig>)已过时
                public void withDefaultCodecConfig(Consumer<DefaultCodecConfig> codecsConfigConsumer) {
                            ^
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-web\src\main\java\org\springframework\http\codec\support\BaseCodecConfigurer.java:187: 警告: [deprecation] org.springframework.http.codec.CodecConfigurer.CustomCodecs中的writer(org.springframework.http.codec.HttpMessageWriter<?>)已过时
                public void writer(HttpMessageWriter<?> writer) {
                            ^
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-web\src\main\java\org\springframework\http\codec\support\BaseCodecConfigurer.java:181: 警告: [deprecation] org.springframework.http.codec.CodecConfigurer.CustomCodecs中的reader(org.springframework.http.codec.HttpMessageReader<?>)已过时
                public void reader(HttpMessageReader<?> reader) {
                            ^
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-web\src\main\java\org\springframework\http\codec\support\BaseCodecConfigurer.java:175: 警告: [deprecation] org.springframework.http.codec.CodecConfigurer.CustomCodecs中的encoder(org.springframework.core.codec.Encoder<?>)已过时
                public void encoder(Encoder<?> encoder) {
                            ^
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-web\src\main\java\org\springframework\http\codec\support\BaseCodecConfigurer.java:169: 警告: [deprecation] org.springframework.http.codec.CodecConfigurer.CustomCodecs中的decoder(org.springframework.core.codec.Decoder<?>)已过时
                public void decoder(Decoder<?> decoder) {
                            ^
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-web\src\main\java\org\springframework\http\codec\support\BaseDefaultCodecs.java:650: 错误: 不兼容的类型: 无法推断类型变量 R
                                .map(Map.Entry::getKey)
                                    ^
    (参数不匹配; java.util.function.Function<capture#1, 共 ? super java.util.Map.Entry<capture#2, 共 ?,java.lang.Boolean>,capture#3, 共 ? extends capture#2, 共 ?>无法转换为java.util.function.Function<? super java.util.Map.Entry<capture#2, 共 ?,java.lang.Boolean>,? extends capture#2, 共 ?>)
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-web\src\main\java\org\springframework\http\server\reactive\AbstractServerHttpResponse.java:221: 错误: 无法将类 reactor.core.publisher.Mono<T>中的方法 fromCallable应用到给定类型;
                                                                                return writeWithInternal(Mono.fromCallable(() -> buffer)
                                                                                                             ^
  需要: java.util.concurrent.Callable<? extends T>
  找到: ()->buffer
  原因: 无法推断类型变量 T
    (参数不匹配; java.util.concurrent.Callable<capture#1, 共 ? extends capture#2, 共 ? extends org.springframework.core.io.buffer.DataBuffer>无法转换为java.util.concurrent.Callable<? extends capture#2, 共 ? extends org.springframework.core.io.buffer.DataBuffer>)
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-web\src\main\java\org\springframework\http\server\reactive\AbstractServerHttpResponse.java:274: 错误: 不兼容的类型: 推断类型不符合上限
                                allActions = Flux.concat(Flux.fromIterable(this.commitActions).map(Supplier::get))
                                                                                                  ^
    推断: ? extends reactor.core.publisher.Mono<java.lang.Void>
    上限: java.lang.Object
5 个错误
5 个警告

> Task :spring-web:compileJava FAILED

FAILURE: Build completed with 3 failures.

1: Task failed with an exception.
-----------
* What went wrong:
Execution failed for task ':spring-jdbc:compileJava'.
> Compilation failed; see the compiler error output for details.

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.
==============================================================================

2: Task failed with an exception.
-----------
* What went wrong:
Execution failed for task ':spring-messaging:compileJava'.
> Compilation failed; see the compiler error output for details.

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.
==============================================================================

3: Task failed with an exception.
-----------
* What went wrong:
Execution failed for task ':spring-web:compileJava'.
> Compilation failed; see the compiler error output for details.

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.
==============================================================================

* Get more help at https://help.gradle.org

BUILD FAILED in 9s
71 actionable tasks: 3 executed, 68 up-to-date
Build scan background action failed.
org.gradle.process.internal.ExecException: Process 'command 'git'' finished with non-zero exit value 128
        at org.gradle.process.internal.DefaultExecHandle$ExecResultImpl.assertNormalExitValue(DefaultExecHandle.java:414)
        at org.gradle.process.internal.DefaultExecAction.execute(DefaultExecAction.java:38)
        at org.gradle.process.internal.DefaultExecActionFactory.exec(DefaultExecActionFactory.java:205)
        at io.spring.ge.conventions.gradle.WorkingDirectoryProcessOperations.exec(WorkingDirectoryProcessOperations.java:45)
        at io.spring.ge.conventions.gradle.ProcessOperationsProcessRunner.run(ProcessOperationsProcessRunner.java:40)
        at io.spring.ge.conventions.gradle.BuildScanConventions.run(BuildScanConventions.java:195)
        at io.spring.ge.conventions.gradle.BuildScanConventions.addGitMetadata(BuildScanConventions.java:139)
        at io.spring.ge.conventions.gradle.BuildScanConventions$$Lambda$551/2047349440.execute(Unknown Source)
        at com.gradle.enterprise.gradleplugin.internal.extension.b$4.run(SourceFile:177)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)

A build scan was not published as you have not authenticated with server 'ge.spring.io'."
842,1091426838,Tao-Zhang-Myob,85595100,"I think I found the root cause. for some reason, there is no value for some header field and we don't know. so that will cause the NPE error in Spring. I think this place could improve for this scenario.
<img width=""1333"" alt=""image"" src=""https://user-images.githubusercontent.com/85595100/162167757-e00c23d5-0220-4ea0-a50d-0bd320b92f7d.png"">
"
843,1091498287,bclozel,103264,You'll need to know [how to build the project from source](https://github.com/spring-projects/spring-framework/wiki/Build-from-Source). Then you can run `./gradlew api` to generate the aggregated javadoc for all modules.
844,1091625585,poutsma,330665,"The underlying reason for this is that resource handling in Spring MVC (and WebFlux) does not have explicit support for `HEAD` methods yet. Instead, we treat the request as a `GET`, write the entire file to the body, and rely on the standard `HttpServlet::doHead` functionality to ignore everything written.

I will introduce `HEAD` support in `ResourceHttpRequestHandler` and `ResourceWebHandler`."
845,1091691762,svilen-ivanov-kubit,92510182,"More details after investigation:

1. If I use simple rest controller with `@Async` annotation, the `afterRequest` is properly invoked after async action completes.
2. GraphQL (graphql-spring-boot-autoconfigure-12.0.0) registers its servlet using `ServletRegistrationBean` and properly sets that its servlet supports async operations.
3. GraphQL starts the async:
```java
AsyncContext asyncContext =
        request.isAsyncStarted()
            ? request.getAsyncContext()
            : request.startAsync(request, response);
```

It looks like until GraphQL starts processing the request, it is not considered async by Spring.
"
846,1091718617,svilen-ivanov-kubit,92510182,Perhaps a final comment. Spring servlets do not go over `org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#invokeHandlerMethod` which initialises `WebAsyncManager` which `CommonsRequestLoggingFilter` uses to determine request lifecycle. The latter is not suited for hybrid environment: Spring bound controllers and plain Servlets. Perhaps resorting to pure servlet filter to log request start and end.
847,1091756448,poutsma,330665,"The Javadoc of the [`DefaultPartHttpMessageReader.streaming`](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/codec/multipart/DefaultPartHttpMessageReader.html#setStreaming-boolean-) property  indicates that

>with streaming enabled, the Flux<Part> that is produced by this message reader must be consumed in the original order, i.e. the order of the HTTP message. Additionally, the [body contents](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/codec/multipart/Part.html#content--) **must either be completely consumed or canceled** before moving to the next part.

This means that you cannot call `collectList`, as that will collect all `Parts` instances before consuming the content."
848,1091826139,bclozel,103264,"You can [download JARs from maven central](https://repo1.maven.org/maven2/org/springframework/spring/). You can also get [a full distribution zip (jars, sources, javadoc, etc) from our own repository](https://repo.spring.io/ui/native/release/org/springframework/spring/5.3.18/)."
849,1091829031,jweavers,13805897,"@poutsma Thanks for looking into this issue. Could you suggest the missing part as I tried other option, but I don't seems to find a way. 

`serverRequest.body(BodyExtractors.toParts()).map(m->m.content()).flatMap(mapper -> {`

or 

`serverRequest.body(BodyExtractors.toParts()).buffer().flatMap(mapper -> {`

I tried following as well, but it making same number of backend call as the number of files sent over request. For example, if multipart has two part, it making two separate backend call.

`serverRequest.multipartData().flatMap(mapper -> {`

Or is it not possible with multiple part/files ?

"
850,1091915149,bclozel,103264,"If I understand correctly, the GraalVM agent will use as reachableType whatever type is right above in the call stack when performing a reflection/resource/etc call. That's a nice heuristic for many libraries, but I suspect that this approach won't be super efficient in Spring Framework.

In many cases, the call stack with start with a `ResourceUtils`, `ClassUtils`, etc. class that does not really help discarding useless hints. I think that two cases might happen in our case:

* we will look higher in the call stack and select a type that's more representative of the use case, for example `ResourceWebHandler` for serving static resources
* we will point instead to a configuration class that will not be in the call stack but still represents well the trigger for many features. For example, `WebMvcConfigurationSupport`.


> I don't think making the reachable type mandatory in the API is warranted when the commit [does this](https://github.com/sdeleuze/spring-framework/commit/e7a94d990933c342990bb287650b153dbd0fb1c2#diff-fecc2ca0b690e2bebba4bd7fb8891e1f23d693375614584389310d3d06e3fbbcR857) at the same time. If we can't figure out a better reachable type in AutowiredAnnotationBeanPostProcessor, then I don't think we should be forced to write something like this.

I agree with the comment above. On top of that, I believe some hints might not even have a valid reachableType. In the case of field injection, we would have to point to a class that's always reachable by the core context - or worse, point to an AOT-generated class. In both cases, this doesn't really help.

To summarize, I'd like to add this option to the API but not make it mandatory."
851,1092349534,quaff,143040,"Source file cannot be compiled to bytecode at the first step, there is no chance weaving happens."
852,1092366527,JamesLiuft,28916832,"A ha,Thanks，It looks like to be working，but something was wrong,let me deal with them"
853,1092391489,JamesLiuft,28916832,"I have set the java 8 build in this workspace,but I don't know when execute the gradle task to build,why the JAVA home is the default of sts4?"
854,1092392481,JamesLiuft,28916832,"Set the java home of Gradle,that's so many errors when build ~~~
```
:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-jdbc\src\main\java\org\springframework\jdbc\core\support\JdbcBeanDefinitionReader.java:110: 错误: 对query的引用不明确
		this.jdbcTemplate.query(sql, rs -> {
		                 ^
  org.springframework.jdbc.core.JdbcTemplate 中的方法 <T>query(java.lang.String,org.springframework.jdbc.core.ResultSetExtractor<T>) 和 org.springframework.jdbc.core.JdbcTemplate 中的方法 query(java.lang.String,org.springframework.jdbc.core.RowCallbackHandler) 都匹配
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-jdbc\src\main\java\org\springframework\jdbc\core\support\JdbcBeanDefinitionReader.java:110: 错误: 不兼容的类型: 无法推断类型变量 T
		this.jdbcTemplate.query(sql, rs -> {
		                       ^
    (参数不匹配; lambda 表达式中的返回类型错误
      缺少返回值)

> Task :spring-context:jar

> Task :spring-jdbc:compileJava FAILED
2 个错误

> Task :spring-messaging:compileJava
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-messaging\src\main\java\org\springframework\messaging\handler\annotation\reactive\PayloadMethodArgumentResolver.java:235: 错误: 不兼容的类型: 无法推断类型变量 V
							.map(buffer -> decoder.decode(buffer, elementType, mimeType, hints))
							    ^
    (参数不匹配; java.util.function.Function<capture#1, 共 ? super org.springframework.core.io.buffer.DataBuffer,capture#2, 共 ? extends capture#3, 共 ?>无法转换为java.util.function.Function<? super org.springframework.core.io.buffer.DataBuffer,? extends capture#3, 共 ?>)
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-messaging\src\main\java\org\springframework\messaging\handler\annotation\reactive\PayloadMethodArgumentResolver.java:238: 错误: 不兼容的类型: reactor.core.publisher.Flux<java.lang.Object>无法转换为org.reactivestreams.Publisher<? extends capture#1, 共 ?>
						flux = flux.switchIfEmpty(Flux.error(() -> handleMissingBody(parameter, message)));
						                                    ^
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-messaging\src\main\java\org\springframework\messaging\handler\annotation\reactive\PayloadMethodArgumentResolver.java:249: 错误: 不兼容的类型: 无法推断类型变量 R
							.map(buffer -> decoder.decode(buffer, elementType, mimeType, hints))
							    ^
    (参数不匹配; java.util.function.Function<capture#1, 共 ? super org.springframework.core.io.buffer.DataBuffer,capture#2, 共 ? extends capture#3, 共 ?>无法转换为java.util.function.Function<? super org.springframework.core.io.buffer.DataBuffer,? extends capture#3, 共 ?>)
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-messaging\src\main\java\org\springframework\messaging\handler\annotation\reactive\PayloadMethodArgumentResolver.java:252: 错误: 不兼容的类型: reactor.core.publisher.Mono<java.lang.Object>无法转换为reactor.core.publisher.Mono<? extends capture#1, 共 ?>
						mono = mono.switchIfEmpty(Mono.error(() -> handleMissingBody(parameter, message)));
						                                    ^
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-messaging\src\main\java\org\springframework\messaging\rsocket\DefaultRSocketRequester.java:290: 错误: 不兼容的类型: 无法推断类型变量 R
					.map(dataBuffer -> decoder.decode(dataBuffer, elementType, dataMimeType, EMPTY_HINTS));
					    ^
    (参数不匹配; java.util.function.Function<capture#1, 共 ? super org.springframework.core.io.buffer.DataBuffer,capture#2, 共 ? extends capture#3, 共 ?>无法转换为java.util.function.Function<? super org.springframework.core.io.buffer.DataBuffer,? extends capture#3, 共 ?>)
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-messaging\src\main\java\org\springframework\messaging\rsocket\DefaultRSocketRequester.java:289: 警告: [cast] 出现冗余的到<any>的转换
			return (Mono<T>) payloadMono.map(this::retainDataAndReleasePayload)
			       ^
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-messaging\src\main\java\org\springframework\messaging\rsocket\DefaultRSocketRequesterBuilder.java:211: 警告: [deprecation] org.springframework.messaging.rsocket.RSocketRequester.Builder中的connect(io.rsocket.transport.ClientTransport)已过时
	public Mono<RSocketRequester> connect(ClientTransport transport) {
	                              ^
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-messaging\src\main\java\org\springframework\messaging\rsocket\DefaultRSocketRequesterBuilder.java:205: 警告: [deprecation] org.springframework.messaging.rsocket.RSocketRequester.Builder中的connectWebSocket(java.net.URI)已过时
	public Mono<RSocketRequester> connectWebSocket(URI uri) {
	                              ^
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-messaging\src\main\java\org\springframework\messaging\rsocket\DefaultRSocketRequesterBuilder.java:199: 警告: [deprecation] org.springframework.messaging.rsocket.RSocketRequester.Builder中的connectTcp(java.lang.String,int)已过时
	public Mono<RSocketRequester> connectTcp(String host, int port) {
	                              ^
注: 某些消息已经过简化; 请使用 -Xdiags:verbose 重新编译以获得完整输出
5 个错误
4 个警告

> Task :spring-messaging:compileJava FAILED

> Task :spring-web:compileJava
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-web\src\main\java\org\springframework\http\client\MultipartBodyBuilder.java:148: 错误: 不兼容的类型: 无法推断org.springframework.http.client.MultipartBodyBuilder.PublisherPartBuilder<>的类型参数
			PublisherPartBuilder<?, ?> builder = new PublisherPartBuilder<>(name, (PublisherEntity<?, ?>) part);
			                                                             ^
    原因: 推论变量 P 具有不兼容的限制范围
      等式约束条件: capture#1, 共 ?
      上限: org.reactivestreams.Publisher<capture#2, 共 ?>,org.reactivestreams.Publisher<S>
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-web\src\main\java\org\springframework\http\client\reactive\AbstractClientHttpRequest.java:152: 错误: 不兼容的类型: 推断类型不符合上限
				.map(Supplier::get).collect(Collectors.toList());
				    ^
    推断: ? extends org.reactivestreams.Publisher<java.lang.Void>
    上限: java.lang.Object
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-web\src\main\java\org\springframework\http\codec\support\BaseCodecConfigurer.java:193: 警告: [deprecation] org.springframework.http.codec.CodecConfigurer.CustomCodecs中的withDefaultCodecConfig(java.util.function.Consumer<org.springframework.http.codec.CodecConfigurer.DefaultCodecConfig>)已过时
		public void withDefaultCodecConfig(Consumer<DefaultCodecConfig> codecsConfigConsumer) {
		            ^
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-web\src\main\java\org\springframework\http\codec\support\BaseCodecConfigurer.java:187: 警告: [deprecation] org.springframework.http.codec.CodecConfigurer.CustomCodecs中的writer(org.springframework.http.codec.HttpMessageWriter<?>)已过时
		public void writer(HttpMessageWriter<?> writer) {
		            ^
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-web\src\main\java\org\springframework\http\codec\support\BaseCodecConfigurer.java:181: 警告: [deprecation] org.springframework.http.codec.CodecConfigurer.CustomCodecs中的reader(org.springframework.http.codec.HttpMessageReader<?>)已过时
		public void reader(HttpMessageReader<?> reader) {
		            ^
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-web\src\main\java\org\springframework\http\codec\support\BaseCodecConfigurer.java:175: 警告: [deprecation] org.springframework.http.codec.CodecConfigurer.CustomCodecs中的encoder(org.springframework.core.codec.Encoder<?>)已过时
		public void encoder(Encoder<?> encoder) {
		            ^
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-web\src\main\java\org\springframework\http\codec\support\BaseCodecConfigurer.java:169: 警告: [deprecation] org.springframework.http.codec.CodecConfigurer.CustomCodecs中的decoder(org.springframework.core.codec.Decoder<?>)已过时
		public void decoder(Decoder<?> decoder) {
		            ^
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-web\src\main\java\org\springframework\http\codec\support\BaseDefaultCodecs.java:650: 错误: 不兼容的类型: 无法推断类型变量 R
				.map(Map.Entry::getKey)
				    ^
    (参数不匹配; java.util.function.Function<capture#1, 共 ? super java.util.Map.Entry<capture#2, 共 ?,java.lang.Boolean>,capture#3, 共 ? extends capture#2, 共 ?>无法转换为java.util.function.Function<? super java.util.Map.Entry<capture#2, 共 ?,java.lang.Boolean>,? extends capture#2, 共 ?>)
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-web\src\main\java\org\springframework\http\server\reactive\AbstractServerHttpResponse.java:221: 错误: 无法将类 reactor.core.publisher.Mono<T>中的方法 fromCallable应用到给定类型;
										return writeWithInternal(Mono.fromCallable(() -> buffer)
										                             ^
  需要: java.util.concurrent.Callable<? extends T>
  找到: ()->buffer
  原因: 无法推断类型变量 T
    (参数不匹配; java.util.concurrent.Callable<capture#1, 共 ? extends capture#2, 共 ? extends org.springframework.core.io.buffer.DataBuffer>无法转换为java.util.concurrent.Callable<? extends capture#2, 共 ? extends org.springframework.core.io.buffer.DataBuffer>)
F:\00OpenSource\SourceCode\spring-framework-5.3.x\spring-web\src\main\java\org\springframework\http\server\reactive\AbstractServerHttpResponse.java:274: 错误: 不兼容的类型: 推断类型不符合上限
				allActions = Flux.concat(Flux.fromIterable(this.commitActions).map(Supplier::get))
				                                                                  ^
    推断: ? extends reactor.core.publisher.Mono<java.lang.Void>
    上限: java.lang.Object
5 个错误
5 个警告

> Task :spring-web:compileJava FAILED

FAILURE: Build completed with 3 failures.

1: Task failed with an exception.
-----------
* What went wrong:
Execution failed for task ':spring-jdbc:compileJava'.
> Compilation failed; see the compiler error output for details.

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.
==============================================================================

2: Task failed with an exception.
-----------
* What went wrong:
Execution failed for task ':spring-messaging:compileJava'.
> Compilation failed; see the compiler error output for details.

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.
==============================================================================

3: Task failed with an exception.
-----------
* What went wrong:
Execution failed for task ':spring-web:compileJava'.
> Compilation failed; see the compiler error output for details.

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.
==============================================================================

* Get more help at https://help.gradle.org

BUILD FAILED in 18s
68 actionable tasks: 11 executed, 5 from cache, 52 up-to-date
Build scan background action failed.
org.gradle.process.internal.ExecException: Process 'command 'git'' finished with non-zero exit value 128
	at org.gradle.process.internal.DefaultExecHandle$ExecResultImpl.assertNormalExitValue(DefaultExecHandle.java:414)
	at org.gradle.process.internal.DefaultExecAction.execute(DefaultExecAction.java:38)
	at org.gradle.process.internal.DefaultExecActionFactory.exec(DefaultExecActionFactory.java:205)
	at io.spring.ge.conventions.gradle.WorkingDirectoryProcessOperations.exec(WorkingDirectoryProcessOperations.java:45)
	at io.spring.ge.conventions.gradle.ProcessOperationsProcessRunner.run(ProcessOperationsProcessRunner.java:40)
	at io.spring.ge.conventions.gradle.BuildScanConventions.run(BuildScanConventions.java:195)
	at io.spring.ge.conventions.gradle.BuildScanConventions.addGitMetadata(BuildScanConventions.java:139)
	at io.spring.ge.conventions.gradle.BuildScanConventions$$Lambda$554/202453117.execute(Unknown Source)
	at com.gradle.enterprise.gradleplugin.internal.extension.b$4.run(SourceFile:177)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)

A build scan was not published as you have not authenticated with server 'ge.spring.io'.
```"
855,1092471545,284831721,1803564,"I can't understand, so, which test result is expected? first or second.

From the `findAnnotationOnBean` method's comment describe as follow, I think test 1 is the expected behavior, am I right?

```
/**
	 * Find an {@link Annotation} of {@code annotationType} on the specified bean,
	 * traversing its interfaces and super classes if no annotation can be found on
	 * the given class itself, as well as checking the bean's factory method (if any).
	 * @param beanName the name of the bean to look for annotations on
	 * @param annotationType the type of annotation to look for
	 * (at class, interface or factory method level of the specified bean)
	 * @return the annotation of the given type if found, or {@code null} otherwise
	 * @throws NoSuchBeanDefinitionException if there is no bean with the given name
	 * @since 3.0
	 * @see #getBeanNamesForAnnotation
	 * @see #getBeansWithAnnotation
	 */

```"
856,1092482019,wilkinsona,914682,Both should pass. The tests are illustrating the described difference between static and instance bean methods.
857,1092509655,snicoll,490484,Thanks for the suggestion but we've been suggesting for years to the spring community to move from field injection to constructor injection. What you see as a cool feature can be quite problematic to support in practice and I'd very much rather stick with the JLS here.
858,1092512639,bclozel,103264,"You'll need to follow the [Build from source guide](https://github.com/spring-projects/spring-framework/wiki/Build-from-Source). We can't help you for your local setup.

Here are a few things to check:
* did you really `git clone` the repository or just download a tarball?
* it seems that the `git` binary is not available in your environment
* the JDK version being used by Gradle might not be the right one judging from the compilation errors
* you should use the local gradle wrapper, not your own Gradle install (use `./gradle.bat`)"
859,1092522937,JamesLiuft,28916832,"> Spring Framework `5.3.x` is building against Java 8 and `Method.isAccessible` is not deprecated in this version. `canAccess` has been introduced in Java 9 so we can't use it.

Is it requied Java 8 or Open Jdk 8?"
860,1092782549,poutsma,330665,"The truth of the matter is that the current streaming mode of the `DefaultPartHttpMessageReader` has many restrictions, and only a few operators of the resulting `Flux<Part>` can be used safely. That's why in version 6.0 of Spring Framework, we are implementing an alternative way of streaming multipart data. See #28006 for more details."
861,1092803346,snicoll,490484,"We've decided to revisit this at an individual component level instead, leaving a global mode up to Spring Boot (see https://github.com/spring-projects/spring-boot/issues/30559)"
862,1092811019,jhoeller,1263688,"I went with a `setConfigurationInitializer(Consumer<Configuration<?>>)` method, along the lines of `setEntityManagerInitializer` that we got in `AbstractEntityManagerFactoryBean`."
863,1092907425,archiecobbs,545866,"OK guys - but I'm a little disturbed that both comments seem to indicate a lack of understanding of what is being asked here.

@quaff wrote:
> Source file cannot be compiled to bytecode at the first step, there is no chance weaving happens.

This request has nothing to do with source code, other than allowing something to work that didn't work before.

The actual change would only affect the bytecode weaving process.

@snicoll wrote:
>  What you see as a cool feature can be quite problematic to support in practice and I'd very much rather stick with the JLS here.

Again, this has nothing to do with the JLS or source code so I no idea what you mean by ""stick with the JLS"".

Also, could you elaborate on what you mean by ""quite problematic to support in practice""?

"
864,1093118679,bclozel,103264,"I guess that the main problem with that approach is that the developer would need to write illegal Java code in the first place, if it's [leaving a final field unassigned](https://docs.oracle.com/javase/specs/jls/se17/html/jls-8.html#jls-8.3.1.2).

I'm also in favor of declining this feature. I don't think this is a pattern we want to promote.

Thanks for the suggestion!"
865,1093287269,archiecobbs,545866,"Argh, sorry I'm an idiot - of course in the original source code you can't have a `final` variable without also assigning something to it.

This feature is still possible (without the `final` keyword)... you'd just have to make the field `final` as part of the bytecode rewriting... or just assign it to `null` and fix that as part of the rewriting.

OK - I agree it's not worth the trouble. Thanks for the discussion."
866,1093367567,ajr3-gen,93659748,"Thanks for the feedback.  I guess we'll have to try to figure something else out.  I may have more questions as we work at it, but for now it seems clear that the current logic won't work with Jetty 10."
867,1093670492,LovelyJiuJiu,37336459,"> @LovelyJiuJiu, thanks for opening your first issue for the Spring Framework. 👍
> 
> In case you missed it, the feature you requested has been implemented for 6.0. See [#27818 (comment)](https://github.com/spring-projects/spring-framework/pull/27818#issuecomment-1046038910).

Thanks for letting me know, let's make Spring family stronger!"
868,1093826941,sbrannen,104798,"This regression has been fixed in 6fad00ed222c48f9d845bcea9d5a50dcf7c2a169.

@oliverlockwood, I tested your example application locally with a patch containing the fix, but it would be great if you could verify the fix on your end using an upcoming 5.3.19 snapshot build and let us know that it works for your."
869,1093838132,jnizet,1608223,"I can see how this is confusing, but I don't really see it as a bug. 

`andExpect()` expects a ResultMatcher. 
In the working case, that's what you're passing: `status().isOk` is an expression of type ResultMatcher. When it's match() method is called with an MvcResult, it checks that the status in the MvcResult is OK. So the working code is equivalent to

```kotlin
.andExpect { (mvcResult: MvcResult) ->
    status().isOk.match(mvcResult)
}
```

In the non-working case, you're passing `{ status().isOk }`. This is a lambda which creates a ResultMatcher but never calls it. I.e. it's equivalent to

```kotlin
.andExpect { (mvcResult: MvcResult) ->
    val matcher: ResultMatcher = status().isOk 
    return Unit
}
```

Note how the mvcResult is never used anywhere in this lambda, and how the ResultMatcher it creates is never used either.

An alternative would be to use the MockMvc Kotlin DSL:

```kotlin
        mockMvc.put(""/analyses/297e2c6c6a26a2ba016a27bd5f977f74"") {
            contentType = APPLICATION_JSON
            content = ""invalid""
        }.andExpect { status { isOk() } }
```"
870,1094063616,pivotal-cla,16822967,"@SonYoonSeok Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28310)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28310) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
871,1094063733,pivotal-cla,16822967,@SonYoonSeok Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28310)!
872,1094071840,sbrannen,104798,"Hi @SonYoonSeok,

Thanks for submitting your first PR for the Spring Framework.

Please note, however, that this functionality is already available via `org.springframework.web.reactive.function.client.DefaultWebClient.DefaultRequestBodyUriSpec.header(String, String...)`.

The first string is the header name, and subsequent strings are the header values.

In light of that, I am closing this PR."
873,1094072038,sbrannen,104798,"Closing in light of https://github.com/spring-projects/spring-framework/pull/28310#issuecomment-1094071840.

"
874,1094160322,pivotal-cla,16822967,"@Encyclopedias Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28311)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28311) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
875,1094219749,elab,483727,"> Did you think about rewriting primary transaction attributes by any override (In your code it is secondaryObj).

Could you give an example?"
876,1094261043,sebasira,11217669,Same here!
877,1094261980,Ahseo,53210177,same here!!!
878,1094262938,snicoll,490484,"There is a scheduled maintenance, see https://twitter.com/springops/status/1512176700288761864?s=21&t=Q5gDGGBEcE7vgza7OrdgyA"
879,1094278387,keybong,33020822,"same issue
I've never see this before"
880,1094287500,kurenchuksergey,20335086,"> > Did you think about rewriting primary transaction attributes by any override (In your code it is secondaryObj).
> 
> Could you give an example?

Yes, of course. I will improve the example 

Fistful DAO structures: 

```
@Component
Class ReadOnlyRepository {
   @Transaction(readOnly = true)
   void read()
}

@Component
@Transaction(readOnly = false)
class MasterRepository exntend ReadOnlyRepository {

}
```
 
And I invokes read method on the MasterRepository instance:
`applicationContext.get(MasterRepository.class).read() //like
`
then my attribute in TransactionAttribute still will be readOnly = true, but of course it isn't what I suspect when annotated MasterRepository by additional annotation"
881,1094306667,elab,483727,"OK, I understand your thought.

What about

```
@Component
class ReadOnlyRepository {
    @Transactional(readOnly = true)
    void read()
}

@Component
@Transactional
class MasterRepository extends ReadOnlyRepository {
}
```

(I removed `readOnly = false` on the MasterRepository.)

Which value of TransactionAttribute.readOnly would you expect now for masterRepository.read() ?"
882,1094308834,bclozel,103264,Duplicates #28313
883,1094341853,kurenchuksergey,20335086,"> OK, I understand your thought.
> 
> What about
> 
> ```
> @Component
> class ReadOnlyRepository {
>     @Transactional(readOnly = true)
>     void read()
> }
> 
> @Component
> @Transactional
> class MasterRepository extends ReadOnlyRepository {
> }
> ```
> 
> (I removed `readOnly = false` on the MasterRepository.)
> 
> Which value of TransactionAttribute.readOnly would you expect now for masterRepository.read() ?

I think it still should be readOnly = false behaviour, because it is default value for annotation. "
884,1094584772,kriegaex,1537384,"I looked into this issue too, because the [same question](https://stackoverflow.com/q/71775299/1082681) was asked on Stack Overflow. Only later I found it here, because I also just wanted to raise an issue for it.

Actually, this not only happens for this rather strange scenario using both self-injection and `@Transactional` from within the `ApplicationListener` implementation, but in other cases where listener is being proxied, too, for example if it is the target of a Spring AOP `@Aspect`. This is a fact, not pure speculation. I tried, and the result is the same.

As for the root cause: In `AbstractApplicationEventMulticaster.retrieveApplicationListeners`, there are two loops searching for listeners. The first one finds the original listener, the second one finds the bean, which yields a proxy instance.

https://github.com/spring-projects/spring-framework/blob/c9e781676271a980d39063fc1f23a348b0d37be1/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java#L224-L232

This would be relatively easy to remedy,
  * either by checking `allListeners` for duplicates after both loops have finished
  * or by checking for existing non-proxy elements upon inserting in the loop checking registered beans.

Duplicates in this context could be identified by  `AopProxyUtils.getSingletonTarget(listener)`.

How about this?

```patch
--- a/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java	(revision Staged)
+++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java	(date 1649655053343)
@@ -260,8 +260,9 @@
 			for (String listenerBeanName : listenerBeans) {
 				try {
 					if (supportsEvent(beanFactory, listenerBeanName, eventType)) {
-						ApplicationListener<?> listener =
-								beanFactory.getBean(listenerBeanName, ApplicationListener.class);
+						ApplicationListener<?> listener = (ApplicationListener<?>) AopProxyUtils.getSingletonTarget(
+							beanFactory.getBean(listenerBeanName, ApplicationListener.class)
+						);
 						if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {
 							if (retriever != null) {
 								if (beanFactory.isSingleton(listenerBeanName)) {
```

This fixes the problem, at least in this context. It might cause problems elsewhere, please verify. If this is OK, would you like to have a PR? If so, for which branch? _5.3.x_ or _main_? Maybe I could create a PR for _main_ and a committer could back-port it to all relevant versions which still get updates.

Actually, in the same class there is some proxy unwrapping going on in another place already, seemingly in order to **avoid** getting unwrapped objects into the list of listeners, which is the opposite of what my patch does. Hmm...

https://github.com/spring-projects/spring-framework/blob/c9e781676271a980d39063fc1f23a348b0d37be1/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java#L106-L111

**Edit:** I just debugged into that code, and it is called indirectly via `AbstractBeanFactory.getBean(String)` and `AbstractAutowireCapableBeanFactory.createBean(String, RootBeanDefinition, Object[])`, as you can see here:

![image](https://user-images.githubusercontent.com/1537384/162677617-ef2336be-16c1-4313-866e-fa8a6678c2ab.png)

If you look at the variables in the top stack frame, you see that in `AbstractApplicationEventMulticaster.addApplicationListener(ApplicationListener<?>)` the method parameter `listener` is an unwrapped bean, but at the same time the proxy exists already, as can be seen when inspecting the value of `listener.eventDemoListener` (the auto-wired self-reference). So along the way, somehow the proxy gets lost or is never retrieved. I.e., the logic in `addApplicationListener` cannot avoid the unwrapped listener to be added to the list, because what it sees is unwrapped already. I.e., my workaround in the patch above to also unwrap the bean is something that might cause duplicate calls in other situations when `addApplicationListener` really does get called with a proxy instance. Then it would not unwrap it, but in the beans list we would have an unwrapped object due to my patch. 

In which way ever this problem is going to be solved, it would be important to either never or always unwrap proxies in order to avoid effective duplicates. To always unwrap would be safe, because unwrapping is always possible, but determining if there is a proxy for the method parameter in `addApplicationListener` elsewhere is not easily possible. Another workaround would be to make sure that `addApplicationListener` is never called with an unwrapped object in the first place, if a proxy exists. But how to ensure that, is beyond my knowledge."
885,1094609731,lonre,181109,"Hi, any update on this? @rstoyanchev 

"
886,1094623616,morenice,1031962,"@mp911de Thanks your answer.

As you said, it seems to be a normal channel closure process. If client connection was disconnected was shown ""inactive"" keyword in the backtrace.

but I found that cancel issue after onComplete() only occurs in VMs. For example,
 1. cancel did not appear in openjdk installed with brew on MacOS.
 2. cancel appeared in virtual machine on MacOS.
 3. cancel did not appear in physical machine worker node on Kubernetes
 4. cancel appeared in virtual machine worker node on Kubernetes

In my opinion, It seems to be affected by the VM. Have there been any similar cases?"
887,1094643516,quaff,143040,这是前不久修复了的已知问题，难道你用最新版本复现了？
888,1094646474,bclozel,103264,"@1290708840 if you have concerns about a CVE fix, the responsible thing to do is to reach out to the team using the appropriate channels: https://spring.io/security-policy"
889,1094648231,MrBuddyCasino,3044875,"You're totally right, thanks for the detailed explanation! This is an example of the main failure mode of DSLs in my experience: what actually happens becomes more obfuscated in the quest for aesthetic call chains. Sorry to have wasted your time."
890,1094648823,bclozel,103264,"Duplicates #28320
Please do not create duplicate issues."
891,1094662810,kriegaex,1537384,"I think I found a better, more universal solution and created a PR:

https://github.com/spring-projects/spring-framework/blob/1da3022c27a928988758a5f6bc43913f19eccccf/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java#L266-L281

I am confident that this is going to work. There might be a way to avoid the proxy targets (unwrapped objects) in the listeners list in the first place, but this method cannot rely on it, as we can see in this issue. So this more defensively implemented solution should be OK."
892,1094692082,michaldo,4304236,"I would like to know purpose of this PR.
I'm going to replace snakeyaml suporting YAML 1.1 with snakeyaml-engine supporting YAML 1.2. But API is different and `setSupportedCustomTypes` is not easy replaceable.

I see that Spring Boot defines `OriginTrackedYamlLoader`, a subclass of `YamlProcessor`. It means clients can modify  YamlProcessor - especially supported types - without explicite API."
893,1094725856,sdeleuze,141109,"Ok thanks for your feedback, I think I will just make a new try with reachable types added to other hints than reflection one and let it optional."
894,1094888428,shikha-varun,73178897,"Hi , I am a beginner and would like to work on this issue with some guidance if fine  "
895,1094905437,rstoyanchev,401908,"Okay, I'm closing for now, but feel free to add comments if needed."
896,1094919226,rstoyanchev,401908,Thanks for the feedback. I've created #28324 to revisit this area in more detail for 6.0.
897,1094939935,sbrannen,104798,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
898,1095069425,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
899,1095069474,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
900,1095079703,bclozel,103264,You might want to add `mavenCentral()` as a  main location for resolving artifacts in the `repositories` DSL block. 
901,1096129264,snicoll,490484,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
902,1096220002,snicoll,490484,There is no need to duplicate this with the stackoverflow question you've already created.
903,1096569313,agoston,3763887,@jxblum can you extract that specific `@DependencyOf` from the library you referenced? I think I speak for many who would really need this during testing.
904,1096835799,kkondratov,4076121,"We've recently ran into the same issue where using the `WebClient.RequestBodySpec#cookies` method that accepts a MultiValueMap multiple cookies were set in the request.

running 

```
final var cookies = new LinkedMultiValueMap<String, String>();
cookies.add(""cookie1"", ""foo"");
cookies.add(""cookie2"", ""bar"");

final var spec = webClient.metho(GET).uri(url)
.cookies(specCookies -> specCookies.addAll(cookies));
```

resulted in an HTTP request where two cookies were set:
```
WRITE: ....B GET /ru HTTP/1.1
...
cookie: cookie1=foo
cookie: cookie2=bar
```

EDIT: spring webflux version 5.3.18"
905,1096842281,incedo,676725,Any ideas if this will be treated as bug?
906,1096881476,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
907,1097002936,fmbenhassine,1210553,"> Please, reopen if still relevant.

This issue is still relevant with SF 6.0.0 snapshots. Can you please take a look? This is actually blocking for https://github.com/spring-projects/spring-batch/issues/756."
908,1097427530,seabamirum,3449269,"I'm sorry I could not make a test case, because there's no straightforward way to get an instance of WebDataBinder without a target object that is already instantiated.

However I think allowing custom property editors for constructor fields without setters would be a welcome improvement, if only for consistency in the framework. Right now it's not clear why it doesn't work, and I don't think it is documented.

In my case I wanted to use a custom PasswordEncodingPropertyEditor to immediately encode the password in Spring Security's User object on signup. The only workaround that I found was to make a dummy object for binding, and then call the User.builder() method in the controller with the bound fields of that object."
909,1097820824,albertocavalcante,54247214,@akefirad  Did you solve it?
910,1097870036,sbrannen,104798,"Although this is a very minor change, I've merged it into `main`.

I was also surprised that there's only one example using `instanceof` (aside from the SpEL examples).

Thanks"
911,1098008431,akefirad,2142363,"Not really, I had to make the field non-final."
912,1098996682,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
913,1099207988,sbrannen,104798,"The behavior you have described is based on the order in which elements are processed in `ConfigurationClassParser.doProcessConfigurationClass()`.

https://github.com/spring-projects/spring-framework/blob/7820804bf6d07635d6f28c607ecde9243db4628f/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java#L287-L328

The order is:

- Process `@ComponentScan` annotations
- Process `@Import` annotations
- Process `@ImportResource` annotations
- Process `@Bean` methods
- ...

Note that `@ComponentScan` processing results in eager bean definition registration for components detected via scanning, which explains why `TestSuccessDependencies` passes.
"
914,1099226604,y987425112,23693824,No one responded??
915,1099237215,sbrannen,104798,"Hi @ryoheinagao,

Thanks for opening your first issue for the Spring Framework.

What is your concrete use case for creating an instance of `HttpHeaders` from an existing instance of `HttpHeaders` and not wanting modifications to write through to the original instance?"
916,1099251329,gallyamb,5419623,"@sbrannen The code snippet you provided is responsible for all @Configurations' classes parsing. The actual condition evaluation happens after the `ConfigurationClassParser.parse` at the `this.reader.loadBeanDefinitions(configClasses);`
https://github.com/spring-projects/spring-framework/blob/7820804bf6d07635d6f28c607ecde9243db4628f/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java#L350-L362
At this point all parsing already performed. But `beanFactory` still unable to find bean names for required type, if it's registered via `@Bean` annotated method. AFAIU, the beanFactory already knows about bean, but for some reason (that I recognise as a bug) it could not. Am I wrong?"
917,1099630949,tyler2cr,23427872,Resolves https://github.com/spring-projects/spring-framework/issues/28305
918,1099631222,tyler2cr,23427872,"Resolves https://github.com/spring-cloud/spring-cloud-task/issues/833
"
919,1099891444,pivotal-cla,16822967,"@mostcool Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28346)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28346) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
920,1100118023,ExxaD,78535390,"Need this too, would be great feature"
921,1100283640,jxblum,5247119,"Hi @agoston - Thank you for your continued interests in this feature. I am planning to break this out into a separate library along with many other Spring Framework (and other Spring project, e.g. Spring Boot) extensions I have developed in my specific Spring projects over the years.  I have no planned timeframe yet for doing so.

I will give this more thought and post back here soon when I have some concrete details."
922,1100560204,SentretC,44996835,"Seems that it results from the default locale-encoding-mapping setting of Tomcat.
The embedded Tomcat that Spring Boot creates [has this setting overridden](https://github.com/spring-projects/spring-boot/blob/aecb035e99467c1cdcb86c814209416ca5fe8352/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java#L234) to use UTF-8 instead.

You can add the following to your web.xml file (inside the `web-app` element) to achieve the same effect. I don't know whether this can be done programmatically.
```
<locale-encoding-mapping-list>
    <locale-encoding-mapping>
        <locale>en</locale>
        <encoding>UTF-8</encoding>
    </locale-encoding-mapping>
    <locale-encoding-mapping>
        <locale>fr</locale>
        <encoding>UTF-8</encoding>
    </locale-encoding-mapping>
    <locale-encoding-mapping>
        <locale>ja</locale>
        <encoding>UTF-8</encoding>
    </locale-encoding-mapping>
</locale-encoding-mapping-list>
```

The application property [server.servlet.encoding.force-response](https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties.server.server.servlet.encoding.force-response) can be used to force response encoding, however setting it to true (while leaving [server.servlet.encoding.charset](https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties.server.server.servlet.encoding.charset) to default) results in "";charset=UTF-8"" being added even for images, while [server.servlet.encoding.mapping.*](https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties.server.server.servlet.encoding.mapping) works for embedded containers only"
923,1100635685,linghengqian,20187731,"YAML 1.1 and YAML 1.2 are two different sets of specifications, which is why SnakeYAML separates the two components. Is there an issue to discuss such a big change in advance?"
924,1100662354,michaldo,4304236,"Main reason to change in ambigous conversion unquoted Yes, No, On, Off.
I do not think the change is big. Contrary, I think the change will be transparent to almost all users."
925,1100698921,sbrannen,104798,"This has been merged into `main`.

Thanks"
926,1100960289,hicnar,1816194,Any news here?
927,1101173727,quaff,143040,Any update?
928,1101262507,bclozel,103264,"I don't think this is related to Spring Framework.

A couple of things might explain this change of behavior:
* the mongodb driver upgrade from 4.4.1 to 4.4.2 (see spring-projects/spring-boot#29796)
* the spring data upgrade from 2021.1.1 to 2021.1.2 (see spring-projects/spring-boot#29721)

While staying on Spring Boot 2.6.4, could you try rolling back those upgrades by overriding the version (see [maven](https://docs.spring.io/spring-boot/docs/2.6.6/maven-plugin/reference/htmlsingle/#using.parent-pom) and [gradle](https://docs.spring.io/spring-boot/docs/2.6.6/gradle-plugin/reference/htmlsingle/#managing-dependencies.dependency-management-plugin.customizing))?

When you're done confirming which upgrade is responsible for this change of behavior, please report it to the corresponding project with as much information as possible. A screenshot of a stacktrace is definitely not helping - a complete report in txt format or better, a sample application reproducing the problem is a better fit. "
929,1101316659,Qingyu-Limitless,95165616,"I got it, thanks very much"
930,1101391437,ryoheinagao,15025317,"@sbrannen Thank you for your comment.

For example, most of header's value are constant but some value(secret token or user's location info) are vary in each request. And constant pairs are common among multiple implementation classes or methods. In this case, I want to create an instance from constant header, and then I want to add these temporary key-value. The pseudo code is below.

In the case of sharing key-value between implementation class or there are many constant value, I think instantiation from existing `HttpHeaders` is effective.

```java
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;

public class SomeRepository {

    private static final HttpHeaders STATIC_HEADER = new HttpHeaders();

    static {
        STATIC_HEADER.add(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON_VALUE);
        // please assume this header has many key-value pairs and is shared among methods or classes
    }

    String findSomePrivateValue(String userToken,){
        var header = new HttpHeaders(STATIC_HEADER);
        header.add(""X-Secret"", userToken);
        // rest operations etc...
    }
    
    String findUserAround(String userLocation){
        var header = new HttpHeaders(STATIC_HEADER);
        header.add(""X-Location"", userLocation);
        // rest operations etc...
    }
}
```"
931,1101418791,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
932,1101418824,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
933,1101435968,284831721,1803564,@wilkinsona Could you approve the ci workflow of my pr? Thanks very much!
934,1101968037,SentretC,44996835,"Even though it's not a bug of Spring, I don't think a lot of people want to rely on their container to map between locale and encoding. Maybe it's better to provide an option to simply set encoding explicitly along with locale, and have Spring Boot enable it by default? (than the current behavior which is to reset specific mappings when configuring an embedded container)"
935,1102040400,kriegaex,1537384,"Hello. I am not sure who is going to be able to look into this, maybe @jhoeller or @sbrannen? Is there anything I can or need to do in order to facilitate this being reviewed? I know there are many open bugs in Spring, but only maybe 10% of them have actual PRs attached. Maybe there is a way to expedite this and get it off the table. If I just should be waiting because of work overload or Easter holidays, feel free to scold me, I would not mind. At least I would know that this was noticed and I just need to wait. 🙂"
936,1102295517,quaff,143040,"I think you want `description is null` not `:description is null`, are you?"
937,1102351444,bastianschott,12230588,"No, I want `:description is null`. This should have the effect, if there is no parameter given, then all Users should be returned.

My actual use-case has multiple parameters to search for users, i.e. search for name and description. If one parameter is not given, then the parameter should be ignored, but the other parameter should be used:
```
SELECT * 
FROM USERS 
WHERE 
    ( NAME IS NULL OR NAME LIKE ? ) AND 
    ( DESCRIPTION IS NULL OR DESCRIPTION LIKE ? )
```"
938,1102589177,rbri,2544132,@rstoyanchev any news here? i plan a new release for the weekend and like to know if this is working
939,1102644712,poutsma,330665,"Parts in a multipart request that do not have the `filename` in their Content-Disposition header are not considered file uploads, and therefore cannot be bound to `MultipartFile` objects. They can however, be bound to other types instead, by using the `@RequestPart` annotation. JSON can be deserialized into objects, for instance, as explained [in the reference documentation](https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-multipart-forms)."
940,1102672089,poutsma,330665,"As I've tried to explain to you in #28296, the streaming mode of `DefaultPartHttpMessageReader` has fundamental limitations which cannot be resolved easily. The feature will be most likely be deprecated as of Spring Framework 6.0 in favor of #28006."
941,1103558419,bclozel,103264,"This is by design, see #27887"
942,1103563082,GeorgePap-719,56389632,Im also having this problem. I can provide a simple reproducible project if would help you.  
943,1103612005,membersound,5269630,"I can report back missing modules result in **runtime errors**, which is really bad.

I discovered it when using a `DataSourceUtils.getConnection(ds);` call. As I did not catch exceptions at this stage, the app always exited with statuscode=0 inside a `docker` container, but worked without problems locally.

Took me several hours to identify the spot, and fix it by including jdeps `java.sql.rowset` module additionally to `java.sql`.

Beware that obviously building spring-boot apps with a jdeps minimal jre modules configuration might lead to unpredictable results."
944,1103699086,poutsma,330665,"This feature is now in `main`, will be in Spring Framework 6.0 M4 when it comes out on May 11th. I would really appreciate feedback before 6.0 RC is released.

There is no reference documentation as of yet, it will be written when the RC approaches, but for now there is a substantial amount of Javadoc on the main type: `PartEvent`, see [here](https://docs.spring.io/spring-framework/docs/6.0.0-SNAPSHOT/javadoc-api/org/springframework/http/codec/multipart/PartEvent.html).

Note that I changed the name of this type from `PartData` to `PartEvent`, as I think that more clearly describes the intent of the type."
945,1103712888,snicoll,490484,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug.

`@Resource` uses by-name semantic, see [the documentation](https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-resource-annotation)."
946,1103730906,poutsma,330665,"@djouvin 

> The conditions for this composite approach to work is to maintain the following predicates true:
> 
> * part demand and part content demand must not be mixed and must be processed differently
> * a part content flux has to be subscribed _before_ any other part is processed
>   
>   * the corollary is that the next part must not be delivered by the producer without the consumer having fully consumed, or explicitly cancelled the previous part's content flux : the part should thus expose an explicit `cancel` or `dispose` method (for example, by implementing the `Disposable` interface). We are bending here a little the reactive streams contract semantics (part content are in a way ""pre-subscribed""), but there is no other way to ensure parts are not skipped unintentionally by a prefetching operator
>   * prefetch should not be used for part consumption on the outer flux, as it will never be honored by the producer, but it can be used for part content consumption on the inner flux (which behaves as a regular `Flux<DataBuffer>`)
>   * the next part should be delivered to the outer flux consumer :
>     
>     * when the previous part's content delivery is complete,
>     * or when all subscriptions to this part content are cancelled,
>     * or when the part itself is cancelled or disposed,
>   * and of course part demand is still there and the outer flux itself is not cancelled
> * part content delivery should honore content demand as any data buffer flux would, until of course the end of the part is encountered (then the content flux is completed and the potentially remaining prefetched data buffer are retained by the producer)

While the user might be able to limit their usage of operators on the `Flux<Part>` we provide, it is impossible to make the same guarantee when that flux is passed on to another library or framework. As a consequence, things can unexpectedly break when they worked perfectly fine before. 

> I agree that the composite approach implementation is more complex, and I am not sure it is always interesting to have an outer `Flux<Part>`, because most of the time an HTTP stream has only one, or just a few, parts (so viewing parts as a `Flux` is not a must). It does however fit well with `flatMap` and `concatMap` operators. And, it can be build on the `PartData` approach too (as it is now with the `PartToken` generator) : consumers would have the choice to consume either directly a `Flux<PartData>` or a `Flux<Part>` wrapping that `Flux<PartData>`.

I will try to refactor the `PartGenerator` to use the functionality for this issue, and will let you know how that proceeds.

"
947,1103762004,ingogriebsch,18695610,I would like to repeat @billNaylor question... Has there been any progress on this? It would be really helpful to understand in more detail how to migrate from a RestTemplate to a WebClient (especially if not switching from an imperative stack to a reactive stack).
948,1103989052,poutsma,330665,"Even if we did make `NettyHeadersAdapter` serializable it would not help much, because it wraps a Netty type (`io.netty.handler.codec.http.HttpHeaders`) that is also not serializable. This dependency on `HttpHeaders` was intentional, and introduced to reduce memory usage.

I am afraid that I see no other option than to map the `WebClientResponseException` to your own custom exception type, which only contains serializable types."
949,1103996491,gallyamb,5419623,Could anyone verify my thoughts about this issue?
950,1104017192,vwyuheng,1711915,"# 

Error creating bean with name 'sss.serverDubboApi.HelloServiceImplDubboApiController': Initialization of bean failed; nested exception is org.springframework.aop.framework.AopConfigException: Could not generate CGLIB subclass of class .sss.serverDubboApi.HelloServiceImplDubboApiController: Common causes of this problem include using a final class or a non-visible class; nested exception is org.springframework.cglib.core.CodeGenerationException: java.lang.NoClassDefFoundError-->sss/serverDubboApi/HelloServiceImplDubboApiController
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:628)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:233)
at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveNamedBean(DefaultListableBeanFactory.java:1282)
at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveNamedBean(DefaultListableBeanFactory.java:1243)
at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveBean(DefaultListableBeanFactory.java:494)
at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:349)
at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:342)
at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1172)
at swagger.dubbo.builder.SpringHelper.registerBeanDefinition(SpringHelper.java:30)
at swagger.dubbo.ApiScannerBootstrap.init(ApiScannerBootstrap.java:54)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:389)
at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:333)
at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:157)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:440)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1796)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:953)
at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)
at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)
at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:740)
at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:415)
at org.springframework.boot.SpringApplication.run(SpringApplication.java:303)
at org.springframework.boot.SpringApplication.run(SpringApplication.java:1312)
at org.springframework.boot.SpringApplication.run(SpringApplication.java:1301)
at sss.CustomApplication.main(CustomApplication.java:20)
Caused by: org.springframework.aop.framework.AopConfigException: Could not generate CGLIB subclass of class sss.serverDubboApi.HelloServiceImplDubboApiController: Common causes of this problem include using a final class or a non-visible class; nested exception is org.springframework.cglib.core.CodeGenerationException: java.lang.NoClassDefFoundError-->/serverDubboApi/HelloServiceImplDubboApiController
at org.springframework.aop.framework.CglibAopProxy.getProxy(CglibAopProxy.java:209)
at org.springframework.aop.framework.ProxyFactory.getProxy(ProxyFactory.java:110)
at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.createProxy(AbstractAutoProxyCreator.java:478)
at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:342)
at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:291)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:455)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1808)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
... 38 common frames omitted
Caused by: org.springframework.cglib.core.CodeGenerationException: java.lang.NoClassDefFoundError-->/sss/serverDubboApi/HelloServiceImplDubboApiController
at org.springframework.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:558)
at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:363)
at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
at java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:264)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java)
at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
at org.springframework.cglib.proxy.Enhancer.createClass(Enhancer.java:419)
at org.springframework.aop.framework.ObjenesisCglibAopProxy.createProxyClassAndInstance(ObjenesisCglibAopProxy.java:57)
at org.springframework.aop.framework.CglibAopProxy.getProxy(CglibAopProxy.java:206)
... 45 common frames omitted
Caused by: java.lang.NoClassDefFoundError: sss/serverDubboApi/HelloServiceImplDubboApiController
at java.base/java.lang.ClassLoader.defineClass1(Native Method)
at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1016)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.springframework.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:555)
... 60 common frames omitted
Caused by: java.lang.ClassNotFoundException: sss.serverDubboApi.HelloServiceImplDubboApiController
at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)
at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
... 67 common frames omitted

jdk11 spring5.3.18 springboot 2.6.6
reflect generate controler class
runtime jdk compile
inject spring failed
please help me,thanks"
951,1104023711,bclozel,103264,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
952,1104023955,snicoll,490484,"@vwyuheng we don't need the issue tracker for questions, please ask on StackOverflow. "
953,1104207753,jomach,4804546,Would be great if you could provide a working example of this :) thx and great work !
954,1104237355,sagar11988,43214123,"The potential issue because of you tried to call blocking the operation with a non-Blocking Netty container. Please add below dependencies 

              <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
		</dependency>

if you want to use WebClient in a blocking form, it seems that you need to operate it in a threaded environment that supports blocking

Code Snippet for reference :
![blockingCodeSpringFramwork](https://user-images.githubusercontent.com/43214123/164291319-2bc55329-f87f-4d91-891f-677227c35d92.png)

"
955,1104517784,h4xmd,6089786,"This is a bit odd, the filename is not mandatory in the request.  The MultipartFile class even says this field may be null so your response is out of line with the intention of the class."
956,1104825306,bclozel,103264,"I don't think we want to allow `InputStream` / `OutputStream` types here, as this mixes the error handling: imperative with exceptions being thrown and reactive with error signals.

I think it would be better to do the following:

```java
OutputStream output = //...
Flux<DataBuffer> buffers = webClient.post().uri(""http://localhost:8080/hello/world"")
    .bodyValue(""Hello!"")
    .retrieve()
    .bodyToFlux(DataBuffer.class);

Flux<DataBuffer> writeResult = DataBufferUtils.write(buffers, output);
// Instead of blocking, you could reuse the publisher here to connect to other APIs or synchronize with other asynchronous work.
writeResult.blockLast();
```"
957,1104977336,my420840806,5836782,"According to the @Resource document, if the name does not match, it will match according to the type, but it does not match according to the @Autowired type, which does not match its definition. My suggestion is to improve the logic of @Resource underlying injection to enable it to correctly identify generic types. 
Thank you！"
958,1105009461,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
959,1105015525,snicoll,490484,I don't know what documentation you are referring to but the fallback on type when no name is provided is best efforts. You should not be using it if the type matters like in your example. 
960,1105070875,raphw,4489328,"From my perspective, where I am currently migrating a rather large project, I disagree with your conclusion. The [javadoc for `RestTemplate`](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html), which is widely used today, states:

> Please, consider using the org.springframework.web.reactive.client.WebClient which has a more modern API and supports sync, async, and streaming scenarios.

As things are, `RestTemplate` offers access to the request's `OutputStream` via `HttpOutputMessage` and the response's `InputStream` via `HttpInputMessage`. If the use of `WebClient` should be considered as a way forward from `RestTemplate`, I consider it meaningful that one can opt into using the same primitives of the former API, what makes refactoring large code bases first feasible. As by your own documentation, `WebClient` is intended also in synchronous use cases where streams make sense as an abstraction, especially when considering Loom in future JVM versions. And even without Loom, I argue that synchronous APIs are much more common today and will stay the standard approach also for many years to come.

Similar to your suggestion, in my current migration attempt, I am using `byte` arrays as intermediaries for input and output streams (via `ByteArrayInputStream` and `ByteArrayOutputStream`), but the memory usage and through-put of the application has worsened significantly due to the intermediate buffers. I am afraid, that this ""easy"" solution will be picked up by many, to emulate the ""old API"" in the synchronous use cases, what will result in a practical reduction of performance of many web-client-migrated Spring applications as the path of least resistance is often chosen.

Also, `InputStream` and `OutputStream` are omnipresent in the Java library landscape and it is used by many third-party libraries, so many users will at some point have a need to create compatibilities with these streams, even if there was a will to use the reactive APIs. Even `DataBuffer`s allow unwrapping to `InputStream`, so clearly you are aware of this.

Please consider also that the JVM's own `HttpClient` offers such APIs for the response via [`BodyHandlers.toInputStream()`](https://docs.oracle.com/en/java/javase/12/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandlers.html#ofInputStream()) and similarly for the request via [`BodyPublishers.ofInputStream`](https://docs.oracle.com/en/java/javase/12/docs/api/java.net.http/java/net/http/HttpRequest.BodyPublishers.html#ofInputStream\(java.util.function.Supplier). In my opinion this is a clear recognition that there is a need for such interoperability. If you ever wanted to present a `HttpClient` facade for Spring's `WebClient` you would also need such codes."
961,1106322772,Jason-zh13,76981270,"嗯说的不错 点赞吧
"
962,1106455328,grzeg,99012914,it is relevant for sure! 
963,1106707041,btpnlsl,7227778,"I believe the OS bug is fixed starting in kernel 5.10 (starting in 5.10-rc6). The bug repros in kernel 5.10-rc4 but not 5.10-rc6. 

I'm fairly sure that the bug fix comes from [this commit](https://github.com/torvalds/linux/commit/01770a166165738a6e05c3d911fb4609cc4eb416) which describes a race condition in the Linux TCP stack where two duplicate sockets will be created in the established connections hashtable."
964,1107541623,taoj-action,25186652,"When running a unit test using @WebMvcTest(), the value is not decoded. Auto-decode only happens when running the application."
965,1107675686,quaff,143040,"Spring Boot use `tomcat`  by default, please ensure you are using `undertow`."
966,1107700618,taoj-action,25186652,"Yes, we are using undertow.
```
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-undertow'
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
```"
967,1107733998,pivotal-cla,16822967,"@zhangmingqi09 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28372)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28372) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
968,1107784516,snicoll,490484,@pivotal-cla this is an obvious fix.
969,1107784982,pivotal-cla,16822967,@zhangmingqi09 This Pull Request contains an obvious fix. Signing the Contributor License Agreement is not necessary.
970,1107784983,pivotal-cla,16822967,@zhangmingqi09 This Pull Request contains an obvious fix. Signing the Contributor License Agreement is not necessary.
971,1107785215,snicoll,490484,@zhangmingqi09 thank you for making your first contribution to Spring Framework.
972,1107786671,snicoll,490484,Thanks again @izeye 
973,1107806169,pivotal-cla,16822967,"@kuojean Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28373)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28373) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
974,1108104291,pivotal-cla,16822967,"@nesarptr Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28375)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28375) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
975,1108105037,pivotal-cla,16822967,@nesarptr Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28375)!
976,1108114454,nesarptr,97525250,"Hey, can anyone help me with this issue! I have agreed with all licenses and agreements then why the ""workflow waiting for approval"" label is not going from my pr?"
977,1108159747,snicoll,490484,"> why the ""workflow waiting for approval"" label is not going from my pr?

Please be patient, GitHub already mentioned that a maintainer needs to approve running workflows for first time contributors (Right below ""1 workflow awaiting approval""). 

> I have seen there are some extra line breaks in some java files between the import statement.

That is done on purpose, for the purpose of increasing code readability actually. See [the wiki](https://github.com/spring-projects/spring-framework/wiki/Code-Style#import-statements). We also have checkstyle rules for this so if you ran the build, you'd have seen it is now failing.

> I removed those and I think that will increase the code readability.

This is largely subjective and we usually don't accept PRs that introduce stylistic code change like this. In this very case, it is doing the opposite of what we want anyway.
 "
978,1108220177,rstoyanchev,401908,"The overall scenario is more clear now. On Servlet containers in WebFlux, however, we call `AsyncContext.setTimeout(-1)`, i.e. the socket should never time out. So it's not clear what's causing the connection to close and that makes it challenging to think about where to add logging.

Have you tried putting log statements in a `WebFilter` to determine what leads to the connection getting closed? If you are able to provide something that simulates the issue, we can also also take a look.
"
979,1108224880,rstoyanchev,401908,"Thanks for elaborating.

We do support `Part` for data binding, but only in fallback mode, when there is no `MultipartResolver` (this is in `ServletRequestDataBinder`). If you don't want to use `MultipartFile` you need to make sure that a `MultipartResolver` is not declared. 
"
980,1108228916,rstoyanchev,401908,"Thanks for the sample code. `CustomException` is a nested cause, more than a couple of levels deep. On the Spring MVC we unwrap all causes and provide those to the exception handler method. On the WebFlux side we only pass the first cause. It looks like we need to apply this change b587a16d460ad10a98874796c389b933ff85e457 on the WebFlux side too.
"
981,1108293929,rstoyanchev,401908,"Thanks for the request.

`WebSessionManager` and related components are pluggable, so this would have to be done independent of the actual implementations, i.e. wrapping the `WebSessionStore` in `WebSessionManager` and the `WebSession` that that returns. This would allow intercepting create and retrieve on `WebSessionStore`, and `save` and `invalidate` on `WebSession`. I'll turn this into a feature request, but an application could do the same in the mean time.

For maxSessions, that's implementation specific but could be tracked by checking for errors from `save.

For maxIdleTime, which is also implementation specific, there isn't any good way to detect that. You can get the map of all sessions and for each check if it is expired but that's not ideal. It might require exposing a `WebSession` callback that notifies when a session is detected to be expired.
"
982,1108342183,rstoyanchev,401908,I'm not convinced this needs to be applied throughout. Especially where variables are used once.
983,1108382016,rstoyanchev,401908,"The header is indeed considered present but without a value. In the case where type conversion is required, it can ""hide"" the original empty value, and hence the change in 5.3 with #23939. We could improve the Javadoc for this."
984,1108386735,rstoyanchev,401908,"As to the question, why empty is not treated as missing, it really depends on your use case and perspective. There have been many discussions on the subject, and changing behavior will only lead to regressions for others."
985,1108394124,rstoyanchev,401908,I was not able to reproduce the issue. Please provide a sample that reproduces the issue.
986,1108408294,rstoyanchev,401908,You should be able to register a custom converter for this. That should be checked before the `Optional` check in `TypeConverterDelegate`.
987,1108428556,rstoyanchev,401908,"> If you do not like what I am trying to accomplish here, move to section ""The Bug"", as in my opinion this needs to get fixed either way.

Preferences aside, I'm not sure it's a good idea to alter semantics this way on existing annotations. It would be more obvious to use [meta annotations](https://github.com/spring-projects/spring-framework/wiki/Spring-Annotation-Programming-Model#meta-annotations), e.g. `@ApiMapping` or something similar. This would make it more clear, but I would still consider alternatives, e.g. we support a [pathPrefix with a Class predicate](https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-config-path-matching) or possibly placeholder for the API prefix in the request mapping.

As for the checks that both mappings should be `PathPattern` based or String pattern based, this is an illegal state check and it is their by design. A given `HandlerMapping` should be using one strategy or the other, not both."
988,1108505925,codymikol,13606342,"I'll give this a try and report back, thanks!"
989,1108525345,rstoyanchev,401908,"For #26026 the concern was that a user that is not even authenticated could filling up the logs with stacktraces, while for a subscription to be sent, the user must have been authenticated already. Did you run into this from a specific use case or concern, and if so could you please elaborate? "
990,1108526329,rstoyanchev,401908,"> This will therefore suppress the error level logging when a user fails authentication when subscribing to a topic.

Just noticed this. Subscribing should trigger authorization, not authentication."
991,1108536554,rstoyanchev,401908,This will not serve the goals stated in https://github.com/spring-projects/spring-boot/issues/30490 because the same properties can be set on the DataBinder from an `@InitBinder` method in the controller or in the a `@ControllerAdvice` and that would override the values initially set.
992,1108558311,Richie94,7793923,"I tried to supply a minimal example, as I think now it may not be the desired behaviour as it is right now. 
I have there a quite simple setup, where I just wait some time after buffering, and after 30s this crashes. Here I just call the ""consume"" endpoint which requests via a webclient the other producing endpoint and after 30s I see this cancel event occurring. I simulate here, that the consumer does some batch processing where each batch takes 90s and avter each batch, the consumer asks the producer for the next batch so.
This is with current 2.6.7 spring boot including spring-web (for tomcat) and spring-web-reactive (for having the fluxes).


https://pastebin.com/ewMM9nTV"
993,1108772065,taoj-action,25186652,"Debug into  Spring-Web UrPathHealper.java code, the problem comes in handling PathVariables. In order to allow special characters to be processed in our case, we have to set urlDecode to false to allow it to pass through the decodeRequestString call. However, when urlDecode is false, the following code decodes the path variable. So, there is no way to keep any of the path variable values passing through As-Is without decoding at all. 

```
	/**
	 * Decode the given URI path variables via {@link #decodeRequestString} unless
	 * {@link #setUrlDecode} is set to {@code true} in which case it is assumed
	 * the URL path from which the variables were extracted is already decoded
	 * through a call to {@link #getLookupPathForRequest(HttpServletRequest)}.
	 * @param request current HTTP request
	 * @param vars the URI variables extracted from the URL path
	 * @return the same Map or a new Map instance
	 */
	public Map<String, String> decodePathVariables(HttpServletRequest request, Map<String, String> vars) {
		if (this.urlDecode) {
			return vars;
		}
		else {
			Map<String, String> decodedVars = CollectionUtils.newLinkedHashMap(vars.size());
			vars.forEach((key, value) -> decodedVars.put(key, decodeInternal(request, value)));
			return decodedVars;
		}
	}
```"
994,1108783759,phil-applegate,3941023,"Thanks for your response. Apologies - you are correct. I've updated the original post to refer to authorization rather than authentication.

In the use case I am referring to, access decisions are made on a per topic basis so it's likely there could be authenticated users who are not authorized to access a range of topics. Ultimately, the concern here was similar #26026 in that authenticated users who are not authorized for a given topic could cause unnecessary errors to be logged. Is the expectation within Spring Messaging/Spring Security that an error be explicitly logged when a user is denied access? I believe in other areas (REST), this is typically logged at DEBUG level."
995,1108855258,rbri,2544132,HtmlUnit Version 2.61.0 is now available.
996,1109210388,taoj-action,25186652,"I found a workaround by customizing the UrlPathHelper. 
```
    @Override
    public void configurePathMatch(PathMatchConfigurer configurer) {
        UrlPathHelper urlPathHelper = new UrlPathHelper() {
            @Override
            public Map<String, String> decodePathVariables(HttpServletRequest request, Map<String, String> vars) {
                return vars;
            }
        };
        urlPathHelper.setUrlDecode(false);
        configurer.setUrlPathHelper(urlPathHelper);
    }
```
Although it is ideal, it works. I Hope the Spring community can come out with a better solution! Thanks!"
997,1109377115,snicoll,490484,@xu20160924 Spring Framework `4.x` is EOL so I am afraid we can't justify providing support at this point.
998,1109612703,bclozel,103264,Duplicates #27791
999,1109826817,binchoo,15683098,"@rstoyanchev 
Thanks! Your comment gave me a lot of hints to deep-dive into multipart bindings.

As I reviewed,
- DispatcherServlet::checkMultipart
- ServletRequestDataBinder::bind

when a request is a `MultipartRequest` that has been resolved by `MultipartResolver`, then
- `Part` in this request can be resolved for arguments type of `Part` and `MultipartFile`.
- `Part` in this request can be bound to attributes that are `MultipartFile` only.

So I concluded that `MockMultipartHttpServletRequestBuilder` is doing ok because it is a mock for `MultipartRequest` and follows the rules above.

> If you don't want to use MultipartFile you need to make sure that a MultipartResolver is not declared.

Yes I could test this by registering a multipart resolver that purposely returns false in `isMultiPart()`. 
```java
@Bean
MyMultipartResolver multipartResolver() {
    return new MyMultipartResolver();
}

class MyMultipartResolver extends StandardServletMultipartResolver {
    @Override
    public boolean isMultipart(HttpServletRequest request) {
        return false;
    }
}
```




"
1000,1109928624,tubbynl,6532583,"The intention of this pull request is to be able to configure these things without code changes. 

This in combination with AutoConfiguration will enable that"
1001,1127332186,wilkinsona,914682,"Thanks for the sample. The problem is occurring because, while the mock `Runnable` is being reset, it isn't the mock that's been injected into the `ConcreteServiceTest` and `ConcreteService` instances.

There are two application contexts involved here. The first is created for `ConcreteServiceTest` and the second is created for `Suite`. A mock is created and registered with each context. The mock from `ConcreteServiceTest`'s context is injected into the `dependency` field of both `ConcreteServiceTest` and `ConcreteService` but it's the mock from `Suite`'s context that is reset as this is the context that's ""active"" when executing `test()` on `Suite`.

I'm not sure what we can do about this in Boot. @sbrannen, can you please advise?"
1002,1110463415,binchoo,15683098,"https://github.com/spring-projects/spring-framework/commit/791999610e5a6028bfe8dfe44293beb3f267857c Added tests covering these behaviors.

> When a request is a MultipartRequest that has been resolved by MultipartResolver, then
> - Part in this request can be resolved for arguments type of Part and MultipartFile.
>   - `multipartRequestWithParts_resolvesMultipartFileArguments`
>   - `multipartRequestWithParts_resolvesPartArguments`
> - Part in this request can be bound to attributes that are MultipartFile only.
>   - `multipartRequestWithParts_resolvesMultipartFileProperties`
>   - `multipartRequestWithParts_cannotResolvePartProperties`
"
1003,1110572568,snicoll,490484,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
1004,1110774367,programmatix,795437,"For further context, the Couchbase transactions API is based around the user providing their transactional logic inside a lambda, that we can retry as needed.  A simple transaction could look like this:

```
cluster.transactions().run(ctx -> {
    // User's transaction goes inside the lambda here
    ctx.insert(collection, ""doc1"", doc1Content);

    var doc2 = ctx.get(collection, ""doc2"");
    ctx.replace(doc2, doc2Content);
});
```

In a retry scenario, which can include a write-write conflict with another transaction, this transaction may be rolled back and then the user's lambda run again.  This is a core and essential part of our transaction implementation.

With an @Transactional-annotated method we need to be able to retry the entire method, for the same reason.  (We will document that the method may be retried and the user needs to ensure that it is side-effect free.)

CallbackPreferringPlatformTransactionManager seems to be the only way for us to achieve this.  If there is another path, then please let us know.  (In particular, one limitation of CallbackPreferringPlatformTransactionManager is that we cannot also implement reactive transactions with it.)"
1005,1111228377,john-liu,1397284,"I also want this feature, to support a safe index navigation.

Just like groovy did in 3.0: use `?[]` to support safe index navigation.
https://groovy-lang.org/operators.html#_safe_index_operator

"
1006,1111768786,mdeinum,606761,"> This class acts as an interceptor that only caches content as it is being read but otherwise does not cause content to be read. That means if the request content is not consumed, then the content is not cached, and cannot be retrieved via [`getContentAsByteArray()`](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/util/ContentCachingRequestWrapper.html#getContentAsByteArray--).

Which is how it is supposed to work according to the documentation. 

Before the `doFilter` the request hasn't been consumed/read thus the cached content is empty, afterwards (if consumed) it might be filled. "
1007,1111789216,brucelwl,13413715,"> > This class acts as an interceptor that only caches content as it is being read but otherwise does not cause content to be read. That means if the request content is not consumed, then the content is not cached, and cannot be retrieved via [`getContentAsByteArray()`](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/util/ContentCachingRequestWrapper.html#getContentAsByteArray--).
> 
> Which is how it is supposed to work according to the documentation.
> 
> Before the `doFilter` the request hasn't been consumed/read thus the cached content is empty, afterwards (if consumed) it might be filled.

**Can spring make some adjustments to make it more reasonable to get data before doFilter ??**"
1008,1111848235,mgmeiner,3624321,"I do not think that the netty update has something to do with it anymore - also i guessed it for a long time but I'm also able to reproduce the buffer 'overflow' when using for example Spring-Boot Version 2.5.7 (netty 4.1.70) and MaxDirectMemorySize=128M on JRE 17. 
When MaxDirectMemorySize set to 80M it works (no overflow - buffer gets cleaned, but the netty leak detection reports the above mentioned leak) - this is weird. "
1009,1111899799,rstoyanchev,401908,"Thanks for the updates. I'll process this. 

Note that if you're in Boot application you can use `spring.servlet.multipart.enabled=false` to turn off the `MultipartResolver` config and then declare a bean of type `javax.servlet.MultipartConfigElement` which enables multipart support at the Servlet container level."
1010,1111911677,rstoyanchev,401908,"I understand the intention, but in https://github.com/spring-projects/spring-boot/issues/30490 the goal is described as being able to react to a security issue. However, the proposed solution assumes the application does not explicitly configure allowed/disallowed fields in code, so it is not guaranteed to work.
"
1011,1111930452,rstoyanchev,401908,"Thanks for clarifying. 

We typically do log unhandled errors, which is how this looks from the perspective of `StompSubProtocolHandler`, and if I'm not mistaken after that an `ERROR` frame is sent and the connection is closed. If we did not log this, I'm pretty sure it would cause the opposite issue of not seeing anything to explain the error.

Note that the interceptor can return true or false to skip the processing of the message but it chooses to reject it in a way that does not allow the user to use the connection further. I think that's justified since it's not clear why the user is trying to access subscriptions they're not allowed to access, and the logging of that exception at ERROR is in line with that.

Just to be clear you are not suggesting that authenticated users in your use case could be intentionally doing this. In other words, it's more about noise in the logs rather than intentionally filling them up?
"
1012,1111961090,poutsma,330665,"The dependency to `MimeUtility` was [introduced in 2014](https://github.com/spring-projects/spring-framework/commit/9be0cf21e5d3537d2415fea5eaea152e7407d45b). In 2016, we [introduced the `Content-Disposition` type](https://github.com/spring-projects/spring-framework/commit/99a8510ace46af9b05b822e7c65f08aae885ca98), with its own MIME encoding logic in `encodeFilename`.

I will drop the call to `MimeUtility.encodeText` in favor of the mechanism in `Content-Disposition` as of 6.0 M4. This means that we will move from using RFC 2047 to RFC 5987 for filename parameters, as we already do in Spring WebFlux' multipart support."
1013,1112263665,poutsma,330665,Do you mean [HandlerInterceptors](https://www.baeldung.com/spring-mvc-handlerinterceptor)?
1014,1112284524,poutsma,330665,"We strive to maintain backwards compatibility in Spring Framework, even between major release. And because of the migration to Jakarta artefacts in the upcoming version 6.0, we do have more options with regard to refactoring than we typically do.

But moving `Operation` and `SpringVersion` to a different package is still going to upset people dependant on those types. With so many projects dependant on Spring, we can only make breaking changes like that with a very good reason. I don't think the violation of a coupling rule is a good enough reason."
1015,1112309255,brucelwl,13413715,"@poutsma Unfortunately, ``HandlerInterceptor`` can't let me get the request body of ``Content-Type=application/json``. I hope there is an interceptor after spring MVC parses the request parameters"
1016,1112311478,robert-gdv,94984522,/reopen
1017,1112589696,jhoeller,1263688,Loom goes into preview as of JDK 19: https://twitter.com/OpenJDK/status/1519749893253861376
1018,1113033688,phil-applegate,3941023,"Yes, you are correct this is more about noise rather than the logs being intentionally filled up.

I understand your point where an explanation is required for what has caused the error. Perhaps the auth issues here are different to other types of exception as it's arguable if an error has actually occurred, rather the system is functioning as expected and denying unauthorized requests. 

Would the `ERROR` frame back to the client/caller not provide sufficient details that an auth error has occurred? If more details were required on the server side, would it not be expected that DEBUG level logging be enabled to see why requests are being denied?

Perhaps I am mistaken, but I believe this is the pattern used in Spring Web (Security). If a REST endpoint is hit and a user is unauthorized an HTTP 403 would be returned but to see the details on the server side you'd need to enable DEBUG logging on `org.springframework.security`."
1019,1113163980,poutsma,330665,"Thank you for submitting a PR! I have made some minor improvements, and also added support for multiple quoted printable segments. See efafccd."
1020,1113372453,quiet-ranger,5083937,"I am on Spring Boot 2.6.6 and facing the same problem.  Furthermore, the following cannot be a solution:

```
@PostMapping(path = ""/test"", consumes = ""application/json"")
public String test(@RequestBody User user) {
  return user.toString();
}

@PostMapping(path = ""/test"", consumes = ""application/x-www-form-urlencoded"")
public String test(User user) {
  return user.toString();
}
```
Because the method signatures are identical and the compiler will have none of it.

Did anyone come up with a practical working solution?

"
1021,1113590947,raphw,4489328,@bclozel Are you considering this feature? We are currently considering to move things to `RestTemplate` instead but I wanted to see if it might be worth waiting to safe time on a future migration.
1022,1113652261,bclozel,103264,"Hello @ymind 

First, let me underline that the curl request you're showing does not qualify as a CORS preflight request. Such requests must use the HTTP OPTIONS method, have an `""Origin""` header and an `""Access-Control-Request-Method""`. So in this case, the CORS support in Spring Framework is not involved.

Instead this is a partial match as implemented in `org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping#handleNoMatch`. All handlers that are partial matches are collected and all methods are listed as possible candidates in the ""Allow"" response header.

If you run your sample application, you'll see that the following requests will be mapped to the controller methods listed in your controller:

```
curl -L -X GET -v http://localhost:8080/foo/customAction
curl -L -X DELETE -v http://localhost:8080/foo/customAction
```

Since `""/foo/customAction""` matches the `""/foo/{id}""` pattern, they're partial matches, as expected. I'm closing this issue as it works as designed. If you need more assistance, you can create a StackOverflow question. Thanks!


"
1023,1113993223,pivotal-cla,16822967,"@csiichao Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28402)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28402) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1024,1114037464,askar882,17901680,"I was also trying to find a way to tell the client that the request body missing without exposing much information. And I was able to make this work with a custom exception handler as follows.
```Java
@RestControllerAdvice
public class ExceptionHandler {
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(HttpMessageNotReadableException.class)
    public Map<String, Object> requestBodyMissing(HttpServletRequest request) {
        HandlerMethod method = (HandlerMethod) request.getAttribute(""org.springframework.web.servlet.HandlerMapping.bestMatchingHandler"");
        String requestBody = Arrays.stream(method.getMethodParameters())
                .map(m -> m.getParameterType().getSimpleName() + "" "" + m.getParameterName())
                .collect(Collectors.joining("",""));
        return Arrays.stream(new Object[][] {
                {""status"", 400},
                {""message"", ""Required request body is missing: "" + requestBody}
        }).collect(Collectors.toMap(o -> (String) o[0], o-> o[1]));
    }
}
```

When a client sends a request without a required body, it will receive something like:
```JSON
{
    ""status"": 400,
    ""message"": ""Required request body is missing: String name""
}
```"
1025,1114330754,dfa1,5798698,"@poutsma hello, just noticed that you did a nice commit to avoid some allocations in HttpStatus (7f1062159ee9926d5abed7cadc2b36b6b7fc242e). This doing same for HttpStatus.Series + some other minor fixes. What do you think?
"
1026,1114573554,marwin1991,25181517,Any progress? 
1027,1114578090,bclozel,103264,"> If the use of WebClient should be considered as a way forward from RestTemplate, I consider it meaningful that one can opt into using the same primitives of the former API, what makes refactoring large code bases first feasible.

I think you might be reading too much into `RestTemplate`'s Javadoc. `RestTemplate` is not deprecated and we don't expect Spring developers to ""migrate"" their codebases to `WebClient`. `RestTemplate` is merely in maintenance mode, meaning we won't be adding new features to it related to modern use cases such as streaming and reactive streams (see #19448 for example). We've refined our docs in #24503 to ensure that the community doesn't get the wrong idea.

As stated in my previous comment, I'm personally not in favor of supporting this use case. I think that `WebClient` is also tailored for scatter/gather and streaming scenarios. Exposing `InputStream` and `OutputStream` here is likely to create tricky issues for developers when it comes to backpressure, error signals or using reactor operators (such as retry). Your current implementation is not only buffering without backpressure, but also violating the ""lazy"" principle of reactive streams by subscribing to the upstream publisher before the stream is even read.

> And even without Loom, I argue that synchronous APIs are much more common today and will stay the standard approach also for many years to come.

Again, we never expected that the majority of the Spring community would switch to reactive entirely. `WebClient` supports advanced usage and features that `RestTemplate` never had in the first place. We've also made sure that [reactive types are supported in MVC Controllers](https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-ann-async-reactive-types) to let developers compose those types and not worry about blocking.

> Similar to your suggestion, in my current migration attempt, I am using byte arrays as intermediaries for input and output streams (via ByteArrayInputStream and ByteArrayOutputStream), but the memory usage and through-put of the application has worsened significantly due to the intermediate buffers.

The code snippet in my previous comment doesn't allocate additional byte arrays nor buffers content. Allocation should be better than `RestTemplate` thanks to the pooled data buffers. Did you run into issues while trying this?

I'd really like to understand how the proposed `DataBufferUtils` approach doesn't work out for you - maybe we can improve something there? I'd say that in your case, if imperative APIs and `InputStream`/`OutputStream` types are important and composition of asynchronous calls is not interesting, then `RestTemplate` is still a very much valid choice. I wouldn't bother ""migrating"" to `WebClient` if it doesn't bring real benefit for your use case.

"
1028,1114702805,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
1029,1114709713,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
1030,1114731348,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
1031,1114748459,pivotal-cla,16822967,"@guyukou Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28406)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28406) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1032,1114840822,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
1033,1115254932,raphw,4489328,"> I think you might be reading too much into RestTemplate's Javadoc.

Spring has established a communication where `RestTemplate` will not get much attention in the future, of course this makes us look into the proposed alternative, even if the rhetoric has become softer on the template's future. But even today, Spring's javadoc states that:

> {@code org.springframework.web.reactive.client.WebClient} [...} has a more modern API and supports sync, async, and streaming scenarios.

I conclude that streams are the most established primitive of sync Java I/O and this scenario is purely supported. This is in contrast to Java's own async HTTP client or also the Apache async HTTP client where streams are supported.

My working hypothesis with `WebClient` was that I wanted to use the client in an application where both async (few) and sync (most) use cases are in use. My experience is that the `WebClient` is not feasible as I constantly need to integrate with existing code which contains APIs like the following:
```java
interface DomainConsumer {
  void consume(InputStream in, Consumer<T> c, Class<T> type, DomainContext ctx);
}
```
I would not be able to work with `DataBuffer`s here as you suggested as the API is set and I cannot rewrite the entire application from scratch. With your suggestion, I would write to a `DataBuffer` mono and block on it. (Note that I require an `InputStream`.) This triggered exceptions as the memory buffer is limited in the decoder. If I increase the buffer size, things work out but the applications memory usage shoots up. Of course, my suggested solution blocks threads, but for my application this is not an issue. The few places where threading met its limits, my plan was to actually refactor the code to make use of reactive API if Loom does not solve the issue before I get to rewrite these segments.

I do neither think this is only my problem. I would expect that many users of `WebClient` will be required to integrate against some form of stream API at some point. I would expect streams to be one of the most established Java library primitives which is why I would hope for their support.

Alternatively, I could use Spring's `WebClient` for the async and `RestTemplate` for sync use. This does however imply that I configure two underlying clients what triggers new problems. Our connection pools per route would not longer interact, refactorings to async become more complicated as it requires a client rewrite on top of everything, and for our junior dev, the technological stack is large enough as it is, I am happy over any complication that I can avoid.

> Your current implementation is not only buffering without backpressure, but also violating the ""lazy"" principle of reactive streams by subscribing to the upstream publisher before the stream is even read.

I was aiming for a POC, to be honest, I am not an expert on reactive programming. But I now refactored the implementation to the best of my knowledge and added some tests to provide a better means of discussion. I understand that this is non-trivial, but this is why I would like to see native support for this decoding/encoding as I would expect many to end up in a situation where this is needed where anybody would implement an overly simplified implementation of this feature.

That said: maybe a better API would be something along the lines of:

Mono<T> custom = webClient.post().uri(""http://localhost:8080/hello/world"")
    .bodyValue(""Hello!"")
    .retrieve()
    .streamToMono(inputSteam -> ...);

This way, the error handling would be consistent but one could still use reactive primitives. I also added a suggestion for this solution as static factories in `BodyExtractors`."
1034,1115257598,vganesh,841192,"Hi, 

No need to enforce Apache HttpClient or OkHttp by default or third party http client libraries from classpath. It works with JDK 11, the following code snippet was tested on my laptop using Windows. 

Thx, 


import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.ProxySelector;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpClient.Redirect;
import java.net.http.HttpClient.Version;
import java.net.http.HttpRequest;
import java.net.http.HttpRequest.BodyPublisher;
import java.net.http.HttpResponse;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;


String proxyUrl='some_valid_url';
	 int proxyPort=8737;

	private ResponseEntity<String> callPatchUsingHttpClient (String url, String body, String token) {

	

HttpClient client = HttpClient.newBuilder().version(Version.HTTP_1_1).followRedirects(Redirect.NORMAL)
			.connectTimeout(Duration.ofSeconds(20))
			.proxy(ProxySelector.of(new InetSocketAddress(proxyUrl, proxyPort))).build();
			
BodyPublisher jsonPayload = HttpRequest.BodyPublishers.ofString(body);

HttpRequest request = HttpRequest.newBuilder().uri(URI.create(url)).method(""PATCH"", jsonPayload)
		.header(""Content-Type"", ""application/json"").header(""Authorization"", ""Bearer "" + token).build();
		
HttpResponse<String> response = HttpClient.newBuilder()
		.proxy(ProxySelector.of(new InetSocketAddress(proxyUrl, proxyPort))).build()
		.send(request, HttpResponse.BodyHandlers.ofString());
		
		
} 

"
1035,1115295351,martinformi,88318665,"It would be really helpful, do you have any working implementation that could replace it for now?"
1036,1115317074,bclozel,103264,"> With your suggestion, I would write to a DataBuffer mono and block on it. (Note that I require an InputStream.)

`DataBufferUtils.readInputStream` can also help to turn `InputStream` into `Flux<DataBuffer>`, solving all the allocation and buffering issues you've shared.

> Our connection pools per route would not longer interact, refactorings to async become more complicated as it requires a client rewrite on top of everything, and for our junior dev, the technological stack is large enough as it is, I am happy over any complication that I can avoid.

No matter how we consider the problem, there's an important mismatch between `InputStream`/`OutputStream` and reactive APIs. I don't think it would be wise to surface those in the `WebClient` API. Blocking should only happen, if necessary, ""at the edges"" once the concurrency and asynchronous aspects have been dealt with. If the API of your application doesn't allow that, or you've invested significant efforts into `RestTemplate` and see no immediate benefit from using `WebClient`, then `RestTemplate` is definitely the best choice here.

I'm going to discuss this issue with other team members but in the meantime, please don't invest more time in this PR - as it stands, we're not likely to address this."
1037,1115365383,raphw,4489328,"> `DataBufferUtils.readInputStream` can also help to turn `InputStream` into `Flux<DataBuffer>`, solving all the allocation and buffering issues you've shared.

I do not think that's a common issue but it is the other way round. Many APIs accept an `InputStream` for a response primitive and there is no tool that converts a `Flux<DataBuffer>` to an `InputStream`, which is what I am trying to address.

> Blocking should only happen, if necessary, ""at the edges"" once the concurrency and asynchronous aspects have been dealt with.

In my case, blocking is necessary as our code base is too large and we integrate against libraries that only accept `InputStream`s. My guess is that others will face the same problem and solve it by mapping any request to a `byte[]` or `String` and to use this value to create an `ByteArrayInputStream` what was my first attempt, too. When removing the decoder, with the proposed `BodyInserter` and `BodyExtractor`, I think there's a viable alternative for those who are bound to stream APIs today.

> I'm going to discuss this issue with other team members but in the meantime, please don't invest more time in this PR - as it stands, we're not likely to address this.

I am working on a POC for a largish project, so it is not a big problem. I have neither spent much time on this and one idea was to host the code as part of our project. As things stand, we need to go for a solution that a large team can work with and the compatibility issues might lead us down to abandon the `WebClient` altogether and go for rest template or another async HTTP client that supports streams. I would have hope an easier bridge could let us use the web client to open up for an easier migration and use reactive programming where it really benefits us. We have a whole landscape of different HTTP clients in use today and the idea was to unify this behind one facade, but if course the sync use case needs good support to justify a choice here.

I still hope you can consider this, and thanks for your opinion along the way!"
1038,1115765217,bclozel,103264,"Hello @vganesh 

We don't have a RestTemplate connector for the JDK11 HTTP client so this code snippet doesn't apply to this issue. Thanks! "
1039,1115793048,rbri,2544132,"Hi @bclozel, @rstoyanchev,
anything i can do to move this forward (other than some friendly reminders like this)?"
1040,1115975722,jhoeller,1263688,@benas are you specifically trying to inject an `@Value WritableResource` which isn't working out of the box? Can you confirm that `@Value Resource` with a subsequent downcast to `WritableResource` works (since we attempt to resolve a `FileUrlResource` there as of 5.0.2)? That would mean that we only have to add a ResourceEditor registration for WritableResource.
1041,1116249534,mikereiche,48999328,"@sdeleuze @jhoeller @mp911de @daschl @programmatix 

Hi folks - I was wondering if you have any input on this?  
We are also considering providing our own CouchbaseTransactionInterceptor bean that overrides invokeWithinTransaction() such that it does retries on failures.

```
@Configuration(proxyBeanMethods = false)
@Role(BeanDefinition.ROLE_INFRASTRUCTURE)
static class TransactionInterception {

 @Bean
 @Role(BeanDefinition.ROLE_INFRASTRUCTURE)
 public TransactionInterceptor transactionInterceptor(TransactionAttributeSource transactionAttributeSource,
   CouchbaseTransactionManager txManager) {
  TransactionInterceptor interceptor = new CouchbaseTransactionInterceptor();
  interceptor.setTransactionAttributeSource(transactionAttributeSource);
  if (txManager != null) {
   interceptor.setTransactionManager(txManager);
  }
  return interceptor;
 }
 }
```"
1042,1116768606,4javier,459381,"Being my matching object actually an instance of one of my DTO classes, I solved using the overload of the method accepting a class to which converting the parsed node.
I think `.value(Object expectedValue)` is useful only for leaf nodes.
"
1043,1117056163,fmbenhassine,1210553,"Thank you for your feedback, Juergen.

> are you specifically trying to inject an `@Value WritableResource` which isn't working out of the box?

Yes, I used the same sample as in [this comment](https://github.com/spring-projects/spring-framework/issues/15284#issuecomment-453403628) with the latest SF 6.0 snapshots. To give a bit of context, my specific use case is in Batch (issue https://github.com/spring-projects/spring-batch/issues/756) where a change from `Resource` to `WritableResource` in [AbstractFileItemWriter](https://github.com/spring-projects/spring-batch/blob/main/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/support/AbstractFileItemWriter.java#L84) results in a failure to load this [application context](https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/resources/jobs/iosample/delimited.xml#L27) (The sample is in XML config, but I guess the configuration style should not matter). The sample fails with:

```
[main] ERROR org.springframework.batch.core.step.AbstractStep - Encountered an error executing step step1 in job ioSampleJob
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.itemWriter' defined in class path resource [jobs/iosample/delimited.xml]: Initialization of bean failed; nested exception is org.springframework.beans.ConversionNotSupportedException: Failed to convert property value of type 'java.lang.String' to required type 'org.springframework.core.io.WritableResource' for property 'resource'; nested exception is java.lang.IllegalStateException: Cannot convert value of type 'java.lang.String' to required type 'org.springframework.core.io.WritableResource' for property 'resource': no matching editors or conversion strategy found
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:611)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:525)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:365)
	at org.springframework.batch.core.scope.StepScope.get(StepScope.java:113)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:362)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:195)
	at jdk.proxy2/jdk.proxy2.$Proxy21.open(Unknown Source)
	at org.springframework.batch.item.support.CompositeItemStream.open(CompositeItemStream.java:131)
	at org.springframework.batch.core.step.tasklet.TaskletStep.open(TaskletStep.java:310)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:216)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:152)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:170)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:145)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:332)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:149)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:140)
	at org.springframework.batch.test.JobLauncherTestUtils.launchJob(JobLauncherTestUtils.java:156)
	at org.springframework.batch.sample.iosample.AbstractIoSampleTests.testUpdateCredit(AbstractIoSampleTests.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.springframework.test.context.junit4.statements.RunBeforeTestExecutionCallbacks.evaluate(RunBeforeTestExecutionCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestExecutionCallbacks.evaluate(RunAfterTestExecutionCallbacks.java:84)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
Caused by: org.springframework.beans.ConversionNotSupportedException: Failed to convert property value of type 'java.lang.String' to required type 'org.springframework.core.io.WritableResource' for property 'resource'; nested exception is java.lang.IllegalStateException: Cannot convert value of type 'java.lang.String' to required type 'org.springframework.core.io.WritableResource' for property 'resource': no matching editors or conversion strategy found
	at org.springframework.beans.AbstractNestablePropertyAccessor.convertIfNecessary(AbstractNestablePropertyAccessor.java:595)
	at org.springframework.beans.AbstractNestablePropertyAccessor.convertForProperty(AbstractNestablePropertyAccessor.java:609)
	at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:190)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1700)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1656)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1400)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:602)
	... 54 more
Caused by: java.lang.IllegalStateException: Cannot convert value of type 'java.lang.String' to required type 'org.springframework.core.io.WritableResource' for property 'resource': no matching editors or conversion strategy found
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:262)
	at org.springframework.beans.AbstractNestablePropertyAccessor.convertIfNecessary(AbstractNestablePropertyAccessor.java:590)
	... 60 more
```

> Can you confirm that `@Value Resource` with a subsequent downcast to WritableResource works (since we attempt to resolve a FileUrlResource there as of 5.0.2)?

I'm not sure if this is a regression or not, but the following snippet fails with a `ClassCastException` with the latest 6.0 snapshots:

```
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.Resource;
import org.springframework.core.io.WritableResource;
import org.springframework.stereotype.Component;

@Configuration
public class WritableResourceConversionSample {

    public static void main(String[] args) throws Exception {
        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(WritableResourceConversionSample.class);
        MyService myService = applicationContext.getBean(MyService.class);
        myService.printMessage(); // fails with java.lang.ClassCastException: class org.springframework.core.io.DefaultResourceLoader$ClassPathContextResource cannot be cast to class org.springframework.core.io.WritableResource
    }

    @Component
    public static class MyService {

        @Value(""${file:/tmp/myWritableFile.txt}"")
        private Resource resource;// With a WritableResource here, the sample fails at startup with an IllegalStateException: Cannot convert value of type 'java.lang.String' to required type 'org.springframework.core.io.WritableResource': no matching editors or conversion strategy found

        public void printMessage() {
            System.out.println(((WritableResource) resource).isWritable());
        }
    }

}
```

Let me know if you need more details on this. Thank you upfront."
1044,1117215711,rstoyanchev,401908,"@vy my turn to apologize for not coming back to this until now.

I've created a [sample project](https://github.com/rstoyanchev/sandbox-rfc7807). It demonstrates use of `@ControllerAdvice` that extends `ResponseEntityExceptionHandler` to customize the output for any Spring MVC exception as well as for any `ResponseErrorException`. It does two things:

1. Customize the type and detail message for each exceptions. Although the ""detail"" for each Spring MVC exception has been carefully considered and minimized, an application might still choose to customize the error details to avoid revealing implementation details (e.g. framework used, possibly version if messages change) as well as for consistency across all application errors.
2. Re-create `ProblemDetail` as `ExtendedProblemDetail` that has an additional `host` field from a single place for the entire application.

On the client side, we will provide some conveniences in #28190 to be able to decode the error response body to a target class. This could be `ExtendedProblemDetail` if you have it on the classpath, it could be your own extension of `ProblemDetail`, any class that matches the expected JSON, or even a Map.

Apologies for not answering your questions directly, but I'm hoping the sample helps to provide more context, and we can continue with questions from there.

One comment/question to you. For you suggestion to add `Map<String, Object> attributes`, and also looking at your https://github.com/spring-projects/spring-boot/issues/19525#issuecomment-857551764 under the Boot issue, I think you are making a distinction between extra fields that are known and always added (e.g. host) vs others that are not known upfront and need to be supported through a generic map of attributes? In other words, a more dynamic mechanism to add any attribute, in addition to the ability to extend `ProblemDetail` in order to support well-known fields that are always added. This makes sense to me to have such a Map of attributes in `ProblemDetail`.
"
1045,1117371207,rstoyanchev,401908,"@ascopes thanks for creating this issue.

`ServerWebInputException` is indeed raised for different kinds of missing input, which is reflected in the message, but no easy way for an exception handler to tell what's missing and customize the message. I will experiment with adding a sub-class for `MissingRequestValueException` that exposes the `name` and `type` of the missing value where the type is just a string, e.g. ""request header"", ""cookie value"", etc. Also add a sub-class for type mismatch issues (conversion) and request body decoding issues. This should cover most cases. 

For validation, I see your point about `ConstraintViolation` with a class-level `@Validated` which is handled with an AOP interceptor (independent of Spring WebFlux) vs putting the same on `@RequestBody` which is handled in WebFlux and the `ConstraintViolation` is translated to `Errors` in `SpringValidatorAdapter`. We might be able to make that more easily accessible so the same adaptation can be performed from an exception handler.

Note also that for 6.0 we are making wider changes with #27052 to support problem details. This will provide more support for applications to set the response body directly from an `@ExceptionHandler` through the `ProblemDetail` type.

"
1046,1117372375,rstoyanchev,401908,@askar882 your snippet is for Spring MVC but this issue is for WebFlux. In Spring MVC there is a wider hierarchy of exceptions that make it possible to customize on a case by case basis.
1047,1117423117,ascopes,73482956,"@rstoyanchev that sounds great! Look forward to seeing what comes of this, thanks for taking a look."
1048,1117674660,dfa1,5798698,"@rstoyanchev just reworked a bit the commit, can you please have a look?"
1049,1118288968,quaff,143040,"Please consider throwing generic exception like this
```java
@FunctionalInterface
public interface CheckedFunction<T, R, E extends Throwable> {

	R apply(T t) throws E;

}
```"
1050,1118399367,raphw,4489328,"Another observation: while RestTenplate was un-deprecated, I noticed that the Netty and Http conponents async request factories still are deprecated and point to using `WebClient` instead.

If RestTemplate should be preferred over `WebClient`, is there a plan to reestablish such integrations? If using the same backend client was an option, this would of course be an alternative where one could use both `RestTemplate` and `WebClient` in parallel, for example both based on Netty 5. One option would be to offer this for the built-in JDK client. With this option, I could base the entire application upon this single client and use the appropriate abstraction upon it. I added some code from my current prototype to exemplify this usage."
1051,1118481129,SimonBerry555,62243501,I have this issue too - any updates @rstoyanchev ? Would be good to know if a) it can be safely ignored or b) a workaround. Thanks
1052,1118562461,sbrannen,104798,"@quaff, can you please expound on your proposal with a rationale for needing the generic type declaration for the exception?"
1053,1118578486,sbrannen,104798,"> it would be nice if we could offer `Throwing...` versions of common functional interfaces that do the wrapping for us.

I agree: such types can be very useful.

I also agree with the `Throwing*` naming convention. Though I noticed you've introduced `Throwable*` types in your commit.

I think we should go with `Throwing*`. For example, `ThrowableSupplier` implies that the supplier supplies a `Throwable`, like a `StringSupplier` would supply a `String`. 

Furthermore, the `Supplier` itself is not ""throwable"" since it does not implement `Throwable`.

What we're really talking about is a ""supplier that is capable of throwing a checked exception"", but we cannot convert that to a type name because it's simply too long: `CheckedExceptionThrowingSupplier`. If we go with `ThrowingSupplier`, that's succinct and in line with the naming convention used in several other open source projects -- for example, Spring Data, JUnit, AssertJ, Kotlin internals, [some JDK internals](https://twitter.com/sam_brannen/status/1431250271523459078), [etc.](https://www.google.com/search?q=%22ThrowingSupplier%22).


"
1054,1118605325,sbrannen,104798,"This has been merged into `5.3.x` and `main`.

Thanks"
1055,1118618389,sbrannen,104798,"This has been merged into `5.3.x` and `main`.

Thanks"
1056,1118628903,sbrannen,104798,"Good catch!

This has been merged into `5.3.x` and `main`.

Thanks"
1057,1118904727,nealeu,264594,"How about Spring 6 for this one @jhoeller ?

```java
    @DependsOn(classes=SpringLiquibase.class)
```
instead of 
```java
   @DependsOn(""liquibase.integration.spring.SpringLiquibase"")
```"
1058,1119087908,pivotal-cla,16822967,"@bougar Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28422)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28422) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1059,1119088306,pivotal-cla,16822967,@bougar Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28422)!
1060,1119180795,quaff,143040,"> @quaff, can you please expound on your proposal with a rationale for needing the generic type declaration for the exception?

@sbrannen  For example we can throw Throwable inside lambda
```java
@Aspect
public class Instrumentation {

	@Around(""execution(* *.*(..))"")
	public Object timing(ProceedingJoinPoint pjp) throws Throwable {
		return Tracing.execute(pjp, ProceedingJoinPoint::proceed);
	}
}
```
```java
public class Tracing {
	public static <T, R> R execute(T input, CheckedFunction<T, R, Throwable> function) throws Throwable {
		// create new span
		try {
			return function.apply(input);
		} finally {
			// finish span
		}
	}
}

```"
1061,1119184213,quaff,143040,"> some JDK internals

Many projects use `Checked*`, for example `vavr` `elasticsearch`"
1062,1119656767,sbrannen,104798,"> @sbrannen For example we can throw Throwable inside lambda

The Spring Framework typically tries to avoid throwing `Throwable` because that makes error handling more complex, and we don't want to have to catch `Throwable` and then decide if the exception should really be swallowed/handled/rethrown (e.g., OOME).

The commit Phil pushed declares `Exception` in the `throws` clauses in order to allow lambdas to throw unchecked and checked `Exception` types, and I think that is adequate for the needs of the framework.

> Many projects use `Checked*`, for example `vavr` `elasticsearch`

Indeed, that would be another option, but we've gone with `Throwing*`."
1063,1119687290,archiecobbs,545866,"Woo-hoo! Just in time for it's 10th birthday on Sunday :)

Seriously, this is why I love Spring - most projects would never bother to fix a 10 year old minor feature request."
1064,1120112816,Sineaggi,889237,"Now that Spring Framework 6 is on the horizon, have there been any thoughts towards moving to modules?"
1065,1120220303,sbrannen,104798,"Good catch!

This has been merged into `5.3.x` and `main`.

Thanks"
1066,1120320104,viviendehorta,58926717,"yes, it's relevant"
1067,1120384188,superdc,8255083,@sbrannen need help 
1068,1120438309,pivotal-cla,16822967,"@yuhangbin Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28426)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28426) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1069,1120438625,pivotal-cla,16822967,@yuhangbin Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28426)!
1070,1120767103,bclozel,103264,I think you meant to [open this issue against the Spring Security project](https://github.com/spring-projects/spring-security/).
1071,1120790333,jhoeller,1263688,Good point! This remained unnoticed in the course of a refactoring from one method name to a set of method names... Thanks for spotting it and raising this.
1072,1120834610,rstoyanchev,401908,"I've added `MissingRequestValueException` which covers cases of missing ""named"" values (headers, cookies, request params, etc) and `UnsatisfiedRequestParameterException` as subclasses of `WebInputException` that also expose properties with details about the exception. For request body, I've adjusted it to raise `WebInputException` with a nested `DecoderException` which should help to signal a problem with the request body."
1073,1120895211,poutsma,330665,"It is possible, but not with `application/json` as the Content-Type; it needs to be `application/x-ndjson` instead.

There is significant overhead for writing JSON content individually instead of collectively. That is why the `Jackson2JsonEncoder` collects to a list by default, and serializes that. If you specify a streaming mime-type, set to `application/x-ndjson` by default–but changeable via the `streamingMediaTypes` property, then the `Jackson2JsonEncoder` will not collect the list but stream them as they arrive, with a newline in between the elements.

Does that answer your question?"
1074,1120921568,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
1075,1120931614,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
1076,1120962135,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
1077,1121020151,sbrannen,104798,"This has been merged into `main`.

Thanks"
1078,1121023340,sbrannen,104798,"@poutsma, is this a potential duplicate of #28245?"
1079,1121045336,sbrannen,104798,"I am not aware of any formal grammar file for SpEL.

@aclement, please correct me if I'm wrong about that."
1080,1121078935,poutsma,330665,"> @poutsma, is this a potential duplicate of #28245?

I don't think so, as that particular issue was about jobs not running between 2 and 3 am, something we have never supported. However, there have been a lot of fixes in the area of cron expressions since 5.3.10.

@ifc0 Can you please upgrade to the latest version of Spring Framework, which is currently 5.3.20, and see if the same problem occurs?"
1081,1121082047,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
1082,1121104712,raphw,4489328,"My current prototype for one of my customer aims to allow for the use of WebClient and RestTemplate by adding a request factory for RestTemplate that uses WebClient. I also added this experiment for consideration. This would allow me to bootstrap the WebClient for use in the ""new world"" that needs reactive and simply use a rest template based upon it by delegating all RestTemplate use to the WebClient. This way I would also not to keep two client implementations in sync when it comes to route limits, header tokens, timeouts etc.

Would you consider this a feasible solution? "
1083,1121114819,sbrannen,104798,Superseded by #28365
1084,1121210697,yuhangbin,17566866,Already revert.
1085,1121221312,sbrannen,104798,"Based on the requirements you've stated here and in https://github.com/spring-projects/spring-framework/pull/28094#issuecomment-1047754684, I've come up with the following simple prototype.

```java
@SafeVarargs
public static <E, C extends Collection<E>> C collectionOf(Supplier<C> collectionFactory, E... elements) {
	Assert.notNull(collectionFactory, ""'collectionFactory' must not be null"");
	C collection = collectionFactory.get();
	Collections.addAll(collection, elements);
	return collection;
}
```

With the following test cases passing.

```java
@Test
void collectionOfWorksCorrectly() {
	List<String> list = collectionOf(ArrayList::new, ""foo"", ""bar"");
	assertThat(list).isInstanceOf(ArrayList.class).containsExactly(""foo"", ""bar"");

	Set<Integer> set = collectionOf(HashSet::new, 4, 3, 2, 1);
	assertThat(set).isInstanceOf(HashSet.class).containsExactlyInAnyOrder(1, 2, 3, 4);

	Set<Integer> orderedSet = collectionOf(LinkedHashSet::new, 4, 2, 3, 1);
	assertThat(orderedSet).isInstanceOf(LinkedHashSet.class).containsExactlyInAnyOrder(4, 2, 3, 1);

	SortedSet<Integer> sortedSet = collectionOf(TreeSet::new, 4, 3, 2, 1);
	assertThat(sortedSet).isInstanceOf(TreeSet.class).containsExactly(1, 2, 3, 4);
}
```

@snicoll, is that what you had in mind?

Please note that the tests had to be written that way (with the created collection stored in a local variable), since there were compiler issues with AssertJ's `assertThat()` methods."
1086,1121223821,superdc,8255083,@snicoll can you provide a spring expression language grammer file(https://github.com/spring-projects/spring-framework/blob/main/spring-expression/src/main/resources/org/springframework/expression/spel/generated/SpringExpressions.g) of anltr4，the grammer of this version is not suitable for antlr4
1087,1121268498,sbrannen,104798,"This has been merged into `main`.

Thanks"
1088,1121293234,sbrannen,104798,"The grammar file has apparently been around for a long time (unmodified):

https://github.com/spring-projects/spring-framework/blob/3.2.x/spring-expression/src/main/java/org/springframework/expression/spel/generated/SpringExpressions.g

Reopening to allow @aclement to elaborate on where `SpringExpressions.g` came from."
1089,1121317741,snicoll,490484,"Not quite. The single statement works obviously but not the type inference.

> trying to find the most suitable implementation based on an concrete instance.

This is linked to AOT where we have a collection instance we'd like to write back. Taking the type of the collection is what I had in mind but I haven't dig enough. Phil also may have made that irrelevant with the latest update of code generation. "
1090,1121321517,snicoll,490484,"We could call that inference algorithm based on the instance and get back the nearest type and use that for code generation. So I take it back, looks like that would work. Thanks. "
1091,1121330020,sbrannen,104798,"As discussed within the team, the current behavior is intentional since `LocaleEditor` is two-way by design: String-to-Locale and Locale-to-String, and only `StringUtils.parseLocaleString()` provides that consistent two-way behavior which is necessary for a `PropertyEditor` implementation.

In light of that, we are closing this issue.
"
1092,1121378986,rstoyanchev,401908,"On closer investigation, this can be handled transparently as follows.

Message converters and encoders indicate a preference for `application/problem+json` when `ProblemType` is serialized. This ensures `application/problem+json` is preferred when the client is flexible or has no preference.

If content negotiation fails to find an acceptable media type for serializing `ProblemDetail`, we try again with `application/problem+json` and `application/problem+xml` as the acceptable media types, in effect enforcing a fallback for `ProblemDetail`. 
"
1093,1121419128,sbrannen,104798,"> So I take it back, looks like that would work. Thanks.

Are you saying that the proposed `collectionOf()` method looks good to go?

If so, I'd be happy to push it to `main` for 6.0 M4.

However, there's no rush on my side. So if it's not OK as-is, we can iterate over alternate solutions for 6.0 M5."
1094,1121423878,micopiira,5475859,"Hey, I'm trying to POST to a server that only accepts `application/json` . With something more low level than WebClient, like reactor-netty I could do something like this:

        Flux<String> flux = Flux.range(0, 1000000).map(Object::toString);
        final Mono<HttpClientResponse> response = httpClient.headers(headers -> {
                    headers.set(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON.toString());
                    headers.set(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON.toString());
                }).post()
                .uri(""/url"")
                .send(ByteBufFlux.fromString(flux
                        .map(o -> {
                            try {
                                return objectMapper.writeValueAsString(o);
                            } catch (JsonProcessingException e) {
                                throw new RuntimeException(e);
                            }
                        }).zipWith(Flux.just("","").repeat(), (a, b) -> a + b).startWith(""["").concatWithValues(""]"")))
                .response();

Which would then, atleast for what I know stream the objects to the target as they come available without having to wait for all of them.

Would this kind of behaviour be possible to implement in WebClient or should I stick with more low level clients like reactor-netty?"
1095,1121424563,sbrannen,104798,"@benas, would mind taking a look at this to determine if it's specific to Spring Batch?"
1096,1121433625,sbrannen,104798,"Thanks for making the requested changes.

This has been merged into `main`.
"
1097,1122072236,poutsma,330665,">I'm trying to POST to a server that only accepts application/json 

You can change the `streamingMediaTypes ` property of `Jackson2JsonEncoder` from the default to `application/json`, and trigger the streaming behavior that way. The reference docs explains [how to change codec defaults](https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html#webflux-config-message-codecs)."
1098,1122099926,foal,458209,Hmm... I'm not sure that is the correct solution. May be better to use BCP 47 language tags to represent the Java Locale as a string?
1099,1122102284,foal,458209,"From Java doc of `java.util.Locale.toString()`
```
     * <p>This behavior is designed to support debugging and to be compatible with
     * previous uses of {@code toString} that expected language, country, and variant
     * fields only.  To represent a Locale as a String for interchange purposes, use
     * {@link #toLanguageTag}.
```"
1100,1122104117,poutsma,330665,"I had the same idea of using a `Map<Integer, HttpStatus>`, but was convinced by @richardstartin that this was a bad idea because the common status codes fall outside the range of the `Integer` cache. See https://github.com/spring-projects/spring-framework/issues/26842#issuecomment-824717247.

So I am afraid I am going to have to decline this PR, as all the other changes seem to be cosmetic."
1101,1122143526,jdomigon,10757362,"Hi. We've recently migrated to the 5.3.18 version of spring, expecting this feature to be available.

Nevertheless, I've been surprised to check that it hasn't been merged yet.

This issue has been open several years to date. ¿Is there any problem preventing it to be merged on the main branch?"
1102,1122154859,linghengqian,20187731,"An additional topic is, should we point to another client being maintained?"
1103,1122170526,jhoeller,1263688,"On further consideration, I'm inclined to align with our R2DBC support and just rely on JDBC-provided exception subclasses by default, potentially with a few database-specific checks attached (like we do for ResultSet value extraction), and with the ability to customize the behavior programmatically (which we effectively have already but could provide more specific hooks for).

In other words, we would consistently *not* use explicit error code definitions by default anymore (not XML-provided and no hard-coded equivalent either) since they effectively duplicate indications in the JDBC 4 exception subclasses to quite some degree. With modern-day JDBC drivers on a JDK 17 baseline, there should be no need for such a full-scale replacement, rather just for a few specific database-specific adaptations within the JDBC exception subclass indications.

We may keep `SQLErrorCodeSQLExceptionTranslator` for user-provided `sql-error-codes.xml` files, triggered by the presence of such a file in the root of the classpath. However, we would not ship a default XML file ourselves anymore. For anyone inclined, they could be copying our current `sql-error-codes.xml` file to their classpath for strict backwards-compatible behavior. That said, I'd rather like to hear from every such case about why they need any explicit error code mappings to begin with, considering some database-specific tweaking of our `SQLExceptionSubclassTranslator` based on that feedback instead."
1104,1122192416,jhoeller,1263688,"Half of the sources affected only show up in main, so this PR seems more like a 6.0 M4 candidate. Maybe we could manually backport a few of the inner class definitions as they exist in 5.3.x, @sbrannen ?"
1105,1122194036,sbrannen,104798,I've already merged it locally for `5.3.x` (excluding nonexistent classes) and `main`.
1106,1122198579,jhoeller,1263688,"Sounds good, it's definitely worth having in both branches for everything affected. There were just quite a few new AOT code spots in that PR, not too many spots that affect 5.3.x as well. We generally strive for static inner classes where possible already."
1107,1122202685,sbrannen,104798,"This has been merged into `5.3.x` (selectively) and `main`.

Thanks"
1108,1122240348,sbrannen,104798,"As explained in commit da112a7ea82fee786a309f24baeda57d15478ff7:

> The antlr-based SpEL expression grammar file (`SpringExpressions.g`) was introduced during initial development and prototyping of the Spring Expression language; however, it was quickly abandoned in favor of a handcrafted implementation. Consequently, it has become obsolete over time and has never been actively maintained.

Since the grammar file is not used with the Spring Framework itself, the team has no plans to maintain it or release a new version compatible with later versions of antlr.

In light of that, I have repurposed this issue to remove the obsolete SpEL expression grammar file.
"
1109,1122247625,superdc,8255083,"> As explained in commit [da112a7](https://github.com/spring-projects/spring-framework/commit/da112a7ea82fee786a309f24baeda57d15478ff7):
> 
> > The antlr-based SpEL expression grammar file (`SpringExpressions.g`) was introduced during initial development and prototyping of the Spring Expression language; however, it was quickly abandoned in favor of a handcrafted implementation. Consequently, it has become obsolete over time and has never been actively maintained.
> 
> Since the grammar file is not used with the Spring Framework itself, the team has no plans to maintain it or release a new version compatible with later versions of antlr.
> 
> In light of that, I have repurposed this issue to remove the obsolete SpEL expression grammar file.

@sbrannen So now SpEL is not antlr-based，right？parser and lexer are produced by handcraft?"
1110,1122259287,poutsma,330665,"> Would be great if you could provide a working example of this :) thx and great work !

There is some sample code available on the [PartEvent Javadoc](https://docs.spring.io/spring-framework/docs/6.0.0-SNAPSHOT/javadoc-api/org/springframework/http/codec/multipart/PartEvent.html)."
1111,1122261647,sbrannen,104798,"> @sbrannen So now SpEL is not antlr-based，right？parser and lexer are produced by handcraft?

That's correct. 

Take a look at `org.springframework.expression.spel.standard.InternalSpelExpressionParser` and the types in the `org.springframework.expression.spel.ast` package for details.
"
1112,1122268705,rstoyanchev,401908,"A couple of updates:

1. Content negotiation now supports `application/problem+json`, see [28189](https://github.com/spring-projects/spring-framework/issues/28189)
1. Client exceptions support decoding error content, see [28190](https://github.com/spring-projects/spring-framework/issues/28190)

The [sample](https://github.com/rstoyanchev/sandbox-rfc7807) now uses `WebClient` and `RestTemplate` and decodes the error content.

"
1113,1122288370,jhoeller,1263688,"On review, `HibernateTemplate` does not seem feasible to sustain anymore against Hibernate 6.0 since plenty of underlying API has changed or even been removed. We meant to phase out `HibernateTemplate` before, so this seems to be the definitive time for it. We can keep the Hibernate 5.x variant of `HibernateTemplate` around but won't introduce a dedicated 6.0 variant.

For all common purposes, our JPA support seems to be compatible with Hibernate 6.0 since #28007. From that perspective, there isn't much need for dedicated support for native Hibernate APIs from Spring's side. That said, let's keep this general support ticket open for the time being, to be revisited towards Spring Framework 6.0 GA for a final decision."
1114,1122402908,pivotal-cla,16822967,"@aooohan Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28440)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28440) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1115,1122404026,pivotal-cla,16822967,@aooohan Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28440)!
1116,1122473760,aooohan,40265686,@sbrannen I have updated it.Thank you for reviewing my pr
1117,1122516072,sbrannen,104798,"This has been merged into `main` in a892ce80c17d0bf15ee6b1fee74a526c67cc3fe6 and augmented in eb50a6f4a0e8e4924f90aac14d0769eefe64923b.

Thanks"
1118,1122757144,bclozel,103264,Closing as a duplicate of spring-projects/spring-boot#30971 - we can migrate the issue to this repository if it turns out this is a Spring Framework bug. Please avoid creating duplicates.
1119,1123158692,superdc,8255083,"> > @sbrannen So now SpEL is not antlr-based，right？parser and lexer are produced by handcraft?
> 
> That's correct.
> 
> Take a look at `org.springframework.expression.spel.standard.InternalSpelExpressionParser` and the types in the `org.springframework.expression.spel.ast` package for details.

@sbrannen  Can I know the reasons why SpEL turns into not antlr-based？We want to parse SpEL in frontend and construct our custom ast tree. One method is used antlr4 to generate parser, lexer and visitor，but now this method looks impractical."
1120,1123164735,xixingya,37765666,"> An additional topic is, should we point to another client being maintained?

sure,but I am not found another client,if you find,Welcome to point out
"
1121,1123177819,linghengqian,20187731,"> > An additional topic is, should we point to another client being maintained?
> 
> sure,but I am not found another client,if you find,Welcome to point out
> 

- I revisited https://stomp.github.io/implementations.html and noticed `stomp-js/rx-stomp` (refer to https://github.com/stomp-js/rx-stomp/ ) and `stomp-js/stompjs` (refer to https://github.com/stomp-js/stompjs/ ) is actively maintained under the same org. 

- I'm not really sure what `RxJS` means, but if it's the same context as `RxJava`, then obviously `stomp-js/stompjs` is not as well maintained as `stomp-js/rx-stomp`."
1122,1123418156,sbrannen,104798,"> Can I know the reasons why SpEL turns into not antlr-based?

I was not the original developer of the Spring Expression language, but as far as I understand, using antlr turned out to be too cumbersome. Thus, the original developer, @aclement, decided it would be easier to handcraft the support. "
1123,1123428996,sbrannen,104798,"> This issue has been open several years to date. ¿Is there any problem preventing it to be merged on the main branch?

I'm not sure how the time since [Feb 9, 2021](https://github.com/spring-projects/spring-framework/issues/26409#event-4309073362) (when we first signaled that we would implement the feature) qualifies as ""several years"".

In any case, this issue is currently assigned to the `6.0.x` milestone which means that we will address it in the 6.0.x timeline. We are currently focusing on other topics; however, if we find time to implement this before 6.0 GA we will change the targeted milestone."
1124,1123528990,rstoyanchev,401908,"Thanks for discussion @raphw.

Generally, there's nothing wrong with a bridge between java.io (blocking) streams and Reactive Streams. We already have methods in `DataBufferUtils` for `InputStream` -> `Publisher` and `Publisher` -> `OutputStream`. We just didn't consider it yet necessary to go in the other direction.

Streaming in the `RestTemplate` is at a low level. You have to write to an `OutputStream` for the request or read from `InputStream` for the response, but nothing for encoding and decoding because fundamentally there is no abstraction for a stream of any object `<T>` like there is with a Reactive Streams `Publisher<T>`. This is where `WebClient` can and does support streams of higher level objects, and that is why generally we expect you would work at the level of objects rather than byte streams.

I'm wondering whether you have your own encoding/decoding layer, or otherwise what is the reason for going to byte streams? I understand you have existing libraries/applications to work with, but if you could, please elaborate on what they do. This is relevant because there might be a path through creating `Encoder` and `Decoder`, or using and/or enhancing existing ones. It's generally useful to understand the scenarios that motivate this.

Or perhaps there is no encoding/decoding involved at all, and you are just passing the bytes to/from another source. This is where our methods in `DataBufferUtils` come in. They allow you to provide an external resource to read from, in the form of an `InputStream`, or an external resource to write to, in the form of an `OutputStream`. 

At the implementation level, I agree with Brian that the PR, in its present state, isn't the way to go. The most straightforward path for what you want to do is through methods to bridge `OutputStream` -> `Publisher` and `Publisher` -> `InputStream`. This is similar to the ones provided in the JDK `HttpClient` and could exist in `DataBufferUtils` if we decide to have them added.

That said please provide more context so we can better understand the need for this.

Last comment, since you compared to the JDK `HttpClient`, on the request side `BodyPublishers#ofInputStream` is essentially `InputStream` -> `Publisher` which is the same as what we offer currently in `DatatBufferUtils`. They also don't offer `OutputStream` -> `Publisher`. Can you also clarify your actual needs for the request and response sides?"
1125,1123580600,sbrannen,104798,I've edited your comment to improve the formatting. You might want to check out this [Mastering Markdown guide](https://guides.github.com/features/mastering-markdown/) for future reference.
1126,1123585340,sbrannen,104798,"I am closing this issue, since it appears to be related to Spring Integration.

Please open an issue in the [Spring Integration issue tracker](https://github.com/spring-projects/spring-integration/issues).
"
1127,1123759998,jdomigon,10757362,"Thanks @sbrannen: you're right regarding the date, sorry. Perhaps I was confused by the dates of other issues I navigated before reaching this.

So, is there no possibilitiy of this new functionality being integrated in 5.3.x branch, isn't it?"
1128,1123843892,sbrannen,104798,"Hi @nealshan,

It turns out that those tests were testing the wrong thing in the first place.

So I fixed them slightly differently in 06679a5583e6e5bbd8ec10a12f665cdfc561cc19, and I'm therefore closing this PR.

Thanks for bringing this to our attention."
1129,1123868837,sbrannen,104798,"This has been merged into `main`.

Thanks"
1130,1123874358,sbrannen,104798,"This has been merged into `main`.

Thanks"
1131,1123884491,sbrannen,104798,"> Thanks @sbrannen: you're right regarding the date, sorry. Perhaps I was confused by the dates of other issues I navigated before reaching this.

No worries.

> So, is there no possibilitiy of this new functionality being integrated in 5.3.x branch, isn't it?

_It depends. ™️_ 

Yes, I know that's not the answer you were hoping for. So, let me expound.

If the implementation is limited in scope in terms of complexity and possible negative side effects for existing applications, _and_ if there is significant interest from the community, we would then consider backporting the feature to 5.3.x.

"
1132,1123922862,sbrannen,104798,"Hi @rossnico,

Thanks for submitting your first PR for the Spring Framework.

> Also, this title is the only one with the article ""The"" in the Core Technologies documentation.

There are actually several sections whose title contains the article ""The"" (for example, numerous sections under _Resources_).

In light of that, I've taken a different approach in be782a219726cf3ad57bf810d03b3bb705f731d1 and am therefore closing this PR.

"
1133,1123939308,sbrannen,104798,"Hi @SchroedingersGitHub,

Congratulations on opening your first GitHub issue ""ever"". 👍

This has been addressed in 48c797e429dc26c8156c92cba409c3be07aa6498."
1134,1124007934,jdomigon,10757362,"Thanks again for your prompt response! 
Regarding to ""_It depends. ™️_"":

> If the implementation is limited in scope in terms of complexity and possible negative side effects for existing applications

Just my very humble (and very biased) opinion: revising the patch seems quite clean, as existing applications just don't register `IndexAccessor`'s and, thus, the new code in `Indexer.java` won't be ever used by old applications. Seems, also, that the affected code is well covered by jUnits.

> and if there is significant interest from the community, we would then consider backporting the feature to 5.3.x.

Consider me oficially and significantly interested :wink:"
1135,1124017638,rstoyanchev,401908,Fixed in f0e23b66f32055b6ad9515955d9dd2902d38366e but commit message references a different issue by accident.
1136,1124115870,micopiira,5475859,"I see,   however it does not produce valid JSON ""out of the box"". Heres what I tried:

```java
private final WebClient webClient = WebClient.builder()
   .baseUrl(""http://localhost:8080/"")
   .codecs(clientCodecConfigurer -> {
     final Jackson2JsonEncoder jackson2JsonEncoder = new Jackson2JsonEncoder();
     jackson2JsonEncoder.setStreamingMediaTypes(List.of(MediaType.APPLICATION_JSON));
     clientCodecConfigurer.defaultCodecs().jackson2JsonEncoder(jackson2JsonEncoder);
    })
   .build();

    Flux<MyEntity> flux = ...;
    webClient.post()
               .uri(""/"")
               .contentType(MediaType.APPLICATION_JSON)
               .accept(MediaType.APPLICATION_JSON)
               .body(flux, MyEntity.class)
               .retrieve()
               .bodyToMono(MyResponse.class)
```

This will not wrap the JSON in an array nor add commas between the items. Should I manually map my `Flux<MyEntity>` into a `Flux<String>` with the wrapping `[` & `]` and commas in between the items?"
1137,1124181786,fmbenhassine,1210553,"> Issue upgrading Spring Boot from 2.1.8.RELEASE to 2.6.7

This means upgrading from Spring Batch 4.1.2.RELEASE (and Spring Framework 5.1.6.RELEASE) to Spring Batch 4.3.5 (and Spring Framework 5.3.19).

The issue seems to happen already with SF 5.1.6.RELEASE, see the attached minimal complete example. So I'm not sure how this worked with Spring Boot 2.1.8.RELEASE in the first place before the migration. @PavithraBalajiOfficial  Can you confirm that?

> When the String(key) gets mapped String(value), the error goes away.

@PavithraBalajiOfficial Can you elaborate on this please?

@sbrannen The issue does not seem to be specific to Batch, the following snippet fails with SF 5.1.6.RELEASE:

```java
package com.example.demo;

import java.nio.file.Paths;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.springframework.util.SerializationUtils;

public class SF28432 {

	public static void main(String[] args) {
		java.nio.file.Path path = Paths.get(""tmp"", ""myFile.txt"");
		Map<String, Object> map = new ConcurrentHashMap<>();
		map.put(""myFile"", path);
		SerializationUtils.serialize(map);
	}

}
```

But in hindsight, this is probably a non issue. When someone wants to serialize a `Map`, I would expect all values to be `Serializable`. This does not seem to be the case with implementations of `java.nio.file.Path`. The same thing happens with the `ExecutionContext` of Batch, which is nothing more than a thin wrapper around a `Map`. I think we need to improve the docs on the Batch side to inform users about this detail. wdyt?

---

Minimal complete example: [demo-sf28432.zip](https://github.com/spring-projects/spring-framework/files/8672513/demo-sf28432.zip)

"
1138,1124213087,raphw,4489328,"There are two reasons:

In the application I am working with, the same type might be represented differently depending on the specific path and even return status, what is of course not ideal but how things are as some applications get their data from other applications which all use slightly different setups of Jackson. The code is much more readable if the response is translated in the response handler where path and response handler are bundled, this is why we combine a request and a `ResponseHandler` which currently accepts an `InputStream` and processes this in various ways (JSON/XML/Atom).

In other places, we are reading an `InputStream` with binary data and want to process data as it arrives. The data processor is currently based on an input stream and we would not want to rewrite it as it is working well and we do not have a need to do this non-blocking. We have a similar implementation for an `OutputStream` that writes these binary messages on the fly without buffereing. Both works well with the `RestTemplate` but I do not see a way to do the same in `WebClient`.

You are right about the JDK client not accepting `OutputStream` but `InputStream` for a request body but this can be easily bridged by implementing a `Publisher`, similar to my suggestion.

I understand your suggestion and that you would prefer this in a `DataBufferUtils`. For me, I really do not care how I would achieve this, as long as it does not require too much boilerplate. I can only imagine that it is a common need: even if things can be solved differently and more efficiently, sometimes an `InputStream`/`OutputStream` is the best way to plug existing code as this is widely used core Java API and a way to interface different libraries.

---

Did you also consider the argument about using `RestTemplate` and `WebClient` side-by-side? If you offered a `ClientHttpRequestFactory` that accepts a `WebClient`, one could introduce a `WebClient` in a project without rewriting all `RestTemplate` code. We would want to avoid using two different HTTP clients side by side in one app as we want to use a common setup for route limits etc. Currently, `WebClient` and `RestTemplate` do not support any common HTTP client. By using a `ClientRequestFactory` for `WebClient` one could define one setup for it and simply mirror it to the rest template."
1139,1124575890,pivotal-cla,16822967,"@yinpeng0528 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28450)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28450) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1140,1124576357,pivotal-cla,16822967,@yinpeng0528 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28450)!
1141,1124576887,aegliv,6757743,I would also love to see this PR merged
1142,1124632698,pivotal-cla,16822967,"@BinGuo0717 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28453)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28453) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1143,1124637245,pivotal-cla,16822967,@BinGuo0717 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28453)!
1144,1124638755,sbrannen,104798,"The corresponding issue is already assigned to me. 

In addition, please do not copy other people’s work and claim it as your own. "
1145,1124659731,AdrianLopez1994,11196038,Still relevant.
1146,1124683346,Frantch,4487748,"+1

Simple use case is for query params such as limit, offset, order, sort that needs to be copy pasted in every single controllers"
1147,1124800918,pivotal-cla,16822967,"@Robin11223 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28454)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28454) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1148,1124801768,pivotal-cla,16822967,@Robin11223 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28454)!
1149,1124803997,akuma8,2613496,"> mapStr[s1]===>s1    //In my opinion, the result here should be 1

Why it should be 1 since you have `mapStr.put(""s1"", ""s1"")`?"
1150,1124861847,jhoeller,1263688,"On a related note, after #28414, the `ConstructorOrFactoryMethodResolver` class re-implementing constructor resolution at this point refers to the `@Autowired` annotation directly, creating a package cycle between `beans.factory.aot` and `beans.factory.annotation`. This should be resolved along the proposed reusable constructor resolution algorithm here."
1151,1124868162,liuhanguang123,60683490,"> > mapStr[s1]===>s1    //In my opinion, the result here should be 1
> 
> Why it should be 1 since you have `mapStr.put(""s1"", ""s1"")`?

Just look at the variables contained in the class Node provided above
1. We think `mapStr['s1']===>s1`is correct because it indicates that the key is a string;
2. After testing, it is found that `mapStr ['' + s1]` will be converted into `mapStr ['1']` to calculate the result; The calculation result of `mapStr [s1]` is equivalent to `mapStr ['s1'] `
3. I think `mapStr[s1]===>s1` is wrong because its key is a variable and s1 = '1'. It should be the result of calculating `mapStr['1']`. The final result should be '1' instead of 's1';



"
1152,1124990490,capatcapworld,105436291,When will this fix be merged in to master ? We have this problem in our code.
1153,1124998440,rstoyanchev,401908,"It looks like originally `MissingServletRequestPartException` came as a result of differentiating 4xx vs 5xx exception related to multipart handling, see #13284 and related fix 56c8c69c4ce04e9d35d19e26d279ccd3b2e5a385, and prior to that `RequestParamMethodArgumentResolver` used to raise the base class `ServletRequestBindingException`. 

I think it would be still useful to have a single exception for a missing part, no matter where it was detected. `RequestPartServletServerHttpRequest` is under `web.multipart` because it relates to multipart processing and that's the lowest place where it is needed. 

One alternative would be to revert the changes under #27948, i.e. make it extend `ServletException` again, and document more explicitly the reason it does not extend `ServletRequestBindingException` is that it can be raised at a lower level and lives in a different package. In retrospect, I suspect #27910 was more a question than an actual problem. This essentially answers the ""if there is no good reason"" question under #27910.


"
1154,1125586340,sazonenka,1306376,Any updates on that?
1155,1125782790,liuhanguang123,60683490,"When I was testing the source code at the break point, I found a place for special processing.
In class `org.springframework.expression.spel.ast.Indexer` search `SPR-5847`, and the special processing code is below the search results. 
After testing, if the following if statement is commented out, the result will be as I thought.
From here, I found that another issue #10516 contains this problem, so my problem is unnecessary. I will close it. Thank you."
1156,1126050823,poutsma,330665,"The cause for the difference between the way `Flows` are treated is [this line](https://github.com/spring-projects/spring-framework/blob/main/spring-core/src/main/java/org/springframework/core/CoroutinesUtils.java#L83). 

@sdeleuze I have a proposed fix for this issue [here](https://github.com/poutsma/spring-framework/commit/527851c52f4d063563fd1a54e137de9c8caa5c1f). Could you please review?"
1157,1126694151,Andro999b,3613484,Is there any plans to add batching?
1158,1126715870,ullenboom,5071169,fixed in new versions alreday ...
1159,1126772973,sbrannen,104798,"Hi @nealshan,

Thanks for the proposal!


> 1. Remove the second bean BeanPostProcessor since it does not help to understand the test case.

The 2nd BPP was actually meant to demonstrate the expected behavior, but I suspect the original developer forgot to complete the implementation.

In light of that, I've updated the test method slightly differently in f2fe7f335c3b55cb2a2f9bd4cada56dc2ad35633.

> 2. Add an assertion to tell, if a BeanPostProcessor returns null, the existing bean will be returned.

That is definitely useful (and was missing), and I've included it in my commit.

Thanks for bringing this to our attention.

"
1160,1126864571,sgrmgj-quotient,58459433,"Just wanted to add some information as it might be helpful for my understanding as well as for others - First of all thanks a lot @JoseLion and @nhajratw for sharing such amazing tricks and information.
However I tried this with Spring R2dbcRepository - for some reason this does not work when I have a little bit of customization in my code - where I have routing involved (reads and writes go through different connection factories and hence different reactive. transaction managers) - I don't have transaction operators defined in my java configuration, I just have connection factories and transaction managers defined and just declare the package name which contain all the repository interfaces. When I try to execute an integration test for a repository using Spring Testing framework (some would say why are you testing repositories but that conversation I will reserve for another day), the `.as(Transaction::withRollback)` or `.as(TxStepVerifier::withRollback)` did not work for me. 

However I figured out that - there are a couple of things which were not configured correctly in my java configs for both the connection factories and also I ended up creating a proper test config class which uses the TransactionOperator as it should as per documentation. I also made sure that I had turned off @EnableTransactionManagement for the test config as well. Hence now I am able to test the repository as expected with automatic rollback after the tests (and yes the data is getting cleaned up automatically after the tests).

I will post the code here as it might help a few - 

my config class - 
```
@Configuration
@EnableR2dbcRepositories(basePackages = {""com.examples.raccess.r2jdbc.repo""})
public class TestMariaDBRoutingReadWriteConfig extends AbstractR2dbcConfiguration {

    @Autowired
    private MariaDBRWriteConfigProperties rdbRWriteConfigProperties; //these are my custom classes encapsulating host, port etc.

    @Autowired
    private MariaDBReadConfigProperties rdbReadConfigProperties; ////these are my custom classes encapsulating host, port etc.

    @Bean(name=""rwriteConnectionFactory"")
    public ConnectionFactory rwritePooledConnectionFactory() {
        var connectionFactory = RDBBaseConfigHelper.createConnectionFactory(rdbRWriteConfigProperties);
        var connectionPoolConfig = RDBBaseConfigHelper.connectionPoolConfiguration(rdbRWriteConfigProperties, connectionFactory);
        ConnectionPool connectionPool = new ConnectionPool(connectionPoolConfig);
        return connectionPool;
    }

    @Bean(name=""rwriteTransactionManager"")
    public ReactiveTransactionManager writeOnlyTransactionManager(@Qualifier(""rwriteConnectionFactory"") ConnectionFactory rwriteConnectionFactory) {
        ReactiveTransactionManager rwriteOnlyTransactionManager = new R2dbcTransactionManager(rwriteConnectionFactory);
        return rwriteOnlyTransactionManager;
    }

    @Bean(name=""readOnlyConnectionFactory"")
    public ConnectionFactory readOnlyPooledConnectionFactory() {
        var connectionFactory = RDBBaseConfigHelper.createConnectionFactory(rdbReadConfigProperties);
        var connectionPoolConfig = RDBBaseConfigHelper.connectionPoolConfiguration(rdbReadConfigProperties, connectionFactory);
        ConnectionPool connectionPool = new ConnectionPool(connectionPoolConfig);
        return connectionPool;
    }

    @Bean(name=""readOnlyTransactionManager"")
    public ReactiveTransactionManager readOnlyTransactionManager(@Qualifier(""readOnlyConnectionFactory"") ConnectionFactory readOnlyConnectionFactory) {
        ReactiveTransactionManager readOnlyTransactionManager = new R2dbcTransactionManager(readOnlyConnectionFactory);
        return readOnlyTransactionManager;
    }

    /**
     * This bean is used for unit & integration testing ONLY
     * @param rwriteTransactionManager
     * @return
     */
    @Bean
    TransactionalOperator transactionalOperator(ReactiveTransactionManager rwriteTransactionManager) {
        return TransactionalOperator.create(rwriteTransactionManager);
    }

    @Override
    public ConnectionFactory connectionFactory() {
        return rwritePooledConnectionFactory();
    }
}
```
This is the integration test -

```
@ExtendWith(SpringExtension.class)
@ContextConfiguration(initializers = ConfigDataApplicationContextInitializer.class,
        classes = {TestMariaDBRoutingReadWriteConfig.class})
@EnableConfigurationProperties(value = {MariaDBRWriteConfigProperties.class, MariaDBReadConfigProperties.class})
@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)
public class EmployeeRepositoryTest {

    @Autowired
    private EmployeeRepository employeeRepository;

    @Autowired
    private TransactionalOperator operator;

    @Autowired
    private ReactiveTransactionManager rwriteTransactionManager;

    @Test
    public void testSaveEmployee() {

        Employee employee = new Employee();
        employee.setEmployeeName(""John Doe"");
        employee.setEmployeeRole(""Officer"");
        employee.setInsertDate(LocalDateTime.now());
        employee.setUpdateDate(LocalDateTime.now());
        employee.setInsertedBy(""IntegTest12"");
        employee.setUpdatedBy(""IntegTest12"");
        StepVerifier.create(TransactionalOperator.create(rwriteTransactionManager)
                .execute(status -> {
                    status.setRollbackOnly();
                    return employeeRepository
                            .save(employee);
                })).expectNextMatches(employee1 -> employee1.getEmployeeName().equals(""John Doe"")).verifyComplete();
    
    }
}
```
I hope this helps - this is how I achieved automatic transaction rollback in my tests"
1161,1126907290,bclozel,103264,"Could you share a minimal, sample application showing the problem?
Ideally, something we can git clone and run. Also, please remove as much as possible from the sample, like the data store, if possible."
1162,1126935641,sbrannen,104798,Closing as a duplicate of https://github.com/spring-projects/spring-boot/issues/30854 in the Spring Boot issue tracker.
1163,1126938725,sbrannen,104798,"This has been merged into `main`.

Thanks"
1164,1126947851,kasra-haghpanah,53397941,"Yes of course , this is my project in github
https://github.com/kasra-haghpanah/election-spring-rsocket-with-rsocket-js
"
1165,1127332192,sbrannen,104798,"> I'm not sure what we can do about this in Boot. @sbrannen, can you please advise?

There's effectively nothing (reasonable) that we can do about it in either Spring Boot or Spring Framework.

The issue is that the `Suite` class inherits its configuration from its **enclosing class** which is `BaseServiceTest`, and `BaseServiceTest` is not annotated with `@Import(ConcreteService.class)`. Thus, the `MergedContextConfiguration` is different for `Suite` and `ConcreteServiceTest`. This causes those two test classes to have a different `ApplicationContext`.

The `MergedContextConfiguration` (which is used as the context cache key in the _Spring TestContext Framework_ (TCF)) is built based on static analysis of the test classes, their super classes, and their enclosing classes. Consequently, there is a disconnect between the _enclosing class_ for `Suite` and the concrete type of the _enclosing instance_ at runtime. At runtime, the enclosing instance is of type `ConcreteServiceTest`, but the enclosing class is of type `BaseServiceTest`.

With the current infrastructure in the TCF, all lookups for the enclosing type are based on the enclosing class (retrieved via `java.lang.Class.getEnclosingClass()`). In theory it should be possible to use `org.junit.jupiter.api.extension.ExtensionContext.getTestInstances()` to discover the concrete type of the enclosing instance; however, that would require an exhaustive rewrite of the internals in the TCF, and even if that were done... there would likely be other parts of the Spring portfolio or Spring community where enclosing type lookups are hard coded to use the enclosing class.

Moreover, as far as I know, the standard Java APIs do not support such lookups (for example, discovering the concrete type of an enclosing instance via reflection).

In summary, I would advise against `@Nested` test class structures where Spring annotations are only present on a subclass of a class whose nested test classes depend on the annotations of that concrete subclass.

----

For what it's worth, this scenario is not limited to the use of `@Import`. The same scenario arises if you replace `@Import(ConcreteService.class)` with `@ContextConfiguration(classes = ConcreteService.class)` (or similar arrangements of test-related annotations that affect the context cache key).

----

As a side note, the `ApplicationContext` loaded for the `Suite` test class does not even contain a `BaseService` bean. The only reason it contains a `Runnable` bean is because `@MockBean` will create such a bean if it does not exist."
1166,1126999991,sgrmgj-quotient,58459433,@JoseLion - I was finally able to make the code and configuration work as per your suggestion earlier as well which is much cleaner - thank you.
1167,1127332196,wilkinsona,914682,"Thanks very much for taking a look, @sbrannen.

Closing based on the recommendations above."
1168,1127312733,bclozel,103264,Thanks @izeye !
1169,1127332197,GeorgiPetkov,4419977,"@wilkinsona I'm just wondering if this is the correct handling of the issue. It's obviously a real issue. A recommendation here in a closed issue is almost worthless. Even if this is not fixed any time soon this could be useful in the case of later redesign.

I believe there are still other things that can be done like documenting this somewhere or even better - detecting this case so there's a proper error/warning message for this. I've spent hours trying to figure out what is wrong because the usage was actually correct, but the implementation is unintendedly not supporting it and there is no indication of that whatsoever.

I understand that this is not a top priority issue, but just closing it seems inappropriate to me."
1170,1127332199,wilkinsona,914682,"It may be worth documenting this advice from Sam:

>  I would advise against `@Nested` test class structures where Spring annotations are only present on a subclass of a class whose nested test classes depend on the annotations of that concrete subclass.

It may even be possible to detect this arrangement and log a warning or throw an exception. It's something that would be best done in Spring Framework as it's general advice for using the Test Context Framework.

We'll transfer this issue to the Spring Framework issue tracker so that they can consider some documentation improvements."
1171,1127334335,jsbxyyx,26616196,when fixed it?
1172,1127478923,yutimothy666,26371169,"set cron to */31 * * * * *  also  runs twice
"
1173,1127401467,bclozel,103264,@jsbxyyx we didn't get @kakahu2015 's feedback to make progress. @jsbxyyx do you have the requested stacktrace showing the issue? Can you provide it here?
1174,1127424127,sbrannen,104798,"`expireSession()` invokes `initSessionCookie()` with `Duration.ZERO` for `maxAge`, and the documentation for `ResponseCookie.ResponseCookieBuilder.maxAge(Duration)` states the following:

> A value of 0 means the cookie should expire immediately.

In light of that, I am closing this issue.

However, if you think you have discovered a bug, please provide a failing test that demonstrates the bug."
1175,1127476688,snicoll,490484,"The value is the initial capacity of the cache, not its max size."
1176,1127478926,wilkinsona,914682,"Thanks for the report. This appears to be a Spring Framework bug. The behaviour you have described can be reproduced with the following code:

```java
CronTrigger trigger = new CronTrigger(""*/59 * * * * *"");
SimpleTriggerContext context = new SimpleTriggerContext();
Date nextExecutionTime;
for (int i = 0; i < 10; i++) {
    nextExecutionTime = trigger.nextExecutionTime(context);
    System.out.println(nextExecutionTime);
    context.update(nextExecutionTime, nextExecutionTime, nextExecutionTime);
}
```

It will produce output similar to the following:

```
Mon May 16 11:04:59 BST 2022
Mon May 16 11:05:00 BST 2022
Mon May 16 11:05:59 BST 2022
Mon May 16 11:06:00 BST 2022
Mon May 16 11:06:59 BST 2022
Mon May 16 11:07:00 BST 2022
Mon May 16 11:07:59 BST 2022
Mon May 16 11:08:00 BST 2022
Mon May 16 11:08:59 BST 2022
Mon May 16 11:09:00 BST 2022
```

We'll transfer this to Spring Framework so that they can take a look."
1177,1127619849,sbrannen,104798,"> Even if this is not fixed any time soon this could be useful in the case of later redesign.

I'm not yet convinced that this is an issue worth ""fixing"". The more I think about it, the more I consider it an inherent limitation of the `@Nested` test class programming model in JUnit Jupiter.

For example, the following is based purely on JUnit Jupiter and displays similar behavior.

```java
abstract class BaseTests {

	@Nested
	class NestedTests {

		@Test
		void my_test(TestInfo testInfo) {
			assertEquals(""my test (TestInfo)"", testInfo.getDisplayName());
		}
	}

	@DisplayNameGeneration(ReplaceUnderscores.class)
	static class ConcreteTests extends BaseTests {

		@Test
		void my_test(TestInfo testInfo) {
			assertEquals(""my test (TestInfo)"", testInfo.getDisplayName());
		}
	}

}
```

When running `ConcreteTests`, the `my_test` method in `NestedTests` fails analogous to the nested `Suite` test class in the Spring-boot based example. The reason is that JUnit Jupiter looks up the `@DisplayNameGeneration` annotation on the enclosing class determined via `Class.getEnclosingClass()`.

It may be possible to rewrite the `DisplayNameUtils.getDisplayNameGenerator()` method in JUnit Jupiter to use the type of the enclosing instance (retrieved from the parent `TestDescriptor`), and it may be possible to rewrite Spring's testing support to utilize Jupiter's `ExtensionContext.getTestInstances()` feature, but that might not close all of the gaps. For example, there may well be situations where it is not possible to rely on Jupiter's `ExtensionContext.getTestInstances()` feature (or Jupiter internals), and in such situations static analysis will not tell you that `NestedTests` should **sometimes** be treated as if `ConcreteTests` were its enclosing class.

Another thing that concerns me is that many of the public APIs in the TestContext framework accept the `Class<?> testClass` to find annotations, etc. And that will always only allow static analysis of the enclosing class. In order to support finding the type of the enclosing instance, we would have to overload a lot of methods in public APIs to pass an additional argument that provides the ""enclosing instance types"" metadata, and I don't consider that feasible. Plus, this additional metadata currently only makes sense for `@Nested` support with JUnit Jupiter. Other testing frameworks like TestNG, JUnit 4, etc. would not be able to provide such metadata.

I'll put some more thought into it, but it may be that this limitation is best documented in JUnit 5 and/or the Spring Framework.


"
1178,1127653617,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
1179,1127694758,poutsma,330665,"> I realized when I set a scheduled method to run every 59 seconds, it runs twice, in the 59th second of its current minute and the first second of the next minute.
> 
> The cron that was used: `*/59 * * * * *`

This expression means ""run every 59 seconds **starting at 0 seconds**"". So `0` and then `59` are valid second values. Just like `*/30 * * * * *`  would run at `0` and then `30` seconds. 

If you want an expression that only runs *at* 59 seconds, use `59 * * * * *`
"
1180,1127778945,GeorgePap-719,56389632,"https://github.com/GeorgePap-719/simple-springboot-kotlin
I have created a project where it reproduces the error and i wrote some tests to validate the error. "
1181,1127800637,pivotal-cla,16822967,"@dujiang0311 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28468)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28468) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1182,1127852716,sbrannen,104798,"**Disclaimer**: This is in no way production ready code. This is 100% ""proof of concept"" code.

Now, having said that... with an updated version of the original example application from @wilkinsona (now using Java 17, Maven 3.8.5, Maven Surefire 3.0.0-M6, Spring Framework 5.3.20, and JUnit Jupiter 5.8.2), I have come up with the following.

```java
class ScanningTest {

	@Test
	void scanningTest() throws Exception {
		PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();
		System.err.println(Arrays.toString(resolver.getResources(""classpath*:com/example/**/*.class"")));

		System.err.println(""------------------------------------------------"");

		String moduleName = getClass().getModule().getName();
		List<String> resourceNames = streamResolvedModules(Predicate.isEqual(moduleName))//
				.map(ResolvedModule::reference)//
				.map(moduleReference -> scanForNames(moduleReference, ""^com/example/.+\\.class$""))//
				.flatMap(List::stream)//
				.toList();

		resourceNames.forEach(System.err::println);

		System.err.println(""------------------------------------------------"");

		resourceNames.forEach(resouceName -> {
			String className = ClassUtils.convertResourcePathToClassName(resouceName);
			className = className.substring(0, className.length() - "".class"".length());
			try {
				Class<?> clazz = ClassUtils.forName(className, getClass().getClassLoader());
				System.err.println(clazz);
			}
			catch (Exception ex) {
				throw new RuntimeException(""Failed to load class %s"".formatted(className), ex);
				// ex.printStackTrace(System.err);
			}
		});

		System.err.println(""------------------------------------------------"");

		List<URI> resources = streamResolvedModules(Predicate.isEqual(moduleName))//
				.map(ResolvedModule::reference)//
				.map(moduleReference -> scanForResources(moduleReference, ""^com/example/.+\\.class$""))//
				.flatMap(List::stream)//
				.toList();

		resources.forEach(resource -> {
			try {
				System.err.println(resource.toURL());
			}
			catch (MalformedURLException ex) {
				ex.printStackTrace();
			}
		});
	}

	private Stream<ResolvedModule> streamResolvedModules(Predicate<String> moduleNamePredicate) {
		ModuleLayer layer = getClass().getModule().getLayer();
		if (layer == null) {
			layer = ModuleLayer.boot();
		}
		return layer.configuration().modules().stream()//
				.filter(module -> moduleNamePredicate.test(module.name()));
	}

	private List<String> scanForNames(ModuleReference reference, String regex) {
		try (ModuleReader reader = reference.open()) {
			try (Stream<String> names = reader.list()) {
				return names.filter(name -> name.matches(regex)).toList();
			}
		}
		catch (IOException ex) {
			throw new UncheckedIOException(""Failed to read contents of "" + reference, ex);
		}
	}

	private List<URI> scanForResources(ModuleReference reference, String regex) {
		try (ModuleReader reader = reference.open()) {
			try (Stream<String> names = reader.list()) {
				return names.filter(name -> name.matches(regex))//
						.map(name -> {
							try {
								return reader.find(name);
							}
							catch (IOException ex) {
								ex.printStackTrace();
							}
							return Optional.<URI> empty();
						})//
						.filter(Optional::isPresent)//
						.map(Optional::get).toList();
			}
		}
		catch (IOException ex) {
			throw new UncheckedIOException(""Failed to read contents of "" + reference, ex);
		}
	}

}
```

The output of running that is:

```
[file [/Users/sbrannen/source/spring-issues/module-path-scanning/target/test-classes/com/example/ScanningTest.class]]
------------------------------------------------
com/example/One.class
com/example/ScanningTest.class
------------------------------------------------
class com.example.One
class com.example.ScanningTest
------------------------------------------------
file:/Users/sbrannen/source/spring-issues/module-path-scanning/target/classes/com/example/One.class
file:/Users/sbrannen/source/spring-issues/module-path-scanning/target/test-classes/com/example/ScanningTest.class
```

The first output demonstrates the issue: `PathMatchingResourcePatternResolver` only finds `ScanningTest.class` and not `One.class`.

The final output demonstrates that we can find resources (as instances of `URI`) using the `Module` APIs and successfully find both `ScanningTest.class` and `One.class`.

Kudos to @sormuras for providing inspirational use of the `java.lang.module` APIs in JUnit 5!

----

Where to go from here?

We may introduce a new `ModulePathResource` as a companion to `ClassPathResource`, where the logic in `ModulePathResource` is similar to the logic in the above proof of concept.

We may then introduce additional support in `PathMatchingResourcePatternResolver` that resolves `ModulePathResource` instances when appropriate."
1183,1128021916,vvvinamer,35339278,"Hey @jjpianta, have we got any updates regarding this? Can this be solved without some dirty work around?"
1184,1128505547,snicoll,490484,"One thing to mention is that adding this meta-annotation can be temporary. Once the underlying infrastructure is fully resolved ahead-of-time, and therefore the need for reflection for AOT-based context is no longer necessary, the meta-annotation can be simply removed."
1185,1128510208,jjpianta,6969522,"Hi @vvvinamer.
No, here we have no update, we're still going with the *dirty fix*.

Cheers
J.J.

On Mon, 16 May 2022 at 20:54, vvvinamer ***@***.***> wrote:

> Hey @jjpianta <https://github.com/jjpianta>, have we got any updates
> regarding this? Can this be solved without some dirty work around?
>
> —
> Reply to this email directly, view it on GitHub
> <https://github.com/spring-projects/spring-framework/issues/26253#issuecomment-1128021916>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/ABVFRMXUWW4GYN5XVHYEMXLVKKKWVANCNFSM4UUY53YQ>
> .
> You are receiving this because you were mentioned.Message ID:
> ***@***.***>
>
"
1186,1128727890,rstoyanchev,401908,"Looking at the Javadoc of `setStreamingMediaTypes` it's mainly about flushing per item (for event streams that emit periodically) vs a single flush at the end (for continuous streams).

Maybe, if we are in the [streaming section](https://github.com/spring-projects/spring-framework/blob/874077d16ec126ca19d4b9fbb4157cfdc4eac382/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Encoder.java#L155-L183) and the media type is ""application/json"" (i.e. explicitly set as a streaming media type), we could simply add the opening and closing square brackets to ensure valid JSON is produced. 

We could also switch to flushing at some regularity > 1 (or just leave it to the underlying server buffer) since we know it's a media type that implies continues writing and shouldn't require explicit flushes. In which case I'm even wondering about removing the non-streaming section entirely, and doing this by default, so that we always write `Flux` items as they come with flushing as the only difference between streaming and non-streaming media types.
"
1187,1128738693,rstoyanchev,401908,"There is nothing built-in for this indeed, but I think it could be done with much less code. 

You could configure a path prefix globally for all request mappings, e.g. `""/{locale}""`, see the [reference docs](https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-config-path-matching). Then you don't need a filter to remove the prefix and forward. The `HandlerInterceptor#preHandle` could then use `PathPattern` or `AntPathMatcher`, depending on which is configured for use, to extract the ""locale"" URI variable.

"
1188,1128761427,snicoll,490484,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
1189,1128766704,sakura-maple,35830525,"thanks  i love spring framework,I want to learn the source code of the framework

then.  I want to write another spring framework，I look forward to future cooperation。



"
1190,1128811253,sbrannen,104798,"@snicoll, I've pushed a proof of concept to the following branch.

https://github.com/sbrannen/spring-framework/commits/issues/gh-28025-CollectionFactory-collectionOf

I think the new `createCollection(Class<C>, Class<E>, E...)` method may suit your needs, but I'd like to get your feedback before pushing anything to `main`.

Thanks!
"
1191,1129112224,rstoyanchev,401908,"`DataBufferUtils` is already the place for integration between `Publisher<DataBuffer>` and `java.io` streams. Anything further along the same lines belongs there as a foundation that is much more widely applicable to any reactive chain.

This could be further integrated into the `WebClient` but I don't think it fits. Its encoding/decoding layer is built on Reactive Streams contracts. A `Decoder` returning `Mono<InputStream>` is a mismatch for the deferred nature of Reactive Streams, or it could be `Mono<Supplier<InputStream>>`, but this is still a strange way to do it, essentially tunnelling through the `Mono`. On the `Encoder` side, where we expect an ""input"" publisher of objects to encode, it's not even an option to pass something that wants to write to an `OutputStream`. At best it could accept an `InputStream` (probably why JDK `BodyPublishers` has `ofInputStream` only). That would require `WebClient` to be configurable with an `Executor` for the blocking reads.. It is arguably best left as an external layer. The same reasoning applies to `BodyInserter` and `BodyExtractor` I'll skip that detail here.

It sounds like you want to replace the encoding/decoding layer with your own, but `WebClient` is again built on the `Encoder` and `Decoder` contracts, and it's best to work with implementations of those contracts. In that sense, I don't think this is a very common case and this is the first request we've seen on this.

For your first case with alternating between different codecs based on path, this feels like something that should be possible to achieve with built-in codecs (possibly a filter that switches the content-type, or `exchangeToMono` to choose the type to decode to). For the second case, with a binary format, if it is popular, we could consider an additional implementation, for others to benefit from.

As for `RestTemplate` over the `WebClient`, it's not a direction we would consider. Technical details aside, the `RestTemplate` is an ageing API that we don't wish to revive as a way forward for imperative use. This is an area that we are thinking about but there is not much to share.

For the time being, the best option is to rely on `Encoder`/`Decoder`, either built-in or additional implementations as much as feasible. We can consider a possible expansion of `DataBufferUtils` with more options for `Publisher` and `java.io` streams integration. I should also mention that we now have an [interface client](https://docs.spring.io/spring-framework/docs/6.0.0-SNAPSHOT/reference/html/integration.html#rest-http-interface) emerging for 6.0 that provides another potential direction. It supports flexible method signatures including Reactive and imperative usage style.
"
1192,1129233696,bclozel,103264,"This almost look like a duplicate of #26775. While this case is in theory covered by `ResourceHttpRequestHandlerIntegrationTests` in that issue, it looks like a typical Spring Boot setup is a bit different. Spring Boot configures a `UrlPathHelper` with the `urlDecode` option with its default value, `true`. This has been done for optimization purposes in spring-projects/spring-boot#21499.

I think that this last bit is incorrect - in the case of a Spring MVC application using the `PathPatternParser` matching strategy, Spring Boot should ensure that the configured `UrlPathHelper` has the `urlDecode` option set to false: the matching strategy does not decode the path for us beforehand and there is no need to re-encode it for resolving URL resources.

@rstoyanchev do you think this analysis is right? If so, I'm going to move this issue back to Spring Boot update the `UrlPathHelper`."
1193,1129291801,bclozel,103264,"Sorry for the radio silence @rbri, we were pretty busy with the upcoming major versions and recent CVEs.

I've tested the new API and its usage in Spring Framework in a reflective fashion. So far two pieces of feedback:

1. this forces us to avoid using the `setRequestParameters` API in our tests, which might be a good thing anyway
2. we're seeing a subtle change of behavior when we're using the new API. With the old API, both `""https://example.com/example/?name=""` and `""https://example.com/example/?name""` would give a keyvaluepair `""name""`,`""""`. With the new API, `""https://example.com/example/?name""` gives a keyvaluepair `""name""`,`null`. Not a huge behavior change, but something we noticed in our tests. Any comment on that?

Other than that, I think we could ship this change in the next 5.3.x release. Judging from the changes, we wouldn't really need to enforce an HtmlUnit 2.61+ requirement in Spring Framework 6."
1194,1129500580,SwingGuy1024,19262903,"I always appreciate better error messages, and try to provide helpful details in the Exception messages in my own code."
1195,1129511015,diguage,2121467,"> Please rebase your changes on `main`.
> 
> Also, for checks like `value instanceof Class clazz` you'll need to add the generic wildcard like `value instanceof Class<?> clazz`. So please make the appropriate changes. In other words, we don't want to have to suppress ""raw types"" warnings in such cases.

OK , let me update the codes."
1196,1130298072,pivotal-cla,16822967,"@SaifAliKhan1 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28476)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28476) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1197,1130498844,wolfch-elsevier,57952821,"So is this leak fixed?  Does the framework close the stream after the client reads the content?
Ok, it's fixed, thanks.  
```java
class LoggingFileInputStream extends FileInputStream {
  final static Logger log = LoggerFactory.getLogger(LoggingFileInputStream.class);
  public LoggingFileInputStream(File file)
    throws FileNotFoundException {
    super(file);
  }
  
  @Override
  public void close() throws IOException {
    log.info(""================ FileInputStream closed ================"");
    super.close();
  }
}
```"
1198,1130648381,philwebb,519772,I've transferred this issue to the framework team since I think changes will be needed to `CompositeLog` to account for the fact that a `Log` instance be reconfigured (regardless of if it's by Spring Boot or something else).
1199,1130666825,philwebb,519772,I think we'll need to do something [like this](https://github.com/philwebb/spring-framework/tree/gh-28477). We should also add some tests.
1200,1131197625,yunfongloh,3421693,Seeing this as well
1201,1131212842,mdeinum,606761,"Appears to be a duplicate of https://github.com/spring-projects/spring-framework/pull/28478,"
1202,1131213183,mdeinum,606761,Contains code related to https://github.com/spring-projects/spring-framework/pull/28454 and not only 2 JDBC tests... You might want to clean that up. 
1203,1131252879,yinpeng0528,22645321,Add test cases for JdbcTemplateQueryTests
1204,1131304836,bclozel,103264,"Unfortunately, open source support for the 5.1.x generation has ended.
See https://spring.io/projects/spring-framework#support"
1205,1131408641,snicoll,490484,"No, it is not possible. We have no plan to support injecting a bean when an annotation is present on it. This does seem a bit at odds with the current by-type and by-name semantic. Thanks for the suggestion in any case."
1206,1131503354,albertus82,8672431,"> Unfortunately, `MultipartException` is not just thrown for malformed multipart messages, but also in other cases. For instance, it is also thrown when multipart functionality is used while the current request is not a multipart request. In that scenario a 5xx response code makes a lot more sense.

Maybe I'm missing something, but if an API expects a multipart request and the client sends something else, in my opinion this should be HTTP 400 Bad Request."
1207,1131671583,snicoll,490484,"Juergen and I chatted about this one and we're not sure if we want to create such a wide mechanism.

We feel that processing `@Reflective`-annotated annotations (see #28469) with a set of per-defined registrars for core concepts (web, etc) should cover quite some ground. We'll first give this a try and then figure out what we want to do here."
1208,1131811215,poutsma,330665,"The cause seems to be that `InvocableHandlerMethod::isAsyncVoidReturnType` does not correctly recognize Kotlin coroutines that return `Unit` (Kotlin's `Void` type).

@sdeleuze & @rstoyanchev I have a proposed fix [here](https://github.com/poutsma/spring-framework/commit/b0e4280639c77f7d394704e331e9c53d87e4effe). Could you please review?

FWIW, I tried to apply the same change to `org.springframework.web.reactive.result.method.InvocableHandlerMethod:: isAsyncVoidReturnType`, but that results in failing tests."
1209,1131911845,Royal520,53921474,thanks god
1210,1132080062,OrangeDog,675056,"NVD have just updated this vulnerability ( Reanalysis 5/19/2022 10:25:56 AM ) so it now applies to all versions up to (excluding) 6.0.0.

Was there a fix in 5.3.17 / 5.4.0 (as it previously said), or has this vulnerability actually still been there the whole time?

Is there any communication as to why they changed it?"
1211,1132113566,bclozel,103264,"Thanks for the update @OrangeDog

> NVD have just updated this vulnerability ( Reanalysis 5/19/2022 10:25:56 AM ) so it now applies to all versions up to (excluding) 6.0.0.

Indeed, [the CVE has been recently updated](https://nvd.nist.gov/vuln/detail/CVE-2016-1000027#VulnChangeHistorySection).

> Was there a fix in 5.3.17 / 5.4.0 (as it previously said), or has this vulnerability actually still been there the whole time?
> Is there any communication as to why they changed it?

There never was a vulnerability per se. Developers could use remoting support in spring-web to perform Java deserialization from untrusted clients, if exposed publicly. This can happen without Spring being involved and is a well-known Java security problem. This has been explained [in a previous comment here](https://github.com/spring-projects/spring-framework/issues/24434#issuecomment-744519525).

No fix was applied, since there was nothing to fix in the first place; [we've updated the reference documentation 10+ years ago](https://docs.spring.io/spring-framework/docs/current/reference/html/integration.html#remoting-httpinvoker). We've deprecated this technology in #25379 and removed it completely in #27422.

We didn't get any communication about this. I guess someone noticed that these classes were removed from Spring Framework in #27422, won't be part of the 6.0 release and managed to get this updated.
It's good news, tools will finally stop highlighting this CVE, which is a false positive from my perspective."
1212,1132115108,jpcmonster,51028652,In the short term it may cause more noise though; OWASP DependencyCheck began sounding the alarm in our CI a few hours ago.
1213,1132200709,bclozel,103264,"@jpcmonster if this tool didn't flag this previously, you should report this as an issue to the project  your vendor. A simple update on the range (with the same outcome) should not change anything for projects. "
1214,1132208472,raphw,4489328,"> I don't think this is a very common case and this is the first request we've seen on this.

I think it is more common, but the natural solution is to read and write `byte` arrays what is normally straight-forward. Most developers take the most accessible ""common"" API that one can find when integrating different libraries and do not think more about it. `byte[]` is a JDK type and two libraries that do not know each other can usually communicate using this primitive. With big payloads, this is however often infeasible which leads to using `InputStream` and `OutputStream`, another JDK primitive that most libraries understand. If one can navigate to this primitive via `DataBufferUtils`, and if this is straight-forward to use, I'd be personally happy enough, now I know where to look. Even though I think most Spring users would naturally search for a way in `BodyInserters` or `BodyExtractors`.

My issue with the current API is that it uses `Flux<DataBuffer>` as its surface. Neither type is a JDK primitive and even most seasoned Spring users do not know a thing about either of these types. So I would have hoped that there was an easy escape hatch for those looking for one. I would neither expect many developers being able to develop their own encoders or those encoders to be maintainable in a big, shifting team, that's why I would have hope an easy break for cases where custom handling is needed for the cases that I described. ""Weird"" code is much more common in the enterprise than one would hope. And some of the hatred  Spring gets is exactly that, that it covers the common case well but makes the uncommon case impossible. With `WebClient`, I argue that this impression is currently true, unfortunately.

> As for RestTemplate over the WebClient, it's not a direction we would consider. Technical details aside, the RestTemplate is an ageing API that we don't wish to revive as a way forward for imperative use.

While rest template might be aging, it is trivial to use in the non-reactive case. To most users of Spring, reactive streams are alien, and will stay alien, especially with Loom on the horizon. And this is where I feel like Spring is giving out mixed messages. Should I argue that the `WebClient` API does not support the non-reactive, blocking use well enough and ask for an improvement? Or is web client for reactive, asynchronous programming, and I should still expect that `RestTemplate` is the choice I should take? Just weeks ago, rest template was advertised as deprecated, and while this disclaimer was removed I am under the impression that the supporting infrastructure, such as the request factories, are already under removal.

I would therefore hope that rest template would be better supported by adding more request factories, for example for the built-in JDK client, or just for web client what would allow inheriting the latter. Or that Spring would improve the support of web client for the blocking, non-reactive use, which is likely the use of the vast majority of Spring users."
1215,1132423549,aooohan,40265686,I don't think this is an issue with the spring framework.You can debug it at org.springframework.http.server.reactive.AbstractServerHttpRequest#initCookies
1216,1132433063,chrispetermu,49049741,"i face same problem today, how to solve that bro"
1217,1132481510,jsonwan,53823124,"> I don't think this is an issue with the spring framework.You can debug it at org.springframework.http.server.reactive.AbstractServerHttpRequest#initCookies

This method only get the first cookie value when multi cookies with the same name exist, because the implementation class ReactorServerHttpRequest.initCookies() use HttpServerRequest.cookies() to get cookies, which can be replaced by HttpServerRequest.allCookies() to get all the values.
Besides, the return type of this method is MultiValueMap, which can be used to save cookies with same name. I guess may be designed so."
1218,1132488292,aooohan,40265686,"> > I don't think this is an issue with the spring framework.You can debug it at org.springframework.http.server.reactive.AbstractServerHttpRequest#initCookies
> 
> This method only get the first cookie value when multi cookies with the same name exist, because the implementation class ReactorServerHttpRequest.initCookies() use HttpServerRequest.cookies() to get cookies, which can be replaced by HttpServerRequest.allCookies() to get all the values. Besides, the return type of this method is MultiValueMap, which can be used to save cookies with same name. I guess may be designed so.

Yes, you're right, I just took a closer look at the ReactorServerHttpRequest implementation and reactor-netty's HttpServerRequest does provide a way to get all cookies, HttpServerRequest#allCookies()."
1219,1132491184,aooohan,40265686,@jsonwan  Can I propose a pr to solve this issue?
1220,1132495691,jsonwan,53823124,"> @jsonwan Can I propose a pr to solve this issue?

Yes, I tried to solve this problem by using HttpServerRequest.allCookies() instead of cookies() and completing the test cases, however, Jetty, Reactor-netty and Tomcat test cases passed but the undertow test cases failed because undertow does not provide a method to get all cookies. Wish for your help.
Related undertow issue: https://issues.redhat.com/browse/UNDERTOW-1676#section-4.2.2 "
1221,1132499484,aooohan,40265686,"> > @jsonwan Can I propose a pr to solve this issue?
> 
> Yes, I tried to solve this problem by using HttpServerRequest.allCookies() instead of cookies() and completing the test cases, however, Jetty, Reactor-netty and Tomcat test cases passed but the undertow test cases failed because undertow does not provide a method to get all cookies. Wish for your help. Related undertow issue: https://issues.redhat.com/browse/UNDERTOW-1676#section-4.2.2

Undertow does not offer the ability to parse multiple cookies, there is nothing we can do about it. I think we just need to solve the ReactorServerHttpRequest problem, but of course, I think it's a problem, and it's up to the maintainers of the spring framework to decide if it ends up being what we think it is"
1222,1132507061,mtarnawa,5942330,@bclozel are you planning to liaise with NVD on this at any point? This is a bit of a disaster: tools that rely on NVD as the source of vulnerabilities are now flagging almost all versions of SF in existence with a 9.8 CVSS score. This is almost log4shell-critical while being... nonsense.
1223,1132537519,bclozel,103264,"@chrispetermu it's been fixed for years now. If you believe you've found a bug, please create a new issue and with a sample project (something we can download/git clone and run) reproducing the issue. Thanks!"
1224,1132585846,rbri,2544132,"> this forces us to avoid using the setRequestParameters API in our tests, which might be a good thing anyway

From my point of view this is an error in my current implementation. Sending a get request having requestparameters set results in an updated (overwritten query part) url for the get request. Have fixed this."
1225,1132594442,dmitry-weirdo,15837869,"Tonight. all the pipelines suddenly started to fail with GitLab dependency check:

```
[ERROR] Failed to execute goal org.owasp:dependency-check-maven:7.1.0:check (default-cli) on project ins-app: 
[ERROR] 
[ERROR] One or more dependencies were identified with vulnerabilities that have a CVSS score greater than or equal to '8.0': 
[ERROR] 
[ERROR] spring-core-5.3.20.jar: CVE-2016-1000027(9.8)
[ERROR] spring-tx-5.3.20.jar: CVE-2016-1000027(9.8)
[ERROR] 
[ERROR] See the dependency-check report for more details.
```

Please fix or communicate this with NVD!"
1226,1132600021,bclozel,103264,Duplicates #24434
1227,1132615718,rbri,2544132,"> we're seeing a subtle change of behavior when we're using the new API

So far my understanding from your impl is:
* spring shortcuts the server roundtrip; instead of sending the request out, spring intercepts the request and uses the request as input for the server side spring api. So this way misses the conversation from the HtmlUnit WebRequest into the HttpClient WebRequest, the conversation from the HttpClientWebRequest into the real HttpRequest on the wire and finally the conversation back from the bytes on the wire into the ServletWebRequest.

I'm correct here?

What we try now is to provide a method (getParameters()) that produces the same parameters as we get when going th long way. Have to think a bit about a test setup here for this."
1228,1132621725,enote-kane,55989919,"For anyone using the dependency-check (e.g. @dmitry-weirdo ), after verifying that you're not affected, add a suppression:
```xml
<?xml version=""1.0"" encoding=""UTF-8""?>
<!--
Documentation: https://jeremylong.github.io/DependencyCheck/general/suppression.html
-->
<suppressions xmlns=""https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.3.xsd"">
    <suppress>
        <notes><![CDATA[Ignored since we are not vulnerable]]></notes>
        <packageUrl regex=""true"">^pkg:maven/org\.springframework/spring.*$</packageUrl>
        <cve>CVE-2016-1000027</cve>
    </suppress>
</suppressions>
```
People really need to stop freaking out, calm down, read the issue and do their responsibility."
1229,1132683126,sbrannen,104798,"This has been merged into `main`.

Good catch!"
1230,1132711504,rstoyanchev,401908,"This has been considered before, in #9447 for example. It's not something we intend to support."
1231,1132752531,rstoyanchev,401908,Superseded by #28386
1232,1132799736,rbri,2544132,"Have written some tests and it looks like normalizing null to empty strings is a good way.
Will make a new snapshot build and inform you."
1233,1132906648,snicoll,490484,"The tangle for spring factories hint is a little bit problematic as it relies on a package protected method in `SpringFactories`, cc @philwebb "
1234,1132942444,snicoll,490484,We don’t think the AOT engine will be able to detect these beans specifically but together we might be able to brainstorm other ways of achieving what Spring Cloud wants so that it works with AOT.
1235,1132954416,snicoll,490484,"I don't think the API as it is would not let you support this. A lot of the complexity resides in what actually uses the child application contexts. The main context is processed automatically by the AOT engine because we're in control of its lifecycle. The child contexts that are described in the issue you referenced are created programmatically and out of framework's control.

To be able to support this in AOT, these are the things that need to be done:

1. Adapt the existing code so that the required contexts can be parsed. For `NamedContextFactoryBean`,  the specification beans must be instantiated at build-time so we might need to reconsider that model if we want to make sure users don't inject beans they shouldn't
2. Based on the specification, create an `ApplicationContext` (without refreshing it)
3. Process the context with AOT, and store its ""identity""
4. Contribute a `NamedContextFactoryBean` that uses the generated  context instead of doing the parsing

In this list, 1 & 2 are Spring Cloud specific and this work can start right now. 4 is a custom code contributor that is possible with the current API. As for 3, it is also possible but we may need to brainstorm a bit to see if we can improve the API.

Does the above match your expectation?"
1236,1133149681,philwebb,519772,"Tricky. There's just enough code in `SpringFactoriesLoader.loadFactoriesResource` to make copy/paste unappealing. We could perhaps make it a `protected static` method then have a private subclass in `SpringFactoriesLoaderRuntimeHintsRegistrar` to access it again. Either that, or just make that method public."
1237,1133151222,philwebb,519772,"It feels a bit odd to have `spring-context` add the factory hints, I think I'd prefer a `org.springframework.aot.support` package that takes care of registering hints for items in `org.springframework.code`.

It would also be really nice to have a checkstyle rule to enforce the layering."
1238,1133169684,rbri,2544132,@bclozel made a new snapshot build - please try
1239,1133627397,sbrannen,104798,"This has been merged into `main`.

Thanks!

p.s. I fixed `@PutExchange` in ea9b1fccbd06c8ddc672cbb2a5917c2105ef3b4c, too."
1240,1133778531,ryszardmakuch,15367551,"Closing this issue.

I've missed the [`StrictNullChecks`](https://github.com/FasterXML/jackson-module-kotlin#configuration) feature which could be enabled in `KotlinModule`. It prevents against problem I've described 🤦🏻

```
Instantiation of kotlin.String collection failed for JSON property list due to null value in a collection that does not allow null values
 at [Source: (String)""{ ""elements"": [ null ] }""; line: 1, column: 20] (through reference chain: io.github.ryszardmakuch.springbootkotlinissue.ExampleRequest[""elements""])
```

Moreover, it seems that I should have opened this issue as the question in the [jackson-module-kotlin project](https://github.com/FasterXML/jackson-module-kotlin) due to the fact the described problem is unrelated to `Spring` itself."
1241,1133857892,bclozel,103264,Duplicates #28498
1242,1133931311,sbrannen,104798,"Current work on this issue can be viewed in the following feature branch.

https://github.com/sbrannen/spring-framework/commits/module-path-scanning"
1243,1134137646,hungnvd59,41032860,I have solved the above problem
1244,1134353928,rstoyanchev,401908,"The settings of `UrlPathHelper` shouldn't matter. It is mutually exclusive with `PathPatternParser`. 

I think I can see the issue in `PathResourceResolver` where need to differentiate between `UrlResource` and other resource types and check whether the URL path was decoded or not. For the latter we need to consider whether `PathPatternParser` is in use in which case the path is encoded. #26775 as a fix along the same lines in `shouldDecodeRelativePath` but we need the same in `shouldEncodeRelativePath` as well.

I'll experiment with a test and a fix. 

"
1245,1134364408,mahozad,29678011,Just a reminder. It would be great if this was triaged.
1246,1134376807,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
1247,1134415354,andrew-inzer,10183991,"You can use `@Cacheable`:
```
  @Bean
  @Scope(BeanDefinition.SCOPE_PROTOTYPE)
  @Cacheable(cacheNames = ""connectionFactories"", sync = true)
  public ConnectionFactory connectionFactory(Integer bookieId) {
```"
1248,1134659561,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
1249,1134918258,sbrannen,104798,"Hi everybody,

Thanks for all of the feedback over the years!

I am now closing this issue since it has been superseded by the following issues.

- #28506 
- #28507

Please follow those issues for additional updates on module path scanning and resource support."
1250,1135158180,bclozel,103264,We're aware of the situation. You can reach out and get news from our infrastructure team at [@springops](https://twitter.com/springops/).
1251,1135386652,kakahu2015,17962485,"First, please refer to https://github.com/kakahu2015/encrypt to download the demo to your local, I will use this demo as an example to describe the problem I want to solve. Note that the package name of the org.kakahu.util.Hello class is org.kakahu.util is not inside the default scan package (org.kakahu.encrypte) of springboot, but org.kakahu in my uncompiled and packaged application There is no problem in running java -jar unencrypted.jar when the class file of the .util.Hello class performs encryption processing
![image](https://github.com/kakahu2015/encrypt/blob/master/src/main/resources/static/img/unencrypted.png)

But now I encrypt the org.kakahu.util.Hello class file (remember this action), run java -jar util_hello_encrypted.jar again, because the class has been encrypted and processed without any decryption, it will definitely report a magic number error first :
![image](https://github.com/kakahu2015/encrypt/blob/master/src/main/resources/static/img/run-no-libkaka.png)

Next, I use the jvmti-related interface technology to decrypt the encrypted calss of the org.kakahu.util.Hello class java -agentpath:./libkakahu.so -jar util_hello_encrypted.jar, so that the program can run normally:
![image](https://github.com/kakahu2015/encrypt/blob/master/src/main/resources/static/img/run-libkaka.png)

Because org.kakahu.util is not under the default startup scan package of org.kakahu.encrypte springboot, the encrypted classes can be processed normally by using jvmti, and then I want to do the classes under the default startup scan package of org.kakahu.encrypte springboot. Encryption processing, the JVMTI level can definitely handle the decryption problem, but springboot's own verification mechanism will scan and verify all classes under the default startup scan package of org.kakahu.encrypte springboot (even if my business logic is not really used), it will definitely If an exception is thrown, I just hope that you will provide an exception to not verify some calss files under the default startup scan package of org.kakahu.encrypte springboot:
![image](https://github.com/kakahu2015/encrypt/blob/master/src/main/resources/static/img/new.png)
![image](https://github.com/kakahu2015/encrypt/blob/master/src/main/resources/static/img/en-run.png)
![image](https://github.com/kakahu2015/encrypt/blob/master/src/main/resources/static/img/en-run-lib.png)"
1252,1135522598,Cavva79,2203602,This issue maybe related to this one #18297.
1253,1135536970,bclozel,103264,"We've shared this plan over the last few months [here](https://spring.io/blog/2021/09/02/a-java-17-and-jakarta-ee-9-baseline-for-spring-framework-6) and [here](https://spring.io/blog/2022/03/28/an-update-on-java-17-adoption). So far the community feedback has been very positive. Please read these blog posts and share your opinion in the comments.

Thanks!"
1254,1135565897,lchpersonal,12620558,"> I'm afraid that this is still a reality.
> 
> I had that problem and I was fighting with it for the past 3 days. In my case it was something more weird. I was developing and running from IntelliJ. Everything was fine there. When I deployed the software to another machine resembling the production environment, I got a circular dependency error. After lots of trial and error I realized what the difference was: intelliJ relies on the class files to run the application. We were making a **jar**. After I set IntelliJ to create a jar and run the jar on my machine I got the same error.
> 
> **I was able to fix it with the workaround mentioned here.** There is still the concern though why this thing happens. I enabled debugging for spring, and I saw that the `Eagerly caching bean 'XYZ' to allow for resolving potential circular references` messages were not appearing with the same order (comparing the classes vs jar execution). I also saw 45 less messages (compared to 144 that I was expecting to see). Again the only difference is the classes vs jar. The code is the same. This puzzles me as there shouldn't(?) be any differences between the 2 execution methods.
> 
> So the questions are:
> 
> * Shouldn't the bean processing from Spring be deterministic? **If not how can we make it?**
> * Could that be a timing issue? Should we expect differences across different hardware and OSes?
> * Is there a difference between running spring applications from a jar versus from the class files? I searched but I couldn't find any difference.
> 
> I am at your disposal to provide any additional information as my team is very keen on having that resolved. The ""random"" manner of bean processing makes neither my teammates nor our managers confident. :(

I also encountered the same problem. In order to find the final cause, I traced the source code of springboot. I am glad that I finally found the root cause of the problem. The reason is that the order of instantiation of springboot beans is related to the order of the list of files returned from the jar package. The different platforms of the jar package lead to different order of the file list returned by jarFile.entries(). For specific logic, please see org.springframework.core.io.support.PathMatchingResourcePatternResolver#doFindPathMatchingJarResources (I am using springboot version 1.5.13). To solve this problem, it is necessary to do a natural sorting to solve the problem of inconsistent behavior of the same code in different environments.

in chinese: 
我也遇到了同样的问题，为了找到最终的原因，我追踪了springboot的源码，很庆幸最终发现导致该问题的根本原因。原因在于，springboot bean的实例化顺序与从jar包返回的文件列表顺序有关。而打成jar包不同平台不一样导致了jarFile.entries()返回的文件列表顺序不同。具体逻辑请查看org.springframework.core.io.support.PathMatchingResourcePatternResolver#doFindPathMatchingJarResources (我使用的是springboot 1.5.13版本)。要想解决此问题，需要在做一次自然排序即可解决相同代码不同环境行为不一致的问题。
"
1255,1135571560,mdeinum,606761,"This is a question which is better suited for StackOverflow, on which you [already](https://stackoverflow.com/questions/72358910/alternative-for-servletcontextlistener-in-webflux) asked said question. "
1256,1135581903,sbrannen,104798,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
1257,1135782829,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
1258,1135819009,liangjihua,35123083,"> > I'm afraid that this is still a reality.
> > I had that problem and I was fighting with it for the past 3 days. In my case it was something more weird. I was developing and running from IntelliJ. Everything was fine there. When I deployed the software to another machine resembling the production environment, I got a circular dependency error. After lots of trial and error I realized what the difference was: intelliJ relies on the class files to run the application. We were making a **jar**. After I set IntelliJ to create a jar and run the jar on my machine I got the same error.
> > **I was able to fix it with the workaround mentioned here.** There is still the concern though why this thing happens. I enabled debugging for spring, and I saw that the  messages were not appearing with the same order (comparing the classes vs jar execution). I also saw 45 less messages (compared to 144 that I was expecting to see). Again the only difference is the classes vs jar. The code is the same. This puzzles me as there shouldn't(?) be any differences between the 2 execution methods.`Eagerly caching bean 'XYZ' to allow for resolving potential circular references`
> > So the questions are:
> > 
> > * Shouldn't the bean processing from Spring be deterministic? **If not how can we make it?**
> > * Could that be a timing issue? Should we expect differences across different hardware and OSes?
> > * Is there a difference between running spring applications from a jar versus from the class files? I searched but I couldn't find any difference.
> > 
> > I am at your disposal to provide any additional information as my team is very keen on having that resolved. The ""random"" manner of bean processing makes neither my teammates nor our managers confident. :(
> 
> I also encountered the same problem. In order to find the final cause, I traced the source code of springboot. I am glad that I finally found the root cause of the problem. The reason is that the order of instantiation of springboot beans is related to the order of the list of files returned from the jar package. The different platforms of the jar package lead to different order of the file list returned by jarFile.entries(). For specific logic, please see org.springframework.core.io.support.PathMatchingResourcePatternResolver#doFindPathMatchingJarResources (I am using springboot version 1.5.13). To solve this problem, it is necessary to do a natural sorting to solve the problem of inconsistent behavior of the same code in different environments.
> 
> in chinese: 我也遇到了同样的问题，为了找到最终的原因，我追踪了springboot的源码，很庆幸最终发现导致该问题的根本原因。原因在于，springboot bean的实例化顺序与从jar包返回的文件列表顺序有关。而打成jar包不同平台不一样导致了jarFile.entries()返回的文件列表顺序不同。具体逻辑请查看org.springframework.core.io.support.PathMatchingResourcePatternResolver#doFindPathMatchingJarResources (我使用的是springboot 1.5.13版本)。要想解决此问题，需要在做一次自然排序即可解决相同代码不同环境行为不一致的问题。

Great Job 👍

in chinese: 666"
1259,1135824051,dpratsun,23323838,@rstoyanchev could you please tell at which version of Spring Boot `MissingRequestValueException` can be used?
1260,1135983614,pivotal-cla,16822967,"@hsteinmueller Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28520)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28520) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1261,1136007989,snicoll,490484,"For the annotations themselves and loading `org/springframework/http/mime.types` it would be nice if those were contributed only if the application is going to use it. Adding a `RuntimeHintsRegistrar` in `aot.factories` would not achieve that goal but it's not clear cut where to put `@ImportRuntimeHints`. As it should be consistent, we can't really rely on Spring Boot for that. 

For the annotations, I was tempted to add an import on `org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping` but it's not obvious that's going to be a bean so the annotation there feels a little bit odd."
1262,1136008788,pivotal-cla,16822967,@hsteinmueller Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28520)!
1263,1136009439,sbrannen,104798,"If you've been following this issue, I'm happy to let you know that #28506 has been resolved for inclusion in 6.0 M5.

In the interim, feel free to try out 6.0 snapshots with modular testing using Maven.

I've created a new repository for demonstrating the use of the Spring Framework with the Java Module System: https://github.com/sbrannen/spring-module-system

That repository currently contains a `maven-surefire-patched-module` project which demonstrates support for `@ComponentScan` in a patched module using Maven Surefire."
1264,1136021943,snicoll,490484,Considering that `MergedAnnotations` is required to automatically handle the creation of the proxy. I wonder if dealing with everything that is method specific can be a good thing. This would be more code but more tailored to what is actually happening in the application.
1265,1136029195,sbrannen,104798,"This issue has been resolved for inclusion in 6.0 M5.

In the interim, feel free to try out 6.0 snapshots for applications deployed with patched modules.

I've created a new repository for demonstrating the use of the Spring Framework with the Java Module System: https://github.com/sbrannen/spring-module-system

That repository currently contains a single `maven-surefire-patched-module` project which demonstrates support for `@ComponentScan` in a patched module using Maven Surefire."
1266,1136063170,sbrannen,104798,"This has been merged into `5.3.x` and `main`.

Thanks for submitting your first pull request for the Spring Framework! 👍 "
1267,1136245613,philwebb,519772,"The `String` variant was added to support generation where there isn't a single class that can be linked. I think it's currently only used in `BeanRegistrationsAotContribution`. We should probably rename that method to make it clearer that there is no target class.

I know @snicoll was wondering about the use of the `__` package in general, perhaps we can make the generated `BeanRegistrations` class be in the same package as the `@SpringBootApplication` class then we can drop the string version entirely.

The `ClassNameGenerator` should be removed, we dropped that class during the prototype work."
1268,1136262337,philwebb,519772,If we want to remove all attributes entirely we can drop the `BeanDefinitionPropertiesCodeGenerator.addAttributes` method. Otherwise I guess we need some filter strategy so that the `ConfigurationClassPostProcessor` can contribute a filter that removes just those attributes.
1269,1136661872,pivotal-cla,16822967,@1zg12 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=26761)!
1270,1136905332,snicoll,490484,"To support the above, [this comment describes](https://github.com/spring-projects/spring-boot/issues/31163#issuecomment-1136687291) how we attempt to integrate the management child context in Spring Boot. "
1271,1136960307,sbrannen,104798,"The underlying issue is that `HierarchicalUriComponents.getPort()` invokes `Integer.parseInt()` which throws the `NumberFormatException`.

Thus, invocations of `getPort()`, `toUri()`, `toUriString()`, and `toString()` are all affected."
1272,1136971345,serv-inc,11770594,"Does https://stackoverflow.com/questions/61140322/jetty-run-error-java-lang-typenotpresentexception-type-javax-annotation-meta-wh help ?

```
    <dependency>
        <groupId>com.google.code.findbugs</groupId>
        <artifactId>jsr305</artifactId>
        <version>3.0.2</version>
    </dependency>
```"
1273,1136990058,sbrannen,104798,"Related Issues:

- #26905
- #27039"
1274,1137018289,sbrannen,104798,"This has been addressed in `5.3.x` and `main`.

@Jackson-S, thanks for submitting your first issue for the Spring Framework! 👍 "
1275,1137041390,sbrannen,104798,"Do you have `jsr305-3.0.2.jar` in the class path or module path?

> it appears you can't use `jsr305` as the automatic module name.

What happens when you attempt to do that?

Are you encountering issues with split packages?"
1276,1137156193,adamstyl,13643651,"@lchpersonal 

> The reason is that the order of instantiation of springboot beans is related to the order of the list of files returned from the jar package. The different platforms of the jar package lead to different order of the file list returned by jarFile.entries().

Great find. Although I'm not working on spring anymore, I think that the way to go (if anyone would be interested to fix this of course) would be _first_ to process the source files and _then_ try to create the object graph. That way `@Lazy` will be used only when it's **really** needed. Otherwise a specific order of processing working for person A won't work for person B. My 2 cent's though."
1277,1137371566,1zg12,52658745,"hi @rstoyanchev , can you review this ? "
1278,1137664208,vpavic,1149230,"As this was declined due to being a breaking change back in 2019, could you reconsider it for `6.0`?

IMO it's very unfortunate to have a piece of javadoc that basically redefines something as well established as the SI prefixes. If there's a configuration property of type `DataSize` annotated with `@DataSizeUnit(DataUnit.KILOBYTES)` that should be quite self explanatory."
1279,1137756989,act-amirsky,92257392,"> Doing this would be a breaking change and we would need to create a new artifact for that. This is typically the type of change we apply for major releases.
> 
> These classes have been part of spring-web since Spring Framework 1.1.
> 
> I guess it's hard to balance the severity of the issue and the amount of unsafe setup required to trigger it. Tools warning about such vulnerabilities don't usually have that context and they can only convey more information to users about the context of this vulnerability.
> 
> In this case, and especially since this new warning seems to be a misunderstanding, I don't think we should move this code now.

The problem is that major organization's security groups can have a zero-tolerance policy for High/Critical issues in a security scan. Our software goes to major banks, and we've tried, explained, begged for exceptions around a flagged library that is not really exposing a CVE in any context - but to no avail. I understand their perspective on this. They have to maintain the security of 1000s of applications and services running in massive organizations. They don't have the energy nor endless expertise to debate each flagged library and weight the risk of a data breach in the bank.

I am all for removing to a separate lib - with all understanding on the ""breaking"" impact. Though I think with such a blaringly clear reason and that the fix is an added dep to a POM, it benefits may out-weight the update costs IMHO.

Is there no way to add mitigations or validations in the HttpInvoker around this? Enough in order to negate this CVE? If backwards compatibility is a concern make the mitigations/validation an enabled capability which is off by default. "
1280,1137792754,cvmocanu,59873,"> begged for exceptions around a flagged library that is not really exposing a CVE in any context - but to no avail

I'm a senior software developer, but if I were a security officer, I wouldn't give an exception in this case. Especially with spring boot autoconfiguration, just including the wrong jar in the list of dependencies (deep in the dependency tree) can expose an endpoint that makes the application vulnerable - and it has almost 0% chance to be catched by a PR review.

The only safe course is to not have the option - for the vulnerable class not to be available on the classpath. But Spring developers don't see (or refuse to see) this.

(Off-topic: I can't wait for Spring Fu, where all the magic is made explicit)."
1281,1138067366,msangel,773163,Why simply not allow an alternative name via `@Comumn` annotation if it present?
1282,1138082998,ryoheinagao,15025317,What do you think my suggestion?
1283,1138674831,bclozel,103264,"@mtarnawa @dmitry-weirdo I've reached out to MITRE a few days ago as it is the team that initially published it. I'm still waiting for an answer.

@act-amirsky at this point the best course of action is to get this CVE entry removed as invalid. Splitting, changing the existing support might just trigger more updates to the entry and more alarm bells, so not fix the root issue. I totally understand the security processes of big companies; for these to work, we need reliable, accurate CVE information. This is not the case here and this should be fixed.

@cvmocanu there is no auto-configuration for this in Spring Boot. Developers need to expose this manually in all cases. This is why the CVSS score is wrong in the first place. Spring Fu would be ""vulnerable"" in a similar fashion. Not having the related classes on the classpath won't solve the issue: it is really easy to replicate the same behavior by using regular REST endpoints and vanilla Java serialization. The security issue isn't in Spring's code, but rather a general Java security concern: do not deserialize Java classes from untrusted clients."
1284,1139099079,nightswimmings,9316403,"@hjohn  I requested this long time ago, and I was responded with a very enlightning answer by (was it Andy Wilkinson?).
The best approach to fulfill this need is creating a custom domain object that acts as a wrapper.
For instance, my need was usually @Autoconfiguring something like a Rest/Jms/KafkaTemplate or ObjectMapper, to be customized and used exclusively within the boundary of my domain, but forbidding for qualifying as @Primary in the rest of the Boot Autconfiguration ecosystem. 


You can then expose a @Bean like

```
@Getter
@RequiredArgsConstructor
DomainRest/Kafka/JmsTemplate.java

   private final DomainRest/Kafka/JmsTemplate domainTemplate;
```

You can even use Lombok's @Delegate if you want a 1-to-1 functionally equivalent decorator

This is exactly the same as defining a theoretical @Bean(strictQualifying = true) @Qualifier(""strict-qualif-implementation"")  + with a @Autowired @Qualifier(""strict-qualif-implementation"") injection"
1285,1139142953,hjohn,995917,"Sorry, but I don't consider wrapping every bean that I don't want exposed a very good answer to this problem. A much better way to approach this is how CDI does this.  Every bean without a qualifier silently gets a default qualifier added to it, and every injection point defined without a qualifier also gets this default qualifier. Now when you define a bean with your own qualifier, it will not match with an injection point that does not explicitly have that qualifier:

      @Bean
      A myBean();   // gets defined as ""@Default A""

      @Bean @Red
      A myBean();  // gets defined as ""@Red A""

      @Bean @Default @Red
      A myBean();  // gets defined as ""@Default @Red A""

      @Autowired A a;  // accepts ""@Default A"" or ""@Default @Red A"" but not plain ""@Red A""
 
      @Autowired @Red A a; // accepts ""@Red A"" or ""@Default @Red A"" but not plain ""@Default A""

"
1286,1139254956,philwebb,519772,I think we can use `BeanRegistrationExcludeFilter` as a signal for this. Any AOT processor bean that doesn't implement `BeanRegistrationExcludeFilter` can be implicitly filtered. If it does implement `BeanRegistrationExcludeFilter` then we consider that a signal that it is handling its own filtering.
1287,1139310617,nightswimmings,9316403,"Yes, its my same need. In a way, I can understand what I was told, i.e, that if you need to strict qualify Red A everywhere, it is not an A anymore, it is a RedA and must be injected as such. Kinda Liskov."
1288,1139396294,jhoeller,1263688,"Spring includes a custom CGLIB fork which is generally JDK 17 compatible. However, since we are not using the CGLIB beans utilities ourselves, we initially did not patch them accordingly. This got reported for the CGLIB BeanMap already in #27802, I suppose BeanCopier needs similar treatment. We'll try to address this for 5.3.21."
1289,1139400669,jhoeller,1263688,"It seems that BeanGenerator, BulkBean, and ImmutableBean would benefit from a similar patch. It is all about setting a context class for the definition of the newly generated class (via the JDK 9+ Lookup API), and all of those CGLIB bean utilities effectively have a specified target class configured that we could use for those purposes. Hopefully we can sort this out for good in 5.3.21."
1290,1139402679,SuperEdison,84554944,"> Spring includes a custom CGLIB fork which is generally JDK 17 compatible. However, since we are not using the CGLIB beans utilities ourselves, we initially did not patch them accordingly. This got reported for the CGLIB BeanMap already in #27802, I suppose BeanCopier needs similar treatment. We'll try to address this for 5.3.21.

yeah!!!i'm feeling weird. because i cant find spring use cglib,but BeanCopier still keep away. thank for your answer."
1291,1139665590,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
1292,1139696146,OlgaMaciaszek,4328892,"Thanks, @snicoll. As discussed we're going to take a shot at generating the bean definition maps and consider the possible issues of this approach, including resolving default specifications and not creating `Specification` beans and get back to you."
1293,1139948914,orubel,274764,"I created a workaround for this BTW:

```
  String session

  protected boolean shouldNotFilter(HttpServletRequest request) throws ServletException {
        if((this.session!=null && request.getSession().getId()==this.session)) {
            return true;
        }
        return false
    }
```
This makes it TRULY a 'OncePerRequest' Filter (almost) :)"
1294,1139948920,philwebb,519772,`OncePerRequestFilter` is part of Spring Framework so I'll transfer this issue to that team. @orubel Do you have a sample application that demonstrates what you're doing?
1295,1140294702,wimdeblauwe,1115823,"I am trying to better understand the scope of this issue. I had a look to the [sample project](https://github.com/rstoyanchev/sandbox-rfc7807). Is the intention of providing ""just"" a `ProblemDetails` class that everybody could use when writing their own exception handlers? Or is there also the intention of providing out-of-the-box exception handling that translates exceptions into `ProblemDetails`? 

In my [error-handling-spring-boot-starter](https://github.com/wimdeblauwe/error-handling-spring-boot-starter) I translate exceptions into JSON notation (not using the RFC7807). See https://foojay.io/today/better-error-handling-for-your-spring-boot-rest-apis/ if you want a nice overview of what the library does. 

The JSON I send back as an error response is represented by the [ApiErrorResponse](https://github.com/wimdeblauwe/error-handling-spring-boot-starter/blob/master/src/main/java/io/github/wimdeblauwe/errorhandlingspringbootstarter/ApiErrorResponse.java). It also has a generic `Map<String, Object> properties` field which allows to [add extra properties in the response](https://wimdeblauwe.github.io/error-handling-spring-boot-starter/#adding-extra-properties-in-the-response)."
1296,1140299198,wimdeblauwe,1115823,What is the difference between `org.springframework.web.server.MissingRequestValueException` which was added to Spring 6 and `org.springframework.web.bind.MissingRequestValueException` which is already in Spring 5?
1297,1140300704,orubel,274764,"You bet. Have a spring-boot starter demoing it : https://github.com/orubel/spring-boot-starter-beapi

The example would be shown through the use of a batch job (as demo'd in the demo-application -> BatchFunctionalTest.groovy)

Request/response call flow is handled through ApiInterceptor and sent to BatchExchangeService where batchresponse() method handles forward (which is called by ApiInterceptor -> postHandle() ):

```
			if(request.getAttribute('batchVars').isEmpty()) {
                          
                           ...

			}else{
				// concat output
				parseBatchOutput(body, request, response, this.responseFileType)

				//forward
				String path =""/b${this.version}/${this.controller}/${this.action}/**""
				def servletCtx = this.ctx.getServletContext()
				def rd = servletCtx?.getRequestDispatcher(path)
				rd.forward(request,response)
			}
```

"
1298,1140382827,bclozel,103264,You'll find the Spring Framework 5 requirements [in our wiki](https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-5.x#baseline-update). Please check that your Servlet container matches here.
1299,1140383037,bclozel,103264,Sorry but Spring Framework 5.0.x is out of open source support. You'll find more [information about the requirements in our wiki](https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-5.x). 
1300,1140397084,snicoll,490484,"> ApplicationContextAotGenerator doesn't currently return the class name of the generated initializer and it probably should.

I am confused. Isn't that the third argument of that method?

> The method name might also be better as generateApplicationContextInitializer since that's what it actually generates.

I don't agree with this. This processes the context, kicks of the AOT engine and honors all sort of callbacks that generate everything related to the context. This includes build-time optimizations. From that perspective, even the third argument looks a bit off IMO. I wonder if returning some sort of report where contributions could state what they've done and potential links to resources could be helpful. "
1301,1140450454,snicoll,490484,Thanks for the PR. I don't think that removing the feature altogether is what we should aiming at. We're still discussing in the issue so we're not really ready to accept a contribution for this. Thanks anyway!
1302,1140450997,snicoll,490484,"Another option would be to find a way to opt-in for certain attributes. I think that keeping the feature and letting him custom implementations drive what they need is interesting.

I am not too sure if we need to exclude an attribute or include a specific attribute (with, perhaps a list of well-known ones we want to include/exclude). In Spring Native we don't use this at all and it's been going ok so far but I am sure we'll hit a problem at some point."
1303,1140451475,snicoll,490484,"@Nidhi-Tanwar14 please review [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss) where it states that we don't use this issue tracker for questions. Spring Boot-related issues are not handled here but in [its dedicated project](https://github.com/spring-projects/spring-boot/). I don't think that ""creates a lot of unused dependencies"" is accurate."
1304,1140451941,snicoll,490484,See https://github.com/spring-projects/spring-framework/issues/28509#issuecomment-1140451475
1305,1140452325,snicoll,490484,"We can't give you support based on the information that you've shared and giving you a clue is probably going to lead to a lot of back and forth. Rather, please take the time to build a small sample we can run ourselves (zip or GitHub repo) using a supported version of the Spring Framework that reproduces the problem. Based on that, we can investigate and help you. "
1306,1140486189,cvmocanu,59873,"@bclozel : you misunderstood my comment. My point was that the presence of the class in the classpath makes a particular attack much simple:
* the spring boot autoconfiguration works automatically, by just adding an artifact to the classpath
* a malicious 3rd party artifact (one of the tens of such artifacts) could auto-configure the vulnerable controller
* the fact that a 3rd party artifact is added to the classpath is completely not obvious to any PR review, because it could be a transitive dependency of a transitive dependency

All the above makes it very easy to introduce a security issue into an application in a way that is completely impossible to see in a PR review.

Of course, the problem is not specific to this issue, but it's generic to spring boot autoconfiguration - it's very easy to introduce a security issue into an application, in a way that passes the PR review. Servlet 3.0 auto-scanning has the same problem, for the same reasons.
That's why I said that I can't wait until Spring Fu becomes production ready.
In addition to removing the possibility to introduce such security issues **invisibly**, it will also require people to understand how Spring works. This will remove the endless debugging sessions into Spring code trying to understand what autoconfiguration classes need to be included in a test (since there is very little official documentation about this).

> The security issue isn't in Spring's code, but rather a general Java security concern: do not deserialize Java classes from untrusted clients.

I agree that Java serialization is the root cause. It will probably (hopefully) be removed from Java completely in the next years.
But the presence of `HttpInvokerServiceExporter` in the classpath, coupled with Spring Boot autoconfiguration makes some attacks much easier than they should be."
1307,1140621683,vkremianskii,105838439,"I have exactly the same problem on Spring Boot 2.7.0, and came to the same conclusion.

```
ConnectionHolder conHolder = (ConnectionHolder) synchronizationManager.getResource(connectionFactory);
if (conHolder != null && connectionEquals(conHolder, connection)) {
  // It's the transactional Connection: Don't close it.
  conHolder.released();
}
return Mono.from(connection.close());
```

Here transactional connection is closed, when it shouldn't have been."
1308,1141005653,vpavic,1149230,Any feedback on this?
1309,1141015144,lgxbslgx,13688759,I merged the main branch and solved the conflicts just now.
1310,1141061414,bclozel,103264,"@cvmocanu

> All the above makes it very easy to introduce a security issue into an application in a way that is completely impossible to see in a PR review.

Again, Spring Boot does not auto-configure nor expose `HttpInvokerServiceExporter`, in any way. Also, there is no controller involved, as the `HttpInvokerServiceExporter` needs to be declared manually as a bean and exposed through a Servlet. The scenario you've described can easily be applied without Spring being involved. As you've pointed out, Servlet 3 scanning, a servlet implementation and plain Java deserialization can achieve the same.

> Of course, the problem is not specific to this issue, but it's generic to spring boot autoconfiguration

I understand that you have a preference for manual configuration. Lots of developers are following this issue and are looking for guidance about the CVE; making your point about auto-configuration here just adds to the confusion.

> But the presence of `HttpInvokerServiceExporter` in the classpath, coupled with Spring Boot autoconfiguration makes some attacks much easier than they should be.

Please stop making this point as we've shown this is not true. Also, I'm asking you to refrain from commenting further on this issue, your opinion has been heard. If you believe you've found critical information about this vulnerability, [please report it responsibly](https://spring.io/security-policy). We don't want to lock this conversation but we will if this becomes too noisy."
1311,1141374921,sbrannen,104798,"This has been merged into `main` in bbaf7578b2ca66ec1a4cff114c3e2bc4d7d3b462 and revised in 43dd813ee64e7c62aeeaf24cdd52230457336d5b and 16f65e59b49ebdc7813819c137203fccccf8f4f2.

Thanks! 👍 "
1312,1141385254,sbrannen,104798,"It turns out that the Checkstyle issue is a known limitation.

- https://github.com/checkstyle/checkstyle/issues/10969"
1313,1141392175,sbrannen,104798,"> Any feedback on this?

Hi @vpavic,

We just have not gotten to it yet.

We'll review it and hopefully get it into 6.0 M5."
1314,1141679923,pivotal-cla,16822967,"@eltociear Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28542)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28542) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1315,1141680529,pivotal-cla,16822967,@eltociear Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28542)!
1316,1141792774,snicoll,490484,"@Nidhi-Tanwar14 Please take the feedback we've been giving you in the [other issues](https://github.com/spring-projects/spring-framework/issues/28509#issuecomment-1140451475) you've raised. We don't use the issue tracker for questions, you have to use StackOverflow for that."
1317,1141793642,snicoll,490484,You'll find what's new and upgrade instructions on [the wiki](https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Versions)
1318,1141796961,snicoll,490484,@eltociear thank you for making your first contribution to Spring Framework.
1319,1141815556,Nidhi-Tanwar14,106141823,"Ok understood, thank you "
1320,1141907448,vy,72137,"@rstoyanchev, thanks so much for keeping on involving us during the development. I've checked [the sample project](https://github.com/rstoyanchev/sandbox-rfc7807). I have shared my remarks below.

1. I still think `ProblemDetail` should be an interface and certainly not a _mutable_ POJO. For instance, `ExtendedProblemDetail` misses `withHost()` to get aligned with `ProblemDetail` surface. (I know, `ExtendedProblemDetail` is just there to test extensibility. But my point rather is people will repeat that mistake and miss those conventional methods.) You modify the exception (through its `ProblemDetail`) in controller advices. These don't look, if I may say, _good_, given generally how well-thought Spring touch points are.
1. We have an extensive RFC 7807 test suite against corner cases we have encountered through the years; thrown exceptions from a controller advice should be converted to a problem detail, etc. There are also certain exceptions that can happen before the controller method is called and don't get caught by the `@ExceptionHandler` methods. This suite ensures that application failures always get rendered as a problem detail. We can share these suite of cases, if you wish.
1. We provide selective logging on the problem details; e.g., log every response of type `/problem/bad-request` at level `WARN`. Here the type and level are user provided configurations. Would you consider adding this feature to the Spring? If not, what would be the best interception point for us given the new `ErrorResponse` family.
1. RFC 7807 implementations out there in the wild also expose a _throwable_ variant of the `ProblemDetail` extending from `RuntimeException`. What is your take on this?

> One comment/question to you. For you suggestion to add `Map<String, Object> attributes`, and also looking at your [spring-projects/spring-boot#19525 (comment)](https://github.com/spring-projects/spring-boot/issues/19525#issuecomment-857551764) under the Boot issue, I think you are making a distinction between extra fields that are known and always added (e.g. host) vs others that are not known upfront and need to be supported through a generic map of attributes? In other words, a more dynamic mechanism to add any attribute, in addition to the ability to extend `ProblemDetail` in order to support well-known fields that are always added. This makes sense to me to have such a Map of attributes in `ProblemDetail`.

Exactly! Having a `ProblemDetail#attributes` field of type `Map<String, Object>` enables access to problem detail fields not known upfront."
1321,1141999521,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
1322,1142061478,sdeleuze,141109,"The logic seems ok, but maybe worth to check if you could just reuse [the existing logic implemented in `MethodParameter`](https://github.com/spring-projects/spring-framework/blob/main/spring-core/src/main/java/org/springframework/core/MethodParameter.java#L932-L938) and accessible via `MethodParameter#getParameterType`. Also worth to add Kotlin tests to test this specific arrangement.

Could you please share more about what happen on `org.springframework.web.reactive.result.method.InvocableHandlerMethod:: isAsyncVoidReturnType`?"
1323,1142083651,sdeleuze,141109,"If I understand the proposed changes right, this would add special handling of `Mono` and other `Publisher` (including `Flux`) in addition to `Flow` for suspending functions.

I think this is a change that generally makes sense, not only fixing this use case on Reactive transaction, but also improving the DevXP for people returning `Mono` and `Flux` in suspending functions (not super common, but we had that use case reported in the past).

That said, if I am not mistaken, this would be a breaking change where we would need feedback, so I recommend shipping that as part of the next Spring Framework 6 milestone."
1324,1142414081,vpavic,1149230,"Thanks @sbrannen.

In my notes I had a few other improvement proposals that weren't as straightforward as those included in this PR:

- refactor `CookieLocaleResolver` to extend `AbstractLocaleContextResolver`, and delegate to `CookieGenerator` instead of extending it - this would eliminate some duplication but would also introduce some breaking changes (that are IMO welcome as `CookieLocaleResolver` doesn't really need many of the methods it inherits from the `CookieGenerator` and would also really need a constructor that takes cookie name).
- introduce `AcceptHeaderLocaleContextResolver` that would replace `AcceptHeaderLocaleResolver` and align with reactive side (which offers `org.springframework.web.server.i18n.AcceptHeaderLocaleContextResolver`) - that would also open the path for deprecating `org.springframework.web.servlet.LocaleResolver`.

Anyway, let me know what you think of those and I can either add commits to this PR or open separate issues (or PRs) to consider those separately. IMO the whole `LocaleResolver` hierarchy could use some modernization and chances to do so (that is, new major releases) don't come too often."
1325,1142439443,philwebb,519772,"> I am confused. Isn't that the third argument of that method?

I missed that, for some reason I thought it generated the class name directly."
1326,1142900081,pivotal-cla,16822967,"@pokab Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28550)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28550) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1327,1142909853,pivotal-cla,16822967,@pokab Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28550)!
1328,1142988485,quaff,143040,spel is already supported.
1329,1143029294,dawn9117,55019734,"> spel is already supported.

Okay, but use cases like `@Async(""${executor.name:}"")` don't work when `executor.name` is not configured.

Additionally `EmbeddedValueResolver` can be reused."
1330,1143180587,Nomi67,56782970,"Hi community,
sorry this was entirely mistake don't know whose but i faced a strange behavior. i was injecting property from application.proeprties in a String variable. 
**property** : **rabbitmq.port=61613**
```
@Value(""${rabbitmq.port}"")
    private String rabbitMqPort;
```

after logging the value of variable i was receiving something like **tcp://ip:61613**. So now issue is fixed. "
1331,1143221905,bclozel,103264,"Duplicates #24434, see https://github.com/spring-projects/spring-framework/issues/24434#issuecomment-744519525"
1332,1143262900,rstoyanchev,401908,"Indeed, it looks like MockMvc doesn't have methods in `MockMvcRequestBuilders` to create a multipart request with an HTTP method other than POST, so hardcoded."
1333,1143294925,rstoyanchev,401908,No problem.
1334,1143296545,TranTuanNghia94,22748304,"> You can bind form data onto an Object with `@ModelAttribute` (which is also assumed by default so you don't even have to add it), for example:
> 
> ```java
> @PostMapping(path = ""/test"", consumes = ""application/json"")
> public String test(@RequestBody User user) {
>   return user.toString();
> }
> 
> @PostMapping(path = ""/test"", consumes = ""application/x-www-form-urlencoded"")
> public String test(User user) {
>   return user.toString();
> }
> ```
> 
> Data binding gives fine-grained control over which fields to bind and which to disallow, along with type formatting control, etc via `@InitBinder` methods and a `BindingResult` with field-specific errors.
> 
> For form data with `@RequestBody` it's mostly a `MultiValueMap` we support.

Both methods have same erasure"
1335,1143548457,snicoll,490484,"The `beanName` is an identifier on its own. There are three hints in the Javadoc you've pasted:

> Resolve the specified bean name

> The default implementation calls {@link BeanFactory#getBean(String)}. Subclasses may provide additional arguments or other customizations.

And 

> @param requiredType the expected type of the bean (as an assertion)

In short, this method is resolving a dependency based on its bean name. The type is provided as an additional argument that subclass may or may not use but it isn't necessary as the bean name itself is enough to resolve the dependency. As it returns `Object`, there is no guarantee on the type either.

If you have further questions, please follow-up on StackOverflow. As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements."
1336,1143629171,poutsma,330665,"> The logic seems ok, but maybe worth to check if you could just reuse [the existing logic implemented in `MethodParameter`](https://github.com/spring-projects/spring-framework/blob/main/spring-core/src/main/java/org/springframework/core/MethodParameter.java#L932-L938) and accessible via `MethodParameter#getParameterType`.

Done, see https://github.com/spring-projects/spring-framework/commit/c55606ed08609653c537c6da6c8900fc8ea07513.

>Also worth to add Kotlin tests to test this specific arrangement.

There already [is one](https://github.com/spring-projects/spring-framework/blob/b2a0978c129856804e0ae82e676f65616a2ea5ef/spring-messaging/src/test/kotlin/org/springframework/messaging/rsocket/RSocketClientToServerCoroutinesIntegrationTests.kt#L156) for fire-and-forget. The `IllegalArgumentException` was non-fatal, and just logged.  


> Could you please share more about what happen on `org.springframework.web.reactive.result.method.InvocableHandlerMethod:: isAsyncVoidReturnType`?

I wanted to make the same change in WebFlux, because it seemed to make sense. Once I added this change in that `InvocableHandlerMethod:: isAsyncVoidReturnType`, tests failed. I am assuming this is because WebFlux already supports `Unit`-returning methods in other ways, but I am not sure and did not investigate.
"
1337,1143690620,sbrannen,104798,"Good catch.

This has been merged into `5.3.x` and `main`.

Thanks for submitting your first PR to the Spring Framework! 👍 "
1338,1143702495,slinstaedt,682090,"Yep, still relevant. Only issue is logging level had been decreased to debug, so devs won't even recognised, something went wrong, because in most setup's will filter debug level log messages."
1339,1143706980,sbrannen,104798,"### Related Issues

-  #27818"
1340,1143720990,sbrannen,104798,"@slinstaedt, with which Spring Framework version(s) are you experiencing this?"
1341,1143906611,rstoyanchev,401908,Note that this has been reverted in 6.0. See discussion under #28455 for details. 
1342,1143966136,akvone,17677475,"We also stumbled upon this. Currently we fixed that by using `nativeRequest`:
```
HttpServerRequest nativeRequest = ((AbstractServerHttpRequest) serverWebExchange.getRequest()).getNativeRequest();
Map<CharSequence, List<Cookie>> allCookies = nativeRequest.allCookies();
```
By the way, it seems that default implementation of HttpServletRequest#getCookies returns all cookies."
1343,1144038839,slinstaedt,682090,`org.springframework:spring-tx:jar:5.3.18` which should be part of spring boot 2.5.12.
1344,1144556631,Hollerweger,6900492,"My main issue is that the `FieldErrors `as part of `MethodArgumentNotValidException `are returning the Class field name in getField() instead of the Jackson name part of `@JsonProperty`. This way the wrong field name is returned in the response to the client (eg.: camelCase instead of burger-case).
Second issue is that Spring `ViolationFieldError `is private and there is no easy way to access the `ConstrainViolation `with the rootBean to parse the annotations my self.
Would this proposal allow to return name as defined in `@JsonProperty`?"
1345,1144630853,bclozel,103264,"To summarize our findings so far:

* Hints conditions are important and we want to support them. So far `typeReachable` is the only existing one, and its main use case is about reflection metadata. But we've seen conditions used in other places like [proxy-config](https://github.com/oracle/graal/blob/1c0cf82981a6fedd5cd69789a4b44df6ad3c4e14/substratevm/src/com.oracle.svm.configure.test/src/com/oracle/svm/configure/test/conditionalconfig/config-dir/proxy-config.json) or [resource-config](https://github.com/oracle/graal/blob/1c0cf82981a6fedd5cd69789a4b44df6ad3c4e14/substratevm/src/com.oracle.svm.configure.test/src/com/oracle/svm/configure/test/conditionalconfig/config-dir/resource-config.json).
* `typeReachable` and hints conditions should not be mandatory in our API
* we can't necessarily automate the condition generation; `typeReachable` is about a particular type being reachable by the static analysis and doesn't necessarily means that it is part of the call stack

With this change, we can consider #28163 with a more general approach."
1346,1144665423,bclozel,103264,"We've introduced the `ConditionalHint` contract in #28126 that we could leverage here.
I'm wondering how generally applicable it is. Isn't it possible to add a `typeReachable` condition that's based on a class that's not present in the runtime classpath at build time but might be present at runtime? I'm thinking about java classes generated during the AOT phase. Or should we document that limitation and avoid using AOT classes as conditions in hints?"
1347,1144674930,vpavic,1149230,Any updates on this? The Ctrl-F approach to searching the docs is really a common one and without a singe-page variant that's a bit painful. Thanks.
1348,1144828656,sbrannen,104798,"@vpavic, as far as I understand, several Spring portfolio projects are considering migrating to an Antora-based reference manual as has already been done for [Spring Security](https://docs.spring.io/spring-security/reference/index.html). Depending on the outcome of that effort, Spring Framework may also migrate to Antora-based docs. In light of that, I don't believe there are any plans to reintroduce a single-page HTML version of the reference manual."
1349,1144872110,sbrannen,104798,"When you say `CachingCustomizer`, do you instead mean `org.springframework.cache.annotation.CachingConfigurer`?"
1350,1144875616,snicoll,490484,"Brainstorming with @jhoeller we believe that `AotDetector` should be used the same way as it is used when starting an application. When an app determines if it has to use AOT, it uses the detector and load a generated class by convention and use it to initialize the context. If such a class is not present, an exception is thrown.

For the TCF, it could use the AotDetector, check a generated class based on the current test class name and then do whatever. An example of such arrangement could be the following:

```java
/**
 * Bootstrap for {@link MyTest}. Generated code, do not edit
 */
public class MyTest__TestContextInitializer {
	
	public static SmartContextLoader loadContext() {
		return new AotContextLoader(...);
	}
}
```

The class could also implement an interface or whatever. If multiple test classes share the same context, then the generated code for those test classes would delegate to a common generated class.

Such arrangement makes sure that the check is consistent (and 100% transparent when running tests in a native image)."
1351,1144893398,snicoll,490484,"I am not convinced of the impact of this to be honest. We're already invoking `RuntimeHintsRegistrar` conditionally and the rest of the API is based on browsing the `BeanFactory` and registered beans with a closed-world assumption. The above is a far more superior filtering strategy than looking at the reachable type.

However, hints that are registered statically (in `aot.factories`) could contribute things and provide a reachable type. If they do using a class, invoking them will fail in the type is not present. Remains the case where they're using a `TypeReference`.  From that perspective, I don't think we should care too much about AOT generated classes in conditions as statically registered factories don't really have access to that."
1352,1144927352,neiser,3863897,"@sbrannen Ah yes, I meant `CachingConfigurer`. I've updated the description and the example code."
1353,1144928973,sbrannen,104798,"> Anyway, let me know what you think of those and I can either add commits to this PR or open separate issues (or PRs) to consider those separately. 

I'll assess that after merging the three commits in this PR.

> IMO the whole `LocaleResolver` hierarchy could use some modernization and chances to do so (that is, new major releases) don't come too often.

Indeed, 6.0 is a good opportunity for ""modernization""."
1354,1144996470,vpavic,1149230,"Hey @sbrannen, I'm aware of the initiative to move the portfolio to Antora-based docs but I didn't think of that as something that would happen anytime soon. I don't think there's a ticket tracking that effort in the Spring Framework.

In the mid-term, I thought it would be a reasonable compromise to reintroduce the single-page version."
1355,1145394524,redhead,158482,"We are having the same issue. We start and close some contexts during the lifetime of our app. If that happens a lot, after a while we get OOM.

After manually nulling all CALLBACK_FILTER references in all proxy classes, the bean factory is finally garbage collected.

> I think it would be ideal if Spring Framework could remove the reference to the ProxyCallbackFilter on [CALLBACK_FILTER](https://github.com/spring-projects/spring-framework/blob/e4a5d2aaa59266b294e155c4fd80b9ef3e852330/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java#L201)of the generated class once we know that the CALLBACK_FILTER is no longer needed. It might also mark the generated class as closed so that if it is used again it reports an error.

This would be great. I tried to find a way to do it myself, but didn't find any hook that would allow me that. One dirty way was listing all classes from ClassLoader, filtering those containing `BySpring`, making the field accessible and setting it to null by reflection.

This however won't work if there is more than one context and I don't know which proxy classes belong to context that I'm closing.

I also tried to collect proxy classes in a custom class loader which I set before the context startup but that didn't really work either. The classes were coming from different class loaders in the hierarchy (some are loaded from parent, cglib proxy classes are magically set to the child loader by reflection.. then they don't match or are not assignable from one to another, and he'll is lose, so this is not a way to go I guess)."
1356,1145741402,snicoll,490484,"@neiser thanks for this. Going forward, please refrain from reformating the code. Running the build locally should also reveal checkstile violations. I've polished things up in [baebf71](https://github.com/spring-projects/spring-framework/commit/baebf71ed7356812820a2a31f971d60ddd168617)"
1357,1145753605,neiser,3863897,"@snicoll Thanks for reformatting. I hoped that the `.editorconfig` would have setup my IntelliJ correctly, but I'll run the build next time locally before pushing!"
1358,1145755212,snicoll,490484,">  I hoped that the .editorconfig would have setup my IntelliJ correctly

It can't catch everything. If you look at your commit, it is obvious that import statements have moved and new lines have been removed, etc."
1359,1145959468,sbrannen,104798,"Related Issues:

- #28328"
1360,1145990139,Buzzardo,5225162,"As @sbrannen says, we're moving toward Antora now. I'll close this issue."
1361,1146175433,gallyamb,5419623,"@sbrannen sorry for tagging you, but I don't know who else could help me. What do you think about [this](https://github.com/spring-projects/spring-framework/issues/28337#issuecomment-1099251329) comment?"
1362,1146499026,dawn9117,55019734,"> Please make the requested change and introduce a test that fails before this PR and passes after this PR.

I've already added it. Please review, thanks."
1363,1146803714,bclozel,103264,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
1364,1146803821,bclozel,103264,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
1365,1146807614,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
1366,1146820305,Nidhi-Tanwar14,106141823,"Thank you for your response, but I did check on stack overflow and I have not found any solution there. I was asking if we can have any api to have group video call just as we have for peer to peer call please."
1367,1146823641,Nidhi-Tanwar14,106141823,"Thank you for your response, but I did check on stack overflow and I have not found any solution there. I was hoping can we have an enhancement here to warn the user if he closes the browser please?"
1368,1146831704,Nidhi-Tanwar14,106141823,Thank you your response. I am making a rest call with url:- /rest/SIMS/getIdentityMappings/roleId/ASI43771294;assetRole. This is giving me error please
1369,1146836277,bclozel,103264,"As explained in this issue and the other similar ones you've created, this issue tracker is not for questions. Feel free to add a link to your StackOverflow question."
1370,1146836315,bclozel,103264,"As explained in this issue and the other similar ones you've created, this issue tracker is not for questions. Feel free to add a link to your StackOverflow question."
1371,1146836379,bclozel,103264,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
1372,1146836388,bclozel,103264,"As explained in this issue and the other similar ones you've created, this issue tracker is not for questions. Feel free to add a link to your StackOverflow question."
1373,1146838845,Nidhi-Tanwar14,106141823,"With due respect, as per the guidelines, making a new feature request is good way to contribute. So I thought of requesting on this platform to request for the api for advanced features on webRTC please.

Thank you so much for being patient and responding"
1374,1146839110,Nidhi-Tanwar14,106141823,"With due respect, I was trying to request for a new feature here please. As per the guidelines, we can do that on this platform.

Thank you for being patient, kindly correct me if I am wrong"
1375,1146839700,Nidhi-Tanwar14,106141823,"Actually, I am working on a spring project to create a video call using webRTC, so wondering if we can have these advance features please."
1376,1146839737,Nidhi-Tanwar14,106141823,"Actually, I am working on a spring project to create a video call using webRTC, so wondering if we can have these advance features please."
1377,1146850566,bclozel,103264,"Thank you, but we are not investing in this field right now. Spring Framework should help you design such a solution, but not provide it out of the box."
1378,1146850600,bclozel,103264,"Thank you, but we are not investing in this field right now. Spring Framework should help you design such a solution, but not provide it out of the box."
1379,1146852853,Nidhi-Tanwar14,106141823,"ok, thank you"
1380,1146852920,Nidhi-Tanwar14,106141823,"ok, thank you"
1381,1146853751,Nidhi-Tanwar14,106141823,"The HandlerInterceptor contains three main methods:

prehandle() – called before the execution of the actual handler
postHandle() – called after the handler is executed
afterCompletion() – called after the complete request is finished and the view is generated

Can you please try using the posthandle() method."
1382,1146854504,Nidhi-Tanwar14,106141823,My opinion is elaborate error messages helps debugging the issues faster
1383,1146857277,Nidhi-Tanwar14,106141823,"Can you try using following phases:-
BEFORE_COMMIT – The event will be handled before the transaction commit.
AFTER_COMPLETION – The event will be handled when the transaction has completed regardless of success.
AFTER_ROLLBACK – The event will be handled when the transaction has rolled back.
AFTER_COMMIT – The event will be handled when the transaction gets committed successfully."
1384,1146859946,Nidhi-Tanwar14,106141823,Can you try using a workaround by skipping the validation check for the special cases i.e. resources with special char using a custom resourceresolver
1385,1146861283,Nidhi-Tanwar14,106141823,"
Have you considered using an Executor please? It's easily canceled in code."
1386,1147367213,Nidhi-Tanwar14,106141823,"Solved the issue by adding the below snippet to security-config.xml. This will allow semicolon and percentage character in the url.


    <property name=""allowSemicolon"" value=""true""/>
    <property name=""allowUrlEncodedPercent"" value=""true""/>"
1387,1148138701,linghengqian,20187731,"Overall, there are too many unit tests to fix – a change that completely destroys downstream use."
1388,1148234554,michaldo,4304236,"I see. I will fix failing test

wt., 7 cze 2022 o 04:59 Ling Hengqian ***@***.***> napisał(a):

> Overall, there are too many unit tests to fix – a change that completely
> destroys downstream use.
>
> —
> Reply to this email directly, view it on GitHub
> <https://github.com/spring-projects/spring-framework/pull/28349#issuecomment-1148138701>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/ABA223D4X55IAVBO53CJYSLVN23JNANCNFSM5TREAAVQ>
> .
> You are receiving this because you authored the thread.Message ID:
> ***@***.***>
>
"
1389,1148250822,snicoll,490484,Thanks again @gorisanson 
1390,1148437689,snicoll,490484,cc @philwebb 
1391,1148479171,junminZ,34052378,thanks 
1392,1148485671,rstoyanchev,401908,"In summary, we already provide `UriComponents` as an alternative to `java.net.URI` but we can't completely replace its use in lower level libraries we depend on. This can only be addressed in the JDK."
1393,1148486557,redhead,158482,"I tried to write a class loader to collect created proxy classes and clean the static field after the context is closed. However, our setup of contexts is not trivial and I was running into many class-to-class problems (classes not assignable to each other, etc.).

So I went for the BeanPostProcessor instead, which might not work at all times maybe, but works for us so far.


```
public class MemoryLeakFixBeanPostProcessor implements BeanPostProcessor, DisposableBean {

    /**
     * See {@link org.springframework.cglib.proxy.Enhancer}
     */
    private static final String CGLIB_PROXY_STATIC_FIELD_WITH_MEMORY_LEAK = ""CGLIB$CALLBACK_FILTER"";

    /**
     * See {@link org.springframework.cglib.core.SpringNamingPolicy}
     */
    private static final String SPRING_CGLIB_PROXY_CLASS_NAME_TAG = ""BySpringCGLIB"";

    private final Set<Class<?>> classesToCleanUp = new HashSet<>();

    @Override
    public Object postProcessAfterInitialization(Object bean, @Nonnull String beanName) throws BeansException {
        if (bean.getClass().getName().contains(SPRING_CGLIB_PROXY_CLASS_NAME_TAG)) {
            classesToCleanUp.add(cls);
        }
        return bean;
    }

    @Override
    public void destroy() throws Exception {
        classesToCleanUp.forEach(cls -> {
            try {
                var field = cls.getDeclaredField(CGLIB_PROXY_STATIC_FIELD_WITH_MEMORY_LEAK);
                field.setAccessible(true);
                field.set(null, null);
            } catch (Exception e) {
                // we can't do anything..
            }
        });
        classesToCleanUp.clear();
    }
}
```

It collects the bean classes if they are Spring proxy classes and clears the static field when the bean post processor is disposed (context is closed)."
1394,1148519185,bclozel,103264,"We discussed this issue and it seems that this use case can be implemented using:

* a specific `PropertySource` (see [Spring Vault](https://docs.spring.io/spring-vault/docs/current/reference/html/#vault.core.propertysupport))
* use an `ApplicationContextInitializer` to add a custom converter to the `ConversionService` (if encrypted keys can be detected)

We're closing this issue as a result. We can revisit this decision if the existing solutions are not enough. "
1395,1148522294,bclozel,103264,"We've discussed this issue as a team and we think that while this feature would be a nice addition to our testing support, we don't think that it's worth investing in it right now. This feature has been available in Spring Boot for a while now and as you've pointed out, this also requires a broader adoption of AssertJ in our testing support.

We'll turn this issue into a documentation improvement - we should add a new section in the [Integration testing reference documentation](https://docs.spring.io/spring-framework/docs/current/reference/html/testing.html#integration-testing) to cross-link to the Spring Boot support.

We might revisit this decision in the future, if and once AssertJ adoption is broader in spring-test."
1396,1148553692,sbrannen,104798,"Since the community has not displayed significant interest in this feature during the last 1.5 years, the team has decided to close this issue.

However, if the community displays increased interest in this feature we would be willing to reconsider."
1397,1148554277,sbrannen,104798,"Since the community has not displayed significant interest in this feature during the last 1.5 years, the team has decided to close this issue.

However, if the community displays increased interest in this feature we would be willing to reconsider."
1398,1148554487,sbrannen,104798,"Since the community has not displayed significant interest in this feature during the last 1.5 years, the team has decided to close this issue.

However, if the community displays increased interest in this feature we would be willing to reconsider."
1399,1148569140,sbrannen,104798,"We will investigate introducing support for declarative `ContextCustomer` registration in the Spring TestContext Framework, potentially for inclusion before 6.0 GA.

Introducing such support would provide a test class aware alternative to `ApplicationContextInitializer`.

One option would be to introduce a new `@ContextCustomizers` (or `@ContextCustomizerFactories`) type-level annotation analogous to `@TestExecutionListeners`."
1400,1148572458,stolsvik,3123344,"I find this sad - I believe this is one of those issues where devs end up with ""oh, that doesn't work - we'll have to hack our way around it then"", typically after hours of head-scratching.

It seems like the feature would be pretty straight-forward to implement, as similar features evidently exists which do handle the \@TestPropertySource, ref. #23299. It would close a very annoying, and obvious when you hit it, limitation with the framework."
1401,1148573480,stolsvik,3123344,"I find this sad - I believe this is one of those issues where devs end up with ""oh, that doesn't work - we'll have to hack our way around it then"", typically after hours of head-scratching.

It seems like the feature would be pretty straight-forward to implement, as similar features evidently exists which do handle the \@TestPropertySource, ref. #23299. It would close a very annoying, and obvious when you hit it, limitation with the framework."
1402,1148573753,stolsvik,3123344,"I find this sad - I believe this is one of those issues where devs end up with ""oh, that doesn't work - we'll have to hack our way around it then"", typically after hours of head-scratching.

It seems like the feature would be pretty straight-forward to implement, as similar features evidently exists which do handle the \@TestPropertySource, ref. #23299. It would close a very annoying, and obvious when you hit it, limitation with the framework."
1403,1148575314,sbrannen,104798,"> I am not even sure it is available outside of the Spring Framework at the moment.

`spring-core-test` is now published.

- See #28558"
1404,1148577714,snicoll,490484,"I am aware of that.

Typo. I meant: ""I am not sure testing AOT contributions is possible outside of the Spring Framework at the moment""."
1405,1148583674,stolsvik,3123344,"Thanks for positive feedback. Please take into account all the three issues I refer to in the OP, which point to a problem when using the annotations `@ActiveProfiles`, `@ContextConfigration`, and specifically `@TestExectionListeners` in ""merged"" (inherited) modus. The latter would be needed inside the original idea of `@EnableAcmeLibraryTest` - but using such annotation would then prevent, by the deficiency these annotations have, the use of them individually on the testclass itself (or would ruin the `@EnableAcmeLibraryTest` by not kicking in - I do not remember which one is picked up first)"
1406,1148587627,stolsvik,3123344,"It also seems like #26141, #26142 and #26145 would be fixed in an identical manner - I am certain that the combined annoyance with these deficiencies are pretty substantial if you were able to sum it up."
1407,1148587771,stolsvik,3123344,"It also seems like #26141, #26142, and #26145 would be fixed in an identical manner - I am certain that the combined annoyance with these deficiencies are pretty substantial if you were able to sum it up."
1408,1148587858,stolsvik,3123344,"It also seems like #26141, #26142, and #26145 would be fixed in an identical manner - I am certain that the combined annoyance with these deficiencies are pretty substantial if you were able to sum it up."
1409,1148636262,vpavic,1149230,"FWIW, I too believe this would be very useful and have found myself in the situation attempting to use something similar to the proposal from the opening comment. With the status quo, one has to be mindful of this limitation when composing custom test annotations which is unfortunate especially given how often the annotation composing as a concept is promoted in the community."
1410,1148703823,sbrannen,104798,"Related issues:

- #24981"
1411,1148734117,snicoll,490484,The default classname is still generated in that `__` package. Is that expected? I was under the impression that this issue would move it at the same level as the application class itself.
1412,1148931867,philwebb,519772,We'll need to make some updates on the Boot side to pass the target in.
1413,1148959605,mraible,17892,"This seems like it might be why the following doesn't work for me in a WebFlux app:

```java
@Cacheable(cacheNames=""users"", key=""#token"")
public Mono<Jwt> enrich(String token, Jwt jwt) { } 
```

It still seems like this method is hit every time, even though the `token` value is the same.

Code and comment from https://github.com/jhipster/generator-jhipster/pull/18241#issuecomment-1127083403.

Is the recommendation that we don't use `Cacheable` in WebFlux apps for things like this?"
1414,1148978691,snicoll,490484,"I am not sure what you're asking. Yes, it is expected that this doesn't work on reactive types. "
1415,1149031942,rwinch,362503,Thanks for sharing the workaround @redhead!
1416,1149235212,drekbour,2863082,"This isn't a killer feature that community is ever going to be all het up about. It's failing of Principle of Least Surprise that will slowly annoy everyone trying to create test utilities for their team. Because it's _test_ code, people will live with hacks/hard-codings but it's a shame to leave such a gap considering the good work on meta-annotation support for several other items. That work actually makes it _worse_ as the expectation is clearly that meta should work since it does for all those other annotations :)"
1417,1149549670,snicoll,490484,"I don't think we can. It's an optimization to drop it early. If we dropped the check we'd end up in the last `else` that would attempt to do something with the path. Thanks for the suggestion, in any case."
1418,1149703980,pivotal-cla,16822967,"@rguihard Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28583)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28583) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1419,1149704954,pivotal-cla,16822967,@rguihard Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28583)!
1420,1149709968,kewne,3984777,"Apologies for the potential spam but really wanted to leave my thanks for taking care of this, keep up the good work! 👍 
"
1421,1149741516,hjohn,995917,"I've been bitten by this problem again in a multi module project. When upgrading a library, a bean which was clearly not intended to be used for normal use was injected into an injection point that just expected a default version of that bean.

I've taken the time to construct a solution which is somewhat similar to what CDI offers, but in order to remain backwards compatible with how Spring selects candidates by default (given the many projects out there) I've flipped the logic around. With the `AutowireCandidateResolver` below it is possible to annotate a canditate with a `NotDefault` annotation.  This prevents the candidate from being injected into injection points without any annotations (or if it has annotations, they must match what the candidate specifies as usual).  This makes it possible to prevent certain candidates from being used as default.  A bean defined as:

      @Bean @NotDefault @Red
      ARedBean myRedBean() { ... }

Will only get injected into an injection point that specifies the `@Red` annotation.  Without the `@NotDefault` annotation it would get injected into any injection point that matches the type.

If anyone would like to toy with this, define a configuration to use an alternative `AutowireCandidateResolver`:

    @Configuration
    public static class Config {
        @Bean
        public CustomAutowireConfigurer autowireConfigurer(DefaultListableBeanFactory beanFactory) {
           CustomAutowireConfigurer configurer = new CustomAutowireConfigurer();
           beanFactory.setAutowireCandidateResolver(new NotDefaultSupportingQualifierAnnotationAutowireCandidateResolver());
           configurer.postProcessBeanFactory(beanFactory);
           return configurer;
        }
    }

And then use this implementation:

    
    /**
     * {@link AutowireCandidateResolver} implementation based on {@link ContextAnnotationAutowireCandidateResolver}
     * that allows candidates to be annotated with a {@link NotDefault} annotation to indicate they should not
     * be wired into injection points which have no annotations. If the injection points has at least one annotation
     * which also matches the candidate, injection is allowed as normal.
     */
    public class NotDefaultSupportingQualifierAnnotationAutowireCandidateResolver extends ContextAnnotationAutowireCandidateResolver{
        private static final Annotation NOT_DEFAULT = AnnotationUtils.synthesizeAnnotation(NotDefault.class);
    
        /**
         * Match the given qualifier annotations against the candidate bean definition.
         */
        @Override
        protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch) {
            if (super.checkQualifiers(bdHolder, annotationsToSearch)) {
    
                /*
                 * The qualifiers matched according to standard rules. If there were any custom annotations
                 * present on the injection point (aside from the Default annotation) then accept this result.
                 */
    
                if (annotationsToSearch != null) {
                    for (Annotation annotation : annotationsToSearch) {
                        if (annotation.annotationType() != Default.class && isQualifier(annotation.annotationType())) {
                            return true;
                        }
                    }
                }
    
                /*
                 * There were no custom annotations on the injection point, or there was only a Default annotation.
                 * This means the injection point expects a default candidate. Any candidate is a default candidate
                 * unless specifically annotated with NotDefault:
                 */
    
                return !checkQualifier(bdHolder, NOT_DEFAULT, new SimpleTypeConverter());
            }
    
            return false;
        }
    }

And these two annotations:

    @Documented
    @Qualifier
    @Retention(RetentionPolicy.RUNTIME)
    @Target({ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.TYPE, ElementType.ANNOTATION_TYPE})
    public @interface NotDefault {
    }

    @Documented
    @Qualifier
    @Retention(RetentionPolicy.RUNTIME)
    @Target({ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.TYPE, ElementType.ANNOTATION_TYPE})
    public @interface Default {
    }

"
1422,1149762069,sbrannen,104798,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
1423,1149801507,rstoyanchev,401908,"More investigation is necessary to narrow down what happens, and this issue generally would be more appropriate for StackOverflow until you know there is an actual bug.

The inbound channel is expected to hold tasks in the queue. Exactly how many is too many depends on how the inbound channel thread pool is configured vs how many requests are coming in at a given time. If for example the thread pool allows only 2 threads, then any additional concurrent requests are queued. So this could be an in-flight number if there is a spike in requests.

The output shows that the number of CONNECT frames processed is much higher than the number of CONNECTED frames, 200 vs 132. That means 68 connect requests were either rejected explicitly or something happened that prevented a CONNECTED frame from being sent back. You need to do some logging and/or debugging to find out what causes that mismatch and whether it is perhaps related.

The output also indicates ""2 transport error"". This is again something that needs to be investigated through logging and/or debugging that could be related.

I'm closing for now but the issue can be reopened if you find there is an actual issue or if you manage to create an isolated sample to demonstrate the issue.
"
1424,1149823548,snicoll,490484,"It looks like the above should work. If that turns out to be needed after all, we can reopen."
1425,1149937209,sdeleuze,141109,I managed to make `webmvc-tomcat` sample working with https://github.com/sdeleuze/spring-framework/tree/gh-28518. I will refine it based on @snicoll feedback.
1426,1149945485,snicoll,490484,"@philwebb I am looking at this and I am not sure how I could proceed. My first attempt is to write something that does the necessary setup to invoke a `BeanRegistrationAotProcessor`. The setup could be something along the lines of ""discover what is available"" or ""use these configured processors"".

To be able to do that. It looks like I need to be able to access `BeanDefinitionMethodGeneratorFactory` and then `BeanDefinitionMethodGenerator` so that I can invoke `generateBeanDefinitionMethod`. To do that, I'd need a `BeanRegistrationsCode` implementation (it isn't public).

Based on the `MethodReference` the extension could create a simple `ApplicationContextInitializer` that just uses this method. It feels to me that the extension could reuse whatever the production code does (some partial code in `BeanRegistrationsAotContribution`).

The extension wrapping `TestCompiler` and then invoking the generated code looks doable. 
"
1427,1149954249,snicoll,490484,"""Blocked"" by https://github.com/spring-projects/spring-boot/issues/29699"
1428,1149980197,rstoyanchev,401908,"I think most users would would expect that a trailing slash doesn't make a difference. From that perspective, the default is not unreasonable, and more than just HATEOAS style navigation or API guidance, even just manually typing a URL somewhere.

If we change the default, many would look to change it back, so overall it's hard to avoid the need to align Spring Security with with Spring MVC through `mvcMatchers`. One could argue that it's a safer default but this applies only when used with Spring Security. It's not unsafe by itself. 

For configuring redirects, do you mean externally, like in a proxy? That would solve the problem at a different level, before Spring Security and Spring MVC, so I would be more interested in that direction but we can only make it a recommendation, and we can still make such a recommendation independent of this.



"
1429,1150019946,sbrannen,104798,"This has been merged into `5.3.x` and `main` in e386bdb82c9a6fb7e740e4321167ac4afafa1d07 and revised in 8478e8e70aafb795c7ee0491204915ee5cea08e0.

Note that there were build failures due to Checkstyle violations. I fixed those for you, but please make sure to run `./gradlew check` before pushing commits in the future to ensure that the build passes. 

Thanks for contributing your first PR to the Spring Framework! 👍 "
1430,1150050554,poutsma,330665,"This PR has been merged, see https://github.com/spring-projects/spring-framework/commit/283bc9ede936bd41b68ad2ee7fe00047d5550b93.

@christophejan Thank you for submitting a PR."
1431,1150096230,rstoyanchev,401908,"Not accidental actually. Generally, configurer classes related to `WebMvcConfigurer` only need to expose setters as public API, while getters are mainly for use from `WebMvcConfigurationSupport` and don't need to be used from application code. This is why they tend to be hidden, except in some cases where the need arises to be able to check.

So those getters in PathMatchConfigurer became public by accident originally, and were later deprecated with the intent to hide them eventually for consistency.

Can you expand a bit more on what you're trying to do?

"
1432,1150179805,vpavic,1149230,"Hmm, my observation that `PathMatchConfigurer::isUseTrailingSlashMatch` deprecation was accidental is based on its usage in `WebMvcConfigurationSupport` and the fact that there's no apparent replacement.

So you're saying it was deprecated with the intent to reduce the visibility to package private (and not replacing the method with something else)? In that case my PR is indeed invalid. But if you're reducing the visibility I think you still likely need to drop to deprecation."
1433,1150486921,michaldo,4304236,@linghengqian I merged main branch to PR and failing tests disappeared
1434,1150578171,quaff,143040,"Yes, It will cause `request::setCharacterEncoding` not working."
1435,1150581419,linghengqian,20187731,CC @sbrannen 
1436,1150592510,philwebb,519772,Reopening because it's not particularly obvious that `BeanRegistrationExcludeFilter` is being implemented just to exclude the processor. Perhaps a default method on `AotProcessor` might be better.
1437,1150618692,onobc,28907971,"**[TinyNit]** Can someone add the ""theme:aot"" label? "
1438,1150685774,mdeinum,606761,"This is  question for which you shouldn't use the issue tracker but rather StackOverflow, see [the guidelines](https://github.com/spring-projects/spring-framework/blob/main/CONTRIBUTING.md#ask-questions). 

That being said, when using ASPECTJ as the mode you have to use either loadtime or compile timeweaving to make it work. Hence you need to do additional work either while loading and specify a javaagent (as explained [here in the Spring Framework documentation](https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#aop-aj-ltw) or you have to do additional work while compiling (as explained [in this tutorial](https://www.baeldung.com/aspectj). "
1439,1150699728,snicoll,490484,Another example is the `getAotProcessor` on `AotProcessor` that's used by the [management context stuff](https://github.com/spring-projects/spring-boot/blob/c56783064de907283e8f4c6fd04e4489682f9a9b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ChildManagementContextInitializer.java#L99) in Spring Boot to only get the target application.
1440,1150737920,pivotal-cla,16822967,"@dongbaibai Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=26343)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=26343) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1441,1150827093,snicoll,490484,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
1442,1150971762,sbrannen,104798,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
1443,1150975058,sbrannen,104798,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
1444,1151032290,sbrannen,104798,"Thanks for pointing this out.

This has been addressed in `5.3.x` and `main`.

In the future, when you come across issues like this with the documentation feel free to submit a PR that contains the fix."
1445,1151032459,sbrannen,104798,"Thanks for pointing this out.

This has been addressed in `5.3.x` and `main`.

In the future, when you come across issues like this with the documentation feel free to submit a PR that contains the fix."
1446,1151057472,sbrannen,104798,"> I'm wondering if it wouldn't be better to demonstrate annotated setter methods with a complete `setXyz(...)` method.

@sdeleuze, what are your thoughts on this?"
1447,1151058453,sbrannen,104798,"@SchroedingersGitHub, since you raised #28590, would you be interested in submitting a PR to address additional issues with annotated setter methods in Kotlin?"
1448,1151112686,sbrannen,104798,"Potentially related to:

- #27350"
1449,1151316041,tudormarc,93496164,@rstoyanchev can I make a PR for this? :)
1450,1151360867,vpavic,1149230,"> From that perspective, the default is not unreasonable, and more than just HATEOAS style navigation or API guidance, even just manually typing a URL somewhere.

I can see _manually typing a URL_ as a real argument only in case of web apps (not APIs) and even there it's only potentially useful for a few select URLs that are considered to be entry points into the application and are likely to be directly entered by the users.

> One could argue that it's a safer default but this applies only when used with Spring Security. It's not unsafe by itself.

This is the part I strongly disagree with - what Spring Security does is nothing special nor unique. You can end up with the same kind of risks with other Java filter based security frameworks (for example, Apache Shiro) or by applying security (authorization) in an external component that sits in front of your Spring application. After all, on a high level, conceptually these all take the same approach.

> For configuring redirects, do you mean externally, like in a proxy?

Either externally in a proxy or using something like [Tuckey UrlRewriteFilter](https://www.tuckey.org/urlrewrite/) or even simply using `ViewControllerRegistry::addRedirectViewController` to add redirects where needed.

What I would like to see in Spring are the defaults that are not ambiguous and are therefore less prone to abuse. When I see a handler annotated with `@GetMapping(""/api/resources"")` that it really maps to only what I see, unless I opt into any additional (ambiguous) behavior explicitly. This change together with #23915 would achieve that."
1451,1151362536,bclozel,103264,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug.

In this case, you should describe more your application with actual snippets for classes (including packages) and build files."
1452,1152104508,rstoyanchev,401908,"@tudormarc no objections, but it might not be as simple as making the two identical due to the `detectHandlerFunctionsInAncestorContexts` flag on the WebMvc side. "
1453,1152217299,2509569172,49397581,"no support lambda?

the error code:
![image](https://user-images.githubusercontent.com/49397581/173046824-a10f319e-a3aa-4ed5-b550-b31af9d18c11.png)
"
1454,1152228862,SchroedingersGitHub,59590288,"same question
https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-generics-as-qualifiers

....
"
1455,1152238026,poutsma,330665,Thanks for spotting this. It seems like the Servlet version [has the same issue](https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#nested-routes).
1456,1152253556,bclozel,103264,"Spring Framework 3.0.5 has been released in 2010 and predates Java 8 (released in 2014).
[Please use a supported version of the Spring Framework](https://spring.io/projects/spring-framework#support)."
1457,1152329695,sbrannen,104798,"Good catch.

The assumption in the reference manual is that the user has set up the `kotlin-spring` plugin (see https://kotlinlang.org/docs/all-open-plugin.html#spring-support).

However, I don't believe that plugin is mentioned anywhere in the reference manual. Thus those examples will not work ""as is"".

So, let's add `open` where necessary in the reference manual and add a TIP pointing to the `kotlin-plugin` and mentioning that Kotlin projects created using start.spring.io will automatically have that plugin configured.

@SchroedingersGitHub, would you like to submit a PR to address this?"
1458,1152339819,sbrannen,104798,"> So, let's add `open` where necessary in the reference manual and add a TIP pointing to the `kotlin-plugin` and mentioning that Kotlin projects created using start.spring.io will automatically have that plugin configured.

Or rather... let's not add `open` and instead

- add a new section about the `kotlin-spring` plugin to the [Kotlin section](https://docs.spring.io/spring-framework/docs/current/reference/html/languages.html#kotlin) of the reference manual
- for all affected examples, add a note that `open` would be necessary if you do not use the `kotlin-spring` plugin and point to the new section (see previous action item)

Side note: the `kotlin-spring` plugin is in fact mentioned in [Spring Boot's Kotlin](https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.kotlin) documentation and in the [Spring Boot Kotlin tutorial](https://spring.io/guides/tutorials/spring-boot-kotlin/), but it takes several clicks to find that information (and you have to know that there is a dedicated Kotlin section in the Spring Framework reference manual)."
1459,1152370843,SchroedingersGitHub,59590288,@sbrannen Thank you! Okay
1460,1152391820,rstoyanchev,401908,"I'm not necessarily disagreeing. I'm merely making the point that by itself, trailing slash is not unsafe. It's only when combined with a proxy or filter that also interprets URLs, where it becomes a problem, and the problem more generally is that there may be differences, which could go both ways. 

That said, this is also the reason, I've come to see over time that URL paths should be left alone as is as much as possible, avoiding normalization as much as possible. It's the only way for frameworks to minimize differences and align naturally. This is also why `PathPatternParser` was designed to not decode the full path in order to match to mappings, unlike `AntPathMatcher`, doesn't even support suffix patterns, etc.

In any case, the only way to really make a significant difference here I think is to deprecate the trailingSlash option entirely and encourage an alternative solution, like a proxy or filter to redirect. That enforces being more precise about where you want to do that exactly, and it can be done ahead of security decisions. Otherwise the possibility for a mismatch between web and security frameworks remains. It's just too easy to flip the default back and not think about it again.

This is something that we'll discuss as a possibility for 6.0.
"
1461,1152398383,vpavic,1149230,"> In any case, the only way to really make a significant difference here I think is to deprecate the trailingSlash option entirely and encourage an alternative solution, like a proxy or filter to redirect.

I like that even better. Thanks for the feedback."
1462,1152433191,rstoyanchev,401908,"Yes that was the intent, to stop exposing them as a public API. Once they are protected, the deprecations can be be dropped and they would continue to be used internally. "
1463,1152448611,jesus9508,50775456,"I have the same problem, but is a little hard to reply the error in dev environment, but in prod is sending a request twice at same 

this is my implementation, Can someone tellme if I have some wrong whit this.
![image](https://user-images.githubusercontent.com/50775456/173092230-20fd2fe5-3edb-468c-86b7-b17bede6d3ea.png)


![image](https://user-images.githubusercontent.com/50775456/173092116-14d784f4-438a-45fa-96c8-038eb3a422f2.png)

the problem happend when it tryed to send information to other app, the provider noticed that there are same request sent twice at same hour, minute and sec.



"
1464,1152456081,rstoyanchev,401908,"This happens transparently when request parameters are accessed. It's how the Servlet API works. We can't prevent it from happening entirely but rather accept that it can happen.

There are two ways form data can be used. For data binding, which is the most convenient way to handle form data, it makes no difference because we bind from request parameters. For `@RequestBody`, the message converter relies on `ServletServerHttpRequest`, which reconstitutes the body content from request parameters. So, in most cases you shouldn't notice any of this. 

Did you run into a specific issue or just happened to notice? "
1465,1152631732,romerorsp,2586012,"It Will be great when you guys release that change in 6.x! I'd needed it now, but will figure another way of achieving the same goal."
1466,1152994582,jhoeller,1263688,"@mp911de I suppose we simply need to invert the order of those operations: `doBegin` first, `prepareTransactionalConnection` right afterwards?"
1467,1153151414,sbrannen,104798,"### Related Issues

- #15884
- #16315

### Related Commits

- https://github.com/spring-projects/spring-framework/commit/3234d9ede3da6c87a354000f2fd73ec7019930c2"
1468,1153162696,sbrannen,104798,"The following test cases pass with the change (to verify compatible return type for static factory methods).

```java
class ObjectToObjectConverterTests {

	private final GenericConversionService conversionService = new GenericConversionService() {{
		addConverter(new ObjectToObjectConverter());
	}};


	/**
	 * This test effectively verifies that the {@link ObjectToObjectConverter}
	 * was properly registered with the {@link GenericConversionService}.
	 */
	@Test
	void nonStaticToTargetTypeSimpleNameMethodWithMatchingReturnType() {
		assertThat(conversionService.canConvert(Source.class, Data.class))
			.as(""can convert Source to Data"").isTrue();
		Data data = conversionService.convert(new Source(""test""), Data.class);
		assertThat(data).asString().isEqualTo(""test"");
	}

	@Test
	void nonStaticToTargetTypeSimpleNameMethodWithDifferentReturnType() {
		assertThat(conversionService.canConvert(Text.class, Data.class))
			.as(""can convert Text to Data"").isFalse();
		assertThat(conversionService.canConvert(Text.class, Optional.class))
			.as(""can convert Text to Optional"").isFalse();
		assertThatExceptionOfType(ConverterNotFoundException.class)
			.as(""convert Text to Data"")
			.isThrownBy(() -> conversionService.convert(new Text(""test""), Data.class));
	}

	@Test
	void staticValueOfFactoryMethodWithDifferentReturnType() {
		assertThat(conversionService.canConvert(String.class, Data.class))
			.as(""can convert String to Data"").isFalse();
		assertThatExceptionOfType(ConverterNotFoundException.class)
			.as(""convert String to Data"")
			.isThrownBy(() -> conversionService.convert(""test"", Data.class));
	}


	static class Source {

		private final String value;

		private Source(String value) {
			this.value = value;
		}

		public Data toData() {
			return new Data(this.value);
		}

	}

	static class Text {

		private final String value;

		private Text(String value) {
			this.value = value;
		}

		public Optional<Data> toData() {
			return Optional.of(new Data(this.value));
		}

	}

	static class Data {

		private final String value;

		private Data(String value) {
			this.value = value;
		}

		@Override
		public String toString() {
			return this.value;
		}

		public static Optional<Data> valueOf(String string) {
			return (string != null) ? Optional.of(new Data(string)) : Optional.empty();
		}

	}

}
```

But... `DefaultConversionServiceTests.convertObjectToStringWithJavaTimeOfMethodPresent()` now fails, since `ZoneId.of(String)` declares that it returns `ZoneId` instead of `ZoneRegion` (which is a subclass of `ZoneId`).

I believe the new behavior is desired, but this will require some clarification since it may be a breaking change for applications that depend on the current behavior."
1469,1153514798,mp911de,1035015,`prepareTransactionalConnection` handles isolation level and auto-commit updates to the connection. Switching the order of operations would break the usage pattern. I suggest moving the `SET TRANSACTION READ ONLY` call into a method called after `Connection.beginTransaction()`. Then we would fully align with JDBC.
1470,1153547515,sergey-morenets,12621676,"> It Will be great when you guys release that change in 6.x! I'd needed it now, but will figure another way of achieving the same goal.

Hi @romerorsp 

You can easily achieve this functionality if you use Junit 5. So you can just extract all the methods into inner class:

```
@SpringJUnitConfig(AppConfig.class)
public class ServerTest {

	@Nested
	@TestPropertySource(properties = ""db.port=7000"")
	public class ServerLoadConfiguration {
```"
1471,1153701042,snicoll,490484,"I only switched to snapshot, reopening."
1472,1153796019,mibollma,10639342,"Hi @rstoyanchev,

Thanks for your reply.
I came across this issue when trying to forward the raw body content to another network service.

I understand this might happen transparently (e.g. the FormContentFilter implementation has a similar effect on PATCH requests).
However in my opinion it would be better to avoid this to be triggered solely by the log level if possible.
I just wouldn't expect the application behaviour to change when I switch from WARN to DEBUG or TRACE.
What do you think?
"
1473,1153868597,sdeleuze,141109,"This issue will be focused on reflection hints for controllers and reflection-based serialization of parameters annotated
with `@RequestBody` and return values annotated with `@ResponseBody`. I will create subsequent issues for other use-cases (`HttpEntity`, `@ControllerAdvice`, etc.)"
1474,1153962697,poutsma,330665,"@rstoyanchev was the usage of Jetty's `LifeCycle` type in `JdkHttpClientResourceFactory` intentional? I think it can be replaced with a check for `ExecutorService` in `destroy()`, and call `ExecutorService::shutdown` if so."
1475,1153993753,Kayeeec,11568348,"@anirudh-eka  Hi, have you solved your issue? 

I'm having it as well, and it also seems like it's something just on my system because my coworker seems to run the same project just fine. At first, I thought it might be an issue with JDKs, so I uninstalled all JDK's on my system and installed Oracle JDK for Java 8. But it did not help. 

Our projects seem to be similar - java 8, spring 5.0.6 (more precisely springboot 2.0.2). I'm running Fedora 36. "
1476,1154049855,pivotal-cla,16822967,"@davidvieiratrustly Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28613)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28613) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1477,1154051844,pivotal-cla,16822967,@davidvieiratrustly Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28613)!
1478,1154077256,rstoyanchev,401908,"No, it's most certainly an oversight."
1479,1154123248,sbrannen,104798,"This is the expected behavior.

If you declare `@NestedTestConfiguration(OVERRIDE)`, **none** of your Spring configuration (annotations) will be inherited from the enclosing class.

In your concrete example, you specify `AppConfig.class` as the configuration class via `@SpringJUnitConfig`, but you don't have any `@ContextConfiguration` or `@SpringJUnitConfig` annotation declared on `ServerLoadConfiguration`.

That's why you see `classes = '{}'` in the `MergedContextConfiguration` in the exception message.

If you want to inherit the configuration classes and only override the test properties, you should be able to achieve that as follows:

```java

@Nested
@TestPropertySource(properties = ""db.port=8000"", inheritProperties = false)
public class ServerLoadConfiguration { /* ... */ }
```

In light of the above, I am closing this issue, but feel free to post back here with additional comments in case you still run into issues."
1480,1154337863,bclozel,103264,"I don't think an empty stream is valid gzip. This looks like an incorrect server response, which is in line with the exception thrown.

For example, you can try and create an empty gzip file and see that it's starting with the ""magical number"" `1f8b` and contains data:

```
$ echo -n | gzip > empty.gz
$ ls -alh empty.gz
-rw-r--r--  1 bclozel  staff    20B Jun 13 21:03 empty.gz
$ xxd empty.gz
00000000: 1f8b 0800 f389 a762 0003 0300 0000 0000  .......b........
00000010: 0000 0000                                ....
```

We are probably going to decline this change. Unless you've seen servers produce valid gzip empty responses?
Can you show an example of a server producing such a stream (for example, using Tomcat or Netty)?"
1481,1154389685,davidvieiratrustly,80408183,"We have this problem in production right now while making requests to a bank API. We don't know what server the bank is using.

I've created an example project to replicate the error using Netty Mock Server:
https://github.com/davidvieiratrustly/RestTemplateGzipBug

As EOFException documentation states:
`This exception is mainly used by data input streams to signal end of stream.`

We are reading the first byte of the response from the body into hasEmptyMessageBody; I don't think it's necessary to throw the exception, as when we get it, it's already indicative enough that the message body is empty.

So, we must catch this exception so that the RestTemplate is not coupled with the request client implementation.

Thank you for your time and assistance!
 "
1482,1154390629,fsgonz,24285462,"@sbrannen I think there was a problem in this [commit](https://github.com/spring-projects/spring-framework/commit/a0e462581fe1d27d5926809fbb21441a6685ef45#diff-7647ef528e5ffcfdb8ce8b88d189a906a1e7b46778323bc92cb9783a4991d5abR536).
You are not taking into account the includeNonSingletons parameter after this change. The same [that was mentioned above](https://github.com/spring-projects/spring-framework/issues/26851#issuecomment-826117580).

Is there a rationale for that or is it a bug? we have a change of behavior because of this.
Is this still opened?

[This verification](https://github.com/spring-projects/spring-framework/blob/v5.1.20.RELEASE/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java#L529) was missed I think."
1483,1154489352,fsgonz,24285462,I've opened this PR. https://github.com/spring-projects/spring-framework/pull/28616
1484,1154494294,fsgonz,24285462,This[ issue and the comment in particular](https://github.com/spring-projects/spring-framework/issues/26851#issuecomment-826117580) may be related to this.
1485,1154648309,hehuang139,9929843,"oh!, Is there any progress on this issue? It's so important"
1486,1154708483,sergey-morenets,12621676,"Hi @sbrannen 

Thank you for the quick response and detailed explanation.
I would add a sample code snippet with **@NestedTestConfiguration** in the documentaiton: https://docs.spring.io/spring-framework/docs/current/reference/html/testing.html

Currently I couldn't find any code example there."
1487,1154922715,sbrannen,104798,"> Thank you for the quick response and detailed explanation. 

You're welcome.

> I would add a sample code snippet with **@NestedTestConfiguration** in the documentaiton: https://docs.spring.io/spring-framework/docs/current/reference/html/testing.html
> 
> Currently I couldn't find any code example there.

There is an [example of configuration being automatically inherited](https://docs.spring.io/spring-framework/docs/current/reference/html/testing.html#testcontext-junit-jupiter-nested-test-configuration), but you're right: there's no example demonstrating how to use `@NestedTestConfiguration`. So I'll add that."
1488,1154964509,poutsma,330665,"Alas, this was not meant to be.

Kotlin 1.7 gives a compiler warning for cyclic annotation parameter types, and Kotlin 1.9 will turn the warning into an error, following Java's behavior. See [KT-47932](https://youtrack.jetbrains.com/issue/KT-47932)."
1489,1154973893,sbrannen,104798,"Very interesting (and dare I say good)! Thanks for sharing, @poutsma.

We'll eventually have to remove those dedicated Kotlin tests from our test suite, but we can leave the ""fix"" in place for code that was compiled with Kotlin pre-1.9."
1490,1155045786,poutsma,330665,Resolved in https://github.com/spring-projects/spring-framework/commit/bf9f261b9512a3d0f84844dfa75943a231ed5a87
1491,1155291523,sbrannen,104798,"Superseded by:

- #28616 "
1492,1155332644,philwebb,519772,Perhaps the `@Constant` annotation from this branch that we discussed in the past might help? https://github.com/philwebb/scratch-graal-conditions/tree/annotations
1493,1155338423,sbrannen,104798,"This has been merged into `5.3.x` and `main` in 0ce9516aeff0f4bd8dd37770d161671e23a54304 and revised (with a test) in eeac150030db41ee41369381e00bab22f20a1e5e.

Thanks for making your first contribution to the Spring Framework! 👍 "
1494,1155341391,sbrannen,104798,"Please note that #28616 has been resolved for Spring Framework 5.3.21, scheduled for release later this week.

@pop1213, please let us know if the fix in #28616 also resolves your issue."
1495,1155671672,jhoeller,1263688,"`NullBean` is almost exclusively used for comparisons against `null` and not each other - but point taken, in terms of the `equals` contract, it could accept any other instance of `NullBean` as equal if ever encountering it - while still not being identical to it in terms of identity comparisons. We need to double-check whether this has semantic side effects with the present arrangement, we might only be able to consider this for 6.0.

Technically `NullBean` will never be strictly compliant with the `equals` contract since the latter only talks about non-null references and typically asks implementations to return `false` for `equals(null)`."
1496,1155792029,sid-hbm,97449309,"I am running spring boot 3 (spring framework 6), and still can't run it without java.desktop dependency. I thought the plan was to remove the unnecessary dependencies in spring framework 6. This has not been done yet or the plan was abandoned?
Thanks for any info. "
1497,1155801412,philwebb,519772,"@sid-hbm The issue is still open and hasn't been done yet. The target is for M6, but that's not a cast-iron guarantee."
1498,1156053780,pkgonan,15858772,"@snicoll Hi.
Is there any plan to support TransactionalEventListener for Reactive ? (like @ReactiveTransactionalEventListener).
"
1499,1156113593,snicoll,490484,@SchroedingersGitHub please don't close the issue. There is still work to do.
1500,1156147396,sdeleuze,141109,"In Kotlin those are properties not fields. For most use cases, I think what is documented is fine (it is the idiomatic way to do injection in Kotlin with Spring) unless I am mistaken. When you need to specify that the annotation should be applied on a getter or setter, the recommended way to do this is to use [annotation use site targets](https://kotlinlang.org/docs/annotations.html#annotation-use-site-targets).

So I think #28590 should be refined to use `@set:Required lateinit var movieFinder: MovieFinder` (I will create a related issue), and this issue can probably be closed without further commit unless we find specific cases not working as expected (usually validation related).

cc @poutsma "
1501,1156153603,sdeleuze,141109,"No, there is not on purpose because Kotlin extensions follow closely their Java counterparts which in that case throw a `NoSuchBeanDefinitionException` when there is no such bean."
1502,1156158564,sdeleuze,141109,"I created #28630 to refine the fix for this issue, see [the related comment](https://github.com/spring-projects/spring-framework/issues/28596#issuecomment-1156147396)."
1503,1156168157,sdeleuze,141109,"FWIW using `open` is not idiomatic at all in Spring + Kotlin, so I would indeed favor a documentation refinement where we clarify the prerequisites like using `kotlin-spring` plugin for related samples (could be a comment in the Kotlin code)."
1504,1156191692,sbrannen,104798,"> When you need to specify that the annotation should be applied on a getter or setter, the recommended way to do this is to use [annotation use site targets](https://kotlinlang.org/docs/annotations.html#annotation-use-site-targets).

Thanks for enlightening me. That syntax looks much clearer.

> So I think #28590 should be refined to use `@set:Required lateinit var movieFinder: MovieFinder` (I will create a related issue), 

Sounds good. Thanks.

> In Kotlin those are properties not fields. For most use cases, I think what is documented is fine (it is the idiomatic way to do injection in Kotlin with Spring) unless I am mistaken. 

I can well imagine that what's _demonstrated_ in the examples is the idiomatic way to do things in Kotlin. That would make sense to keep it simple.

But what's _documented_ is a different story, and that is the main reason I created this issue.

For example, we show the reader the following for both _setter_ and _field_ injection, which is incorrect. I hope it is not in fact performing both _setter_ and _field_ injection. Rather, I hope it's resulting in only one form of DI.

```kotlin
@Autowired
lateinit var movieFinder: MovieFinder
```

My point is that we should either change the examples or change the documentation.

If you think nobody actually uses true setter injection in Kotlin (which I imagine is the case), then let's stick to the idiomatic way people use this but improve the documentation to point out that it's technically field injection (or ""property injection"") instead of setter injection."
1505,1156212403,sdeleuze,141109,"Maybe a pragmatic outcome could be : in the places where we document specifically and explicitly setter injection, we can maybe specify `@set:Autowired` or similar for correctness. But what I want to avoid is to see those `@set:Autowired` and similar everywhere in the doc. For other places where setter inject is not explicitly documented, I think we should keep `@Autowired` to provide the idiomatic version.

Side note : the most idiomatic version in Kotlin is Constructor injection of `val` properties."
1506,1156458050,sbrannen,104798,"This has been merged into `5.3.x` and `main` in 9b93508374ff3f99e4cd5fa1e21bc08bb3ae8db7 and revised in e9806a96dccc99d29b27aa5c19ad315cc2535426.

Thanks"
1507,1156489138,snicoll,490484,I am afraid not. 
1508,1157526325,wilkinsona,914682,"Thanks for the report. The problem can be reproduced without Spring Boot:

```kotlin
package com.example.gh31398

import org.springframework.beans.BeanUtils

class Gh31398Application

fun main(args: Array<String>) {
	val constructor = PredicateConfiguration::class.java.constructors[0]
	val args = arrayOf(Character.valueOf('c'))
	BeanUtils.instantiateClass(constructor, *args)
}

@JvmInline
value class Predicate(val value: Char)

data class PredicateConfiguration(val predicate: Predicate)
```

```
Exception in thread ""main"" org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.example.gh31398.PredicateConfiguration]: Illegal arguments for constructor; nested exception is java.lang.IllegalArgumentException: object is not an instance of declaring class
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:221)
	at com.example.gh31398.Gh31398ApplicationKt.main(Gh31398Application.kt:10)
Caused by: java.lang.IllegalArgumentException: object is not an instance of declaring class
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at kotlin.reflect.jvm.internal.calls.InlineClassAwareCaller.call(InlineClassAwareCaller.kt:134)
	at kotlin.reflect.jvm.internal.KCallableImpl.call(KCallableImpl.kt:108)
	at kotlin.reflect.jvm.internal.KCallableImpl.callDefaultMethod$kotlin_reflection(KCallableImpl.kt:159)
	at kotlin.reflect.jvm.internal.KCallableImpl.callBy(KCallableImpl.kt:112)
	at org.springframework.beans.BeanUtils$KotlinDelegate.instantiateClass(BeanUtils.java:892)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:196)
	... 1 more
```

I'm not sure if this is something that can be addressed in Framework's support for instantiating Kotlin types or if it's a bug in Kotlin's reflection support.

We'll transfer this to the Framework team so that they can take a look."
1509,1157592782,pivotal-cla,16822967,"@JamesLiuft Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28640)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28640) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1510,1157654154,sbrannen,104798,"Are you referring to APIs defined in AspectJ?

> proceedingJoinPoint.getSignature().getParameterNames()

Where is the `getParameterNames()` method defined?

"
1511,1157757880,sdeleuze,141109,"I don't think we support [Kotlin inline classes](https://kotlinlang.org/docs/inline-classes.html) yet in Spring portfolio as such support is not straightforward from a JVM bytecode reflection POV and we lack a global abstraction for Kotlin reflection. We had related discussion with the Spring Data team that shown it can be tricky topic even if this specific case is maybe doable without too much trouble.

Maybe we should at least document at Framework level it is not supported yet. I will create a related documentation issue."
1512,1157941881,cptully,19614687,"This is an old issue, any movement? I'm glad I googled, because I was about to run into the exact issue solved by this PR!"
1513,1158391239,TangDynasty06,16315451,"Spring official build and test, using OpenJDK?"
1514,1158489688,bclozel,103264,We have different CI pipelines for building and testing Spring Framework. The official build for the 5.3.x generation is built with the following: https://github.com/spring-projects/spring-framework/blob/5.3.x/ci/images/get-jdk-url.sh#L6
1515,1158577332,mfolnovic,20919,"I've asked about this on SO 3 years ago: https://stackoverflow.com/questions/57905483/combining-pathvariable-and-requestbody. I'm still interested in this feature. :)

One extra point of view would be validation constraints, e.g. unique constraint on some field (on update, you also need to know id to implement it correctly)."
1516,1158624794,daniel-shuy,17351764,Any update for this PR?
1517,1158674137,sbrannen,104798,"I agree that it makes sense to trim the input in `DataSize.parse` and other converters in Spring Framework. We'll investigate where such trimming would be appropriate.

Since `StringToDataSizeConverter` is in Spring Boot, however, you could apply trimming there."
1518,1158678900,sbrannen,104798,"> This is an old issue, any movement?

We'll discuss it within the team."
1519,1158764917,sbrannen,104798,"### Related Issues

- https://github.com/spring-projects/spring-framework/issues/21362#issuecomment-634603682"
1520,1158784702,bclozel,103264,"Closing as a duplicate of #28065.
In the meantime, we've decided to perform `@Configuration` classes analysis during the AOT phase and generate Java sources that describe the state of the resulting bean factory."
1521,1158850666,huifer,26766909,"I think it's a good idea to make a listener after the bean is instantiated, either in the form of annotations or interfaces。Notification is triggered after Bean instantiation is complete"
1522,1158851078,huifer,26766909,"Some of my thoughts
> https://github.com/spring-projects/spring-framework/issues/21362#issuecomment-1158850666"
1523,1158868034,snicoll,490484,"We've discussed passing the `target/name` pair as constructor arguments of `ApplicationContextGenerator`. I don't think that works as we'd still need to get those values somehow and that would leave what we have in `AotProcessor`.

https://github.com/snicoll/spring-framework/commit/88428edb3dd47891adc962d1efbfd44b223f6b98 is an attempt at making the naming strategy a separate, third argument. In short `BeanFactoryNamingConvention` hides the `target/name` pair and offer a way to generate class names for the bean factory at hand. The default implementation delegates to `ClassNameGenerator` (although the contract does not specify it strictly, which is a problem as it is a stateful thing).

Experimenting with this reveals several interesting things:

* Tests don't really care what the name of the entry point is as they rely on the fact that the first thing (initializer) that registers a class is the entry point.
* Returning the initializer class name rather than passing it works really well (and the implementation is in control over the name like all the other ones)
* That `Class<?> target` and `String name` can be abstracted behind a strategy interface except for [one use case](https://github.com/snicoll/spring-framework/blob/88428edb3dd47891adc962d1efbfd44b223f6b98/spring-beans/src/main/java/org/springframework/beans/factory/aot/BeanRegistrationsAotContribution.java#L68-L69). The naming strategy returning the bean factory name is a little odd as a result.

This works relatively nicely up to a point where we need to process another context as part of processing the context of the application. When this happens, the only reliable callback we have is `GenerationContext`. We don't have the third argument anymore (the naming convention) so we're stuffed.

`GenerationContext` already has `ClassNameGenerator`. We could update `GeneratingContext` to provide a higher level class that encapsulates this + the naming convention for the bean factory. If we do that, we need to be able to change the naming convention when processing a child context, and yet keeping the current created objects so that clashes are identified properly.

Spring Native had a `fork` option on the context where the naming convention can be changed. I never really liked the name but everything seems to point in the direction of some sort of feature like that."
1524,1159009837,cptully,19614687,Great!
1525,1159029190,sbrannen,104798,"I think it's a good idea to check if the WARN log level is enabled, and switching to a `Supplier` is also a good improvement.

The only real concern I have with the proposed changes is that the `logCacheError()` method is `protected`. Thus, that is technically a breaking change in case somebody has subclassed `LoggingCacheErrorHandler`.

On the other hand, `LoggingCacheErrorHandler` was introduced in 5.3.16, so perhaps there is little risk in changing the signature of the `protected` method at this point.

@snicoll, thoughts?"
1526,1159355066,kebukeYi,43784129,同样问题
1527,1159401622,vpavic,1149230,"Good point @sbrannen, I overlooked that `#logCacheError` is `protected`.

I guess that for the `5.3.x` branch it shouldn't be an issue to ensure backwards compatibility using something like this:

```diff
--- a/spring-context/src/main/java/org/springframework/cache/interceptor/LoggingCacheErrorHandler.java
+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/LoggingCacheErrorHandler.java
@@ -113,4 +113,15 @@ public class LoggingCacheErrorHandler implements CacheErrorHandler {
                }
        }
 
+       /**
+        * Log the specified message.
+        * @param logger the logger
+        * @param message the message
+        * @param ex the exception
+        * @deprecated as of 5.3.22 in favor of {@link #logCacheError(Log, Supplier, RuntimeException)}
+        */
+       @Deprecated
+       protected void logCacheError(Log logger, String message, RuntimeException ex) {
+               logCacheError(logger, () -> message, ex);
+       }
+
 }
```"
1528,1159404502,bclozel,103264,"The Jakarta upgrade is scheduled for Spring Framework 6 and is already done in the latest milestones.
See https://spring.io/blog/2021/09/02/a-java-17-and-jakarta-ee-9-baseline-for-spring-framework-6"
1529,1159482232,sbrannen,104798,"Please refrain from submitting PRs with new features without first discussing with the team if the feature should be implemented and how it should be implemented.

With regard to #28645 and #21362, the team has not yet decided if we will even introduce such support.

In addition, this PR contains numerous changes to formatting and code element order that do not belong in this PR and would be rejected anyway.

In light of the above, I am closing this PR."
1530,1159485333,sbrannen,104798,"> I guess that for the `5.3.x` branch it shouldn't be an issue to ensure backwards compatibility using something like this:

Right. I also thought about doing that, but it would only cover half of the issue.

Keeping the existing `logCacheError()` method would work for people who have extended `LoggingCacheErrorHandler`, overridden one of the `handle*()` methods, and invoked `logCacheError()`.

But it would not work for anyone who has overridden `logCacheError(Log, String, RuntimeException)` since the new code (in this PR) never invokes `logCacheError(Log, String, RuntimeException)`. In other words, any existing customization in an overridden `logCacheError(Log, String, RuntimeException)` method would be ignored.

"
1531,1159650275,snicoll,490484,"@kebukeYi posting ""same problem"" isn't very helpful. Please review the history of the issue as Brian was asking a question and provided useful references."
1532,1159660377,snicoll,490484,This is a regression of a refactoring. We used to [flag a field regardless of its visibility](https://github.com/spring-projects/spring-framework/blob/4fe1eaddecaabb41b9fad3c7c5af786b9a68ab83/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java#L863) and that is no longer the case.
1533,1159661983,snicoll,490484,A bit frustrating as the tests that were validating hints have been contributed have been dropped apparently.
1534,1159707426,snicoll,490484,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
1535,1159734964,bclozel,103264,"It's hard to know without more information. Typically client logs and tcp dump possibly.

There were related issues like #26906 or reactor/reactor-netty#839 - pointing to connection pool issues possibly linked to proxies not handling connection state properly.

Please provide us with more information.

"
1536,1160040887,snicoll,490484,Another problem is that `TestBeanRegistrationsAotProcessor` is in testfixtures and in the same package as the class it extends from to have access to it. This creates a package split and things should be under the `testfixture` sub-package of the related module.
1537,1160052196,snicoll,490484,"`LoggingCacheErrorHandler` has been added as a convenience for those who chose to let such exceptions be moved to log statements. The core framework couldn't use this by default, even in 6.0. 

For what it is worth, this has been asked to the [Spring Boot team as well](https://github.com/spring-projects/spring-boot/issues/30151)."
1538,1160166756,snicoll,490484,The second method that takes a `String` rather than a `Class<?>` has been removed in 4bd33cb6e0659df2cd0b9fa04feea8fd77e5a16d. I am going to look at the Javadoc and see if we can clarify 
1539,1160169690,snicoll,490484,I also believe that tightening this will help us remove the AOT package name (`__`) altogether. #28585 is related.
1540,1160200230,snicoll,490484,Even more frustrating when I realize I was the one saying the hints was wrong in a review document 🙄
1541,1160476475,snicoll,490484,Closing in favor of #28664
1542,1160646333,sbrannen,104798,"If we deprecate `loadFactoryNames()`, we should keep in mind that it is still actively used in `spring-test` in `AbstractTestContextBootstrapper.getDefaultTestExecutionListenerClassNames()`.

`getDefaultTestExecutionListenerClassNames()` and `getDefaultTestExecutionListenerClasses()` were originally created to support custom exception handling since there was no equivalent of `SpringFactoriesLoader.FailureHandler` at the time.

Unfortunately, both of these methods are `protected`. Thus, a custom subclass of `AbstractTestContextBootstrapper` may rely on them."
1543,1160657627,rstoyanchev,401908,"
Apologies for the delayed responses. I discovered I've had issues with receiving GitHub notifications.

@wimdeblauwe, having `ProblemDetail`, along with the `ErrorResponse` (an interface to represent a full error response, including status, headers, and a `ProblemDetail` body), allows us to build support in a few key areas.

- All internal web framework exceptions now implement `ErrorResponse` to expose the status, headers, and body to use. To enable this, an application extends (the existing) `RespnoseEntityExceptionHandler`, which has been updated for this, and declare it as `@ControllerAdvice`. This automates the handling of our own internal exceptions and also provides a central place to customize the rendering of any `ErrorResponse` exception.

- `ProblemDetail` and `ErrorResponse` are supported as return types from `@ExceptionHandler` and controller methods, similar to `ResponseEntity`. The ""status"" property of `ProblemDetail` is used to set the response status, and its ""instance"" property may be filled in to reflect the current URL path. 

- When serializing `ProblemDetail`, the Jackson `HttpMessageConverter` and `Encoder` return `application/problem+json` as a first choice, ensuring it gets selected first, as long as it meets the client requested media types. Also, when rendering `ProblemDetail`, if we don't find a suitable media type, we fall back on `application/problem+json`.

- `RestClientResponseException` and `WebClientResponseException` allow decoding the body to some target type. This isn't specific to having `ProblemDetail` but helps on the client side to decode an error response. 

To come back to your question, the goal for 6.0 is to make use of a ""standard"" format such as RFC 7807. This includes out-of-the-box exception handling for our own internal exceptions, via `RespnoseEntityExceptionHandler`, and the same can be used to customize any `ErrorResponse` exception or extension of `ErrorResponseException`.

This is a foundation to build upon. I can imagine taking it further and allowing more ways to customize error response details. For example, we could consider using message codes from properties as a way of customizing the detail message. We are certainly open to other ideas as well.
"
1544,1160661474,rstoyanchev,401908,"@vy, no worries and thanks for the continued feedback.

I wasn't expecting that `ExtendedProblemDetail` needs `withHost()`. Those are just convenience methods that a subclass may choose to not provide. I agree however that `ProblemDetail` should aim to be as plain as possible, and would be okay to drop the `withXyz()` methods in `ProblemDetail` based on this feedback.

For mutability, our internal web framework exceptions in the `ErrorResponse` hierarchy all follow the same pattern, initializing error details with default values in the constructor, and then remaining open to further customizations, either via subclasses, or in `@ExceptionHandler` methods, or in our internal response handling where we may fill in ""instance"" with the URL path. 

There is clearly a need to remain open to customizations after an exception is first initialized, and before it is rendered. How did you imagine making that possible? You mention you don't like `ResponseEntityExceptionHandler`. This is a class that ensures that all built-in exceptions are broken down into status, headers, and body, so you can customize each individually by exception type. It's analogous to `DefaultHandlerExceptionResolver` but with body rendering. Again if you have alternatives in mind, please do share.

For interface, I don't see the need for different impelmentations, but rather a simple container of properties to render. To connect to your other question about a `ProblemDetail` variant that extends from `RuntimeException`, making an exception itself be a `ProblemDetail` means exceptions properties like `stackTrace` need to somehow be excluded. For this reason the two are separated intentionally. `ErrorResponse` is the interface that an exception can implement and that in turn contains `ProblemDetail` that contains only what should be rendered.

> There are also certain exceptions that can happen before the controller method is called and don't get caught by the `@ExceptionHandler` methods. This suite ensures that application failures always get rendered as a problem detail. We can share these suite of cases, if you wish.

That would be great. I expect Spring Boot will add support for `ErrorResponse` and `ProblemDetail`, which means that any exceptions that escape should now be handled consistently between Framework and Boot. That said we might be able to proactively catch more of these exceptions if feasible. I think `NoHandlerFoundException` is one such exception but that can be caught with an `@ControllerAdvice` I think.

For logging, I'll refer back to `ResponseEntityExceptionHandler` as the intended central place from where to handle internal, web framework, and any `ErrorResponse` exception. We could consider expanding it with support for logging by ProblemDetail ""type"".
"
1545,1160668187,snicoll,490484,Can you please create an issue to get rid of its use? 6.0 is the right time to break this contract if we have to. 
1546,1160691223,sbrannen,104798,"Hi @mspiess,

> I would like to be able to do something like this:
> 
> ```java
> .andExpect(header(""Accept"", allMatch(endsWith(""json""))))
> ```
> 
> or something to that effect.

That's a good point. In fact, it almost appears that the current API would support that. At least, the current tests in place are based on that assumption.

https://github.com/spring-projects/spring-framework/blob/93b340e5633d623e0899dd296bda7ce86ce02b20/spring-test/src/test/java/org/springframework/test/web/client/match/MockRestRequestMatchersTests.java#L126-L131

That `headerContains()` test actually does not assert what it appears to.

Since `bar` and `baz` both contain `ba`, the test **appears** to assert that both `bar` and `baz` are checked, but in fact -- as you've pointed out -- only `bar` is checked.

In other words, rewriting the assertion as follows would also cause the test to pass.

```java
MockRestRequestMatchers.header(""foo"", containsString(""bar"")).match(this.request);
```

In order to perform an assertion on each header value, you have to provide a matcher for each value. Thus, the following **fails**:

```java
MockRestRequestMatchers.header(""foo"", containsString(""bar""), containsString(""bar"")).match(this.request);
```

Whereas, the following **pass**:

```java
MockRestRequestMatchers.header(""foo"", containsString(""bar""), containsString(""baz"")).match(this.request);

MockRestRequestMatchers.header(""foo"", containsString(""ba""), containsString(""ba"")).match(this.request);
```

Thus, there is in fact support for performing assertions against all of the values for a given header, but it is awkward to use and not really documented.

Furthermore, with the current implementation of this feature you have to know exactly how many values are expected **and** you have to repeat the `Matcher` or expected value.

FYI: this applies to all variants of `queryParam(...)` and `header(...)`.

----

One way to address this would be to introduce new variants of these methods that accept a single `String` or `Matcher` (instead of var-args) such as the following.

```java
public static RequestMatcher header(String name, Matcher<? super String> matcher) {
	return request -> {
		List<String> headerValues = request.getHeaders().get(name);
		assertNotNull(""No header values"", headerValues);
		String reason = ""Request header ["" + name + ""]"";
		headerValues.forEach(value -> assertThat(reason, value, matcher));
	};
}
```

This would achieve what you are requesting; however, there is a downside: any invocation of `header()` or `queryParam()` with a single argument for the var-args array would now invoke this new method when recompiled, which would be a breaking change. To avoid that, we could come up with a new name for the single-argument variants."
1547,1160693634,rstoyanchev,401908,"For dynamic properties, I've created #28665."
1548,1160714862,lonre,181109,"Hi, stack trace here @rstoyanchev 
```
java.lang.IllegalStateException: Only one connection receive subscriber allowed.
	at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:182)
	at reactor.netty.channel.FluxReceive.subscribe(FluxReceive.java:143)
	at reactor.core.publisher.InternalFluxOperator.subscribe(InternalFluxOperator.java:62)
	at reactor.netty.ByteBufFlux.subscribe(ByteBufFlux.java:340)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4400)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:263)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4400)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:2063)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:172)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.Operators$MonoSubscriber.onError(Operators.java:1863)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:544)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onError(FluxMapFuseable.java:142)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onError(FluxMapFuseable.java:340)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onError(FluxFilterFuseable.java:382)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onError(MonoCollect.java:144)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:165)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:167)
	at reactor.netty.channel.FluxReceive.subscribe(FluxReceive.java:143)
	at reactor.core.publisher.InternalFluxOperator.subscribe(InternalFluxOperator.java:62)
	at reactor.netty.ByteBufFlux.subscribe(ByteBufFlux.java:340)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:157)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:539)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.onNext(FluxDoFinally.java:130)
	at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onNext(FluxDoOnEach.java:173)
	at org.springframework.cloud.sleuth.instrument.web.client.TraceExchangeFilterFunction$TraceWebClientSubscriber.onNext(TraceExchangeFilterFunction.java:197)
	at org.springframework.cloud.sleuth.instrument.web.client.TraceExchangeFilterFunction$TraceWebClientSubscriber.onNext(TraceExchangeFilterFunction.java:153)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2398)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onSubscribeInner(MonoFlatMapMany.java:150)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onNext(MonoFlatMapMany.java:189)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onNext(FluxRetryWhen.java:174)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:172)
	at reactor.netty.http.client.HttpClientConnect$HttpIOHandlerObserver.onStateChange(HttpClientConnect.java:431)
	at reactor.netty.ReactorNetty$CompositeConnectionObserver.onStateChange(ReactorNetty.java:677)
	at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onStateChange(DefaultPooledConnectionProvider.java:187)
	at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnection.onStateChange(DefaultPooledConnectionProvider.java:444)
	at reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:638)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:93)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:286)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:327)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:314)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:435)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:279)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)
	at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:487)
	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:385)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:995)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
```"
1549,1160721193,sbrannen,104798,"Since `getDefaultTestExecutionListenerClassNames()` and `getDefaultTestExecutionListenerClasses()` are both `protected` methods and therefore part of the ""public"" API for anyone extending `AbstractTestContextBootstrapper` (see https://github.com/spring-projects/spring-framework/issues/27954#issuecomment-1160646333), we could potentially deprecate those two methods in `5.3.x`.

@jhoeller & @snicoll, thoughts? "
1550,1160721469,sbrannen,104798,"> Can you please create an issue to get rid of its use? 6.0 is the right time to break this contract if we have to.

See:

- #28666"
1551,1160772735,mspiess,30656914,"Hi @sbrannen,
thanks for the quick response and the nice summary.

Perhaps a new overload would be a less of a breaking change:
```Java
public static RequestMatcher header(String name, Matcher<? super Collection<? super String>> matcher) {
	return request -> {
		List<String> headerValues = request.getHeaders().get(name);
		assertThat(""Request header ["" + name + ""]"", headerValues, matcher);
	};
}
```
This would allow the following:
```Java
MockRestRequestMatchers.header(""foo"", everyItem(containsString(""ba""))).match(this.request);
```
This brings more control to the call site, as the caller can decide how to match the collection. E.g. one may want to assert that any value matches, which is not possible currently without knowing the amount and order of the header values.
Although I have to acknowledge that this is a strong difference in behavior for an overload and may cause some confusion.

>To avoid that, we could come up with a new name for the single-argument variants.

I suggest `headerValues`."
1552,1161280830,snicoll,490484,"This is definitely in the nice-to-have category as `@Reflective`-based hints have been added so that this works with the current arrangement, see https://github.com/spring-projects/spring-framework/commit/d0afbe40e6c5e925de82bb1fa567a218d9aa126f"
1553,1161281724,snicoll,490484,"Moving to M6 as such an optimization of code generation is not a blocker for M5, even if it would have been nice to finalize this part of the API."
1554,1161311560,snicoll,490484,"Another thing to note is that the ""name"" uniqueness is not enforced upfront. If you try to generate multiple contexts with the name `Test`, you'd end up with `__TestBeanDefinitions` and `TestBeanDefinitions1` rather than `__TestBeanDefinitions` and `Test1BeanDefinitions` .

This goes in the direction again of the  context being in charge of the registered names and their uniqueness. Unfortunately `GenerationContext` is in `spring-core` and does not know anything about the bean factory."
1555,1161338422,lzj960515,38074718,I don't know who to call. Can anyone tell me why?
1556,1161340024,bclozel,103264,"There is an ongoing incident with CloudFlare, our CDN provider. [Check this page for updates](https://www.cloudflarestatus.com/incidents/xvs51y9qs9dj) and [springops](https://twitter.com/springops) on Twitter."
1557,1161345429,snicoll,490484,"I've started some hacking (https://github.com/snicoll/spring-framework/commit/cd527552417cb0bb9258292eb7c176df4d1577d7) based on one test but I am hitting what seems to be a split package problem with the test compiler @philwebb:

```
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) throws java.lang.ClassFormatError accessible: module java.base does not ""opens java.lang"" to unnamed module @44e81672
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Method.checkCanSetAccessible(Method.java:199)
	at java.base/java.lang.reflect.Method.setAccessible(Method.java:193)
	at org.springframework.cglib.core.ReflectUtils$1.run(ReflectUtils.java:61)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
	at org.springframework.cglib.core.ReflectUtils.<clinit>(ReflectUtils.java:52)
```
"
1558,1161379825,snicoll,490484,"Yet another thing. If we process multiple contexts against the same bean, and that bean requires autowiring, then we invoke multiple times `AutowiredAnnotationBeanPostProcessor` which leads to the same file being created multiple times with the same name.

The original design had the idea of registering that a processor already ran. Right now, it's not obvious to me what is ""static"" and what is bean factory specific (and therefore should be qualified)."
1559,1161406291,bclozel,103264,I think we should do this (including the deprecation) for 6.0.
1560,1161417793,bclozel,103264,"@sbrannen Could you elaborate on why this is in the triage queue? Is there something to be discussed or clarified?
Is there a reason we don't merge this right now?"
1561,1161453085,venkateshvictory,66761696,"Sorry I am learning I did it only

On Tue, 21 Jun 2022, 1:47 pm Brian Clozel, ***@***.***> wrote:

> @sbrannen <https://github.com/sbrannen> Could you elaborate on why this
> is in the triage queue? Is there something to be discussed or clarified?
> Is there a reason we don't merge this right now?
>
> —
> Reply to this email directly, view it on GitHub
> <https://github.com/spring-projects/spring-framework/pull/28646#issuecomment-1161417793>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AP5LHYBGKOESDHV4DOYSHBLVQF3DFANCNFSM5ZBYIEFQ>
> .
> You are receiving this because you are subscribed to this thread.Message
> ID: ***@***.***>
>
"
1562,1161453741,venkateshvictory,66761696,"Can you tell me about entitymanager and about dao

On Tue, 21 Jun 2022, 2:18 pm venkatesh doddi, ***@***.***>
wrote:

> Sorry I am learning I did it only
>
> On Tue, 21 Jun 2022, 1:47 pm Brian Clozel, ***@***.***>
> wrote:
>
>> @sbrannen <https://github.com/sbrannen> Could you elaborate on why this
>> is in the triage queue? Is there something to be discussed or clarified?
>> Is there a reason we don't merge this right now?
>>
>> —
>> Reply to this email directly, view it on GitHub
>> <https://github.com/spring-projects/spring-framework/pull/28646#issuecomment-1161417793>,
>> or unsubscribe
>> <https://github.com/notifications/unsubscribe-auth/AP5LHYBGKOESDHV4DOYSHBLVQF3DFANCNFSM5ZBYIEFQ>
>> .
>> You are receiving this because you are subscribed to this thread.Message
>> ID: ***@***.***>
>>
>
"
1563,1161453944,sdeleuze,141109,"After a team discussion, we agreed that's a useful use case but we prefer to decline integrating such feature in Spring Framework for various reasons:
 - Turning a key into a localized value is significantly more opinionated than `@DateTimeFormat` and almost changes the nature of the field.
 - People may expect different behaviors : getting the translation from resource bundles but also from databases, which could involve some caching, or keeping the message key and put the translation in another property.
 - Maybe could be a Jackson custom module that would be customized at Boot or user level rather than something that should live in Framework (we only integrate existing popular Jackson modules, we don't ship our own).

As a result, we decided to decline this issue. Maybe worth to publish as a standalone Jackson module (if it does not exist yet) and see if it gains traction for a clearly define set of use cases."
1564,1161520263,sbrannen,104798,"@vpavic, can you please submit the `Simplify creation of LoggingCacheErrorHandler with logged stacktrace` commit in a separate PR?

We can then get that merged in on its own since it's noncontroversial.

And we can focus this PR on the discussion of the other proposed changes."
1565,1161520949,rstoyanchev,401908,"**Team decision:** we'll go ahead with this. It aligns with various other path matching changes we've made in 5.2 and 5.3 such suffix pattern matching, path segment trimming, and path decoding, to make path matching more transparent and explicit. "
1566,1161523288,rstoyanchev,401908,**Team decision:** we'll go ahead with it and align with the default in Boot. 
1567,1161530786,rstoyanchev,401908,I think this could be merged indeed. There might also be a further opportunity to improve `ExtendedWebExchangeDataBinder` which overrides and repeats the base class implementation of `getValuesToBind`. I'll have a closer look.
1568,1161538849,wilkinsona,914682,Will the default be changed to false as part of this deprecation?
1569,1161539697,rstoyanchev,401908,"I think it's important to show ""masked"" for request parameters in order to hint that there is something to see if logging is changed. We could however print the same when the content-type is ""application/x-www-form-urlencoded"" and thus avoid the `getParameters.size()` check for that case."
1570,1161554600,rstoyanchev,401908,"When it comes to headers, I don't think the expectation that you would know how many and match each individually is all that unreasonable. I'd expect that matching across all headers in one condition is probably a less common case.

The Javadoc on the existing methods could certainly use an improvement, even if it's obvious that a vararg means, one value or Matcher for each value.

Nothing wrong with introducing a variant that accepts a `Matcher<? super Collection<? super String>>` but I wouldn't call it `headerValues` since the other one is also capable of matching all header values. Perhaps `headerList` would be more explicit about the difference."
1571,1161587186,vpavic,1149230,"Sure, I can do that:

- #28670

Though note there's one remark in the PR description that impacts the commit that's now subject of a separate PR:

> The first commit could maybe be update to deprecate the existing constructor that takes `org.apache.commons.logging.Log` and replace it with the one that takes `String` representing logger name as that way Commons Logging dependency wouldn't leak out at all. But I'd leave that decision to whoever reviews this PR."
1572,1161602579,odrotbohm,128577,"For reference, there already is something like that in usable form [here](https://github.com/odrotbohm/spring-playground/tree/main/spring-web-tools#i18nable-fields-in-responses). Instead of an annotation, it's type-based, with a neat API to also capture message arguments etc. I just doubt it'll get significant traction as it's not very discoverable for one and people likely shy away from using an extra dependency a single person authored for such rudimentary functionality. 

I can't quite follow the second bullet point as `MessageSource` *is* the API to hide message resolution behind? I.e. applications can already tweak the resolution behavior with abstractions already in place."
1573,1161610983,rstoyanchev,401908,"We discussed this, and there are a couple of follow-ups needed to help move this forward. 

One, is to have another look at all other similar annotations in Boot, some of which may have been added since, and see if this is the only one still to consider. 

Two, it would be useful to consider use cases. There is a concrete example in the linked https://github.com/spring-projects/spring-boot/issues/15019#issuecomment-457173107 but I would need to experiment with it. Generally it's not very clear that this is very common in data binding where the Servlet API already breaks each parameter into a Collection of values.  A more likely use case could be the use of property placeholders and `@Value` but we'll need a small POC to see how it works out.
"
1574,1161613757,rstoyanchev,401908,"Yes, I'm thinking that we might as well and that we'll have to, since otherwise you'd need to set it in order to stop using it. We had the same issue with suffix pattern matching. "
1575,1161627320,sbrannen,104798,"Hi @f-cramer,

We'd like to get a better understanding of your use case.

How are you obtaining the `URLResource` reference? Are you creating it yourself or getting an instance from a mechanism in Spring Framework?

Please note that the proposed changes to `AbstractFileResolvingResource` are likely at the wrong level, since that would then automatically apply to other subclasses such as `ClassPathResource` and `ServletContextResource` which  is likely undesirable. In other words, such a change would likely need to be limited to `URLResource` or custom subclasses of `URLResource`.

Speaking of the latter, would it be an option for you to create a subclass of `URLResource` for your use case?



"
1576,1161686037,sbrannen,104798,"This has been merged into `5.3.x` and `main`.

Thanks"
1577,1161706090,sbrannen,104798,"Thanks for the fruitful discussions, @vpavic!

This PR has now been superseded by #28670 and #28672."
1578,1161745529,sdeleuze,141109,@philwebb Could you please confirm that [this build time initialization of classes](https://github.com/philwebb/scratch-graal-conditions/blob/annotations/src/main/java/gce/graalvm/ConstantFeature.java#L48) is just required for class level `@Constant` not for field level ones?
1579,1161839634,sbrannen,104798,"> I'd expect that matching across all headers in one condition is probably a less common case.

I agree.

> The Javadoc on the existing methods could certainly use an improvement

Yes, let's improve the documentation for the affected methods.

> Nothing wrong with introducing a variant that accepts a `Matcher<? super Collection<? super String>>` 

I did some research on what's available in Hamcrest. Instead of `Collection`, they use `Iterable`. So let's go with `Iterable` for compatibility.

The interesting (disappointing?) part is that `everyItem()` and `hasItem()` have different generic signatures. `everyItem()` produces `Matcher<Iterable<? extends U>>`; whereas, `hasItem()` produces `Matcher<Iterable<? super T>>`. 

This makes `everyItem()` incompatible with the proposed new method in `MockRestRequestMatchers`, but there's nothing we can do about that since it's baked into Hamcrest like that.

Though you can create a custom `everyItem()` implementation that ignores the generics as follows, and this will work with the new method in `MockRestRequestMatchers`.

```java
@SuppressWarnings({ ""rawtypes"", ""unchecked"" })
public static <U> Matcher<Iterable<? super U>> everyItem(Matcher<U> itemMatcher) {
    return new Every(itemMatcher);
}
```

> but I wouldn't call it `headerValues` since the other one is also capable of matching all header values. Perhaps `headerList` would be more explicit about the difference.

With the proposed signature below, we don't actually run into any issues with the compiler (in terms of source compatibility).

```java
public static RequestMatcher header(String name, Matcher<Iterable<? super String>> matcher)
```

So we could choose to keep the `header` method name, but perhaps a different name would help to highlight the difference in behavior (and avoid binary incompatibility)."
1580,1161848641,sbrannen,104798,"> @sbrannen Could you elaborate on why this is in the triage queue? Is there something to be discussed or clarified? Is there a reason we don't merge this right now?

I put it in the triage queue because I believed that it probably could be merged as soon as someone got a chance to review the PR in detail. When I noticed the PR I didn't have time to review it in detail, so I thought the triage queue was the easiest way to signal to the team that this is likely some low hanging fruit."
1581,1161907375,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
1582,1161932802,rstoyanchev,401908,Keeping the `header` method name sounds good. 
1583,1161933507,sbrannen,104798,"`ReactiveSessionRepository` is not part of the core Spring Framework.

Please open an issue for [Spring Session](https://github.com/spring-projects/spring-session-bom/issues/new/choose).

"
1584,1162017842,sbrannen,104798,"> The interesting (disappointing?) part is that `everyItem()` and `hasItem()` have different generic signatures. `everyItem()` produces `Matcher<Iterable<? extends U>>`; whereas, `hasItem()` produces `Matcher<Iterable<? super T>>`.

It turns out that there are open issues for Hamcrest on this topic.

See https://github.com/hamcrest/JavaHamcrest/issues/289#issuecomment-1162016379 for details."
1585,1162039057,bclozel,103264,"In the meantime, [RFC9110 is out and its description of Preconditions](https://datatracker.ietf.org/doc/html/rfc9110#section-13.1) shows that we're lacking both `If-Match` conditions support and specific behavior around wildcards `""*""` ETags in conditional requests.

Note that we can't really rely on `checkNotModified(null)` since the compiler can't decide between the ETag `String` and Last Modified `long` variants. We should use empty ETags `""""` to signal that no resource is known on the server side. "
1586,1162177267,philwebb,519772,"@sdeleuze correct, that's just for class-level use."
1587,1162191470,philwebb,519772,"Is it possible to add `@CompileWithTargetClassAccess` to the test? Another ""fix"" might be to add `--add-opens=java.base/java.net=ALL-UNNAMED` to the build. We did that recently with [Spring Boot](https://github.com/spring-projects/spring-boot/blob/2c1301b24100c559c18545dfbd09930bce12404d/spring-boot-project/spring-boot-actuator-autoconfigure/build.gradle#L243)."
1588,1162224877,f-cramer,3915821,"Hey @sbrannen 
the PR was opened to provide a fix for a bug in Java 8, which somehow prevented a JarURLConnection from correctly closing the corresponding file handle after usage (sorry, its been some time).
As I can not find the JDK bug report and the problem does no longer seem to be happening in JDK 17, I will close this PR"
1589,1162827426,rstoyanchev,401908,"Looking at the stacktrace, the path came through a call to `request.getRequestURI()` in `UrlPathHelper#getOriginatingRequestUri` on line 493 since it is neither WebSphere, nor a forwarded request. From what I can see Tomcat does not return `null` from that method, tracing it down to `org.apache.coyote.Request#requestURI`. So I can only assume this is somehow related to Spring Security wrapping the request? @jzheaux or @rwinch any thoughts?"
1590,1162827733,sannnan,16879065,"facing the same issue. Does it gets resolved?  
my questions: 
https://stackoverflow.com/questions/72712302/notnull-or-notempty-is-not-working-as-expected-spring-boot-controller"
1591,1162834462,mpreziuso,10457038,"We were having the same problem and we later realised it was because of a filter in the chain that was consuming the request `InputStream`.

If you are doing the same, `ContentCachingRequestWrapper` and `ContentCachingResponseWrapper` may be useful as well as relying on `AbstractRequestLoggingFilter` if you're doing that for logging purposes."
1592,1162835756,bclozel,103264,Closing as a duplicate of #16519 and #11041
1593,1162891766,bclozel,103264,"Using a vanilla WebFlux application and a custom filter registered, I'm seeing that the filter is called once and its lifecycle seems right:

```
2022-06-22 11:43:57.524  INFO 39456 --- [ctor-http-nio-2] com.example.webfilter.MyWebFilter        : filter subscribe
2022-06-22 11:43:57.546  INFO 39456 --- [ctor-http-nio-2] com.example.webfilter.MyController       : controller subscribe
2022-06-22 11:44:07.548  INFO 39456 --- [     parallel-1] com.example.webfilter.MyController       : controller on success
2022-06-22 11:44:07.571  INFO 39456 --- [ctor-http-nio-2] com.example.webfilter.MyWebFilter        : filter on success
```

Could you share a sample application that demonstrates the problem?
You can simulate a long-running controller method with something like:

```java
	@GetMapping(""/"")
	public Mono<String> some() {
		return Mono.delay(Duration.ofSeconds(10))
				.thenReturn(""Hello delayed"")
				.doOnSubscribe(sub -> logger.info(""controller on subscribe""))
				.doOnSuccess(message -> logger.info(""controller on success""));
	}
```

As for the authentication filter, you can turn on debug logging to show when it's being called and configure a simpler authentication mechanism for demo purposes. I'm moving this issue to Spring Framework for now until we understand the issue here."
1594,1162916675,jomach,4804546,"Ok,  I think my assumption is wrong. After activating the logs I see: 
```
2022-06-22 12:16:30.020 DEBUG 95413 --- [     parallel-5] a.DelegatingReactiveAuthorizationManager : Checking authorization on '/api/v1/datasets/24ad64a6-1fca-4534-8ffd-80ef4544a170/entries' using org.springframework.security.authorization.AuthorityReactiveAuthorizationManager@3ee7da5d
2022-06-22 12:16:30.022 DEBUG 95413 --- [     parallel-5] o.s.s.w.s.a.AuthorizationWebFilter       : Authorization successful
```

I guess it is something else. I will close this for now and reopen if I have more feedback"
1595,1162920175,sebastianhaberey,4152849,+1 for escaping!
1596,1162926782,sdeleuze,141109,"Good news, I have been able to leverage the updated `@Constant` experiment to remove totally build time initialization from Spring Framework 6 (can be used for portfolio projects and Boot as well) while keeping the same benefits in term of build time code removal, see [this related WIP branch](https://github.com/sdeleuze/spring-framework/tree/gh-28624). Thanks a lot @philwebb!

As soon as GraalVM team provides a builtin solution via the working group @bclozel and I have joined, it would replace this GraalVM feature. That's why I have preferred not introducing a new annotation like `@Constant` but just target a set of patterns. Since we don't have a real idea of the timeframe, I think the GraalVM feature provide a reasonable path for this transition period."
1597,1162988737,Enerccio,1702602,"This breaks anything that checks for ""jar hell"", such as elasticsearch when used as library and starting a plugin "
1598,1162998078,snicoll,490484,Thanks for the PR @Suthman but the original reporter already [confirmed they're going to update](https://github.com/spring-projects/spring-framework/pull/28669#discussion_r902793696) their original proposal.
1599,1163020794,Suthman,107842024,"Hi snicoll, sorry for my late answer. 

@kevin0x90 and I did the work yesterday together, and he asked me to complete our work today.

I ask Kevin to confirm this in this thread."
1600,1163198099,darioseidl,4629505,"In Spring Boot there is already a property `spring.transaction.default-timeout` to set the default transaction timeout, is that what you're looking for?"
1601,1163265201,sdeleuze,141109,"> I can't quite follow the second bullet point as `MessageSource` is the API to hide message resolution behind? I.e. applications can already tweak the resolution behavior with abstractions already in place.

Indeed `MessageSource` is flexible enough, my point was more about this feature likely to require frequently customization / custom implementation."
1602,1163313975,rwinch,362503,"I do not believe this is anything to do with Spring Security. Spring Security wraps the `HttpServletRequest`  but only `DummyRequest` implements `HttpServletRequest.getRequestURI()`and it doesn't appear to be used in the call stack. Below are all the places Spring Security wraps the `HttpServletRequest`:

*  [DebugRequestWrapper](https://github.com/spring-projects/spring-security/blob/5.7.2/web/src/main/java/org/springframework/security/web/debug/DebugFilter.java#L158) - Used if `DebugFilter` is in the call stack which occurs if debugging enabled. The call stack does not contain `DebugFilter`
* [DummyRequest](https://github.com/spring-projects/spring-security/blob/5.7.2/web/src/main/java/org/springframework/security/web/FilterInvocation.java#L156) - Used for applications testing if authorization is allowed for another `HttpServletRequest`. Based on the call stack this does not appear to be applicable for this case.
* [FirewalledRequest](https://github.com/spring-projects/spring-security/blob/5.7.2/web/src/main/java/org/springframework/security/web/firewall/FirewalledRequest.java#L31) ([RequestWrapper](https://github.com/spring-projects/spring-security/blob/5.7.2/web/src/main/java/org/springframework/security/web/firewall/RequestWrapper.java#L47), [StrictFirewalledRequest](https://github.com/spring-projects/spring-security/blob/5.7.2/web/src/main/java/org/springframework/security/web/firewall/StrictHttpFirewall.java#L687))  - Used for rejecting requests that look to be potentially malicious. This is being used, but `FirewalledRequest` and subclasses do not  implement `HttpServeltRequest.getRequestURI()`
* [HeaderWriterRequest](https://github.com/spring-projects/spring-security/blob/5.7.2/web/src/main/java/org/springframework/security/web/header/HeaderWriterFilter.java#L141) - This is only used when `HeaderWriterFilter` is in the call stack. It does not implement `HttpServeltRequest.getRequestURI()`
* [SavedRequestAwareWrapper](https://github.com/spring-projects/spring-security/blob/5.7.2/web/src/main/java/org/springframework/security/web/savedrequest/SavedRequestAwareWrapper.java#L55) - This is used to restore a request that was made prior to authentication to the original request so that it can be replayed after authentication success. Given the call stack, I am guessing that this is not being used because it mentions JWT which typically implies the request cache is disabled. Even if it is being used, it does not implement `HttpServeltRequest.getRequestURI()`
* [SaveToSessionRequestWrapper](https://github.com/spring-projects/spring-security/blob/5.7.2/web/src/main/java/org/springframework/security/web/context/HttpSessionSecurityContextRepository.java#L258) - This is probably not being used given the call stack states JWT. However, even if it is being used it does not implement `HttpServeltRequest.getRequestURI()`.

There are a few other `Filter`s in the call stack that I wonder if they wrap the request. 

*   `org.txture.microservice.common.compression.GzipFilter.doFilter(GzipFilter.kt:22)`
*  `org.txture.microservice.common.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.kt:68)`

What is interesting to me is that it appears that the `uri` is `null` when passed into `getSanitizedPath(String)`

* We know that `path` is `null` at [UrlPathHelper.java:408](https://github.com/spring-projects/spring-framework/blob/v5.3.19/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java#L408) to to the `NullPointerException`. This is the same value that was passed into `getSanitizedPath(String)`.

However, `uri` is non-null when passed into `removeSemicolonContent(String)`

* `removeSemicolonContent(uri)` was invoked successfully because it is [UrlPathHelper.Java#L549](https://github.com/spring-projects/spring-framework/blob/v5.3.19/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java#L549) and the call stack states it reached [UrlPathHelper.java:551](https://github.com/spring-projects/spring-framework/blob/v5.3.19/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java#L551
)
* [removeSemicolonContent(String)](https://github.com/spring-projects/spring-framework/blob/v5.3.19/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java#L614) can either invoke:
  * [removeSemicolonContentInternal(String)](https://github.com/spring-projects/spring-framework/blob/v5.3.19/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java#L619)  which [invokes `requestUri.indexOf`](https://github.com/spring-projects/spring-framework/blob/v5.3.19/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java#L620) and does not cause a `NullPointerException`
  *  [removeJsessionid(String)](https://github.com/spring-projects/spring-framework/blob/v5.3.19/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java#L636) which [invokes requestUri.toLowerCase()](https://github.com/spring-projects/spring-framework/blob/v5.3.19/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java#L638) which does not cause a `NullPointerException`. 

Given the [`String uri`](https://github.com/spring-projects/spring-framework/blob/v5.3.19/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java#L549) is immutable and is not `null` when passed into `removeSemicolonContent(String)` (using the logic above) it appears that either `removeSemicolonContent(String)` or `decodeRequestString(HttpServletRequest,String)` are returning `null` some how.

I'm curious what the vendor and exact JDK version is as that might help determine how this would be possible."
1603,1163379176,MartinHaeusler,16356998,@rwinch The issue occurred on Eclipse Adoptium 17.0.3 (successor to AdoptOpenJDK). We're using the embedded tomcat that comes with Spring Boot 2.7.0.
1604,1163380470,vpavic,1149230,"I had hoped to at least get some reasoning on why the team believes current behavior is a better default. I didn't see the issue in Boot tracker, but having looked at it there's no reasoning offered there either.

The way I see it, throwing errors (and potentially implying data loss) in a situation where the decorated application functionality is perfectly operational is not desirable. So, developers have to either opt into `LoggingCacheErrorHandler` or some specific error handling that will yield the same effect - treating cache backend failure as a cache miss.

Hence the proposal to revisit the default because new major releases and opportunities to do so don't come often.

I'd also like to emphasize that unlike other AOP based advices (transactions, async and so on...) caching is purely performance optimization oriented decoration that does not (or shouldn't really) have an impact on application from a functional standpoint.

Finally, note that the `CacheErrorHandler` as a concept is barely mentioned in the reference manual with its only mention being in _Cache annotation settings_ table in [_8.2.6. Enabling Caching Annotations_](https://docs.spring.io/spring-framework/docs/current/reference/html/integration.html#cache-annotation-enable). So it's also not that hard to miss the impact and the risks of the default behavior."
1605,1163473717,kevin0x90,6693174,I  can confirm what @Suthman writes
1606,1163516778,rwinch,362503,"Thanks for the reply @MartinHaeusler 

Looking at the `removeSemicolonContent(String)` and `removeJsessionId(String)` along with Eclipse Adoptium 17.0.3 source I'm not understanding how it would be possible for them to return a `null` value. I must be missing something. I'll see if @rstoyanchev or someone else can spot what I am overlooking.

I'm not sure it matters, but I'm curious. In the original report you stated this happens with Spring 5.3.19, but then you stated you are using Spring Boot 2.7.0. Did you override the Spring Framework version to 5.3.19 for some reason? I ask because Spring Boot 2.7.0's default Spring Framework version is 5.3.20."
1607,1163529572,kevin0x90,6693174,i have updated the already open pr
1608,1163715675,MartinHaeusler,16356998,@rwinch my team employs a rather strict policy when it comes to dependency management (and their versions). Most of the time we're on the latest patch level; maybe this was an oversight.
1609,1163839314,kiranshm973,17679139,"created a sample project to demonstrate the issue https://github.com/ksm-973/spring-transaction-rollback-issue/tree/master/demo

Update springBootVersion in gradle.properties to 2.0.0.RELEASE (uses spring 5.0.4) and run UserServiceTest -> Test runs successfully
Update springBootVersion in gradle.properties to 2.7.0 (uses spring 5.3.20) and run UserServiceTest -> Test fails
"
1610,1163997984,bclozel,103264,"All the code you're pointing at belongs in Spring Data REST, so there is nothing much we can do here in Framework. Could you create this issue against [Spring Data REST](https://github.com/spring-projects/spring-data-rest/issues)?
Sorry but I can't transfer this issue myself so I will close it as invalid right now.
Thanks!"
1611,1164030909,snicoll,490484,"@Suthman OK, I see. We can't really merge this PR as part of the code was already submitted by Kevin and they're the one signing the CLA. Thanks for updating the existing PR Kevin."
1612,1164031667,snicoll,490484,Closing in favor of PR #28669
1613,1164033435,knoobie,3968629,"I'm wondering if it would make sense to move the `ProblemDetail` to `spring-core`. Allowing to extend it with something like `CompanyProblemDetail` within base libraries without having to enforce the additional dependency on `spring-web`. 

I've seen libraries often using `spring-core` or `spring-security-core` as dependency in base libraries to allow re-using of common spring interfaces like `Resources` or `GrantedAuthority`. In my opinion `ProblemDetail` falls in the same category."
1614,1164033511,snicoll,490484,"Good stuff, thanks @kevin0x90 and @Suthman."
1615,1164046731,kevin0x90,6693174,Thanks for accepting our small contribution @snicoll 
1616,1164116959,mhalbritter,98899556,"The same happens with the `org.springframework.integration.IntegrationPatternType` type.

There's no `ResolvableType` involved, but the type references itself (with a type in between the cycle)."
1617,1164132418,mhalbritter,98899556,"It seems the cycle detection is broken:

```
public class Bar {
  public Bar getBar() {
    return null;
  }
}
```

throws an Exception too."
1618,1164156469,darioseidl,4629505,"Could this issue be reopened and reconsidered?

Just like OP, I just spent a long time debugging why some `@Transactional` annotations were ignored. Transactional issues are notoriously hard to debug to begin with. For me, it typically goes like this, first thinking it's a simple mistake like a forgotten annotation, then looking for other pitfalls, like self invocation within a class, or passing detached entities across transaction borders, or a problem with (async/scheduled) threads.

The last thing I would expect is that `@Transactional` annotations are just silently not detected for a bean at all, as can be the case when ~~the `org.springframework.transaction.config.internalTransactionAdvisor` is being skipped during bean creation.~~ your bean is created before the `org.springframework.transaction.config.internalTransactionAdvisor`.

You need to turn on the trace log level for `logging.level.org.springframework.transaction.annotation.AnnotationTransactionAttributeSource` to see which classes/methods are detected as transactional (here I see that some are missing).

And then turn on the trace log level for `org.springframework.aop.framework.autoproxy.BeanFactoryAdvisorRetrievalHelper` to see messages like

> Skipping currently created advisor 'org.springframework.transaction.config.internalTransactionAdvisor'

hinting at the root of the problem. Sadly, here we don't see for which bean the advisor is skipped, but I can find that out with the debugger.

I see that the message ""Skipping currently created advisor "" has been added since the OP created this issue (before that it was completely silent)~~, but 
shouldn't that message be at least an info or a warning? Or is there some other way to detect when the `internalTransactionAdvisor` is being skipped?~~

Edit: Oh, I realize now, the presense of that message by itself doesn't indicate a problem. It seems it's only a problem when a bean with transactional annotations is created before the `internalTransactionAdvisor`. The better logger to see that is `org.springframework.beans.factory.support.DefaultListableBeanFactory` (on debug).

The question then is, is there some way to detect / ensure that a bean with `@Transactional` annotation is not created too early?"
1619,1164366923,mdzhigarov,1481379,"We have stumbled upon the same exact issue. No workarounds so far, currently trying to enable netty trace logging to gather more information"
1620,1164382018,sbrannen,104798,"Thanks for providing the demo project. We'll look into it.

----

As a side note, test classes and test methods have to be `public` with JUnit 4. Thus, anyone else trying out this project will need to add the missing `public` modifiers."
1621,1164400646,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
1622,1164467438,sbrannen,104798,"FYI: if you set the Spring Boot version to `2.6.9` (in `gradle.properties`) and the Spring Framework version to `5.3.21` (in `build.gradle` as below), the test will still pass.

```groovy
ext['spring-framework.version'] = '5.3.21'
```

Thus, it does not appear to be an issue with the core Spring Framework itself.

However, I have confirmed that the test fails as soon as you upgrade Spring Boot from 2.6.9 to 2.7.0."
1623,1164467673,rstoyanchev,401908,"As an HTTP abstraction, `ProblemDetail` belongs in `org.springframework.http`, not any lower. `ProblemDetail` is nothing but a simple holder of the properties and it wouldn't make sense for Spring Security to use it without the rest of the support, as outlined in https://github.com/spring-projects/spring-framework/issues/27052#issuecomment-1160657627, which in turn requires spring-web. In any case, the goal is to provide an abstraction for spring-web processing. 
"
1624,1164467942,mbolis,5601754,"I bumped into the same issue, is this being taken care of?"
1625,1164484054,sbrannen,104798,"After further analysis, I have determined that the upgrade to H2 2.x is causing the issue.

Running the test with Spring Boot 2.7.0, Spring Framework 5.3.21 and H2 1.4.200 passes.

```groovy
ext['spring-framework.version'] = '5.3.21'
ext['h2.version'] = '1.4.200'
```

Switching `h2.version` to `2.1.212` causes the test to fail."
1626,1164488903,kiranshm973,17679139,"Thanks for looking into this. Original issue was identified in a stand alone spring app which uses SQL Server database.

Spring: 5.3.20
JPA: 2.1
Hibernate: 5.2.17
sql jdbc driver: mssql-jdbc:8.2.0.jre8 

Issue was possibly caused by the change for this https://github.com/spring-projects/spring-framework/issues/22420"
1627,1164586514,sdeleuze,141109,Related to #28641 cc @poutsma .
1628,1164884882,izeye,1059363,"Sorry, I wasn't aware of the issue. Feel free to close this one."
1629,1165086686,snicoll,490484,Duplicate of #27532
1630,1165142825,jsl1992,34052259,https://spring.io/why-spring 
1631,1165153765,pivotal-cla,16822967,"@zDream Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28694)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28694) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1632,1165243041,bclozel,103264,https://snyk.io/jvm-ecosystem-report-2021/
1633,1165400753,sdeleuze,141109,"https://github.com/sdeleuze/build-time-constant-fields allows to test it works as expected. Not sure yet if/how we should integrate that in the CI, but probably good enough for this milestone to have such side repository to test the behavior.

Logs printed during the native build allow to identify which fields are set to a constant value at build time."
1634,1165417563,sbrannen,104798,"The issue with the demo application is not an issue with Spring Framework or Spring Boot.

Rather, the issue pertains to Hibernate's support for H2 2.0 and the fact that the test catches and swallows all exceptions and that the service catches all exceptions. The latter two issues mask the first issue.

If you inspect the actual exceptions and log, you will see that there are numerous SQL exceptions. The following is the initial cause.

```
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement ""create table [*]user (id integer generated by default as identity, name varchar(255), primary key (id))""; expected ""identifier""; SQL statement:
create table user (id integer generated by default as identity, name varchar(255), primary key (id)) [42001-214]
```

To fix the problem, you need to declare the `user` table with enclosing backticks as follows

```java
@Entity
@Table(name = ""`user`"")
public class User {
  // ...
}
```

After doing that, your test should pass with Spring Boot 2.7.0, Spring Framework 5.3.21, and H2 2.1.214.

In light of that, I am closing this issue as invalid."
1635,1165419690,sbrannen,104798,"> Thanks for looking into this. Original issue was identified in a stand alone spring app which uses SQL Server database.
> 
> Spring: 5.3.20 JPA: 2.1 Hibernate: 5.2.17 sql jdbc driver: mssql-jdbc:8.2.0.jre8

If you are able to provide us a sample application that reproduces the problem, feel free to share additional information in this issue and we will consider reopening it.

Thanks"
1636,1165438716,SuperEdison,84554944,"I find this error still happening that is fault way to use?
`public static void main(String[] args) {
        BeanCopier beanCopier = BeanCopier.create(A.class, B.class, false);
    }
`
Exception in thread ""main"" org.springframework.cglib.core.CodeGenerationException: java.lang.reflect.InaccessibleObjectException-->Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) throws java.lang.ClassFormatError accessible: module java.base does not ""opens java.lang"" to unnamed module @32cf48b7
	at org.springframework.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:589)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:363)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:264)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.beans.BeanCopier$Generator.create(BeanCopier.java:98)
	at org.springframework.cglib.beans.BeanCopier.create(BeanCopier.java:52)
	at club.edm.bscwallet.server.BscWalletApplication.main(BscWalletApplication.java:17)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) throws java.lang.ClassFormatError accessible: module java.base does not ""opens java.lang"" to unnamed module @32cf48b7
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Method.checkCanSetAccessible(Method.java:199)
	at java.base/java.lang.reflect.Method.setAccessible(Method.java:193)
	at org.springframework.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:553)
	... 13 more"
1637,1165455512,rohan-new,34922058,"@mdzhigarov I was able to solve the issue by doing the following, u could do the same.
`
   
          HttpClient httpClient = HttpClient.create()
              .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 2000)
              .responseTimeout(Duration.ofMillis(5000))
              .wiretap(""reactor.netty.http.client.HttpClient"",
                      LogLevel.DEBUG, AdvancedByteBufFormat.TEXTUAL)
              .doOnConnected(conn ->
                      conn.addHandlerLast(new ReadTimeoutHandler(5000, TimeUnit.MILLISECONDS))
                              .addHandlerLast(new WriteTimeoutHandler(5000, TimeUnit.MILLISECONDS)));


        WebClient.Builder webClientBuilder = WebClient.builder()
                .clientConnector(new ReactorClientHttpConnector(httpClient));

        testWebClient = webClientBuilder
                .baseUrl(baseUrl)
                .build();

        public Mono<CustomerDetails> getCustomerDetails(String customerId) {
        return testWebClient.get()
                .uri(uriBuilder ->
                        uriBuilder.path(""/customer/id/{customerId}"")
                                .build(customerId))
                .header(""customerId"", customerId)
                .retrieve()
                .bodyToMono(new ParameterizedTypeReference<RestResponse<CustomerDetails>>() {
                })
                .log(""getCustomerDetails"")
                .map(RestResponse::getData);
    }


`"
1638,1165599506,bclozel,103264,Let's continue this discussion on [your StackOverflow question](https://stackoverflow.com/questions/72705498/how-to-return-a-fluxdatabuffer-or-similar-in-an-http-streaming-response-with-w).
1639,1165710352,snicoll,490484,"Thanks for the report. It is not immediately obvious to me why this annotation needs the proxy (ping @jhoeller).

Nit @marcusdacoregio but you can use `registerTypes` to apply the same hint on a list of classes."
1640,1165811850,sbrannen,104798,"This issue is no longer blocked by #28666.

Though I suppose it's still blocked by https://github.com/spring-projects/spring-boot/issues/29699."
1641,1165830965,sbrannen,104798,"Thanks for bringing this to our attention.

At a glance, it appears that a solution might be as simple as the following in `GenericApplicationContext` (i.e., copying the for-loop from the superclass -- although the for-loop would get executed twice in some cases).

```java
public Resource getResource(String location) {
	for (ProtocolResolver protocolResolver : getProtocolResolvers()) {
		Resource resource = protocolResolver.resolve(location, this);
		if (resource != null) {
			return resource;
		}
	}
	if (this.resourceLoader != null) {
		return this.resourceLoader.getResource(location);
	}
	return super.getResource(location);
}
```

We'll look into it."
1642,1165832067,arteymix,1318477,"In that case, you can put the for-loop within the `this.resourceLoader != null` condition."
1643,1166156913,izeye,1059363,The issue that this PR targets has been resolved via a14650e0dc37ad36e0d1c1d8ebbb0440bcfd312b already.
1644,1166275493,sbrannen,104798,"> It is not immediately obvious to me why this annotation needs the proxy

It actually shouldn't need a proxy, since it should not be synthesized.

Though perhaps there is a bug lurking in the ""synthesizable"" computation algorithm in `AnnotationTypeMapping`:

https://github.com/spring-projects/spring-framework/blob/d1b65f6d3e90af3f55d1b4d347afb3ebe9a3de44/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java#L314-L352"
1645,1166307186,sbrannen,104798,"Thanks for bringing this to our attention, @marcusdacoregio.

It turns out it is in fact a regression in our merged annotation support.

I am therefore closing this issue as superseded by #28704."
1646,1166543367,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
1647,1166568572,pkgonan,15858772,"@snicoll @mp911de @jhoeller 
Hi. 
I am trying to manage transactions through Spring @Transactional annotation by utilizing ReactiveTransactionManager in R2DBC. If I use @EventListener in this case, can I use transaction with @Transaction annotation? I'm not talking about the @TransactionalEventListener, I'm talking about the @EventListener annotation."
1648,1166651461,bclozel,103264,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
1649,1166902339,livk-cloud,50291874,"> This didn't happen with any errors,I tried using spring-core 6.0.0M4 and spring-core 5.3.21,didn't get any errors
```java
public class AppTest {

    @Test
    public void test() {
        BeanCopier copier = BeanCopier.create(A.class, B.class, false);
        System.out.println(""copier:"" + copier);
    }
}

class A {

}

class B {

}
```"
1650,1167153198,SuperEdison,84554944,"> > 这没有发生任何错误，我尝试使用 spring-core 6.0.0M4 和 spring-core 5.3.21，没有收到任何错误
> 
> ```java
> public class AppTest {
> 
>     @Test
>     public void test() {
>         BeanCopier copier = BeanCopier.create(A.class, B.class, false);
>         System.out.println(""copier:"" + copier);
>     }
> }
> 
> class A {
> 
> }
> 
> class B {
> 
> }
> ```

because your class not public class, you can try create public class A and B"
1651,1167160641,livk-cloud,50291874,"> > > 这没有发生错误，我试用使用 spring-core 6.0.0M4 和 spring-core 5.3.21，没有收到任何错误
> > 
> > 
> > ```java
> > public class AppTest {
> > 
> >     @Test
> >     public void test() {
> >         BeanCopier copier = BeanCopier.create(A.class, B.class, false);
> >         System.out.println(""copier:"" + copier);
> >     }
> > }
> > 
> > class A {
> > 
> > }
> > 
> > class B {
> > 
> > }
> > ```
> 
> 因为您的课程不是公共课程，您可以尝试创建公共课程 A 和 B

> Obviously there is no problem

![image](https://user-images.githubusercontent.com/50291874/175917832-00483f23-169c-431f-82f0-fc6c4f74cbeb.png)

> spring6.0.0-M4 result
![image](https://user-images.githubusercontent.com/50291874/175918420-abd185aa-d272-4745-9097-7dd2852d0af4.png)

> spring5.3.21 result
![image](https://user-images.githubusercontent.com/50291874/175918288-aee8b0e7-e67d-446a-8c8d-59b41ead549f.png)

"
1652,1167209489,diova,51650837,"> Using `Jaxb2XmlEncoder` and `Jaxb2XmlDecoder` for now, please avoid [cross-commenting](https://github.com/spring-projects/spring-boot/issues/9581#issuecomment-461437558).


Hello,
I'm not sure if i'm doing something wrong, but using Jaxb2XmlEncoder/Jaxb2XmlDecoder is doing some blocking operations as it is relying on jakarta.xml.
Is this expected or there is any alternative?
Thanks"
1653,1167216187,bclozel,103264,"Could you open this issue against [the spring-native project please](https://github.com/spring-projects/spring-framework/issues/28708)?
Unfortunately I can't transfer this issue. Thanks!"
1654,1167257392,poutsma,330665,"I am not sure what the question is. The expression `""0 */10 * * * ?` means every 10 minutes **starting at minute 00**, i.e. `0,10,20,30,40,50`.

Can you make clear what the desired behaviour is, by providing a complete minimal sample (something that we can unzip or git clone, build, and deploy). Just a JUnit test would be fine."
1655,1167261105,christophstrobl,2317257,"```java
RuntimeHintsUtils.registerAnnotation(hints, org.springframework.transaction.annotation.Transactional.class);

hints.reflection()
	.registerTypes(asList(
		TypeReference.of(org.springframework.transaction.annotation.Isolation.class),
		TypeReference.of(org.springframework.transaction.annotation.Propagation.class),
		TypeReference.of(org.springframework.transaction.TransactionDefinition.class)),
		hint -> ...)

hints.reflection()
	.registerTypes(asList(
		TypeReference.of(AutoProxyRegistrar.class),
		TypeReference.of(ProxyTransactionManagementConfiguration.class),
		TypeReference.of(""org.springframework.transaction.interceptor.BeanFactoryTransactionAttributeSourceAdvisor$1"")), ...
```

_(updated to make use of RuntimeHintsUtils.registerAnnotation)_"
1656,1167273878,LGtaer,40486423,"> I am not sure what the question is. The expression `""0 */10 * * * ?` means every 10 minutes **starting at minute 00**, i.e. `0,10,20,30,40,50`.
> 
> Can you make clear what the desired behaviour is, by providing a complete minimal sample (something that we can unzip or git clone, build, and deploy). Just a JUnit test would be fine.

ex.

    @Test
    public void testCron() {
        CronExpression expression = CronExpression.parse(""0 */10 * * * ?"");
        Instant timeFrom = Instant.ofEpochMilli(1656288300000L);
        System.out.println(""begin time: "" + ZonedDateTime.ofInstant(timeFrom, ZoneId.of(""GMT"")));
        for (int i = 1; i < 6; i++) {
            ZonedDateTime nextFirst = expression.next(ZonedDateTime.ofInstant(timeFrom, ZoneId.of(""GMT"")));
            timeFrom = nextFirst.toInstant();
            System.out.println(nextFirst.getMinute());
            Assertions.assertEquals(5 + 10 * i, nextFirst.getMinute());
        }
    }

Expected :15,25,35,45,55
Actual   :10,20,30,40,50"
1657,1167341705,poutsma,330665,"> Expected :15,25,35,45,55

I am afraid your expectations are incorrect. The expression `0 */10 * * * ?` means every 10 minutes **starting at minute 00**. It does **not** mean every 10 minutes starting at the given time.

Feel free to verify this entering the expression into https://www.freeformatter.com/cron-expression-generator-quartz.html or https://beautifycode.net/cron-expression-descriptor."
1658,1167369211,LGtaer,40486423,"

> > Expected :15,25,35,45,55
> 
> I am afraid your expectations are incorrect. The expression `0 */10 * * * ?` means every 10 minutes **starting at minute 00**. It does **not** mean every 10 minutes starting at the given time.
> 
> Feel free to verify this entering the expression into https://www.freeformatter.com/cron-expression-generator-quartz.html or https://beautifycode.net/cron-expression-descriptor.

but when i use @Scheduled(cron =""0 */10 * * * ?) ， the execution time was the same as I expected. system not starting at minute 00
I want to manually implement this function. Because I'm making a custom timer."
1659,1167566589,sbrannen,104798,"> In that case, you can put the for-loop within the `this.resourceLoader != null` condition.

Yes. You are of course correct, and that's exactly how I implemented it. 👍 

When I said ""at a glance"", I meant that literally. It was the last thing I _glanced_ at before signing off for the day, and I hadn't even put any thought into how to optimize the code. 😇 

This is in place now for 5.3.22 (available soon in snapshots).

"
1660,1168319485,SuperEdison,84554944,"> > > > 这没有发生错误，我试用使用 spring-core 6.0.0M4 和 spring-core 5.3.21，没有收到任何错误
> > > 
> > > 
> > > ```java
> > > public class AppTest {
> > > 
> > >     @Test
> > >     public void test() {
> > >         BeanCopier copier = BeanCopier.create(A.class, B.class, false);
> > >         System.out.println(""copier:"" + copier);
> > >     }
> > > }
> > > 
> > > class A {
> > > 
> > > }
> > > 
> > > class B {
> > > 
> > > }
> > > ```
> > 
> > 
> > 因为您的课程不是公共课程，您可以尝试创建公共课程 A 和 B
> 
> > Obviously there is no problem
> 
> ![image](https://user-images.githubusercontent.com/50291874/175917832-00483f23-169c-431f-82f0-fc6c4f74cbeb.png)
> 
> > spring6.0.0-M4 result
> > ![image](https://user-images.githubusercontent.com/50291874/175918420-abd185aa-d272-4745-9097-7dd2852d0af4.png)
> 
> > spring5.3.21 result
> > ![image](https://user-images.githubusercontent.com/50291874/175918288-aee8b0e7-e67d-446a-8c8d-59b41ead549f.png)

<img width=""1394"" alt=""image"" src=""https://user-images.githubusercontent.com/84554944/176115385-d6da7ae9-4c45-4489-ae6c-1c583b4f7d07.png"">
<img width=""195"" alt=""image"" src=""https://user-images.githubusercontent.com/84554944/176115857-95f8b926-82e8-4b17-b0d8-ef3c17ed1cdd.png"">

so, i wanna know that you add some param?
there are pic to tell you my env and spring.verison."
1661,1168379105,livk-cloud,50291874,"> class A and class B is empty
> I am using oracle jdk17.0.2
> spring version has been said before"
1662,1168381131,SuperEdison,84554944,"> > class A and class B is empty
> 
> > I am using oracle jdk17.0.2
> 
> > spring version has been said before

can you show me the A class code ?"
1663,1168383211,livk-cloud,50291874,"> > > A类和B类为空
> > 
> > 
> > > 我正在使用 oracle jdk17.0.2
> > 
> > 
> > > spring 版本之前已经说过了
> 
> 你能告诉我A类代码吗？

![image](https://user-images.githubusercontent.com/50291874/176127997-03589fe9-9d29-4a9b-8d6a-6fbd42750d51.png)

![image](https://user-images.githubusercontent.com/50291874/176128034-3e129239-978c-4504-bac9-e64c554c9cb3.png)
"
1664,1168420724,napstr,6048348,"Ahoy, I'd like to get this into the 5.x version of the framework. Happy to do the backporting, however, is it ok to have the deprecation hit an upcoming 5.3.x release or would that be a problem?"
1665,1168565373,SuperEdison,84554944,"> > > > A类和B类为空
> > > 
> > > 
> > > > 我正在使用 oracle jdk17.0.2
> > > 
> > > 
> > > > spring 版本之前已经说过了
> > 
> > 
> > 你能告诉我A类代码吗？
> 
> ![image](https://user-images.githubusercontent.com/50291874/176127997-03589fe9-9d29-4a9b-8d6a-6fbd42750d51.png)
> 
> ![image](https://user-images.githubusercontent.com/50291874/176128034-3e129239-978c-4504-bac9-e64c554c9cb3.png)

i had change oracle jdk17,still error.
i have no idea to solve it.
do you add --add-opens java.base/java.lang=ALL-UNNAMED param?"
1666,1168572592,xbj110825,16949006,"> > #24886
> 
> I could see we have a **StringUtils.hasLength(mimeType)** check before adding the value to the cache. Still how the null values are added to the queue?

jdk(1.8.0_60) ConcurrentLinkedQueue.remove method has bug: https://bugs.openjdk.org/browse/JDK-8137185

You can use the following code to test whether ConcurrentLinkedQueue has bug
```java
public class CLQBug
{
    public static void main(String[] args)
    {
        ConcurrentLinkedQueue<String> queue = new ConcurrentLinkedQueue<>();
        queue.add(""x"");

        Method first = getNonPublicFirstMethod();
        Method succ = getNonPublicSuccMethod();

        long start = System.currentTimeMillis();
        long end;

        for (long iterations = 0; iterations < Long.MAX_VALUE; iterations++) {
            queue.add("""" + iterations);
            queue.remove("""" + iterations);

            if (iterations % 10000 == 0) {
                end = System.currentTimeMillis();
                System.out.println(""actualSize = "" + actualSize(queue, first, succ) + "", elapsed time = "" + (end - start));
                start = end;
            }
        }
    }

    public static long actualSize(ConcurrentLinkedQueue<String> queue, Method first, Method succ) {
        long b = 0;
        try {
            for (Object node = first.invoke(queue); node != null; node = succ.invoke(queue, node)) {
                ++b;
            }
        } catch (IllegalAccessException | InvocationTargetException e) {
            throw new RuntimeException(e);
        }
        return b;
    }

    public static Method getNonPublicFirstMethod() {
        Method first;
        try {
            first = ConcurrentLinkedQueue.class.getDeclaredMethod(""first"");
        } catch (NoSuchMethodException e) {
            throw new RuntimeException(e);
        }
        first.setAccessible(true);
        return first;
    }

    public static Method getNonPublicSuccMethod() {
        Method succ = null;
        for (Method declaredMethod : ConcurrentLinkedQueue.class.getDeclaredMethods()) {
            if (declaredMethod.getName().equals(""succ"")) {
                succ = declaredMethod;
                break;
            }
        }
        if (succ == null) {
            throw new RuntimeException(""not found"");
        }
        succ.setAccessible(true);
        return succ;
    }
}
```

if ConcurrentLinkedQueue has bug
```bash
[root@0bcfb0e0e13e work]# /home/work/1.8.0_60/bin/java -jar main.jar
elapsed time = 0
elapsed time = 331
elapsed time = 654
elapsed time = 1085
elapsed time = 1536
```
else
```bash
[root@0bcfb0e0e13e work]# /usr/bin/java -jar main.jar
elapsed time = 0
elapsed time = 10
elapsed time = 4
elapsed time = 4
elapsed time = 62
elapsed time = 4
elapsed time = 4
elapsed time = 4
```

You can also test MimeTypeUtils.parseMimeType
```java
public class ServerApplication {

    public static void main(String[] args) {
        String last = """";
        for (int i = 0; i < 64; i++) {
            last = ""video/h"" + i;
            MimeTypeUtils.parseMimeType(last);
        }

        long start = System.currentTimeMillis();
        long end;
        for (int i = 0; i < Integer.MAX_VALUE; i++) {
            MimeTypeUtils.parseMimeType(last);
            if (i % 10000 == 0) {
                end = System.currentTimeMillis();
                System.out.println(""elapsed time = "" + (end - start));
                start = end;
            }
        }
    }
}
```
"
1667,1168573611,snicoll,490484,"I expect the TCF to use it as well. We also want to make sure custom frameworks can build a native image if they chose to. If anything, we should be moving more things to framework. "
1668,1168577166,SuperEdison,84554944,"still error
jdk 17
spring.version 5.3.21
```java
    public static void main(String[] args) {
        BeanCopier beanCopier = BeanCopier.create(A.class, B.class, false);
        System.out.println(beanCopier);
        A a = new A();
    }

    public static class A {

    }

    public static class B {

    }
```
```
Exception in thread ""main"" org.springframework.cglib.core.CodeGenerationException: java.lang.reflect.InaccessibleObjectException-->Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) throws java.lang.ClassFormatError accessible: module java.base does not ""opens java.lang"" to unnamed module @379619aa
	at org.springframework.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:525)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:363)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.beans.BeanCopier$Generator.create(BeanCopier.java:95)
	at org.springframework.cglib.beans.BeanCopier.create(BeanCopier.java:51)
	at com.example.demo.DemoApplication.main(DemoApplication.java:8)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) throws java.lang.ClassFormatError accessible: module java.base does not ""opens java.lang"" to unnamed module @379619aa
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Method.checkCanSetAccessible(Method.java:199)
	at java.base/java.lang.reflect.Method.setAccessible(Method.java:193)
	at org.springframework.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:494)
	... 12 more
```"
1669,1168578085,snicoll,490484,Duplicates https://github.com/spring-projects/spring-framework/issues/25805
1670,1168578419,sdeleuze,141109,Related to #28688.
1671,1168584076,sdeleuze,141109,@christophstrobl Thanks for the hints ;-) What about annotating `ProxyTransactionManagementConfiguration` with `@ImportRuntimeHints(TransactionRuntimeHintsRegistrar.class)` where `TransactionRuntimeHintsRegistrar` would register those entries?
1672,1168603176,sdeleuze,141109,"Seems related to the well-known Jackson modules (here `KotlinModule`) registered in [Jackson2ObjectMapperBuilder#registerWellKnownModulesIfAvailable](https://github.com/spring-projects/spring-framework/blob/efb83fa064b3d3335393defcf6d6fa785c0e3ef6/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java#L816).

There could be Kotlin reflection hints missing as well (but those ones should go in the reachability metadata reprository I think, not sure yet what we do in the interim).

Spring Native [`KotlinHints`](https://github.com/spring-projects-experimental/spring-native/blob/main/spring-native-configuration/src/main/java/kotlin/KotlinHints.java) could be used as a source of inspiration."
1673,1168614094,snicoll,490484,"Please don't register proxies like that, and use registerAnnotation. "
1674,1168630831,jlaber,26191019,Is there a process to get a PR looked at?
1675,1168654037,jhoeller,1263688,We effectively do that for well-known interfaces types already but somehow missed to check for the corresponding implementation classes as well. I might revisit this for 5.3.x even since it's a generally worthwhile optimization.
1676,1168659609,sbrannen,104798,- somewhat related to #28025
1677,1168662039,sbrannen,104798,"Thanks for raising the issue!

This regression has been fixed in `5.3.x` and `main` (and hopefully does not inadvertently introduce another regression).

Please let us know if you experience any issues with the upcoming snapshots.

"
1678,1168700500,pivotal-cla,16822967,"@CodeInDreams Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28719)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28719) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1679,1168702121,pivotal-cla,16822967,@CodeInDreams Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28719)!
1680,1168715848,pivotal-cla,16822967,"@boerzi Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28720)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28720) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1681,1168728293,sdeleuze,141109,Likely depends on #28115.
1682,1168734449,sdeleuze,141109,The blocking scope is limited to individual values so should be fine unless you encode/decode huge amount of data.
1683,1168739548,sbrannen,104798,"Hi @CodeInDreams,

Congratulations on submitting your first PR ever on GitHub!

Unfortunately, this is a breaking change. Furthermore, it reverts the intentional changes made in conjunction with #26227.

In light of that, I am closing this PR."
1684,1168769700,ManikantaGembali,108334663,"Is there any plan to fix the above issue? 

_Note:_ Caffeine AsyncCache can help. But we need to write code manually instead of @cacheable."
1685,1168863677,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
1686,1168922009,bclozel,103264,"As far as I understand, here's the status of this issue: `@Cacheable` is meant as an abstraction model for many caching libraries and APIs, letting you use a common programming model on top of many implementations. In the case of reactive, few vendors support the async model right now so any short term solution we could adopt might not reflect the approach and API semantics chosen by the majority in the future.

In short, if you'd like this issue to make progress, you should reach out to your favorite cache library vendor, ask for async/reactive support, and work with them on the use case."
1687,1168922018,kiranshm973,17679139,"Thank you!

I overlooked few details but I have now updated the demo project with the code setup where the tests work with 5.0.x but fails with 5.3.x.

https://github.com/kiranshm973/spring-transaction-rollback-issue/tree/master/demo

Issue seems to be happening when a `@Transactional` method is overridden. I agree the usage of `Transactional` annotation in the demo project is not optimal but wanted to point you to the behavior. 
"
1688,1169289594,wilkinsona,914682,"Thanks for the report and sample. This problem doesn't have anything to do with Spring Boot itself as it can be reproduced using a pure Spring Framework based test:

```kotlin
package io.github.vootelerotov.testexecutionlistenersnested

import io.github.vootelerotov.testexecutionlistenersnested.TestExecutionListenersNestedApplicationTests.MyTestComponent
import io.github.vootelerotov.testexecutionlistenersnested.TestExecutionListenersNestedApplicationTests.MyTestExecutionListener
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Nested
import org.junit.jupiter.api.Test
import org.springframework.stereotype.Component
import org.springframework.test.context.TestConstructor
import org.springframework.test.context.TestConstructor.AutowireMode.ALL
import org.springframework.test.context.TestContext
import org.springframework.test.context.TestExecutionListener
import org.springframework.test.context.TestExecutionListeners
import org.springframework.test.context.TestExecutionListeners.MergeMode.MERGE_WITH_DEFAULTS
import org.springframework.test.context.TestPropertySource
import org.springframework.test.context.junit.jupiter.SpringJUnitConfig

@SpringJUnitConfig(classes = [MyTestComponent::class])
@TestExecutionListeners(value = [MyTestExecutionListener::class], mergeMode = MERGE_WITH_DEFAULTS)
@TestConstructor(autowireMode = ALL)
class TestExecutionListenersNestedApplicationTests(private val testComponent: MyTestComponent) {

  @Test
  fun worksWithoutNestedClassWithNewContext() {
    assertThat(testComponent.enabled).isTrue
  }

  @Nested
  inner class ClassWithSameContext {

    @Test
    fun noProblemo() {
      assertThat(testComponent.enabled).isTrue
    }
  }

  @Nested
  @TestPropertySource(properties = [""test=true""])
  inner class ClassWithDifferentContext {

    @Test
    fun problemo() {
      assertThat(testComponent.enabled).isTrue
    }
  }

  @Component
  class MyTestComponent(var enabled: Boolean = false)

  class MyTestExecutionListener : TestExecutionListener {

    override fun beforeTestMethod(testContext: TestContext) {
      testContext.applicationContext.getBean(MyTestComponent::class.java).enabled = true
    }

    override fun afterTestMethod(testContext: TestContext) {
      testContext.applicationContext.getBean(MyTestComponent::class.java).enabled = false
    }
  }

}
```

We'll transfer the issue so that the Framework team can take a look."
1689,1169439915,livk-cloud,50291874,"> > > > > A类和B类为空
> > > > 
> > > > 
> > > > > 我正在使用 oracle jdk17.0.2
> > > > 
> > > > 
> > > > > spring 之前已经知道了
> > > 
> > > 
> > > 你能告诉我一个类代码吗？
> > 
> > 
> > ![图片](https://user-images.githubusercontent.com/50291874/176127997-03589fe9-9d29-4a9b-8d6a-6fbd42750d51.png)
> > ![图片](https://user-images.githubusercontent.com/50291874/176128034-3e129239-978c-4504-bac9-e64c554c9cb3.png)
> 
> 我改变了oracle jdk17，仍然错误。 我不知道解决它。 你添加--add-opens java.base/java.lang=ALL-UNNAMED 参数吗？

> No, I use the default parameters of the idea, I think you should use @Test instead of the Main method"
1690,1169453014,CodeInDreams,17664279,"> Hi @CodeInDreams,
> 
> Congratulations on submitting your first PR ever on GitHub!
> 
> Unfortunately, this is a breaking change. Furthermore, it reverts the intentional changes made in conjunction with #26227.
> 
> In light of that, I am closing this PR.

Then we should either use `@Qualifier` or not to use autowiring. @sbrannen If agree with me, which do you prefer?"
1691,1169755804,rstoyanchev,401908,"Parsed patterns are now enabled by default in Spring MVC. This means, each `HandlerMapping`, or rather every subclass of `AbstractHandlerMapping` has a `PathPatternParser` instance, and that effectively means parsed patterns are used instead of String path matching with `AntPathMatcher`. 

To minimize unnecessary breakage where intentions are clear, String path matching is still enabled through the MVC config, when either of the following is true:
- `PathPatternParser` is not explicitly set, while `AntPathMatcher` or `UrlPathHelper` related options are customized.
- `PathPatternParser` is explicitly set to `null`.

Further steps have also been taken to minimize failures in existing tests. For example the URL path is parsed per handler lookup if not called by the `DispacherServlet`, which pre-parses and caches the path. Likewise, `MockHttpServletRequest` detects a Servlet path mapping, to ensure a Servlet path prefix is taken into account.


"
1692,1169885974,sbrannen,104798,"This omission is intentional. These two specific properties are not considered ""supported"", and the table in the appendix ""lists all currently supported Spring properties"".

However, since these unsupported properties have existed for a while and are used in conjunction with applications running within a native image, the team will revisit this topic."
1693,1169930819,jhoeller,1263688,Looks like a strict instance-of check where we should be using `isAssignableValue` as we do in other places.
1694,1169934622,sdeleuze,141109,"Let's maybe decide what we do on Spring Framework 6 timeframe for those, the ideal outcome would be to remove those flags, removing the need for documentation."
1695,1169958728,sbrannen,104798,"> This looks like a bug to me, or am I missing something?

This is not a bug. It is the expected behavior.

The enclosing test class instance is injected with beans from its own `ApplicationContext`, not with beans from the `ApplicationContext` of a nested test class or subclass. The same holds true for any test class.

Similarly, a `TestExecutionListener` is provided access to the `ApplicationContext` for the test class with which the listener is associated.

Thus, when the `MyTestExecutionListener` is invoked for `ClassWithDifferentContext`, `testContext.getApplicationContext().getBean(MyTestComponent.class)` accesses the `MyTestComponent` bean in the `ApplicationContext` for `ClassWithDifferentContext`.

But... the `testComponent` field/property is injected from the `ApplicationContext` for `TestExecutionListenersNestedApplicationTests`.

So your test method and your listener are interacting with different instances of `MyTestComponent` from different application contexts.

The following modified (and converted to Java) version of your example demonstrates this.

```java
@SpringJUnitConfig(MyTestComponent.class)
@TestExecutionListeners(listeners = MyTestExecutionListener.class, mergeMode = MERGE_WITH_DEFAULTS)
@TestConstructor(autowireMode = ALL)
class TestExecutionListenersNestedApplicationTests {

	private final MyTestComponent testComponent;

	TestExecutionListenersNestedApplicationTests(MyTestComponent testComponent) {
		this.testComponent = testComponent;
	}

	@Test
	void worksWithoutNestedClassWithNewContext() {
		assertThat(testComponent.enabled).isTrue();
	}

	@Nested
	class ClassWithSameContext {
		@Test
		void noProblemo() {
			assertThat(testComponent.enabled).isTrue();
		}
	}

	@Nested
	@TestPropertySource(properties = ""test=true"")
	class ClassWithDifferentContext {

		private final MyTestComponent localTestComponent;

		ClassWithDifferentContext(MyTestComponent testComponent) {
			this.localTestComponent = testComponent;
		}

		@Test
		void problemo() {
			assertThat(testComponent.enabled).isFalse();
			assertThat(localTestComponent.enabled).isTrue();
		}
	}

	@Component
	static class MyTestComponent {

		private boolean enabled;

		boolean isEnabled() {
			return enabled;
		}

		void setEnabled(boolean enabled) {
			this.enabled = enabled;
		}
	}

	static class MyTestExecutionListener implements TestExecutionListener {
		@Override
		public void beforeTestMethod(TestContext testContext) {
			testContext.getApplicationContext().getBean(MyTestComponent.class).setEnabled(true);
		}

		@Override
		public void afterTestMethod(TestContext testContext) {
			testContext.getApplicationContext().getBean(MyTestComponent.class).setEnabled(false);
		}
	}

}
```

Specifically, the `problemo()` test method asserts that the _local_ `MyTestComponent` did in fact have its `enabled` flag set to `true` by the `TestExecutionListener`.

----

The only way to access the `ApplicationContext` of a different test class from a Spring `TestExecutionListener` is by creating a new `TestContextManager` for the specific class. The following demonstrates how you could interact with the context for the enclosing class, which would make your original test pass.

```java
@Override
public void beforeTestMethod(TestContext testContext) {
	new TestContextManager(TestExecutionListenersNestedApplicationTests.class)
		.getTestContext().getApplicationContext().getBean(MyTestComponent.class).setEnabled(true);
}
```

However, if you choose to implement a JUnit Jupiter extension instead of a Spring `TestExecutionListener` you can come up with a cleaner (though admittedly more involved) solution. If you completely remove your custom `TestExecutionListener` and add the following `BeforeEachCallback` and `AfterEachCallback` extensions to `TestExecutionListenersNestedApplicationTests`, you'll see that your original tests pass.

```java
@RegisterExtension
BeforeEachCallback enableComponentExtension = context ->
	getApplicationContextForTopLevelTestClass(context).getBean(MyTestComponent.class).setEnabled(true);

@RegisterExtension
AfterEachCallback disableComponentExtension = context ->
	getApplicationContextForTopLevelTestClass(context).getBean(MyTestComponent.class).setEnabled(false);
```

There's no built-in support for `getApplicationContextForTopLevelTestClass()`, but the following proof of concept (which should be simplified) demonstrates that it's _possible_.

```java
private static ApplicationContext getApplicationContextForTopLevelTestClass(ExtensionContext context) {
	List<Object> enclosingInstances = context.getRequiredTestInstances().getEnclosingInstances();
	if (enclosingInstances.isEmpty()) {
		return SpringExtension.getApplicationContext(context);
	}
	else {
		Class<?> topLevelTestClass = enclosingInstances.get(0).getClass();
		ExtensionContext parent = context.getParent().orElse(null);
		while (parent != null) {
			if (parent.getRequiredTestClass().equals(topLevelTestClass)) {
				break;
			}
			parent = parent.getParent().orElse(null);
		}
		return SpringExtension.getApplicationContext(parent);
	}
}
```

In light of the above, I am closing this issue.

Though if you have any further questions, feel free to ask."
1696,1169983278,vootelerotov,1439555,">Thus, when the MyTestExecutionListener is invoked for ClassWithDifferentContext, testContext.getApplicationContext().getBean(MyTestComponent.class) accesses the MyTestComponent bean in the ApplicationContext for ClassWithDifferentContext.

>But... the testComponent field/property is injected from the ApplicationContext for TestExecutionListenersNestedApplicationTests.

This seems to be what I missed in my mental model. Makes sense.

@sbrannen, thanks for taking the time to give a very thorough answer. "
1697,1170064585,chrgue,17281422,"Hi @Qingyu-Limitless,
could you explain how you fixed your problem?

Thanks in advance,
Chris"
1698,1170106552,rstoyanchev,401908,"The trailing slash option is now deprecated and set to `false` in all applicable places. The change applies mainly to annotated controllers, since `SimpleUrlHandlerMapping`, it turns out, was already set to `false` by default. Nevertheless, it's now deprecated throughout and to be removed eventually."
1699,1170706032,SuperEdison,84554944,"i try many way to solve this problem, but any way had fail "
1700,1170864354,membersound,5269630,Still no news on this?
1701,1170923035,sdeleuze,141109,Merged via 89a6101b2ed73a97c70e3e0b2b98e68ce1144757.
1702,1171168111,bclozel,103264,"[Spring Flex is not active and there is no official support for it](https://github.com/spring-attic/spring-flex). This has been the case for many years now.
As a result, there is no version compatible with Spring Framework 5."
1703,1171178877,sbrannen,104798,"Related Issues:

- #26227"
1704,1171182959,sbrannen,104798,"Your `EventPublisherKt` resides in the `event.annotation` package, not in the `org.example` package which you've configured via `@ComponentScan(""org.example"")`.

Make sure your directory structure matches your package names.

In light of that, I'm closing this issue. "
1705,1171194995,sbrannen,104798,"This has been merged into `5.3.x` and `main` in fe2b8580a0a428116f99515246d1af222ecc4329.

Thanks"
1706,1171212142,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
1707,1171221709,sdeleuze,141109,"Notice I had to add Kotlin hints via https://github.com/spring-projects-experimental/spring-native/commit/3392357741671f29b5934a000f5d7c34070eadc0 to make it work, this will go to the reachability repo or better we could ask Kotlin team to ship that out of the box."
1708,1171227067,rstoyanchev,401908,This issue should be filed in [Spring Web Services](https://github.com/spring-projects/spring-ws). @poutsma are you able to transfer it?
1709,1171251194,rstoyanchev,401908,"Which is the underlying HTTP client library? I'm not sure why the `InputStream` raises an exception rather than returning -1. Also wondering why the response is treated as not empty. Could you share the response details, including status and headers? "
1710,1171273374,davidvieiratrustly,80408183,"I've tested with Apache Http Client (HttpComponentsClientHttpRequestFactory), OkHttp(OkHttp3ClientHttpRequestFactory) and SimpleJDK(SimpleClientHttpRequestFactory). The first two fail, while the Simple JDK works as inteded.

You can check the full test in this repo: https://github.com/davidvieiratrustly/RestTemplateGzipBug/blob/main/src/test/java/com/example/demo/Demo1ApplicationTests.java

<img width=""636"" alt=""Screenshot 2022-06-30 at 15 12 19"" src=""https://user-images.githubusercontent.com/80408183/176699480-974a3bca-0b1c-4284-a6f8-e4c0ec7d9d59.png"">

Also, everything works as expected in the new WebClient; it only fails for RestTemplate with OkHTTP and Apache HTTP Client.

Thank you in advance 🙏 "
1711,1171274140,sbrannen,104798,"That's correct.

Currently, `MockHttpServletResponse.getCookieHeader(Cookie)` does not include the value from `jakarta.servlet.http.Cookie.getComment()`.

The counterpart to this issue is that `MockCookie.parse(String)` does not parse the `Comment` attribute.

So we have to fix it on both sides."
1712,1171328893,sbrannen,104798,This has been addressed for 5.3.22 and 6.0 M5 in 9ea45697ac5f99bd8f62a8391bdec4bbe35efab1.
1713,1171396815,poutsma,330665,"> This issue should be filed in [Spring Web Services](https://github.com/spring-projects/spring-ws). @poutsma are you able to transfer it?

Unfortunately I do not seem to have the necessary rights to do so.

@scolem, could you please re-recreate this issue in the [Spring-WS](https://github.com/spring-projects/spring-ws/issues) issue tracker?"
1714,1171420857,charlesk40,1407158,Great. Thank you!
1715,1171498629,SchroedingersGitHub,59590288,"@sbrannen 
:joy:
thanks!!!"
1716,1172099112,sbrannen,104798,"This has been merged into `5.3.x` and `main`.

Thanks"
1717,1172108075,sbrannen,104798,"@marcusdacoregio, why are you registering both a JDK **and** a Class proxy in the `else` block?

https://github.com/marcusdacoregio/spring-native/blob/0c96a5ef43e5eb54b9bafec95992349f418da637/samples/security-method/src/main/java/com/example/methodsecurity/PrePostSecuredBeanRegistrationAotProcessor.java#L107-L108

What happens if you delete line 107 (`registerJdkProxy`)?

"
1718,1172259011,marcusdacoregio,13255302,"Hi @sbrannen, if I remove that line the error changes to this:
```
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'controller2': Proxy class defined by interfaces [interface org.springframework.aop.SpringProxy, interface org.springframework.aop.framework.Advised, interface org.springframework.core.DecoratingProxy] not found. Generating proxy classes at runtime is not supported. Proxy classes need to be defined at image build time by specifying the list of interfaces that they implement. To define proxy classes use -H:DynamicProxyConfigurationFiles=<comma-separated-config-files> and -H:DynamicProxyConfigurationResources=<comma-separated-config-resources> options.
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:611) ~[security-method:6.0.0-SNAPSHOT]
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:526) ~[security-method:6.0.0-SNAPSHOT]
        at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326) ~[security-method:6.0.0-SNAPSHOT]
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[security-method:6.0.0-SNAPSHOT]
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324) ~[security-method:6.0.0-SNAPSHOT]
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) ~[security-method:6.0.0-SNAPSHOT]
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:930) ~[security-method:6.0.0-SNAPSHOT]
        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:926) ~[security-method:6.0.0-SNAPSHOT]
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:592) ~[security-method:6.0.0-SNAPSHOT]
        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[security-method:3.0.0-SNAPSHOT]
        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:729) ~[security-method:3.0.0-SNAPSHOT]
        at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:428) ~[security-method:3.0.0-SNAPSHOT]
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:310) ~[security-method:3.0.0-SNAPSHOT]
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1301) ~[security-method:3.0.0-SNAPSHOT]
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1290) ~[security-method:3.0.0-SNAPSHOT]
        at com.example.methodsecurity.MethodSecurityApplication.main(MethodSecurityApplication.java:19) ~[security-method:0.0.1-SNAPSHOT]
Caused by: com.oracle.svm.core.jdk.UnsupportedFeatureError: Proxy class defined by interfaces [interface org.springframework.aop.SpringProxy, interface org.springframework.aop.framework.Advised, interface org.springframework.core.DecoratingProxy] not found. Generating proxy classes at runtime is not supported. Proxy classes need to be defined at image build time by specifying the list of interfaces that they implement. To define proxy classes use -H:DynamicProxyConfigurationFiles=<comma-separated-config-files> and -H:DynamicProxyConfigurationResources=<comma-separated-config-resources> options.
        at com.oracle.svm.core.util.VMError.unsupportedFeature(VMError.java:89) ~[na:na]
        at com.oracle.svm.reflect.proxy.DynamicProxySupport.getProxyClass(DynamicProxySupport.java:158) ~[na:na]
        at java.lang.reflect.Proxy.getProxyConstructor(Proxy.java:48) ~[security-method:na]
        at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:1037) ~[security-method:na]
        at org.springframework.aop.framework.JdkDynamicAopProxy.getProxy(JdkDynamicAopProxy.java:126) ~[na:na]
        at org.springframework.aop.framework.ProxyFactory.getProxy(ProxyFactory.java:110) ~[na:na]
        at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.createProxy(AbstractAutoProxyCreator.java:480) ~[security-method:0.0.1-SNAPSHOT]
        at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:344) ~[security-method:0.0.1-SNAPSHOT]
        at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:293) ~[security-method:0.0.1-SNAPSHOT]
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:440) ~[security-method:6.0.0-SNAPSHOT]
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1756) ~[security-method:6.0.0-SNAPSHOT]
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:604) ~[security-method:6.0.0-SNAPSHOT]
        ... 15 common frames omitted

```"
1719,1172289676,adrianbob,24224359,"Hey,
I'm new to open source contributing. Please let me know if it would be ok to open a PR for this issue for removing those properties. Thanks!"
1720,1172379689,sbrannen,104798,"Hi @adrianbob,

Thanks for the offer.

Please note, however, that this is an issue that will be decided within the core team.

In light of that, a PR for removal would not be appropriate at this time."
1721,1172417082,sbrannen,104798,"Thanks for trying it out and reporting back.

Both of the errors point to the same underlying issue.

The first error tells us that you got back a dynamic proxy instead of class-based proxy.

The second error tells us that a dynamic proxy could not be created for the interfaces `SpringProxy, `Advised`, and DecoratingProxy`, but Spring should never attempt to create a JDK dynamic proxy based solely on those three interfaces. Rather, the dynamic proxy must implement the user's interface(s) as well.

`Controller2` does not implement any interfaces. So in order to proxy it for `@PreAuthorize` support, Spring has to create a class-based proxy.

I have _not_ debugged your application, but both of these errors point to `org.springframework.aop.framework.DefaultAopProxyFactory.createAopProxy(AdvisedSupport)`.

Specifically, if `NativeDetector.inNativeImage()` returns `true`, `DefaultAopProxyFactory` will create a `JdkDynamicAopProxy` instead of a `ObjenesisCglibAopProxy`.

In summary, I think this is effectively a duplicate of #28115, but I will leave it open for @jhoeller to assess once he addresses #28115.



"
1722,1172459611,bclozel,103264,"I've just found this while browing the code @rstoyanchev :

https://github.com/spring-projects/spring-framework/blob/50240bb609b6441390d436005a7f2e7a4cdf5454/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java#L85

Should this value be changed as well?"
1723,1172461780,rstoyanchev,401908,"Looks like it, yes."
1724,1172571338,toohandsome,46422252,"If my proposal is feasible, I can submit a PR to fix this problem"
1725,1172682552,bclozel,103264,"What do you mean by ""they are not collected""? Are those never cleaned by the garbage collector? Do you know what's keeping a reference to those? Did you connect the application to a profiler? If you gathered information there, could you join them to this issue?"
1726,1172687092,LoganEarl,18126722,"Yea, I have a heap dump handy. Here 
![Screen Shot 2022-07-01 at 1 15 54 PM](https://user-images.githubusercontent.com/18126722/176963121-ec973859-8283-4e03-b61e-0b0bd264a312.png)
It looks like I might have barked up the wrong tree, I see reactor netty keeping references. "
1727,1172854326,bclozel,103264,"@LoganEarl that's strange, this shouldn't be keeping references. Are those weak references maybe? Do they go away if you trigger the GC manually in your profiler?"
1728,1172854753,bclozel,103264,Thanks @izeye !
1729,1172882010,sbrannen,104798,"Thanks for the suggestion.

However, the current arrangement is intentional and optimized for performance.

In light of that, we will keep the limited code duplication in place."
1730,1172903460,snicoll,490484,"We can't really do that, can we? Spring AOP is higher in the dependency tree. Perhaps something along the lines of RuntimeHintsUtils, but for SpringAopProxy?

I am afk but perhaps AopUtils could be used?"
1731,1172908496,pivotal-cla,16822967,"@819635822 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28746)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28746) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1732,1172908624,pivotal-cla,16822967,@819635822 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28746)!
1733,1172910026,izeye,1059363,"It's a regression that's not shipped yet, so considering that release notes are generated based on labels, this might be better to be tagged as `type: task`. IIRC I saw a similar situation that's been handled that way in the Spring Boot repo."
1734,1172911445,sbrannen,104798,"> Spring AOP is higher in the dependency tree.

That's a good point. We definitely cannot refer to the `Class` references, and it does unfortunately seem a bit out of place to be talking about Spring AOP in Spring Core.

> We can't really do that, can we?

Well, by using the class names we can implement it like this:

```java
public ProxyHints registerSpringAopJdkProxy(Class<?>... proxiedInterfaces) {
    return registerJdkProxy(jdkProxyHint -> {
        jdkProxyHint.proxiedInterfaces(proxiedInterfaces);
        jdkProxyHint.proxiedInterfaces(
            TypeReference.of(""org.springframework.aop.SpringProxy""),
            TypeReference.of(""org.springframework.aop.framework.Advised""),
            TypeReference.of(""org.springframework.core.DecoratingProxy""));
    });
}
```

> Perhaps something along the lines of RuntimeHintsUtils, but for SpringAopProxy?

Sure. If we don't want to use the class name based approach I pasted above, we could introduce something along the lines of `RuntimeHintsUtils` for Spring AOP proxies in `spring-aop`.


> I am afk but perhaps AopUtils could be used?

Not that I'm aware of."
1735,1172911928,sbrannen,104798,"Good catch, @izeye!

I'll change the label. 👍 
"
1736,1172912785,sbrannen,104798,"> origin unit test will cause bug when get a resource with unknown protocol

The unit test in question passes unmodified.

Can you please explain why you think this is a bug?

"
1737,1172918124,jasonjiang9527,20434877,"In the current code, the line `Resource resource = context.getResource(pingLocation);` will throw an `InvalidPathException` on Microsoft Windows, because the context doesn't know how to resolve the `ping` protocol yet.

Here is the stack trace:

```
Illegal char <:> at index 4: ping:foo
java.nio.file.InvalidPathException: Illegal char <:> at index 4: ping:foo
	at java.base/sun.nio.fs.WindowsPathParser.normalize(WindowsPathParser.java:182)
	at java.base/sun.nio.fs.WindowsPathParser.parse(WindowsPathParser.java:153)
	at java.base/sun.nio.fs.WindowsPathParser.parse(WindowsPathParser.java:77)
	at java.base/sun.nio.fs.WindowsPath.parse(WindowsPath.java:92)
	at java.base/sun.nio.fs.WindowsFileSystem.getPath(WindowsFileSystem.java:232)
	at java.base/java.io.File.toPath(File.java:2387)
	at org.springframework.core.io.FileSystemResource.<init>(FileSystemResource.java:83)
	at org.springframework.core.io.FileSystemResourceLoader$FileSystemContextResource.<init>(FileSystemResourceLoader.java:65)
	at org.springframework.core.io.FileSystemResourceLoader.getResourceByPath(FileSystemResourceLoader.java:54)
	at org.springframework.core.io.DefaultResourceLoader.getResource(DefaultResourceLoader.java:170)
	at org.springframework.context.support.GenericApplicationContext.getResource(GenericApplicationContext.java:245)
	at org.springframework.context.support.GenericApplicationContextTests.assertGetResourceSemantics(GenericApplicationContextTests.java:256)
	at org.springframework.context.support.GenericApplicationContextTests.getResourceWithCustomResourceLoader(GenericApplicationContextTests.java:245)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:725)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)
	at org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:214)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:210)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:135)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:99)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:79)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:75)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
	at jdk.proxy1/jdk.proxy1.$Proxy2.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)

```"
1738,1172920304,sbrannen,104798,"I think the change in behavior might be a result of commit 42d6d7ec4e2ddabc9c50dab6d6ac572ef46d2a6a, due to the switch from `getMergedAnnotationAttributes` to `findMergedAnnotationAttributes`, but I have yet to verify that.

I just wanted to leave that note here in case somebody else investigates in depth before I do."
1739,1172920655,sbrannen,104798,"Ahhhh... then it appears to be an issue when running the test on Microsoft Windows, since that error does not occur on Mac OS or Linux.

Thanks for raising the issue!"
1740,1172935899,snicoll,490484,"I believe that is a regression of how BeanDefinitions are registered.

Previously, we would use the resolved factory method as an input for the bean definition and I think this has been lost for beans that do not need autowiring as it seems to be [autowiring specific now](https://github.com/spring-projects/spring-framework/blob/279f55fdfa1659897086331cb960f31c627affe3/spring-beans/src/main/java/org/springframework/beans/factory/aot/AutowiredInstantiationArgumentsResolver.java#L237)."
1741,1173019442,aooohan,40265686,"@sbrannen  hi,Sam. Does this issue need to be achieved? I personally think it would be more flexible to provide a method to add a Module separately, if it need to be implemented, can I be assigned? I would be happy to provide PR."
1742,1173040341,chirag-ji,35477634,"I've also getting this, but adding `jsr305` worked.

I wonder why it is not working as it was available as a `transitive dependency` in the `classpath`, but working fine after adding it as 'direct dependency`. Any one please share some views on it.

"
1743,1173070670,sbrannen,104798,"Thanks for getting in touch, but we don't track metrics like that.

As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements.

In light of that, I am closing this issue."
1744,1173080237,sbrannen,104798,"This has been merged into `5.3.x` and `main` in  59180e76a7b35f060c056c2f44edc59d6e63a6ca.

Thanks!

----

Please note that I revised the approach in e608b367135fe232d359bd878085e609d2465a17 so that we are actually testing what happens with a `ping:` protocol before the `PingPongProtocolResolver` is registered, which is one of the main goals of those tests.

So, @jasonjiang9527, if you could confirm that the revised tests also pass on your Windows machine I would be very grateful."
1745,1173082414,sbrannen,104798,"@aooohan, we will discuss within the team whether we wish to add such a method.

Please note that the `waiting-for-triage` label signals that the team has not yet reached a decision on the issue."
1746,1173085886,aooohan,40265686,"> @aooohan, we will discuss within the team whether we wish to add such a method.
> 
> Please note that the `waiting-for-triage` label signals that the team has not yet reached a decision on the issue.

Alright, thank you for your reply."
1747,1173096779,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
1748,1173100550,jasonjiang9527,20434877,"@sbrannen, the test `getResourceWithDefaultResourceLoader` gets a problem after you commit e608b367135fe232d359bd878085e609d2465a17.

code:

```java
        //not pass  
	@Test
	void getResourceWithDefaultResourceLoader() {
		assertGetResourceSemantics(null, ClassPathResource.class);
	}
        //pass
	@Test
	void getResourceWithCustomResourceLoader() {
		assertGetResourceSemantics(new FileSystemResourceLoader(), FileSystemResource.class);
	}
```

Here is my explanation: 

If you don't set `ResourceLoader` for `context` , `context` will use `DefaultResourceLoader` resolve the filePath as `ClassPathContextResource` , but `new ClassPathContextResource(path,classLoader)` does not check this path is or not `a real file`.

```java
	public ClassPathResource(String path, @Nullable ClassLoader classLoader) {
		Assert.notNull(path, ""Path must not be null"");
		String pathToUse = StringUtils.cleanPath(path);
		if (pathToUse.startsWith(""/"")) {
			pathToUse = pathToUse.substring(1);
		}
		this.path = pathToUse;
		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader());
	}
```

However, with a `FileSystemResourceLoader` , it checks the `filePath` immediately:

```java
	public FileSystemResource(String path) {
		Assert.notNull(path, ""Path must not be null"");
		this.path = StringUtils.cleanPath(path);
                //immediately
		this.file = new File(path);
		this.filePath = this.file.toPath();
	}
```

Maybe it needs to consider whether to keep the same construct logic between different `Resource` types.
"
1749,1173106873,sbrannen,104798,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug.

----

The above is our standard policy for questions; however, the following should hopefully answer your question.

> I don't know why the bean name of Imported configuration class is not the same with the component-scan (`AnnotationBeanNameGenerator#buildDefaultBeanName`)?

By default, components loaded via `@Import` and `@ComponentScan`/`<context:component-scan />` have different `BeanNameGenerator` strategies applied to them, `FullyQualifiedAnnotationBeanNameGenerator` and `AnnotationBeanNameGenerator` respectively.

If you want `englishCat` to be the generated bean name and to avoid duplicate registration, you can add the following line to `ApplicationLoader`'s `main()` method.

```java
application.setBeanNameGenerator(AnnotationBeanNameGenerator.INSTANCE);
```

If you want `com.meituan.mdp.module2.EnglishCat` to be the generated bean name and to avoid duplicate registration, you can configure the component scanning in your XML file as follows.

```xml
<context:component-scan base-package=""com.meituan.mdp.module2""
	name-generator=""org.springframework.context.annotation.FullyQualifiedAnnotationBeanNameGenerator"" />
```

Both of these approaches will ensure that component scanning and `@Import` use the same `BeanNameGenerator` strategy.

In light of the above, I am closing this issue."
1750,1173109143,sbrannen,104798,"Hi @jasonjiang9527,

Thanks a lot for trying it out and providing detailed feedback!

I'll see if I can fix it once and for all, and I apologize for the inconvenience."
1751,1173124327,jasonjiang9527,20434877,"@sbrannen 
Thanks a lot for your grammar corrections too."
1752,1173128832,sbrannen,104798,"> Maybe it needs to consider whether to keep the same construct logic between different `Resource` types.

I updated the logic in d1d6eb095e5af75ac80bd5050bf2c50f9ce97077.

Please let me know if you still run into any issues on Windows."
1753,1173150658,sbrannen,104798,"@bclozel, since you just recently introduced `RuntimeHintsAgentCondition`, I wanted to run this by you (in the form of a PR) before pushing to `main`."
1754,1173156092,sbrannen,104798,"By the way, if you're concerned about reduced diagnostics as a result of this change, I just pushed https://github.com/junit-team/junit5/commit/73d868ce0f09ddb225882062afb174a263dfa7c7 to address that."
1755,1173173072,snicoll,490484,paging @philwebb 
1756,1173173861,snicoll,490484,"> Well, by using the class names we can implement it like this:

That sounds like hiding a conceptual cycle to me.

> Sure. If we don't want to use the class name based approach I pasted above, 

Are we doing this elsewhere, except in Javadoc links?

> Not that I'm aware of.

How do you mean? I believe `AopUtils#registerAopProxyHints(Class<?>... proxiedInterfaces)` could be  a possibility."
1757,1173589372,mdzhigarov,1481379,"Same issue here. Happens on customer's production environment intermittently every once in a while. 
We enabled the TRACE logging on Netty level and the logs clearly show that the message is being dropped on Server Side:
```
2022-06-30T18:49:22.777Z DEBUG project-service [host='project-service-app-679cf4b45d-9vmnt' thread='reactor-http-epoll-5' user='svc-tfe-p-vra2' org='797ddc2a-b8af-4c12-b23a-593e6300ca86' trace='ce5e92fa-1d0c-46e2-92c5-78249a33ec48' parent='bbaa7c50-777f-44e7-8c1b-dcd2f14455e2' span='0f8b7d5e-537e-49f1-a158-e9597eef72d7'] r.n.channel.ChannelOperationsHandler.debug:250 - [8deeb8b4, L:/10.244.0.106:8080 - R:/10.244.0.107:55756] No ChannelOperation attached. Dropping: 
	         +-------------------------------------------------+
	         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |
	+--------+-------------------------------------------------+----------------+
	|00000000| 47 45                                           |GE              |
	+--------+-------------------------------------------------+----------------+
2022-06-30T18:49:22.777Z DEBUG project-service [host='project-service-app-679cf4b45d-9vmnt' thread='reactor-http-epoll-5' user='svc-tfe-p-vra2' org='797ddc2a-b8af-4c12-b23a-593e6300ca86' trace='ce5e92fa-1d0c-46e2-92c5-78249a33ec48' parent='bbaa7c50-777f-44e7-8c1b-dcd2f14455e2' span='0f8b7d5e-537e-49f1-a158-e9597eef72d7'] r.n.http.server.HttpServerOperations.debug:250 - [8deeb8b4, L:/10.244.0.106:8080 - R:/10.244.0.107:55756] Increasing pending responses, now 1
2022-06-30T18:49:22.778Z DEBUG project-service [host='project-service-app-679cf4b45d-9vmnt' thread='reactor-http-epoll-5' user='svc-tfe-p-vra2' org='797ddc2a-b8af-4c12-b23a-593e6300ca86' trace='ce5e92fa-1d0c-46e2-92c5-78249a33ec48' parent='bbaa7c50-777f-44e7-8c1b-dcd2f14455e2' span='0f8b7d5e-537e-49f1-a158-e9597eef72d7'] reactor.netty.http.server.HttpServer.debug:250 - [8deeb8b4-20, L:/10.244.0.106:8080 - R:/10.244.0.107:55756] Handler is being applied: org.springframework.http.server.reactive.ReactorHttpHandlerAdapter@72c237cc
2022-06-30T18:49:22.780Z DEBUG project-service [host='project-service-app-679cf4b45d-9vmnt' thread='reactor-http-epoll-5' user='provisioning-1etgGQszMTg23xq2(ADM-LAMORI)' org='797ddc2a-b8af-4c12-b23a-593e6300ca86' trace='fa24c1dd-c9c1-42d0-b7fe-55fa71776924' parent='5ba7c4f0-d3ab-4058-80fc-533b2d6523b3' span='9b055f77-8de5-4164-8331-785e41ff5008'] r.n.http.server.HttpServerOperations.debug:250 - [8deeb8b4-20, L:/10.244.0.106:8080 - R:/10.244.0.107:55756] Decreasing pending responses, now 0
2022-06-30T18:49:22.781Z INFO project-service [host='project-service-app-679cf4b45d-9vmnt' thread='reactor-http-epoll-5' user='provisioning-1etgGQszMTg23xq2(ADM-LAMORI)' org='797ddc2a-b8af-4c12-b23a-593e6300ca86' trace='fa24c1dd-c9c1-42d0-b7fe-55fa71776924' parent='5ba7c4f0-d3ab-4058-80fc-533b2d6523b3' span='9b055f77-8de5-4164-8331-785e41ff5008'] reactor.netty.http.server.AccessLog.info:270 - 10.244.0.107 - - [30/Jun/2022:18:49:22 +0000] ""T /project-service/api/projects/21dfa050-7e19-4112-acbf-db32f6c34b63 HTTP/1.1"" 405 327 8080 4 ms
2022-06-30T18:49:22.782Z DEBUG project-service [host='project-service-app-679cf4b45d-9vmnt' thread='reactor-http-epoll-5' user='provisioning-1etgGQszMTg23xq2(ADM-LAMORI)' org='797ddc2a-b8af-4c12-b23a-593e6300ca86' trace='fa24c1dd-c9c1-42d0-b7fe-55fa71776924' parent='5ba7c4f0-d3ab-4058-80fc-533b2d6523b3' span='9b055f77-8de5-4164-8331-785e41ff5008'] r.n.http.server.HttpServerOperations.debug:245 - [8deeb8b4-20, L:/10.244.0.106:8080 - R:/10.244.0.107:55756] Last HTTP packet was sent, terminating the channel
2022-06-30T18:49:22.782Z DEBUG project-service [host='project-service-app-679cf4b45d-9vmnt' thread='reactor-http-epoll-5' user='provisioning-1etgGQszMTg23xq2(ADM-LAMORI)' org='797ddc2a-b8af-4c12-b23a-593e6300ca86' trace='fa24c1dd-c9c1-42d0-b7fe-55fa71776924' parent='5ba7c4f0-d3ab-4058-80fc-533b2d6523b3' span='9b055f77-8de5-4164-8331-785e41ff5008'] r.n.http.server.HttpServerOperations.debug:245 - [8deeb8b4-20, L:/10.244.0.106:8080 - R:/10.244.0.107:55756] Last HTTP response frame
2022-06-30T18:49:22.783Z TRACE project-service [host='project-service-app-679cf4b45d-9vmnt' thread='reactor-http-epoll-5' user='provisioning-1etgGQszMTg23xq2(ADM-LAMORI)' org='797ddc2a-b8af-4c12-b23a-593e6300ca86' trace='fa24c1dd-c9c1-42d0-b7fe-55fa71776924' parent='5ba7c4f0-d3ab-4058-80fc-533b2d6523b3' span='9b055f77-8de5-4164-8331-785e41ff5008'] reactor.netty.channel.ChannelOperations.trace:235 - [8deeb8b4, L:/10.244.0.106:8080 - R:/10.244.0.107:55756] Disposing ChannelOperation from a channel
	
```

The same channel 8deeb8b4 was used 12 seconds earlier for another GET request which completed successfully:

```
2022-06-30T18:49:10.911Z DEBUG project-service [host='project-service-app-679cf4b45d-9vmnt' thread='reactor-http-epoll-5' user='svc-tfe-p-vra2' org='797ddc2a-b8af-4c12-b23a-593e6300ca86' trace='ce5e92fa-1d0c-46e2-92c5-78249a33ec48' parent='52edb9f6-da0f-49b6-a134-b06e10f385c3' span='a4ae8a6e-87d9-440a-a55b-a735fb9aec60'] r.n.http.server.HttpServerOperations.debug:250 - [8deeb8b4, L:/10.244.0.106:8080 - R:/10.244.0.107:55756] Increasing pending responses, now 1
2022-06-30T18:49:10.911Z DEBUG project-service [host='project-service-app-679cf4b45d-9vmnt' thread='reactor-http-epoll-5' user='svc-tfe-p-vra2' org='797ddc2a-b8af-4c12-b23a-593e6300ca86' trace='ce5e92fa-1d0c-46e2-92c5-78249a33ec48' parent='52edb9f6-da0f-49b6-a134-b06e10f385c3' span='a4ae8a6e-87d9-440a-a55b-a735fb9aec60'] reactor.netty.http.server.HttpServer.debug:250 - [8deeb8b4-19, L:/10.244.0.106:8080 - R:/10.244.0.107:55756] Handler is being applied: org.springframework.http.server.reactive.ReactorHttpHandlerAdapter@72c237cc
2022-06-30T18:49:10.912Z INFO project-service [host='project-service-app-679cf4b45d-9vmnt' thread='reactor-http-epoll-5' user='svc-tfe-p-vra2' org='797ddc2a-b8af-4c12-b23a-593e6300ca86' trace='ce5e92fa-1d0c-46e2-92c5-78249a33ec48' parent='bbaa7c50-777f-44e7-8c1b-dcd2f14455e2' span='0f8b7d5e-537e-49f1-a158-e9597eef72d7'] c.v.a.c.LocalUserPermissionsRetriever.retrieveUserPermissions:33 - retrieving user permissions
2022-06-30T18:49:10.913Z INFO project-service [host='project-service-app-679cf4b45d-9vmnt' thread='reactor-http-epoll-5' user='svc-tfe-p-vra2' org='797ddc2a-b8af-4c12-b23a-593e6300ca86' trace='ce5e92fa-1d0c-46e2-92c5-78249a33ec48' parent='bbaa7c50-777f-44e7-8c1b-dcd2f14455e2' span='0f8b7d5e-537e-49f1-a158-e9597eef72d7'] c.v.a.r.service.AuthContextServiceImpl.lambda$getAuthContext$7:71 - Looking up groups for user svc-tfe-p-vra2
2022-06-30T18:49:10.913Z INFO project-service [host='project-service-app-679cf4b45d-9vmnt' thread='reactor-http-epoll-5' user='svc-tfe-p-vra2' org='797ddc2a-b8af-4c12-b23a-593e6300ca86' trace='ce5e92fa-1d0c-46e2-92c5-78249a33ec48' parent='bbaa7c50-777f-44e7-8c1b-dcd2f14455e2' span='0f8b7d5e-537e-49f1-a158-e9597eef72d7'] c.v.a.r.service.AuthContextServiceImpl.lambda$getAuthContext$4:74 - Looking up groups for user svc-tfe-p-vra2 took for svc-tfe-p-vra2 took 0 ms
2022-06-30T18:49:10.913Z INFO project-service [host='project-service-app-679cf4b45d-9vmnt' thread='reactor-http-epoll-5' user='svc-tfe-p-vra2' org='797ddc2a-b8af-4c12-b23a-593e6300ca86' trace='ce5e92fa-1d0c-46e2-92c5-78249a33ec48' parent='bbaa7c50-777f-44e7-8c1b-dcd2f14455e2' span='0f8b7d5e-537e-49f1-a158-e9597eef72d7'] c.v.a.p.s.ProjectPrincipalServiceImpl.findAllByPrincipalAndGroupIdsDetailed:84 - Looking up projects detailed for user svc-tfe-p-vra2
2022-06-30T18:49:10.913Z INFO project-service [host='project-service-app-679cf4b45d-9vmnt' thread='reactor-http-epoll-5' user='svc-tfe-p-vra2' org='797ddc2a-b8af-4c12-b23a-593e6300ca86' trace='ce5e92fa-1d0c-46e2-92c5-78249a33ec48' parent='bbaa7c50-777f-44e7-8c1b-dcd2f14455e2' span='0f8b7d5e-537e-49f1-a158-e9597eef72d7'] c.v.a.r.s.RoleAssignmentServiceImpl.findAllAssignmentsByPrincipalAndGroupIds:153 - Looking up role assignments for user svc-tfe-p-vra2
2022-06-30T18:49:10.920Z INFO project-service [host='project-service-app-679cf4b45d-9vmnt' thread='parallel-2' user='svc-tfe-p-vra2' org='797ddc2a-b8af-4c12-b23a-593e6300ca86' trace='ce5e92fa-1d0c-46e2-92c5-78249a33ec48' parent='bbaa7c50-777f-44e7-8c1b-dcd2f14455e2' span='0f8b7d5e-537e-49f1-a158-e9597eef72d7'] c.v.a.r.service.AuthContextServiceImpl.lambda$getAuthContext$6:107 - Getting auth context took for svc-tfe-p-vra2 took 7 ms
2022-06-30T18:49:10.920Z INFO project-service [host='project-service-app-679cf4b45d-9vmnt' thread='parallel-2' user='svc-tfe-p-vra2' org='797ddc2a-b8af-4c12-b23a-593e6300ca86' trace='ce5e92fa-1d0c-46e2-92c5-78249a33ec48' parent='bbaa7c50-777f-44e7-8c1b-dcd2f14455e2' span='0f8b7d5e-537e-49f1-a158-e9597eef72d7'] c.v.a.p.controller.ProjectController.getAllProjects:168 - Received projects get all request
2022-06-30T18:49:10.921Z INFO project-service [host='project-service-app-679cf4b45d-9vmnt' thread='parallel-2' user='svc-tfe-p-vra2' org='797ddc2a-b8af-4c12-b23a-593e6300ca86' trace='ce5e92fa-1d0c-46e2-92c5-78249a33ec48' parent='bbaa7c50-777f-44e7-8c1b-dcd2f14455e2' span='0f8b7d5e-537e-49f1-a158-e9597eef72d7'] c.v.a.p.service.ProjectServiceImpl.lambda$findAll$54:607 - findAll projects with Admin token orgId 797ddc2a-b8af-4c12-b23a-593e6300ca86
2022-06-30T18:49:10.935Z DEBUG project-service [host='project-service-app-679cf4b45d-9vmnt' thread='reactor-http-epoll-5' user='svc-tfe-p-vra2' org='797ddc2a-b8af-4c12-b23a-593e6300ca86' trace='ce5e92fa-1d0c-46e2-92c5-78249a33ec48' parent='bbaa7c50-777f-44e7-8c1b-dcd2f14455e2' span='0f8b7d5e-537e-49f1-a158-e9597eef72d7'] r.n.http.server.HttpServerOperations.debug:250 - [8deeb8b4-19, L:/10.244.0.106:8080 - R:/10.244.0.107:55756] Decreasing pending responses, now 0
2022-06-30T18:49:10.935Z DEBUG project-service [host='project-service-app-679cf4b45d-9vmnt' thread='reactor-http-epoll-5' user='svc-tfe-p-vra2' org='797ddc2a-b8af-4c12-b23a-593e6300ca86' trace='ce5e92fa-1d0c-46e2-92c5-78249a33ec48' parent='bbaa7c50-777f-44e7-8c1b-dcd2f14455e2' span='0f8b7d5e-537e-49f1-a158-e9597eef72d7'] r.n.http.server.HttpServerOperations.debug:245 - [8deeb8b4-19, L:/10.244.0.106:8080 - R:/10.244.0.107:55756] Last HTTP response frame
2022-06-30T18:49:10.935Z INFO project-service [host='project-service-app-679cf4b45d-9vmnt' thread='reactor-http-epoll-5' user='svc-tfe-p-vra2' org='797ddc2a-b8af-4c12-b23a-593e6300ca86' trace='ce5e92fa-1d0c-46e2-92c5-78249a33ec48' parent='bbaa7c50-777f-44e7-8c1b-dcd2f14455e2' span='0f8b7d5e-537e-49f1-a158-e9597eef72d7'] reactor.netty.http.server.AccessLog.info:270 - 10.244.0.107 - - [30/Jun/2022:18:49:10 +0000] ""GET /project-service/api/projects?apiVersion=2019-01-15&apiVersion=2019-01-15&$expand HTTP/1.1"" 200 18328 8080 24 ms
2022-06-30T18:49:10.935Z DEBUG project-service [host='project-service-app-679cf4b45d-9vmnt' thread='reactor-http-epoll-5' user='svc-tfe-p-vra2' org='797ddc2a-b8af-4c12-b23a-593e6300ca86' trace='ce5e92fa-1d0c-46e2-92c5-78249a33ec48' parent='bbaa7c50-777f-44e7-8c1b-dcd2f14455e2' span='0f8b7d5e-537e-49f1-a158-e9597eef72d7'] r.n.http.server.HttpServerOperations.debug:245 - [8deeb8b4-19, L:/10.244.0.106:8080 - R:/10.244.0.107:55756] Last HTTP packet was sent, terminating the channel
2022-06-30T18:49:10.935Z TRACE project-service [host='project-service-app-679cf4b45d-9vmnt' thread='reactor-http-epoll-5' user='svc-tfe-p-vra2' org='797ddc2a-b8af-4c12-b23a-593e6300ca86' trace='ce5e92fa-1d0c-46e2-92c5-78249a33ec48' parent='bbaa7c50-777f-44e7-8c1b-dcd2f14455e2' span='0f8b7d5e-537e-49f1-a158-e9597eef72d7'] reactor.netty.channel.ChannelOperations.trace:235 - [8deeb8b4, L:/10.244.0.106:8080 - R:/10.244.0.107:55756] Disposing ChannelOperation from a channel
```
"
1758,1173737528,rstoyanchev,401908,"This looks okay to me. What do you think @sdeleuze, @jhoeller?"
1759,1173807642,poutsma,330665,"> If my proposal is feasible, I can submit a PR to fix this problem

For now, we'd rather have a complete minimal sample (something that we can unzip or git clone, build, and deploy) that reproduces the problem, instead of snippets and screenshots."
1760,1173817148,rstoyanchev,401908,We'll fix this in 5.3.x. Note that a similar change was applied to the web config as well #23887.
1761,1173826616,Nazjara,16803391,"Please suggest what I'm missing here.
I'm also using SSE and `exchange` call is blocking the test so I never reach `StepVerifier`.
I'm using Spring MVC so my REST controller returns `SseEmitter` object that keeps an infinite stream, messages are streamed constantly every 1 second.
The idea is to verify the first few messages and cancel the subscription. Here's the test:

    @Test
    public void testSubscribeOnAlertsWithServerError()
    {
        var exchangeResult = webTestClient.get()
                .uri(""/someurl"")
                .exchange()
                .returnResult(String.class);

        // I never reach that in debug
        StepVerifier.create(exchangeResult.getResponseBody())
                .expectNextCount(5)
                .thenCancel()
                .verify();
    }

BTW it works fine in similar tests where the stream is completed at some point.
Probably this is not expected to work with Spring MVC, in this case, could you suggest a way to test such a scenario?"
1762,1173851957,rstoyanchev,401908,"Indeed the `requestURI` coming into `decodeAndCleanUriString` couldn't have been `null` or else it would have caused NPE. From there it's a fairly short path to the stacktrace. 

Looking at `removeSemicolonContent` I don't see a way for that to return `null`. For `decodeRequestString`. If the request encoding is invalid, however, the `UnsupportedCharsetException` catch clause falls back on `URLDecoder.decode(String)` and that in turn relies on the default platform encoding which is the static field `dfltEncName` in `URLDecoder`. It seems unlikely that be invalid but if it caused `UnsupportedEncodingException` it would lead to a `null` return value.

@MartinHaeusler could you provide details for the JDK version?  

"
1763,1173864852,snicoll,490484,"@sdeleuze is the registrar really necessary? Unless the implementation has changed, adding `@Reflective` should register the annotation as well. 

Now the agent is available it would be nice to have a test for this. "
1764,1173865081,mdzhigarov,1481379,"Reproduced the issue by creating a web client that sends GET request with content-length: 2 header and no body.
The first GET request is successful - it returns a valid result. 
The second GET request fails with 	""message"": ""405 METHOD_NOT_ALLOWED \""Request method 'T' not supported\""""

It seems that Netty is doing the right thing - dropping the first 2 bytes of the second request - 'GE' because the channel expects 2 bytes from the first request.

Should we fix the Spring WebClient to drop such invalid requests - having content-length with no actual body?
I can easily workaround this but I feel that Spring should guard me if I try to create such malicious request"
1765,1173873436,rstoyanchev,401908,We could maybe add a `Consumer` based overloaded variant `modulesToInstall(Consumer<List<Module>> modules)` that lets you customize the configured set rather than set the modules. 
1766,1173915490,sdeleuze,141109,I will double check.
1767,1173923866,sdeleuze,141109,"It does not work without the registrar (maybe something to refine on `@Reflective` to refine later), I will add related tests."
1768,1173925937,sbrannen,104798,"**Team Decision**:

- Introduce static utility methods in `AopProxyUtils` that combine user provided interfaces with `SpringProxy`, `Advised`, and `DecoratingProxy`.
- This method could be named something along the lines of `completeProxiedInterfaces()` to align with the existing methods in that class.
- We will need to two variants, one accepting `Class<?>...` and one accepting `TypeReference...`.
- The returned arrays should be able to be supplied as input to both variants of `proxyHints.registerJdkProxy()`.
- Cross reference these new methods from the Javadoc in the existing `registerJdkProxy()` methods in `spring-core` to make the AOP specific support _discoverable_ via the core user API."
1769,1173958965,sbrannen,104798,"> @sbrannen, thanks for taking the time to give a very thorough answer.

You're welcome.

The reason it's so ""thorough"" is that your use case sparked some thought experiments in my head, and I wanted to verify what options actually exist to support such use cases."
1770,1173961352,AQS-DTheuke,98329837,Please keep it simple. We are already in a `BuilderCustomizer`.
1771,1174018765,sbrannen,104798,"I have repurposed this issue to focus on `DataSize` parsing and introduced the following issues to address `PropertyEditor`s and `Converter`s.

- #28755 
- #28756 "
1772,1174035078,sbrannen,104798,"Good catch.

This has been merged into `main`.

Thanks, and congratulations on submitting your first PR to the Spring Framework! 👍 "
1773,1174143111,snicoll,490484,"> Cross reference these new methods from the Javadoc in the existing registerJdkProxy() methods in spring-core to make the AOP specific support discoverable via the core user API.

If that is so important this was discussed, I'd like us to review `RuntimeHintsUtils#registerAnnotation`."
1774,1174493113,toohandsome,46422252,"> > If my proposal is feasible, I can submit a PR to fix this problem
> 
> For now, we'd rather have a complete minimal sample (something that we can unzip or git clone, build, and deploy) that reproduces the problem, instead of snippets and screenshots.

https://github.com/toohandsome/springdemo/"
1775,1174552392,kegt,9147514,"So I think the official documents are being misleading here.

On https://docs.spring.io/spring-framework/docs/current/reference/html/testing.html#spring-mvc-test-server-defining-expectations you can see exactly the same code for kotlin.
"
1776,1174648913,jasonjiang9527,20434877,@sbrannen All tests of the main branch have passed 
1777,1174730928,rstoyanchev,401908,"Note that the builder currently has two methods for modules, `modules(List<Module> modules)` and `modulesToInstall(Module... modules)`, which have different semantics and are mutually exclusive. It's a bit more challenging to come up with something that is clearly aligned with one or the other. The proposed `addModules` sounds like it is aligned with `modules` but your example was for `modulesToInstall` so this is already ambiguous. 

An overloaded method with a `Consumer` allows for a clear alignment with one vs the other method, and has the benefit of provoding full control over the list of modules, including where to insert, add, remove, etc."
1778,1174742553,sdeleuze,141109,"This is a known side effect of current JSR 305 support, the Java compiler generates warning on annotation with enum values when not present in the classpath while it is lenient for the annotations themselves. As suggested by Sam, the workaround is to have the `jsr305` in the classpath or module path.

If I am not mistaken, this only occurs when user code is using Spring null-safety annotations, so that's on purpose that we don't add `jsr305` to the transitive dependencies in a mandatory way.

The middle term fix will be to switch to https://github.com/jspecify/jspecify (where Spring team is involved) and remove those JSR305 annotations from Spring ones.

@sbrannen What about creating an issue dedicated to switching from JSR 305 to JSpecify in the [6.x Backlog](https://github.com/spring-projects/spring-framework/milestone/204) in order to give visibility to our users and closing this one?"
1779,1174791079,rstoyanchev,401908,"**Team Decision:** we should review the existing usages and look for patterns, and specific changes to propose to make tests more consistent, and/or come up with recommendations if any."
1780,1174798748,AQS-DTheuke,98329837,"Please note that you always need two methods (unless you refactor the whole thing to avoid the `findWellKnownModules` in these methods, which might be a good idea). 
`modules(...)` is exclusive. `modulesToInstall(...)` is inclusive.
And I am referring to both for consistency reasons, IMO its just somewhat redundant to always explicitly mention both.

Semantically, I wish to just add a module to the builder, so I would appreciate it, if there is a method for exactly that (similar to all the other existing methods). I explicitly added the two code examples in the issue description to show the difference in their implementation. Most of the other methods look like the serializer one (are adders not setters). 
IMO in the next major version of spring, this should be addressed further by renaming `modules()` to `replaceModules(...)` or `setModules(...)` and renaming `addModules(...)` to `modules(...)` so they behave the same as the other methods and don't disrupt developer expectations.

This is the workaround I currently use:

````java
@Bean
// Custom error details
public Jackson2ObjectMapperBuilderCustomizer apiErrorCustomizer() {
    // We cannot use the module directly
    // because the module methods are only setters and not adders
    // builder#serializers adds the passed serializers instead
    return builder -> builder.serializers(ApiErrorModule.requiredSerializers())
                             .deserializers(ApiErrorModule.requiredDeserializers());
}

// --------------------- in another configuration class/artifact

@Bean
// ""2000"" -> ""2000-01-01"" <= x < ""2001-01-01""
public Jackson2ObjectMapperBuilderCustomizer dateishRangeCustomizer() {
    return builder -> builder.serializers(DatishRangeModule.requiredSerializers())
                             .deserializers(DatishRangeModule.requiredDeserializers());
}
````"
1781,1174835275,sbrannen,104798,"> @sbrannen All tests of the main branch have passed

Great!

Thanks for letting me know."
1782,1174836081,rstoyanchev,401908,"**Team decision:** we are going to provide first-class support for bean validation that's built at the web framework level (Spring MVC and WebFlux), without requiring a separate post-processor and an AOP proxy."
1783,1174842923,sbrannen,104798,"> If that is so important this was discussed, I'd like us to review `RuntimeHintsUtils#registerAnnotation`.

Do you mean you'd like to cross reference `RuntimeHintsUtils` from `ProxyHints`?

If so, I agree that that's a good idea.

In any case, feel free to bring it up in the team or open an issue to discuss what you'd like to review."
1784,1174845468,rstoyanchev,401908,"This has been a long running issue, at first not possible until Hibernate Validator added method level validation, and later enabled in Spring Framework 4.x through a `MethodValidationPostProcessor`, see https://github.com/spring-projects/spring-framework/issues/11041#issuecomment-453343899. We intend to add built-in support at the web framework level with #24913, so I'm closing this in favor of that."
1785,1174882937,rstoyanchev,401908,"**Team Discussion:** we don't necessarily see the order in which these are applied as incorrect. Security is applied first as an external concern and operates on the actual inputs. Validation, through parameter annotations, is more part of the method implementation and closer to its invocation (just a convenience for similar validation checks inside the controller method).

That said, `BeanPostProcessor`s are ordered, and if you wanted to, you could try and set the order on the `MethodValidationPostProcessor`. Another alternative is to place security annotations could also be places on the service layer and have that invoked from the controller, with already validated inputs.

Keep in mind also that the current behavior, with the use of a bean post-processor and an AOP proxy for validation, is a result of an implementation detail since it's the only way to validate `@RequestParam` and `@PathVariable` arguments currently. In #24913 intend to make bean validation a first-class feature of Spring MVC and WebFlux, at which point will become more integrated with the controller method and come strictly after any AOP proxies like the security check."
1786,1174890129,rstoyanchev,401908,"As for the difference with validation on `@RequestBody`, there is a known side effect of using `MethodValidationPostProcessor` where `@Valid` causes double validation, once as part of the AOP proxy applying method validation, and a second as part of the built-in support for validation for `@RequestBody`. This is part of what #24913 aims to resolve by making method validation a built-in feature of Spring MVC. "
1787,1174902550,rstoyanchev,401908,"**Team Decision:** this makes sense when combined together with the additional fluent API. If it's only the wrapping, it doesn't make sense to do within the framework since the first thing anyone would have to do is to unwrap the arguments. 

Ideally, an external library would be able to create a custom argument resolver that exposes directly the entry point for the fluent API without the need for any wrapping. As far as I can see, you could extend or delegate to `RequestResponseBodyMethodProcessor` and catch `MethodArgumentNotValidException` in case of validation errors. If there is anything we can do to improve on that end, it would be the direction we would take."
1788,1174903026,rstoyanchev,401908,"Closing for now, but feel free to comment and we can re-open as needed."
1789,1174961377,rstoyanchev,401908,We could consider making `modules` and `modulesToInstall` additive in 6.0 to align them with how other methods in the builder work which accept multiple registrations.
1790,1175506650,vy,72137,"@rstoyanchev, getting unknown properties mapped to a single field can be tricky for Jackson. Even though this ticket is closed, I would strongly encourage adding tests for checking whether both de- and serialization works as expected."
1791,1176089619,sbrannen,104798,"This issue tracker is for the core Spring Framework.

Please open an issue for `spring-cloud-config` [here](https://github.com/spring-cloud/spring-cloud-config/issues/new/choose)."
1792,1176150503,sbrannen,104798,"> I've encountered a use-case in which `RuntimeHintsUtils.registerAnnotation` isn't enough to work with the annotation in a native setting.

That's to be expected. `RuntimeHintsUtils.registerAnnotation` can only reason about the annotation itself and meta-annotations in the meta-annotation hierarchy _above_ the supplied annotation type.

If `@Endpoint` is used as a meta-annotation with attribute overrides in a _composed annotation_, you should actually invoke `RuntimeHintsUtils.registerAnnotation` with the composed annotation instead of `Endpoint.class`. Then `RuntimeHintsUtils.registerAnnotation` should automatically register the correct proxy class configuration for `@Endpoint`."
1793,1176157198,sbrannen,104798,"One concrete example is [`@WebEndpoint`](https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/annotation/WebEndpoint.java) whose attributes are annotated with `@AliasFor(annotation = Endpoint.class)`, which in turn requires that `@Endpoint` by _synthesizable_ (i.e., will need proxy configuration).

----

In summary, this effectively ""works as designed"", but I'll leave it open in order for the team to put more thought into it and potentially to improve the documentation to point out what I explained above."
1794,1176166437,mhalbritter,98899556,"Ah, I see. Thanks for the explanation."
1795,1176189174,mhalbritter,98899556,"> If `@Endpoint` is used as a meta-annotation with attribute overrides in a composed annotation, you should actually invoke RuntimeHintsUtils.registerAnnotation with the composed annotation instead of Endpoint.class. Then RuntimeHintsUtils.registerAnnotation should automatically register the correct proxy class configuration for `@Endpoint`

When I register `WebEndpoint`, there will be **no** proxy hints generated for `Endpoint`, only for `WebEndpoint`."
1796,1176203153,sbrannen,104798,">When I register `WebEndpoint`, there will be **no** proxy hints generated for `Endpoint`, only for `WebEndpoint`.

Ahhh... then that's likely a bug.

We'll look into it."
1797,1176320301,neiser,3863897,@sbrannen Is there any update from your side? Anything I could do to support you with this? 
1798,1176404952,tommas1988,3488114,rebuild
1799,1176962021,leexgone,3879725,"We had the same problem！ This led to serious performance issues in our system.
I had to modify the source code locally to temporarily fix it.
We hope this problem can be fixed as soon as possible."
1800,1177295736,sdeleuze,141109,"I have improved the support for `@Transactional` with [this commit](https://github.com/spring-projects/spring-framework/commit/0387d54607f371b7ff9e28dd8a89ec6203d3a09b) that makes `@Transactional` annotated with `@Reflective` and registers proxy hints for `SpringProxy` but the `jdbc-tx` sample [here](https://github.com/spring-projects-experimental/spring-native/tree/sb-3.0.x/samples/jdbc-tx) still fails when compiled as a native executable with `error creating bean with name 'userEndpoints': Unsatisfied dependency expressed through method 'userEndpoints' parameter 0: No qualifying bean of type 'app.main.Finder<app.main.model.Foo>' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {} error`, like if proxied beans can't be injected in native. Notice here we have `@Component public class Runner implements CommandLineRunner, Finder<Foo> { ... }` that needs to be injected in `@Bean public RouterFunction<?> userEndpoints(Finder<Foo> entities) { ... }`.This samples works correctly on JVM + AOT so this issue is native specific."
1801,1177342425,1004789224,32547368,"
can i try this issues

"
1802,1177566753,sdeleuze,141109,"As discussed with @sbrannen, we need to replace the `SpringProxyRuntimeHintsRegistrar` by an AOT processor that will register dynamically the required proxies like here `CommandLineRunner.class, Finder.class, SpringProxy.class, Advised.class, DecoratingProxy.class` + reflection entries for proxied interfaces with [declared methods](https://github.com/spring-projects/spring-framework/blob/main/spring-aop/src/main/java/org/springframework/aop/framework/JdkDynamicAopProxy.java#L136)."
1803,1177873077,toohandsome,46422252,"it's solved.
use  AsyncContext run Thread..
```
@PostMapping(""/postTest"")
    public String postTest(HttpServletRequest request, HttpServletResponse response, String age, String name) {
        AsyncContext asyncContext =
                request.isAsyncStarted()
                        ? request.getAsyncContext()
                        : request.startAsync(request, response);
        asyncContext.start(new Runnable() {
            @Override
            public void run() {
                String age2 = request.getParameter(""age"");
                String name2 = request.getParameter(""name"");
                try {
                    Thread.sleep(10);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
                String age3 = request.getParameter(""age"");
                String name3 = request.getParameter(""name"");
                System.out.println(""age1: "" + age + "" , name1: "" + name + "" , age2: "" + age2 + "" , name2: "" + name2 + "" , age3: "" + age3 + "" , name3: "" + name3);
                asyncContext.complete();
            }
        });

        return ""post success"";
    }
```"
1804,1178467651,kablumandal,99411252,"> @bclozel Instead of splitting those out into yet another artifact, let's rather deprecate the entire RMI and HTTP Invoker support in 5.3 and remove those bits in 6.0 altogether. Such a style of remoting is old school and not recommendable for many reasons these days. Also, the Oracle JDK team intends to deprecate serialization in some form; we can easily anticipate that here.

I understand it is old way, but what about backward compatibility? it should be a way to convert rmi to http."
1805,1178509036,pivotal-cla,16822967,"@w547963 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28775)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28775) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1806,1178993434,sbrannen,104798,"Hi @w547963,

Congratulations on opening your first pull request ever on GitHub! 👍 

The `(repeatedAnnotations != null)` check is sufficient for the code in question; however, if you think you have discovered a bug please open a new issue to discuss it and provide a failing test that demonstrates the bug.

In light of that, I am closing this PR.

----

In addition, please do your best to submit issues and PRs in English (potentially using a translation tool or asking a friend or colleague for assistance)."
1807,1179001790,rstoyanchev,401908,"@vy, happy to re-open and make further updates. That said, from Jackson's perspective, isn't it just a straight-forward `Map` field to serialize and deserialize? In other words, could you clarify the tricky part is you have in mind?"
1808,1179055991,poutsma,330665,"@desiderantes This is now complete, see https://github.com/spring-projects/spring-framework/commit/9b739a2310bac781c89a22bf92650615f9dd7406. Let me know if there are `java.util.Date` usages that I missed."
1809,1179072765,jhoeller,1263688,"Good catch, those should have a standard SQL type mapping (even if this mapping mechanism is only really used in our `BeanPropertySqlParameterSource`). I've added the following, to be committed along with a few other 5.3.x backports:

```
		javaTypeToSqlTypeMap.put(LocalDate.class, Types.DATE);
		javaTypeToSqlTypeMap.put(LocalTime.class, Types.TIME);
		javaTypeToSqlTypeMap.put(LocalDateTime.class, Types.TIMESTAMP);
```"
1810,1179195129,desiderantes,1703429,"@poutsma Whoah, thanks a lot! I don't see other usages of java.util.Date in scheduling (and I can't judge the usages in the other parts)"
1811,1179519123,vy,72137,"I think we have a misunderstanding about the use case here. Let me try to clarify it with an example. Let the server have a `CustomProblemDetail` extending from `ProblemDetail`:

```java
import org.springframework.http.ProblemDetail;

public class CustomProblemDetail extends ProblemDetail {

    private final String host;

    public CustomProblemDetail(ProblemDetail parent, String host) {
        super(parent);
        this.host = host;
    }

    public void setHost(String host) {
        this.host = host;
    }

    public String getHost() {
        return this.host;
    }

}
```

Due to a service failure, the server responds with a `CustomProblemDetail` and the client receives the following JSON:

```json
{
  ""type"": ""/problem/bad-request"",
  ""title"": ""Bad Request"",
  ""status"": 400,
  ""detail"": ""miserable failure"",
  ""instance"": ""/greeting"",
  ""host"": ""awesome-x3csd3.bol.com""
}
```

Note the extra `host` entry at the bottom.

Since the client doesn't know about the `CustomProblemDetail` class, it will try to deserialize this JSON to a `ProblemDetail`. It would expect `ProblemDetail#properties` to contain a single entry: `host=awesome-x3csd3.bol.com`, though it won't since we didn't use any `@JsonAnyGetter`, `@JsonAnySetter`, etc. magic there. Hence the `host` information get totally lost during deserialization and this should exactly be the goal this feature aims to prevent."
1812,1179767271,salmansharifov,52676032,@jhoeller Can I take this issue?
1813,1179770805,snicoll,490484,"I don't think we should do this. If we do, then every place that accepts a TypeReference must add a String variant, and I don't think that we should do that either as it would bloat the API quite a bit. 

If you don't have a class handy, then a TypeReference is the way to go. "
1814,1179779298,sbrannen,104798,"I had already implemented the feature and committed it before I saw your comments, so I'm reopening this issue to discuss the topic within the team.

> I don't think we should do this. If we do, then every place that accepts a TypeReference must add a String variant, and I don't think that we should do that either as it would bloat the API quite a bit.
> 
> If you don't have a class handy, then a TypeReference is the way to go.

I'd argue that `TypeReference` is more of an internal implementation detail that normal users need not be bothered with.

There may be some particular use cases where normal users need to work with `TypeReference`, but for the most common use cases users will be happier with supplying a `Class` or `String`. Furthermore, supporting `String` will remove lots of superfluous `TypeReference.of(<string>)` occurrences within user code.

Playing devil's advocate... we don't require users to supply a `TypeReference` for a `Class`, so why should we require them to supply a `TypeReference` for a  `String`?

As a concrete example, this issue was a requirement for #28745 to improve the developer experience. The newly introduced `AopProxyUtils.completeJdkProxyInterfaces(*)` methods could of course be refactored to return `TypeReference[]` instead of `Class<?>[]` and `String[]`, but that seemed unnatural and unnecessary.

"
1815,1180085704,pivotal-cla,16822967,"@jeooica Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28783)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28783) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1816,1180087557,jeooica,18224603,We need it in 5.3.x branch.
1817,1180099082,pivotal-cla,16822967,@jeooica Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28783)!
1818,1180101979,ryl2018,43063240,good fix
1819,1180131134,poutsma,330665,"If you'd like us to spend some time investigating, please take the time to provide a complete minimal sample (something that we can unzip or git clone, build, and deploy) that reproduces the problem."
1820,1180144316,jhoeller,1263688,"@salmansharifov Thanks for volunteering but I got this locally prepared along with a few other backports to 5.3.22 already, to be committed today."
1821,1180155577,Nasil,11159369,"I did this:

Controller:
```java
@RequestMapping(value = ""/slack"", method = RequestMethod.POST, consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
public @ResponseBody SlackSlashCommand slack(@RequestBody MultiValueMap<String, Object> reqMap) {
      objectMapper.enable(DeserializationFeature.UNWRAP_ROOT_VALUE);
      objectMapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);
      SlackSlashCommand slackSlashCommand = objectMapper.convertValue(reqMap, SlackSlashCommand.class);
      return slackSlashCommand;
}
```
Just use @JsonProperty with underscore.
```java
public class SlackSlashCommand {

    @JsonProperty(""team_id"")
    private Long teamId; // Type long 

    @JsonProperty(""team_domain"")
    private String teamDomain; // Type String

    @JsonProperty(""insert_timestamp"")
    private LocalDateTime insertTimestamp; // Type LocalDateTime
}
```"
1822,1180163438,javolek,1275348,"Could somebody here elaborate, why it is even possible to eagerly autowire dependencies into the bean-postprocessor. Wouldn't it be better to instantiate bean-postprocessors in another way or to disallow eager dependency instantiation? As far as I can understand this, the chances are high that something won't work as expected if this happens, while i.e. the autoproxying won't be done - the beans are autowirded without the proxy in between. This may result in somthing like the db-transaction missing on method marked as @Transactional or even worse - method security not being applied. Or am I wrong? Is this really such an Issue that doesn't deserve more attention?"
1823,1180216131,rstoyanchev,401908,"Thanks for clarifying.

The goal is to avoid dependency on any serialization technology at the lowest level. `ProblemDetail` is the basic abstraction that Spring MVC and WebFlux can use to raise exceptions with the standard fields, and that also helps to enable a range of features for handling and rendering such responses.

Extra properties and serialization magic remain as a separate layer, through sub-classes and a global exception handler cloning the original exception to create the sub-class, as with your `CustomProblemDetail` above.

Originally I left `Map<String, Object> properties` out of `ProblemDetail`, thinking that sub-classes would declare it and add `@JsonAnyGetter/Setter`. I introduced it here, thinking it would be useful still for the base class to provide a way to add dynamic properties from the server side, but your example above is with a property that's known on the server side, but not on the client side. So I'm not sure if dynamic properties from the server side are something all that useful? In any case, the expectation is still for a sub-class to override `getProperties` and `setProperty` and to add `@JsonAnyGetter/Setter`, which does mean that out of the box, a `properties: {}` map is what gets serialized. If that seems not unacceptable, then it doesn't make sense to have `properties` in `ProblemDetail` after all.

I'm thinking that we should add a `JacksonProblemDetail` sub-class with the `@JsonAnyGetter/Setter` annotations and apply it from `ResponseEntityExceptionHandler`, if Jackson is present, or perhaps even create it by default for Spring MVC/WebFlux exceptions when Jackson is present. Then a `CustomProblemDetail` could also extend from `JacksonProblemDetail`.

What do you think?


"
1824,1180320863,npriebe,54103655,Is there any new information on this subject?
1825,1180357590,sbrannen,104798,* superseded by #28783
1826,1180412244,pivotal-cla,16822967,"@npriebe Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28785)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28785) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1827,1180445953,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
1828,1180494008,rstoyanchev,401908,"**Team Decision:** we've decided to go with the `Consumer` based variants, which cover a wider range of cases without the potential for side effects from changing how the methods behave currently. This does mean an additional nested lambda, but still a reasonable compromise overall:

```java
@Bean
public Jackson2ObjectMapperBuilderCustomizer customizer() {
    return builder -> builder.modules(list -> list.add(...));
}
```
As a result, the methods can be added immediately in the 5.3.x branch.
"
1829,1180495627,sbrannen,104798,Reopening to reduce the scope of this feature to `Class` references.
1830,1180584602,sbrannen,104798,"**Team Decision**: revert the changes made in commit b560c10d4cea3f9e149153078ec8c42e843d53dd and revisit this general topic (i.e., use of `TypeReference` in public-facing APIs) in the 6.0 M6 time frame."
1831,1180683621,joubin,1058767,"
> @mtarnawa @dmitry-weirdo I've reached out to MITRE a few days ago as it is the team that initially published it. I'm still waiting for an answer.

Did you ever hear back from MITRE?
"
1832,1180773342,snicoll,490484,"> I'd argue that TypeReference is more of an internal implementation detail that normal users need not be bothered with.

Why is that? It's a public class with public `of` convenient methods. Nothing there seems to indicate it is an internal implementation. 

>  Furthermore, supporting String will remove lots of superfluous TypeReference.of(<string>) occurrences within user code.

If that is a problem, then let's address it separately. `SimpleTypeReference` is essentially a wrapper around the String value and I don't expect a lot of them to be created. Also, this should only be triggered at build time when AOT runs. 

It doesn't feel right that we focus on one of the many methods that accept either a `Class` or a `TypeReference` in the hint package. 

> Playing devil's advocate... we don't require users to supply a TypeReference for a Class, so why should we require them to supply a TypeReference for a String?

Because using `Class` should be the vast majority of use cases and therefore it seemed a good idea to offer a shortcut for it. If you start offering a `String`-based approach, you're covering 99.9% of the use cases so why offer a variant for `TypeReference` then? You could then remove those and keep that indeed private (for real this time) but what happens if you want to create a hint for a class you've generated. Surely, going from `ClassName` to the name of the class shouldn't be that hard but it can be tricky if you have an inner class. That's why `TypeReference` was created in the first place.

> As a concrete example, this issue was a requirement for https://github.com/spring-projects/spring-framework/issues/28745 to improve the developer experience. The newly introduced AopProxyUtils.completeJdkProxyInterfaces(*) methods could of course be refactored to return TypeReference[] instead of Class<?>[] and String[], but that seemed unnatural and unnecessary.

I don't think this method should have been designed this way. Rather, I think it should have returned a `Customizer` of the `JdkProxyHint.Builder`. This way you could register the proxy the usual way, passing the customizer of the builder to complete the set of interfaces that it needs. Doing it this way also means you don't have to care what input the caller use for user interface.





"
1833,1180790599,sbrannen,104798,"This has been merged into `5.3.x` and `main`.

Thanks for submitting your first PR to the Spring Framework! 👍 "
1834,1180811635,snicoll,490484,"I am not sure I got all those pieces together. Can you please share how I can reproduce this myself? Also, if that exception below is happening at build time, I don't think that's right. We shouldn't be instantiating beans at build time like that."
1835,1180817835,vy,72137,"I am happy to hear that we are on the same page. (And thanks so much for hearing me out! :pray:)

> So I'm not sure if dynamic properties from the server side are all something useful?

I think they certainly are! Ideally people shouldn't subclass `ProblemDetail` and should simply use its `properties` to tailor the content. So please keep it.

> I'm thinking that we should add a `JacksonProblemDetail` sub-class with the `@JsonAnyGetter/Setter` annotations and apply it from `ResponseEntityExceptionHandler`, if Jackson is present, or perhaps even create it by default for Spring MVC/WebFlux exceptions when Jackson is present. Then a `CustomProblemDetail` could also extend from `JacksonProblemDetail`.

What about introducing a `ProblemDetailJacksonMixIn` and registering it to the available `ObjectMapper` bean and/or as an `ObjectMapper` customizer? This way, if I am not mistaken, `ProblemDetail` subclasses employing Jackson for serialization will implicitly use the mix-in for the `properties` field, unless they override it or use a custom `ObjectMapper`.

The reason I prefer a mix-in compared to a `JacksonProblemDetail`, the former will implicitly work for any `ProblemDetail` subclass thrown against Jackson, whereas the latter approach expects the user to _always_ subclass from `JacksonProblemDetail` instead."
1836,1180845934,snicoll,490484,"Good catch @marcusdacoregio, thanks!"
1837,1181222047,leexgone,3879725,Great!
1838,1181285630,christophstrobl,2317257,@snicoll build either the `data-jdbc` or `data-cassandra` sample from this PR spring-projects-experimental/spring-native#1664
1839,1181336235,snicoll,490484,Can you clarify that the bean is instantiated at build time and why that is ?
1840,1181344399,christophstrobl,2317257,The bean serves as an entry point for domain type inspection of the data module which will add reflection configuration etc.
1841,1181368527,pivotal-cla,16822967,"@abhigar9 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28792)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28792) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1842,1181481329,CharlelieBouvier,43992705,+1
1843,1181495862,sbrannen,104798,"This has been merged.

Thanks"
1844,1181509071,mdeinum,606761,This is a question and is more suited for StackOverflow.
1845,1181513788,sbrannen,104798,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
1846,1181514905,snicoll,490484,"What happens is that `InstantiationAwareBeanPostProcessor` is not honored when a `GenericApplicationContext` is refreshed for AOT processing. As a result, `determineCandidateConstructors` is not invoked and the bean definition does not contain the constructor to use.

We're in a weird state right now as we're not actively preventing beans to be instantiated, but the configuration of the `BeanFactory` is not complete to do so properly."
1847,1181531920,wangqinggo,31787562,https://stackoverflow.com/questions/978061/http-get-with-request-body
1848,1181544142,RomanPilyutik,10808452,Added another test that reproduce the same issue while using only one reactive transaction manager
1849,1181567866,sbrannen,104798,"This has been merged.

Thanks"
1850,1181580815,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
1851,1181582914,sbrannen,104798,"This has been merged.

Thanks"
1852,1181596887,marcwrobel,2988912,"@sbrannen, thank you for you reviews. For the time being I create a PR for each module. But if it is easier for you I can make bigger PRs (with 2-3 modules in each)."
1853,1181600124,sbrannen,104798,"> But if it is easier for you I can make bigger PRs (with 2-3 modules in each).

2-3 modules per PR would help.

Also, please based the PRs on `5.3.x` instead of `main`.

Thanks."
1854,1181616970,rstoyanchev,401908,"No worries, and thanks for tracking this and providing feedback. This is very much appreciated!

Good suggestion for the Jackson mix-in. We'll go with that and register it automatically from `Jackson2ObjectMapperBuilder` so it will require no further configuration. The only drawback is that `properties` will render as a nested map with other libraries but Jackson is popular and comparable solutions could probably be found for others too. The benefit of built-in support for additional properties, and reducing the need for sub-classing, that just works with Jackson is overall a good place to be.
"
1855,1181713940,sbrannen,104798,- Closing as superseded by #28797.
1856,1181739832,sbrannen,104798,"> > I'd argue that TypeReference is more of an internal implementation detail that normal users need not be bothered with.
> 
> Why is that? It's a public class with public `of` convenient methods. Nothing there seems to indicate it is an internal implementation.

We're not questioning whether `TypeReference` should be `public`, and we are not questioning its utility.

Rather, we are debating whether `TypeReference` should be so prevalent in the entry points into the AOT APIs.

> > Furthermore, supporting String will remove lots of superfluous TypeReference.of() occurrences within user code.
> 
> If that is a problem, then let's address it separately. `SimpleTypeReference` is essentially a wrapper around the String value and I don't expect a lot of them to be created. Also, this should only be triggered at build time when AOT runs.

In this regard, we are not talking about performance but rather about the developer experience and the API presented to the user for the most common use cases.

> It doesn't feel right that we focus on one of the many methods that accept either a `Class` or a `TypeReference` in the hint package.

Indeed, and that's why we reverted the change for M5 in order to discuss the broader topic for M6.

> > Playing devil's advocate... we don't require users to supply a TypeReference for a Class, so why should we require them to supply a TypeReference for a String?
> 
> Because using `Class` should be the vast majority of use cases and therefore it seemed a good idea to offer a shortcut for it. 

That's a good point and explains the original rationale for the decision. In your absence, we realized we might not have the full picture. So input like this helps to shape the discussion.

> If you start offering a `String`-based approach, you're covering 99.9% of the use cases so why offer a variant for `TypeReference` then? You could then remove those and keep that indeed private (for real this time) 

That is something the team wishes to explore in greater detail.

> but what happens if you want to create a hint for a class you've generated. Surely, going from `ClassName` to the name of the class shouldn't be that hard but it can be tricky if you have an inner class. That's why `TypeReference` was created in the first place.

We definitely do not plan to make existing use cases more difficult. Rather, our goal is to simplify common use cases and simplify the entry points into the AOT APIs. If there are existing use cases that effectively require the use of `TypeReference` outside of internal framework code, we would want to retain that functionality.

> > As a concrete example, this issue was a requirement for #28745 to improve the developer experience. The newly introduced AopProxyUtils.completeJdkProxyInterfaces(*) methods could of course be refactored to return TypeReference[] instead of Class<?>[] and String[], but that seemed unnatural and unnecessary.
> 
> I don't think this method should have been designed this way. Rather, I think it should have returned a `Customizer` of the `JdkProxyHint.Builder`. This way you could register the proxy the usual way, passing the customizer of the builder to complete the set of interfaces that it needs. Doing it this way also means you don't have to care what input the caller use for user interface.

For that particular convenience feature, the team wanted to add new methods to `AopProxyUtils` while not making `AopProxyUtils` directly dependent on AOT-specific APIs. If we decide to follow your recommendations, we may want to move the code from `AopProxyUtils` to a new AOT-specific class in `spring-aop`.

In summary, there are many facets to discuss. In light of that, we should probably dedicate a portion of a team meeting to dive deeper into this topic."
1857,1181754612,sbrannen,104798,"> While upgrading some code for the upcoming Spring 6 Recipes I noticed an error when migrating a class to a record.

While converting from a class to a record, did you directly or indirectly remove `implements Serializable`?

The reason I ask is that your class was likely `Serializable`, and if you make your record `Serializable` a [serializable record](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Record.html) should also work.


"
1858,1181763848,sbrannen,104798,"> whereas calling `SerializationUtils.serialize` does work

Did you verify that?

The following test fails for me with a cause of `java.io.NotSerializableException: org.springframework.util.SerializationUtilsTests$1Person`.


```java
	@Test
	@SuppressWarnings(""deprecation"")
	void serializeRecord() {
		record Person(String firstName, String lastName) {}
		Person jane = new Person(""Jane"", ""Doe"");
		assertThat(SerializationUtils.deserialize(SerializationUtils.serialize(jane))).isEqualTo(jane);
	}
```

Whereas, making the record serializable as below allows the above test to pass.

```java
record Person(String firstName, String lastName) implements Serializable {}
```"
1859,1181771077,mdeinum,606761,"My bad... Staring at a screen for too long. My regular `SerializationUtils.serialize` fails as well, but for some reason I didn't notice that. Closing it for a the error being between the chair and keyboard and sorry for the noise. "
1860,1181772499,sbrannen,104798,No worries. I was just about to close this issue in light of the passing tests in 5c2870ebd973957dd67405fc747b8ec0eab80667 which demonstrate the expected behavior.
1861,1181881719,mangusbrother,7870630,"Something like this is what is causing us to move to frameworks like Quarkus who give priority to startup time.

This would speed up the really slow startup of spring at a bare minimum."
1862,1182037221,pivotal-cla,16822967,"@jackycjw Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28804)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28804) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1863,1182040644,pivotal-cla,16822967,@jackycjw Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28804)!
1864,1182451540,joedevgee,11239869,"going back to the original question, with the new API, exactly how do we extract the `entities` under `responseRoot` ?"
1865,1182821366,fanpocha,26472353,@poutsma sample had uploaded
1866,1182909672,poutsma,330665,"Sorry, I somehow looked over that."
1867,1182917405,fanpocha,26472353,"@poutsma 
1、Start the sample project
[SampleProject.zip](https://github.com/spring-projects/spring-framework/files/9099459/SampleProject.zip)
2、Call the interface according to the following figure, and the problem will appear
![image](https://user-images.githubusercontent.com/26472353/178686390-61bafbc2-b732-4c23-ad4a-e1278baa1d33.png)
"
1868,1182984275,contivero,1451663,"Has there been any progress with this? I've run into issues with slow application start up and tests due to this, and I haven't found a way of wiring specifically by name other than:

1. Using `@Resource(name = ""..."")`, but this cannot be used with constructor injection.
2. Having to define the bean in XML and using `<constructor-arg name=""..."" ref=""..."" />`. I couldn't find a way of wiring by name with annotations (from what I understand, `@Qualifier` is used to disambiguate, so we are still matching by type first). I can also not specify an optional dependency with `<constructor-arg>` (as with `@Autowired(required = false)`).

Another possibility could be defining beans with `@Bean` and `@Configuration`, but I don't see anything akin to an `@Resource` at the parameter level of the constructor.

Is there any other solution for wiring by name using constructor injection and annotations that I'm missing?"
1869,1182993535,poutsma,330665,"What exactly are you trying to accomplish in your filter? It is not clear to me.

The code does reveal some major issues that should be fixed before we can proceed.

* You're subclassing `ReactorServerHttpResponse`. That class is an internal class, not to be directly used by anyone else but Spring Framework. That is why it is package protected, which means that you only have acces to it from the same package. As a Spring user, you get an instance of this class through the `ReactorHttpHandlerAdapter`, but you're never going to instantiate a concrete instance. You ""solved"" the issue by putting your code in the `org.springframework.http.server.reactive` package. Don't do that; use the public interfaces and classes instead.
* You obtain the `WebSession` by calling `exchange.getSession().toFuture().join()` which blocks the thread. Don't block in reactive web filter; you want to compose on the result. It doesn't look like you actually use the session later on in the code, but the blocking has already been done at that point.
* You convert body buffers into strings using UTF-8 using a `ByteArrayOutputStream`.
  * You can obtain a String using `DataBuffer.toString(Charset)`, no need for the the output stream.
  * You should not assume that request data is UTF-8, you should look at the request `Content-Type` to see what the actual charset is is.
  * More importantly, converting body byte chunks into UTF-8 will fail when a non-ASCII, multi-byte character is split across multiple buffers. If you want to convert to a String, join all buffers into one using `DataBufferUtils.join`, and convert that to a string. Or use Spring's `StringDecoder`, which breaks on newline characters.

What I think you're trying to do is invoke custom business logic whenever the response gets committed. You can do that by decorating the whole response with the `ServerHttpRequestDecorator`, override `getBody`, and compose on the result of the super class, possible by calling `Flux.then`. Read the [Reactor Reference Guide](https://projectreactor.io/docs/core/release/reference/#intro-reactive) for more information.


"
1870,1183019505,rstoyanchev,401908,This was done in 7055ddb489d18c4940c5685eca8ea72f29c58679.
1871,1183021569,rstoyanchev,401908,Fixed in 263811ecfa912a55bce8d0371ed20202abcf5dd5 but referenced wrong issue.
1872,1183051955,fanpocha,26472353,"@poutsma @rstoyanchev 
This problem is really caused by getting the session. I need to get user information from the session. Is there any other scheme to obtain session"
1873,1183057584,jhoeller,1263688,"After reviewing our arrangement there, it turns out that the `calculateArgumentBindings` synchronization is effectively unnecessary these days: We always create AspectJ advice instances with an early call to `calculateArgumentBindings` in `ReflectiveAspectJAdvisorFactory`, not requiring any synchronization for that standard scenario. The implicit lazy calculation of argument bindings is only really there for test scenarios or other custom arrangements, and there are no guarantees for thread safety defined there. Given the commonality of the standard scenario, I'll optimize for that, recommending custom scenarios to also perform an early `calculateArgumentBindings` call if necessary.

From that perspective, the approach taken in this PR won't be needed anymore. I'll reopen #26377 accordingly. Thanks for the PR, in any case!

For a review, even if we are not using that approach: The implementation in the PR seems incomplete in terms of its memory barriers. At the very least, `argumentsIntrospected` would have to be `volatile` for such a nested synchronization approach to work. Even the data structures populated by `bindArgumentsByName` would have to be guarded for thread-safe publication through the use of concurrent data structures, since otherwise it is not guaranteed that their state is visible to other threads when `argumentsIntrospected` is `true` in that early check before the synchronized block."
1874,1183060436,jhoeller,1263688,"Reopened for a simpler approach as discussed in my closing comment on #28783: We should be able to drop the synchronization completely since `ReflectiveAspectJAdvisorFactory` always performs an early call to `calculateArgumentBindings` anyway, covering our standard scenario. I'll resolve this in time for the 5.3.22 release."
1875,1183091565,snicoll,490484,"So our plan is to change the signature of the method that provides a bean instance so that it has to provide the `factoryMethod` reference one way or the other. While brainstorming, we've also realized that `AutowiredInstantiationArgumentsResolver` might not be the ideal name for what that class does.

Rather than returning the bean instance and using `InstanceSupplier.of` we intend to return an instance of `InstanceSupplier` that takes care of the exacutable to use, something like:

```java
/**
 * Create the bean instance supplier for 'restTemplateClientService'.
 */
private static BeanInstanceSupplier getRestTemplateClientServiceInstanceSupplier() {
    return BeanInstanceSupplier
            .forConstructor(RestTemplateBuilder.class)
            .withGenerator(args -> new RestTemplateClientService(args.get(0)));
}
```

"
1876,1183094107,snicoll,490484,"I think rather the code that identifies where the code should be generated should consider the target type for a `FactoryBean`. `MongoRepositoryFactoryBean__BeanDefinitions` is a bit odd.

Can you expand on the `...` please? I wonder if the code has been generated there because there some sort of package private thing on the factory bean we need to call.
"
1877,1183100570,sbrannen,104798,"This has been merged into `5.3.x` and `main`.

Thanks, and congratulations on submitting your first PR to the Spring Framework! 👍 "
1878,1183103660,sbrannen,104798,"Hi @jackycjw,

Thanks for submitting your first proposal to the Spring Framework.

Unfortunately, we do not currently have any concrete needs for infix expression calculation in the core framework and especially not in a core utility such as `NumberUtils`.

In light of that, I am closing this PR.

Please note, however, that you may find the [Spring Expression Language (SpEL)](https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions) useful as an alternative."
1879,1183120746,sbrannen,104798,"This has been merged.

Thanks"
1880,1183139717,sbrannen,104798,"This has been merged.

Thanks"
1881,1183192795,sbrannen,104798,"This has been merged.

Thanks"
1882,1183200259,leexgone,3879725,"> Reopened for a simpler approach as discussed in my closing comment on #28783: We should be able to drop the synchronization completely since `ReflectiveAspectJAdvisorFactory` always performs an early call to `calculateArgumentBindings` anyway, covering our standard scenario. I'll resolve this in time for the 5.3.22 release.

That's a great idea! I'm look forward to the new version."
1883,1183209487,sbrannen,104798,"This has been merged.

Thanks"
1884,1183216254,adrianbob,24224359,"Hi @sbrannen,
Can I take this issue? I will regularly check the Apache doc URLs and post a PR once the links work."
1885,1183232979,sbrannen,104798,"> Can I take this issue? 
> I will regularly check the Apache doc URLs and post a PR once the links work.

There's not much to do really.

It's a single line in `build.gradle` that has to be ""uncommented"".

In addition, I created the aforementioned [HTTPCLIENT-2227](https://issues.apache.org/jira/browse/HTTPCLIENT-2227) issue, so I should receive updates whenever one of the maintainers acts on it.

But if you would like to monitor their web site and keep us posted (or even submit a PR once their web site is back up), feel free to do so! 👍 


"
1886,1183281188,sbrannen,104798,"This has been merged.

Thanks"
1887,1183308182,sbrannen,104798,"This has been merged into `5.3.x` and `main`.

Thanks for all of your effort recently in cleaning up typos! 👍 "
1888,1183354248,snicoll,490484,@philwebb I am assuming this one won't make it the release tomorrow.
1889,1183379256,rstoyanchev,401908,"@wimdeblauwe, one depends on the Servlet API and is used in Spring MVC. The other is part of the `ResponseStatusException` hierarchy that's used in WebFlux.

@dpratsun, it's available as of 6.0.0-M4."
1890,1183401365,jhoeller,1263688,"To be clear, `HibernateTransactionManager` is part of our legacy `orm.hibernate5` package and should be replaced with `JpaTransactionManager` plus `HibernateJpaDialect` / `HibernateJpaVendorAdapter` with `LocalContainerEntityManagerFactoryBean` since we officially only support Hibernate 6.x via JPA.

That said, it turns out that we can make `HibernateTransactionManager` compatible with Hibernate 6.0/6.1 with a few minor tweaks where we're calling Hibernate 5.6's internal connection handling mechanisms instead of the public API (the latter is gone in Hibernate 6.0 but the internal coordinator SPI is still the same). We won't be able to guarantee compatibility with Hibernate 6.x going forward, but for a start this allows usage of `LocalSessionFactoryBean` and `HibernateTransactionManager` for transitional purposes when upgrading from Hibernate 5.5/5.6 to 6.0/6.1."
1891,1183466732,gavenkoa,273770,"@Nasil I'm not sure you have to create and configure `ObjectMapper` each time in the controller. This class was designed to be thread safe, from JavaDoc:

> Mapper instances are fully thread-safe

You have to declare it as a bean ))

I wonder  if the ""hack"" will work on complex objects instead of `String`, when you attempt to resolve `MultiValueMap<String, String>` to a class with `LocalDateTime` or `BigDecimal` setters."
1892,1183927590,fanpocha,26472353,"@poutsma 
Here, you must use the class reactorserverhttppresponse, because the zerocopyhttpoutputmessage implementation class used in the interface is used to download files. If decorative classes are used, class conversion exceptions will occur"
1893,1184125068,poo0054,85894494,"Hi, how did you solve it"
1894,1184130490,rstoyanchev,401908,"@fanpocha, using `.join()` or `.get()` on a `Future` defeats the purpose of asynchronous handling, and in production you'll be out of event loop threads in no time. You'll need to learn a bit of Reactor, but conceptually it's no different than composing on `CompletableFuture` or on `java.util.Stream`. You don't exit the chain to access a value. You compose within it.

As for the rest, package protected classes are not meant for use by applications. You've got to look for options with the available public API, or otherwise you are crossing boundaries that aren't meant to be crossed, which is your choice but not something we are going to support."
1895,1184167695,fanpocha,26472353,"@rstoyanchev 
1、I changed the way of writing about the session problem, which should not exist
![image](https://user-images.githubusercontent.com/26472353/178940453-65d47d3a-5dd6-4a78-aea1-c41ec2a14783.png)

2、As for the reactorserverhtpresponse class, I made it clear for the previous reply that the default decorative class serverhttpresponsedecorator cannot meet the requirements because of functional requirements

3、And I think this is really a bug and should not be repeated，should be fix
"
1896,1184268847,Toan1606,32930353,"@knoobie  I copy your code in github link and still has exception

java.lang.ClassCastException: class jdk.proxy4.$Proxy100 cannot be cast to class org.hibernate.engine.spi.SessionImplementor (jdk.proxy4.$Proxy100 is in module jdk.proxy4 of loader org.springframework.boot.devtools.restart.classloader.RestartClassLoader @3ed2eee9; org.hibernate.engine.spi.SessionImplementor is in unnamed module of loader 'app')
	at org.hibernate.search.impl.FullTextSessionImpl.<init>(FullTextSessionImpl.java:61) ~[hibernate-search-orm-5.8.2.Final.jar:5.8.2.Final]
	at org.hibernate.search.impl.ImplementationFactory.createFullTextSession(ImplementationFactory.java:34) ~[hibernate-search-orm-5.8.2.Final.jar:5.8.2.Final]
	at org.hibernate.search.Search.getFullTextSession(Search.java:44) ~[hibernate-search-orm-5.8.2.Final.jar:5.8.2.Final]
	at org.hibernate.search.jpa.Search.getFullTextEntityManager(Search.java:48) ~[hibernate-search-orm-5.8.2.Final.jar:5.8.2.Final]
	at com.example.demo.controller.PostController.fullTextSearch(PostController.java:36) ~[classes/:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-5.3.21.jar:5.3.21]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150) ~[spring-web-5.3.21.jar:5.3.21]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117) ~[spring-webmvc-5.3.21.jar:5.3.21]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895) ~[spring-webmvc-5.3.21.jar:5.3.21]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808) ~[spring-webmvc-5.3.21.jar:5.3.21]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.3.21.jar:5.3.21]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067) ~[spring-webmvc-5.3.21.jar:5.3.21]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963) ~[spring-webmvc-5.3.21.jar:5.3.21]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.3.21.jar:5.3.21]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.3.21.jar:5.3.21]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655) ~[tomcat-embed-core-9.0.64.jar:4.0.FR]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.3.21.jar:5.3.21]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764) ~[tomcat-embed-core-9.0.64.jar:4.0.FR]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227) ~[tomcat-embed-core-9.0.64.jar:9.0.64]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162) ~[tomcat-embed-core-9.0.64.jar:9.0.64]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.64.jar:9.0.64]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189) ~[tomcat-embed-core-9.0.64.jar:9.0.64]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162) ~[tomcat-embed-core-9.0.64.jar:9.0.64]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.3.21.jar:5.3.21]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117) ~[spring-web-5.3.21.jar:5.3.21]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189) ~[tomcat-embed-core-9.0.64.jar:9.0.64]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162) ~[tomcat-embed-core-9.0.64.jar:9.0.64]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.3.21.jar:5.3.21]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117) ~[spring-web-5.3.21.jar:5.3.21]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189) ~[tomcat-embed-core-9.0.64.jar:9.0.64]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162) ~[tomcat-embed-core-9.0.64.jar:9.0.64]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.3.21.jar:5.3.21]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117) ~[spring-web-5.3.21.jar:5.3.21]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189) ~[tomcat-embed-core-9.0.64.jar:9.0.64]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162) ~[tomcat-embed-core-9.0.64.jar:9.0.64]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197) ~[tomcat-embed-core-9.0.64.jar:9.0.64]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97) ~[tomcat-embed-core-9.0.64.jar:9.0.64]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) ~[tomcat-embed-core-9.0.64.jar:9.0.64]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135) ~[tomcat-embed-core-9.0.64.jar:9.0.64]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) ~[tomcat-embed-core-9.0.64.jar:9.0.64]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78) ~[tomcat-embed-core-9.0.64.jar:9.0.64]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360) ~[tomcat-embed-core-9.0.64.jar:9.0.64]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399) ~[tomcat-embed-core-9.0.64.jar:9.0.64]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) ~[tomcat-embed-core-9.0.64.jar:9.0.64]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890) ~[tomcat-embed-core-9.0.64.jar:9.0.64]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787) ~[tomcat-embed-core-9.0.64.jar:9.0.64]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) ~[tomcat-embed-core-9.0.64.jar:9.0.64]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-embed-core-9.0.64.jar:9.0.64]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-9.0.64.jar:9.0.64]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-embed-core-9.0.64.jar:9.0.64]
	at java.base/java.lang.Thread.run(Thread.java:833) ~[na:na]

Can you let me know how to fix this code ? 
![Exception](https://user-images.githubusercontent.com/32930353/178961252-855fe64b-f230-439e-9812-eabf81710250.png)
"
1897,1184272058,knoobie,3968629,"@Toan1606 if you update your dependencies, the problem is gone. Never had any problems since this was fixed. All Spring Framework / Boot and Hibernate Search versions afterwards work perfectly fine."
1898,1184276860,Toan1606,32930353,"![SpringBootVersion](https://user-images.githubusercontent.com/32930353/178962708-e7e87139-217a-4df8-a047-c686828f21bc.png)
it must be done in springboot version 2.4 right?"
1899,1184277548,Toan1606,32930353,I am testing it in spring boot version 2.7.1
1900,1184289977,knoobie,3968629,"Please check the `Hibernate Search` version. You are using an outdated and unsupported version. The fix was introduced in `Hibernate Search 5.11.6`. If you are fresh starting a project, I would recommend to start with Hibernate Search 6 as well."
1901,1184301710,Toan1606,32930353,"![Exception](https://user-images.githubusercontent.com/32930353/178967083-d14c548f-5874-4e8a-87f3-93c4cd78933b.png)
When I change HIbernate Search to 5.11.6 "
1902,1184302044,Toan1606,32930353,My project is fixed in Hibernate Search 5
1903,1184306977,Toan1606,32930353,Is the code in your github link sure it was running before?
1904,1184308290,marcwrobel,2988912,Note that this is only possible in inline code blocks because indentation and line breaks are lost with `{@code]`.
1905,1184324552,marcwrobel,2988912,"You are welcome, it was the opportunity to contribute a little bit to this project I used for so many years. 

Only a few more PR (#28819, #28821, #28822) and it's done."
1906,1184333574,marcwrobel,2988912,"It seems checkstyle does not like tags in `{@code}` blocks, such as `{@code <async-supported>true</async-supported>}`. This PR is all about that, so may be it should be abandoned."
1907,1184458300,sbrannen,104798,"Related Issues:

- https://github.com/spring-projects/spring-boot/issues/24888"
1908,1184500065,jeffreycrump01880,68860661,"I'm seeing this too with Spring 5.3.20 and Boot 2.7.1.  When I add an `@Bean` to return an empty list, it's working:

```
Field descriptionProviders in com.se.gwa.rest.intercept.PathInterceptor required a bean of type 'java.util.Collection' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'java.util.Collection' in your configuration.
```
 
    @Bean
    public Collection<MappingDescriptionProvider> descriptionProviders() {
        return new ArrayList<>();
    }
"
1909,1184552566,vpavic,1149230,"I gave this solution a spin in one of my projects and so far the impressions are good.

Is it OK if I refine it a bit and provide a PR to replace the existing (WebJars Locator based) `WebJarsResourceResolver` implementations?"
1910,1185082397,alwinlin23,2699243,Any happy news?
1911,1185309245,fanpocha,26472353,Closing the original link can solve the problem
1912,1185333598,bclozel,103264,"This issue is not scheduled for the upcoming 6.0 version, as it remains in the general backlog for now.

While working on real startup cases, we've often found that time is spent in a handful of specific beans that depend on each other. Introducing parallelization there would not save much in many cases as this doesn't speed up the critical path. This is often related to ORM setup and database migrations.

You can collect more information about this for your own application using the [application startup tracking](https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.spring-application.startup-tracking): you should see where and how startup time is being spent and whether parallelization would improve the situation.

For Spring Framework 6.0, we are focusing on Ahead Of Time features for both native use cases as well as startup time improvements.

"
1913,1185455328,sbrannen,104798,"This is a regression caused by the results of #28666.

Specifically, with the switch to the new `SpringFactoriesLoader` APIs, a `TestExecutionListener` is no longer instantiated using `java.lang.Class.newInstance()`. Instead, since `SpringFactoriesLoader` now supports constructor arguments, a `TestExecutionListener` is now instantiated using `java.lang.reflect.Constructor.newInstance(Object...)` which can throw an `InvocationTargetException`.

The changes in d1b65f6d3e90af3f55d1b4d347afb3ebe9a3de44 do not take `InvocationTargetException` into account."
1914,1185471668,sbrannen,104798,"This has been fixed in `main`.

Please give it a try in an upcoming 6.0 M6 snapshot and let us know if it resolves the issue."
1915,1185504604,bclozel,103264,"Thanks @sbrannen , I've merged this PR and just reinstated the tagging information. It's still early so we'll collect more feedback from the Spring team and see if more flexibility is requested."
1916,1186246273,rafaello7,2477169,"The sample program:
[HibernateErrSpring.zip](https://github.com/spring-projects/spring-framework/files/9126270/HibernateErrSpring.zip)
"
1917,1186658404,quaff,143040,"I think it's designed, you should raise issue to hibernate if insist."
1918,1186788287,rafaello7,2477169,"Hibernate `Session` class works correctly. It raises the error because `Session.close()` was invoked in between by Spring.

The `EntityManager` injected by Spring for `em` is not a Hibernate Session/EntityManager, but a proxy created by Spring - `com.sun.proxy.$Proxy67` on the stack above. The problem is with the proxy class."
1919,1186808099,snicoll,490484,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug.

(You can't reuse a query like that)"
1920,1186835124,act-amirsky,92257392,"Thank you, krshreyassu
This is indeed great news!

From: krshreyassu ***@***.***>
Sent: Thursday, July 14, 2022 4:08 PM
To: spring-projects/spring-framework ***@***.***>
Cc: Aaron Mirsky ***@***.***>; Mention ***@***.***>
Subject: Re: [spring-projects/spring-framework] Sonatype vulnerability CVE-2016-1000027 in Spring-web project (#24434)


EXTERNAL EMAIL


This vulnerability is fixed in the latest version - org.springframework : spring-web : 5.3.22

—
Reply to this email directly, view it on GitHub<https://github.com/spring-projects/spring-framework/issues/24434#issuecomment-1184427527>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AV73Y4E347M7WE5GRFVCCFDVUAGMRANCNFSM4KL4M22Q>.
You are receiving this because you were mentioned.Message ID: ***@***.******@***.***>>

Confidentiality: This communication and any attachments are intended for the above-named persons only and may be confidential and/or legally privileged. Any opinions expressed in this communication are not necessarily those of NICE Actimize. If this communication has come to you in error you must take no action based on it, nor must you copy or show it to anyone; please delete/destroy and inform the sender by e-mail immediately.
Monitoring: NICE Actimize may monitor incoming and outgoing e-mails.
Viruses: Although we have taken steps toward ensuring that this e-mail and attachments are free from any virus, we advise that in keeping with good computing practice the recipient should ensure they are actually virus free.
"
1921,1186855015,bclozel,103264,"@joubin The latest updates we received on the matter suggest that the process is still ongoing on their side, see [this twitter thread](https://twitter.com/CVEannounce/status/1534284114290954245) and [this GitHub PR](https://github.com/CVEProject/cvelist/pull/5949#issuecomment-1153931058).

You can reach out to the MITRE team [using the CVE form](https://cveform.mitre.org/) if you want to send feedback about this CVE."
1922,1186906360,rafaello7,2477169,"In any way, the Spring framework behaves badly here.

Hibernate by itself does not make any problems with the `javax.persistence.Query` object reuse. Likewise, I haven't encountered any such problem Java EE environments. Neither in Spring methods marked with `@Transactional` annotation (also with Propagation.NOT_SUPPORTED). The problem exists only in Spring non-transactional methods.

If it is a desired behavior, attempt to reuse the Query object should be caught by Spring and a Spring exception should inform that query reuse is forbidden instead of propagating the Hibernate error, causing confusion."
1923,1187009418,philwebb,519772,"Sorry @snicoll, I didn't get to refine it. The original fix is in M5 so I'll move it back and open a new issue "
1924,1187193075,snicoll,490484,That's by design I am afraid. The `build` methods are package private as you get a customizer of the builder in various callbacks method and being able to call `build` at that stage is a bit odd. What are you trying to do?
1925,1187214473,mhalbritter,98899556,I was writing unit tests for hints. Thanks for pointing me to `RuntimeHintsPredicates`. This PR is no longer needed.
1926,1187509625,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
1927,1188721235,snicoll,490484,"@madhav1306 your application configuration is unfortunately nowhere near enough for us to figure out what can go wrong in your project. If you want support, please share a small sample that we can run ourselves to reproduces the problem."
1928,1188728445,sdeleuze,141109,"The typo fix commit is merged since 2020, the fork is not up to date, so only the RSocket link fix is relevant, so I bring back the original title."
1929,1188869210,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
1930,1188989465,adrianbob,24224359,"Hi @sbrannen,
Javadoc link is working, added a PR: https://github.com/spring-projects/spring-framework/pull/28842"
1931,1189002617,sdeleuze,141109,"@rstoyanchev Should we use the opportunity of 6.0 to deprecate `setSupressCors` and introduce `setSuppressCors`, or even more aggressively just rename it and mentioning it in release notes?"
1932,1189007828,snicoll,490484,Closing in favor of PR
1933,1189047573,rstoyanchev,401908,A deprecation + a new method sounds good to me. It could even be done in 5.3.x since it allows for a migration period and is easy to change if you get a build warning.
1934,1189067505,creckord,393429,"I'm getting the exact same stacktrace with Eclipse Temurin 11. JDK version details:
```
# java -version
openjdk version ""11.0.15"" 2022-04-19
OpenJDK Runtime Environment Temurin-11.0.15+10 (build 11.0.15+10)
OpenJDK 64-Bit Server VM Temurin-11.0.15+10 (build 11.0.15+10, mixed mode)
```"
1935,1189068734,snicoll,490484,@adrianbob thank you for making your first contribution to Spring Framework.
1936,1189108950,rstoyanchev,401908,@creckord I've reopened but we could use some help with debugging potentially. See https://github.com/spring-projects/spring-framework/issues/28671#issuecomment-1173851957 for some clues. Anything further you might be able to find out would be great.
1937,1189148351,sdeleuze,141109,"If we do deprecation + a new method in 5.3.x, is it fine from your POV if we just keep the new method in 6.0? "
1938,1189157198,wilkinsona,914682,https://github.com/spring-projects/spring-boot/issues/31793 is tracking Boot making use of the new SPI.
1939,1189159299,creckord,393429,"@rstoyanchev I poked around a bit more in our log server and noticed that whenever this exception occured, the application was in the process of shutting down, but still processing some requests (i.e. I got a `Stopping ProtocolHandler [""http-nio-8080""]` roughly 200ms before the exception each time). Maybe that could trigger a behavior as you outlined above. 

Anyway, I saw that there's some debug logging in UrlPathHelper.decodeInternal when that happens, so I'll activate that and see if I get something out of it when the error happens again."
1940,1189185258,odrotbohm,128577,"If you need a sample to play with, [here](https://github.com/odrotbohm/spring-restbucks/tree/hacking/boot-3-aot) is an example that explicitly makes package protected repositories public to cause them to generate compiling AOT code.

The workaround is at the top of the branch. You should see the build failing if you check out `HEAD^` of that."
1941,1189412870,snicoll,490484,My fix means that a `FactoryBean` that isn't public will generate code in the target package whereas previously it was in the `FactoryBean` package. This breaks Spring Boot's SharedMetadataReaderFactoryBean.
1942,1189445573,snicoll,490484,@odrotbohm I think your use case is already fixed by https://github.com/spring-projects/spring-framework/issues/28812 as we're now using the target type of the `FactoryBean` so it should generate the code in the repository's package. You won't be able to give that a try until Spring Boot itself switches to framework's snapshots.
1943,1189914610,sdeleuze,141109,"No instance of `javax` in https://github.com/spring-projects/spring-framework/blob/main/spring-context/src/main/java/org/springframework/validation/beanvalidation/MethodValidationPostProcessor.java as far as I can say, maybe you used the wrong branch."
1944,1189933713,snicoll,490484,"Also, you need to use Spring Framework 6 with JakartaEE. Spring Framework 5 will remain on the previous namespace."
1945,1189977368,2012518013,15570709,"However，we cannot find any jars of Spring Framework 6 in maven repository.
eg: https://mvnrepository.com/artifact/org.springframework/spring-context"
1946,1190003437,snicoll,490484,@OlgaMaciaszek thanks a lot!
1947,1190005403,snicoll,490484,Spring Framework 6 is still in milestone phase.
1948,1190056697,2012518013,15570709,"So, when the problem I mentioned can be solved?"
1949,1190067816,rstoyanchev,401908,I think we could switch to a very generic message instead.
1950,1190080434,snicoll,490484,"I have some code that supports the use case described above. This also includes honoring autowired injection points as well as initialization in case the `@Configuration` class needs to check something before producing beans.

I've kept the very conservative approach to only include `MergedBeanDefinitionPostProcessor` instances which happen to be the same than we need for the above. Now that those are registered as post processors, the context will try to post process the bean definition again, unless a package-level `postProcessed` flag is set on the `RootBeanDefinition`. Unfortunately, that logic is in a separate module so I don't know yet how to fix that.

Current code (and test) are available in [35da93c](https://github.com/snicoll/spring-framework/commit/35da93c6f5a9b0e401710bddaa159fde3ce3291d)
"
1951,1190164034,wilkinsona,914682,This is a Framework issue that's similar to https://github.com/spring-projects/spring-framework/issues/28638. We'll transfer it to the Framework team so that they can triage it.
1952,1190138746,2012518013,15570709,"As javax.validation is outdated, is there any possibility that  jakarta.validation can be use in the next release version of Spring Framework 5? When a release version of Spring Framework 6 can be used in production environment? "
1953,1190177239,bclozel,103264,See https://spring.io/blog/2021/09/02/a-java-17-and-jakarta-ee-9-baseline-for-spring-framework-6
1954,1190187787,snicoll,490484,"Unfortunately, the fix breaks other use cases as the supplier is composed in the caller and we now return a `InstanceSupplier<Object>` whereas previously it was an actual typed instance. Example code:

```java
InstanceSupplier<WebMvcAutoConfiguration.EnableWebMvcConfiguration> instanceSupplier = WebMvcAutoConfiguration_EnableWebMvcConfiguration__BeanDefinitions.getEnableWebMvcConfigurationInstanceSupplier();
instanceSupplier = instanceSupplier.andThen(WebMvcAutoConfiguration_EnableWebMvcConfiguration__Autowiring::apply);
```

Thanks @OlgaMaciaszek for the report!"
1955,1190202711,snicoll,490484,"This sample showcases the problem:

```java
package org.springframework;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.InstanceSupplier;
import org.springframework.beans.factory.support.RegisteredBean;
import org.springframework.beans.factory.support.RootBeanDefinition;

public class Sample {

	/**
	 * Get the bean definition for 'sampleConfiguration'
	 */
	public static BeanDefinition getSampleConfigurationBeanDefinition() {
		Class<?> beanType = SampleConfiguration.class;
		RootBeanDefinition beanDefinition = new RootBeanDefinition(beanType);
		beanDefinition.setAttribute(""org.springframework.context.annotation.ConfigurationClassPostProcessor.configurationClass"", ""lite"");
		InstanceSupplier<SampleConfiguration> instanceSupplier = getSampleConfigurationInstanceSupplier();
		instanceSupplier = instanceSupplier.andThen(SampleConfiguration__Autowiring::apply);
		beanDefinition.setInstanceSupplier(instanceSupplier);
		return beanDefinition;
	}

	private static BeanInstanceSupplier getSampleConfigurationInstanceSupplier() {
		return BeanInstanceSupplier.forConstructor().withGenerator(SampleConfiguration::new);
	}

	static class SampleConfiguration {

	}

	static class SampleConfiguration__Autowiring {

		 static SampleConfiguration apply(RegisteredBean registeredBean, SampleConfiguration sampleConfiguration) {
			// autowiring stuff
			 return sampleConfiguration;
		}

	}

}
```"
1956,1190244237,snicoll,490484,"`DefaultBeanRegistrationCodeFragments` is creating an `InstanceSupplier` with the bean class. If the bean exposes generic information, these are lost which could be a problem for the thing post-processing the bean (+ uncheck warning). That probably used to apply to the method that created the instance previously.
		"
1957,1190383051,FlorianKirmaier,6547435,Any suggestions? Then I will change the PR accordingly.
1958,1190587127,philwebb,519772,I've updated `InstanceSupplier.andThen()` so that the factory method isn't lost. We still need to fix the generics.
1959,1190625663,Pulkit-Garg15,85679594,"Hi, I am a beginner with Open source contributions. This would be my first contribution, can anyone please guide me through it?"
1960,1191066408,snicoll,490484,"@Pulkit-Garg15 thanks for the offer but this is already a PR (see the ""Files Changed"" tab above) so this isn't open for contribution."
1961,1191425709,philwebb,519772,I've added a generic to `BeanInstanceSupplier` which I hope will fix this. I'd like to leave this one open to see if we can improve the generated code even more.
1962,1191540669,sdeleuze,141109,I have began to add such support locally but Quartz is heavily reflection based so it will require more work on library side.
1963,1191704942,bclozel,103264,"This behavior change was contributed by Spring Framework in #28552.
I've added a [new section in the Spring Boot migration guide to help developers with the upgrade](https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0.0-M4-Release-Notes#spring-mvc-and-webflux-url-matching-changes). 
Thanks for your feedback!"
1964,1191975198,pivotal-cla,16822967,"@jensdietrich Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28852)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28852) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1965,1191979402,marcwrobel,2988912,"@sdeleuze, I have created a PR against 5.3.x for this issue. I marked `setSupressCors` as deprecated for removal in 6.0 (@rstoyanchev seems OK with your reasoning)."
1966,1191986564,Chealer,486141,"@rstoyanchev : As indicated, this bug is about default behavior (at least regarding search), so indeed, they are not **completely** ignored, they are ""just"" ignored by default. Yes, the effect on search can be worked around (and quite easily once one knows how). What makes this so critical is perhaps that this default behavior is far from obvious."
1967,1191986647,pivotal-cla,16822967,@jensdietrich Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28852)!
1968,1192233301,JanStureNielsen,4248566,"It seems like `checkReadable` should be consistently handling empty-content, or not at all, regardless of packaging, and this inconsistency feels like a bug; so, what motivated the comment [""empty file or directory -> not considered readable...""](https://github.com/spring-projects/spring-framework/blob/55a8bdc86c14e988d31768f76b42ea0a0f8f89b4/spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java#L134)? 

If empty-content is okay for `ResourceUtils`, `HttpURLConnection`, and `JarURLConnection` branches, why not okay for the rest?"
1969,1192282635,snicoll,490484,@jensdietrich thanks for the PR but  ASM is a 3rd party lib we shade and we don't want to modify them.
1970,1192283916,snicoll,490484,Thanks @marcwrobel. Closing in favor of PR #28853 
1971,1192286717,snicoll,490484,Please stop creating these. You're wasting both our time and yours.
1972,1192295537,snicoll,490484,"`action` is calling a method of the same class. That doesn't take the proxy into account, I am afraid. There are several sections in the reference guide that covers this. For instance, https://docs.spring.io/spring-framework/docs/current/reference/html/integration.html#scheduling-task-executor

I can see that `@Scheduled` could be explicitly stated in that note there so we'll reuse this issue for that."
1973,1192379925,odrotbohm,128577,"I just upgraded to the latest snapshots of Boot and Framework and still see the bean definitions for package protected repositories be generated into the `org.springframework.…` space. I see the constructor argument in the generated code use a `String` with the fully qualified classname, but the `beanType` a couple of lines still uses a reference to the class literal that invisible from that location.

Wouldn't it make sense to rather generate the entire bean definition into the package of the actual target type (if that is package protected)?"
1974,1192381026,snicoll,490484,"> Wouldn't it make sense to rather generate the entire bean definition into the package of the actual target type (if that is package protected)?

It does that, unless the `FactoryBean` is not publicly accessible. I'll give that a try again"
1975,1192395933,snicoll,490484,So the problem is that the code doesn't handle a `FactoryBean` that itself has a generic. We'll have to tune how the discovery logic works.
1976,1192398040,odrotbohm,128577,"Thanks, Stéphane! Just for reference: you should be able to do the following for Restbucks to see the failure or verify a fix:

```
$ git co d08baf431a7cec2e1e08612f9bbf792fdecb37f1
$ mvn -Paot
```"
1977,1192432946,riimeik,13738028,"You can ignore the action method, it's there only to explain the use of self-injection.

When an early reference is requested to a bean containing `@Scheduled` methods, and it also requires proxying (e.g. due to `@SchedulerLock` and `@Transactional` annotations), the `@Scheduled` annotation processor receives a reference to the raw bean, not the proxy. It's more of a problem with how AbstractAutoProxyCreator handles early references, and therefore what object subsequent BeanPostProcessors work with."
1978,1192437075,OlgaMaciaszek,4328892,"Possibly related issue is happening with Spring Cloud LoadBalancer (in this case, the issue is only present for native images - works fine on the JVM):
`org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'test.LoadBalancerClientSpecification': Unexpected exception during bean creation
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:539) ~[card-service:6.0.0-SNAPSHOT]
        at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326) ~[card-service:6.0.0-SNAPSHOT]
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[card-service:6.0.0-SNAPSHOT]
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324) ~[card-service:6.0.0-SNAPSHOT]
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) ~[card-service:6.0.0-SNAPSHOT]
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:930) ~[card-service:6.0.0-SNAPSHOT]
        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:926) ~[card-service:6.0.0-SNAPSHOT]
`
[...]
`Caused by: org.springframework.beans.TypeMismatchException: Failed to convert value of type 'java.lang.String[]' to required type 'java.lang.Class[]'; Could not find class [io.github.olgamaciaszek.cardservice.lb.CustomLoadBalancerConfiguration]
        at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:79) ~[card-service:6.0.0-SNAPSHOT]
        at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:45) ~[card-service:6.0.0-SNAPSHOT]
        at org.springframework.beans.factory.aot.BeanInstanceSupplier.resolveArgument(BeanInstanceSupplier.java:327) ~[na:na]
        at org.springframework.beans.factory.aot.BeanInstanceSupplier.resolveArguments(BeanInstanceSupplier.java:265) ~[na:na]
        at org.springframework.beans.factory.aot.BeanInstanceSupplier.get(BeanInstanceSupplier.java:208) ~[na:na]
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.obtainInstanceFromSupplier(AbstractAutowireCapableBeanFactory.java:1224) ~[card-service:6.0.0-SNAPSHOT]`"
1979,1192464650,snicoll,490484,"I've polished things up and the sample above does work now. I have a feeling it will require more rounds of update as it is a bit tricky right now.

@odrotbohm going forward, please do not reopen the issue as the team may decide to fix this either as part of a polish of the existing fix, or a separate issue. "
1980,1192617482,odrotbohm,128577,"Sure thing, sorry about the hassle. I'll give the fix a try as soon as it's made it into some binaries."
1981,1192641456,odrotbohm,128577,"Got the binaries, works fine now. Thanks! 🙇"
1982,1192725546,snicoll,490484,"@jhoeller and I brainstormed and it's not easy as we have several conflicting requirements.

The AOT code needs to browse `RootBeanDefinitions` including inner bean definitions https://github.com/spring-projects/spring-framework/blob/ae6a464a80507c63a84cc86c4e711107b097e168/spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java#L434 whereas the ""regular"" code does it on the actual bean that is about to be instantiated.

Given that we want to invoke this once, it is hard to define a ""key"" that would clarify that it is invoked only once as the `RootBeanDefinition` and the list of `MergedBeanDefinitionPostProcessor` implementations are not linked."
1983,1192838376,bclozel,103264,"This media type variant was introduced because some browsers were not using UTF-8 by default. As stated in the discussion with you at the time, [Sebastien pointed out that UTF-8 is the default anyway](https://github.com/spring-projects/spring-framework/issues/18178#issuecomment-453431849).

It's been deprecated later in #22788 because that advice was no longer relevant. I don't think it's ever been required to enforce the charset for other types of clients. If a server returns non-UTF8 content to your client, there's probably a bug on the server side.

Could you explain what's triggering this issue now? Is there a specific problem you can share, can you share a sample Spring application misbehaving in some way?"
1984,1192903257,janeisklar,1239732,I am unfortunately still seeing this issue with M5 and created a new ticket with a small project to reproduce the issue: #28860
1985,1192959257,manueljordan,2552795,">If a server returns non-UTF8 content to your client, there's probably a bug on the server side.

If exists the scenario where a default infrastructure configuration for UTF-8 was created for either SF or SB, therefore the `MediaType` use has no sense - but if it does not exist therefore is assumed that for a Web/Rest controller uses the _produces_ and _consumes_ attributes to enter in action to work with JSON with UTF-8 - Am I correct, right?

I assume the same scenario for `accept(MediaType... acceptableMediaTypes)` and `contentType(MediaType contentType)`

>Could you explain what's triggering this issue now? Is there a specific problem you can share, can you share a sample Spring application misbehaving in some way?

I remember that was mandatory for some SF apps (old releases) based on web (HTML) and rest - define for JSON the JSON-UTF-8 combination ... now according with the current javadoc it is already solved for web(HTML) but what about rest?
"
1986,1193036012,livk-cloud,50291874,> 或许只是修复了`BeanMap`的使用
1987,1193079832,bclozel,103264,"It's always been about some specific browsers, never about other types of clients.
In that sense, there is no need to mention them in the javadoc as it would just confuse developers. The deprecation warning is quite clear: don't use this anymore and use the variant without the Charest from now on, in all cases."
1988,1193080110,kriegaex,1537384,"For reference: This question has been asked again lately on Stack Overflow, and here is [my answer](https://stackoverflow.com/a/73088853/1082681) explaining the situation in more detail, also linking back to @mdeinum's reply here. The more general issue with trying to advise final methods accessing instance fields is explained [here](https://stackoverflow.com/a/73057499/1082681). My answer on SO also contains sample pointcuts for users who want to do advise filters using native AspectJ."
1989,1193086300,jensdietrich,2435830,"Makes sense, I should have checked for shading."
1990,1193109510,SachinSharmaa,32370479,It works if I add --add-reads mymodule.name=ALL-UNNAMED. But I was expecting aop to be modularised.
1991,1193112170,SachinSharmaa,32370479,"Never mind worked when I added requires spring.aop to my module. I did not find this solution anywhere, also the stack trace did not have anything to suggest that. Maybe some documentation or error logging can be added for this."
1992,1193115026,pivotal-cla,16822967,"@disaster1-tesk Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28862)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28862) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
1993,1193163515,whydoievenneedthis,87586203,"I have prepared a repo with minimal code which showcases the exception at startup time:
https://github.com/whydoievenneedthis/spring-hibernate-error"
1994,1193261601,whydoievenneedthis,87586203,"Nevermind, this is most probably on hibernate side. I've opened a ticket with them.
https://hibernate.atlassian.net/browse/HHH-15417, in case you want to keep track."
1995,1193670925,snicoll,490484,"@hduerkop thanks for the PR but we have no plan short term to do this so this PR is not actionable. Going forward, please create an issue first to discuss the change to avoid wasted efforts."
1996,1195078444,snicoll,490484,What version of Spring Boot is this? Spring Boot prevents [bean overriding by default](https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.1-Release-Notes#bean-overriding) since 2.1 so I would expect a different error message.
1997,1195078446,twobiers,22715034,"I have created an example repo for this issue with Spring Boot 2.7.2:
https://github.com/twobiers/spring-boot-naming-error

Personally, I had this issue with 2.6.9"
1998,1195078449,pruidong,13309008,"I also reproduced this problem in Spring Boot 3.0.0-M2.

I found that the following class is not registered as a Spring Bean, so an exception is thrown when BarService is injected.

```java
@Service
public class FooService {
}
```

The condition to trigger the BeanDefinitionOverrideException is that the bean is defined in two different classes:

The first class defines:

```java
@Bean
   public BarService barService(){
     return new BarService();
   }
```

The second class defines:

```java
  @Bean
   public BarService barService(){
     return new BarService();
   }
```"
1999,1193719757,snicoll,490484,We don't really know what is mandatory and what isn't. It would be nice to make a decision so that teams can test their integration based on what we intend to do for 6.0
2000,1193769231,jhonynet,26300682,I have the same issue :(
2001,1193858495,pivotal-cla,16822967,"@arvyy Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28867)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28867) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
2002,1193860753,pivotal-cla,16822967,@arvyy Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28867)!
2003,1193933800,snicoll,490484,@arvyy thank you for making your fist contribution to Spring Framework.
2004,1193939184,snicoll,490484,This has been fixed by 578f155809e783c57b5a86a3ec7b335e967a452c
2005,1194018472,jhoeller,1263688,"Have you updated your R2DBC dependency accordingly? It needs to be 1.0.0 now, which includes a signature change from Integer to Long in a related place."
2006,1194133535,bclozel,103264,"@vpavic I don't think we should implement the resolution mechanism in Spring Framework directly, as this is webjars-locator's purpose in the first place. As far as I know there is no concrete specification here to follow, so we might derive from current or future behavior of the official library.

GraalVM native becoming an important topic in the Java community, I think we should instead think about proper native support in webjars. Frameworks could instead drive webjars-locator at build time; the library could resolve all available resources and dump them in an index and possibly GraalVM resource configuration, since those resources will be needed at runtime. At runtime, Frameworks could then query the locator library for resources and it could use its own index (no scanning involved!) to resolve resources.

I'm seeing that other frameworks are working on custom-made solutions to tackle this problem and I think it would be nice to consider that as a community.

I'm closing this issue as a result since this is not the path we're choosing, but we can keep using this to discuss possible plans. Thanks!"
2007,1194145106,dsyer,124075,"I'm a little bit disappointed as I don't think it's true that ""this is webjars-locator's purpose in the first place"" - that library has intentionally given itself a much larger surface area than we need for simply locating a version for a webjar, and it's a huge waste of resources to use webjars-locator if that's all you need (which I believe is 99-100% of Spring users)."
2008,1194145867,hantsy,854520,"Just notice this, update the `r2dbc-spi` to 1.0.0.RELEASE, still got the same error.
I was using PostgreSQL in this sample project, the PostgreSQL drivers 0.9.1 is not compatible to 1.0.0.RELEASE?"
2009,1194146756,snicoll,490484,"It isn't easy to implement. We've gone through a few rounds and the summary is that the context will clone `RootBeanDefinition` quite a lot. The clone method does not transmit the `postProcessed` flag so even if we set it upfront, it is lost later on.

The reason why we clone is that creating a bean leads to a [call to `markBeanAsCreated`](https://github.com/spring-projects/spring-framework/blob/main/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java#L291). If this is the first time the bean is created, its merged bean definition is marked as stale, which leads to invoking the MBDPP again.

After a brainstorming with @jhoeller we're repurposing this issue to review the whole mechanism and see if there isn't a way to avoid re-merging `RBD`.



"
2010,1194147338,bclozel,103264,"Hello @srunnoe !

We already have infrastructure for registering hints in `RuntimeHints` using `RuntimeHintsRegistrar` (registered in `aot.factories` files or using `@ImportRuntimeHints`). Lots of cases are handled automatically  as well: the entire configuration model, web controllers, etc.

Could you share a specific example (ideally, with code snippets) showing what you're trying to achieve?

So far we didn't need this approach in Spring Framework and we didn't like the way things were going with [spring-native `@TypeHints`](https://docs.spring.io/spring-native/docs/current/reference/htmlsingle/#_annotated_hints). Testing support and the ability to make those contributions optional were good drivers for this decision.

We can of course reconsider that, so feedback welcome!"
2011,1194148931,snicoll,490484,"Having tried to fix the problem above in several ways, we've decided to resort to a double invocation of MBDPP if a bean is instantiated at build-time."
2012,1194149631,hantsy,854520,"OK, got it resolved by update r2dbc-postgres to 1.0.0.RC1"
2013,1194155623,bclozel,103264,"The tagline of ""webjars-locator-core"" is ""locate assets within WebJars"" and that's exactly how we're using it. If the approach described here is much more efficient and compatible with native apps, this should be considered as the default in the library itself. I don't think that re-implementing this feature in Spring directly is doing much good to the webjars community."
2014,1194177211,srunnoe,48636684,"That might be exactly what I am looking for. Are there any test cases or docs that explain how RuntimeHints work?

I thought the spring-native project was basically getting merged into SpringBoot 3, but it sounds like that isn't the case. Is there any readout anywhere that explains the relationship between the projects?"
2015,1194262959,vpavic,1149230,"I agree with @dsyer.

The implementation outlined here does things _Spring way_ and is therefore simpler than anything 3rd party could be, with added benefits of not requiring any 3rd party dependencies (or its own transitive dependencies), and not having to manage dependency at Spring Boot level.

@bclozel you might want to also take a look at https://github.com/spring-projects/spring-boot/issues/31560 (which is how I got here in the first place) - over there even @jamesward expressed preference for Spring Framework itself not having to rely on `webjars-locator-core`."
2016,1194300896,snicoll,490484,"> I thought the spring-native project was basically getting merged into SpringBoot 3

I don't know what you mean by ""merging"" but it is certainly not a copy/paste as we've been experimenting a lot and the past months have been focused on using the experience to build native support in the core. From that perspective it can't be a copy/paste to begin with. Spring Native is in minimal maintenance mode for experimenting with Spring Boot 2.x only.

We're still in quite an early stage for this. Our plan is to start documenting things for the next milestone in September. If you want to give things a try, you're very much welcome and I'd recommend looking at [the smoke tests](https://github.com/spring-projects/spring-aot-smoke-tests). 

I am going to close this now, but feel free to comment further if necessary.

"
2017,1194304152,bclozel,103264,"> The implementation outlined here does things Spring way and is therefore simpler than anything 3rd party could be, with added benefits of not requiring any 3rd party dependencies (or its own transitive dependencies), and not having to manage dependency at Spring Boot level.

Spring Framework is mostly about integration with 3rd party libraries. We usually roll our own implementations for well-known specs or when there's no support in the Java community. This is not the case here.

> @bclozel you might want to also take a look at https://github.com/spring-projects/spring-boot/issues/31560 (which is how I got here in the first place)

Thanks @vpavic I was very much aware of the Spring Boot issue. This decision is backed by both teams.

>  over there even @jamesward expressed preference for Spring Framework itself not having to rely on webjars-locator-core.

In [the official Webjars documentation](https://www.webjars.org/documentation) I'm seeing that many projects don't support version agnostic resolution. This is the feature shipped by the webjars-locator-core library. If this feature is not considered useful after all, we could use the existing infrastructure entirely and drop any webjar-specific implementation. Would this solve the problem?"
2018,1194385157,jamesward,65043,"The main purpose of `webjars-locator-core` is to translate paths like `/webjars/jquery/jquery.js` to the file in the classpath like `jar:file:///foo/blah/jquery.jar!/META-INF/resources/webjars/org.webjars/jquery/1.9.0/jquery.js`
There is some logic in that transform which could be pulled out into a new library (`webjars-locator-core-common` for lack of a more terrible name idea) or could have a formal spec.  For Spring, the classpath reading part should really be done in Spring since it has its own way to do this and doing it differently for just WebJars has a performance cost and is not compatible with Spring Native.  Let me know if there is anything I can help with on this."
2019,1194543347,bclozel,103264,"> The main purpose of webjars-locator-core is to translate paths like /webjars/jquery/jquery.js to the file in the classpath like jar:file:///foo/blah/jquery.jar!/META-INF/resources/webjars/org.webjars/jquery/1.9.0/jquery.js

As far as I understand, [this is the only feature we're using in Spring](https://github.com/spring-projects/spring-framework/blob/9573fc96ecedfe703af4a001b0ea66e5f74be3bb/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/WebJarsResourceResolver.java#L108).

> There is some logic in that transform which could be pulled out into a new library (webjars-locator-core-common for lack of a more terrible name idea) or could have a formal spec. 

But how this library would know about which version string to use, doesn't that require looking into the classpath?

> For Spring, the classpath reading part should really be done in Spring since it has its own way to do this and doing it differently for just WebJars has a performance cost and is not compatible with Spring Native.

Finding out about the version string for each JAR is really the important part and this doesn't depend on Spring. As for the performance cost, there isn't any if the scanning is performed at build time. During the AOT phase, Spring could trigger the scanning and the resolution of the ""webjar name""/""version string"" pairs required for runtime resolution.

>  Let me know if there is anything I can help with on this.

With the mechanism I've just described, not only GraaVM native support could be achieved for all consumers, but this could also be used for the vanilla JVM case and bring significant improvements as scanning would not be required during startup anymore. Should I open an issue against the webjars library to discuss this?

"
2020,1195078452,wilkinsona,914682,"This looks like a Framework bug to me. The same underlying failure occurs with the following main class:

```java
package com.example.demo;

import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan
public class FooService {

	public static void main(String[] args) {
		try (AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext()) {
			((DefaultListableBeanFactory)context.getBeanFactory()).setAllowBeanDefinitionOverriding(false);
			context.register(FooService.class);
			context.refresh();
		}
	}
	
}
```

Using this main class removes Spring Boot from the application.

`com.example.demo.deeper.FooService` isn't registered as, during component scanning, `ClassPathBeanDefinitionScanner.isCompatible(BeanDefinition, BeanDefinition)` returns true when comparing its definition with the definition for `com.example.demo.FooService`. In this case I don't think they should be considered to be compatible and a `ConflictingBeanDefinitionException` should have been thrown.

We'll transfer this to the Framework team so that they can take a look."
2021,1195079834,mdeinum,606761,"Isn't that exactly what the javadoc states? It will be the union of both so in this case the URL will be `/multi/rm` and the supported methods will be POST and PATCH (as each `@RequestMapping` annotated mapping will inherit the settings from the class, these will be merged together to get what the test shows). "
2022,1195096375,rstoyanchev,401908,"Servlet containers reuse request and response object instances. If the shutdown, resets those, that could help to explain. Spring Boot has a graceful shutdown feature that could help with this. "
2023,1195114195,snicoll,490484,@jhoeller a concrete use case with a test that's failing is available in https://github.com/snicoll/spring-framework/commit/383aba7cbd1708af9102cd88897110e5025b2bac
2024,1195129929,jdcaperon,30421879,This would be great to have +1 for support
2025,1195136818,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
2026,1195138709,vvalchev,1650972,"I came upon this issue, because we noticed the inconsistencies in the Errors API. So in order to generate the same error response we came up with this quick'n'dirty solution:
```
@Component
public class CustomErrorAttributes extends DefaultErrorAttributes {

  @Override
  public Map<String, Object> getErrorAttributes(WebRequest webRequest, ErrorAttributeOptions options) {
    Map<String, Object> errorAttributes = super.getErrorAttributes(webRequest, options);
    Throwable error = getError(webRequest);
    if (error instanceof ConstraintViolationException) {
      Set<ConstraintViolation<?>> violations = ((ConstraintViolationException) error).getConstraintViolations();
      errorAttributes.put(""errors"", violations.stream()
          .map(CustomErrorAttributes::of)
          .collect(Collectors.toList())
      );
    }

    return errorAttributes;
  }

  private static FieldError of(ConstraintViolation<?> cv) {
    return new FieldError(
        cv.getRootBeanClass().getCanonicalName(), // object name
        cv.getPropertyPath().toString(), // FIXME: currently is 'method.param'
        cv.getInvalidValue(), // rejected value
        false,
        new String[]{cv.getConstraintDescriptor().getAnnotation().annotationType().getSimpleName()},
        cv.getExecutableParameters(),
        cv.getMessage()
    );
  }

}
```

It is far from perfect. It can be improved, if we reuse the code in `SpringValidatorAdapter`, which also converts from `ConstraintViolationException` to errors.

Further details on the improved solution can be found in the following discussion: https://stackoverflow.com/questions/14893176/convert-jsr-303-validation-errors-to-springs-bindingresult

"
2027,1195142147,dsyer,124075,"> doesn't that require looking into the classpath?

Yes, but to get the version you only need to read a classpath resource and it's always in the same place - there's no need for scanning, which is where the extra baggage comes in webjars. Scanning isn't really required at all (as shown by the code snippet I provided originally), so it's a distraction. If @jamesward is open to make the scanning features optional in webjars (either by extracting another jar, or by making the existing dependencies optional), I can definitely help with that. Spring users just want those version-free resource paths."
2028,1195149166,snicoll,490484,"I've experimented with this and this is more noise than I thought it would be. The `withName` that gives you another instance isn't really `Closeable` as we expect the root would be closed at the end and flush all resources. That said, it is an interesting exercise as things are a bit undocumented at the moment and anyone could call `writeGeneratedContext` on a child (with a cast though) and that would write everything.

I think we'd be better off with some additional documentation."
2029,1195185711,maciejmiklas,3326660,Why not set non-serializable fields as transient?
2030,1195221724,poutsma,330665,@violetagg has done most of the work here https://github.com/violetagg/spring-framework/commits/reactor-netty5
2031,1195260724,ascopes,73482956,"The thing I wish we could do with this is be able to generate a consistent header name, cookie name, path variable, JSON path or xpath from the property path without adding massive amounts of reflective code. This would be really helpful for giving error messages to the user that reflect the payload shape rather than the spring internal representation which may differ with some Jackson annotations like unwrapping.

```json
{
  ""status"": 400,
  ""title"": ""Bad Request"",
  ""detail"": ""Validation failed"",
  ""invalidParams"": [
    {
      ""location"": ""headers"",
      ""name"": ""X-Request-ID"",
      ""reason"": ""Must be a non-empty string""
    },
    {
      ""location"": ""body"",
      ""name"": ""$.user.name"",
      ""reason"": ""Must be specified""
    }
  ]
}
```

While I can write tonnes of code to try and cover the cases, it would be a great set of features to have internally. Error messages that use standard notations to refer to the request format would also prevent leaking internal implementation detail.

The issue I currently see with the Spring 5.x.x branch is that since there is no consistent way to generate tidy validation without dealing with lots of edge cases, everyone seems to end up implementing their own solutions to this, so there is never a standard format that is widely accepted. Most enterprise companies won't use the current binding error responses on their public facing systems because the error messages can leak internal system details like the platform and libraries in use, or the error messages don't tarry up with the request format if snake_case, kebab-case, or custom named attributes are used.

Businesses then consider that to be a security risk in some cases. (Security through obscurity isn't really an excuse in my opinion but opinions on the subject tend to differ wildly between people).

One thing that does come to mind to make this easier is how JAXRS allows `@BeanParam` to define beans containing common request attributes. That would not only allow reduction of parameters crammed with lots of annotations, but would also allow using a single validator to cover the headers, path, and body rather than needing lots of separate components to do this.

It would also allow body validation failures to be reported alongside header validation errors.

```java
@Validated
public record NewUserRequest(
  @NotBlank @RequestHeader(""X-Request-ID"") String requestId,
  @NotNull @Valid @RequestBody NewUser body
) { }

...

@PostMapping(""/users"")
public void newUser(@Valid @RequestBean NewUserRequest request) {
    ...
}
```

From previous experience, BeanParam in JAXRS made consistent validation much simpler to handle.

This would also potentially make using bean validation with functional routing easier too, as you could still produce an annotated payload and validate it. It isn't uncommon to want to move a lot of headers, path variables, the body, and other components around as one bean between components either."
2032,1195451944,snicoll,490484,"Phil and I discussed this and agreed to close this issue as the reported problem is fixed. We've brainstormed on how we could make it better, see #28875."
2033,1195529869,marcwrobel,2988912,During my search I also detected a broken link in `build.gradle` : https://www.ibm.com/docs/api/v1/content/SSEQTP_8.5.5/com.ibm.websphere.javadoc.doc/web/apidocs/. I do not know if it is safe to remove.
2034,1195588188,snicoll,490484,This has been superseded by #28877
2035,1196230422,urisimchoni,10113228,"I guess I misread the docs. The Spring documentation states that (1.3.2) @RequestMapping is used ""...at the method level to narrow down to a specific endpoint mapping."" The Javadocs state the ""method"" element is used for narrowing the primary mapping. So I understood that the mapping is narrowed once by the type-level annotation, and then _further_ narrowed by the method level annotation.
Issue can be closed as far as I'm concerned."
2036,1196433768,bclozel,103264,"Now that we've evolved the AOT processing phase, it seems that we're contributing `RuntimeHints` in a dynamic fashion that already takes the classpath into account.

The `typeReachable` information should instead be used by contributions to signal that while the required dependency is on the classpath, we don't know if the hint will be useful since it depends on some type being reachable during the GraalVM static analysis. This can be especially useful for hints linked to clients (HTTP, RSocket, etc) since we don't necessarily know if they'll be used at runtime without knowing the actual method bodies.

For now, we don't have a use case for filtering hints based on their typeReachable information during the AOT phase. I'm closing this issue for now, we can revisit this decision if such a use case is found."
2037,1196583711,poutsma,330665,"This is now complete:
* Deprecation of `ListenableFuture` and related types (`ListenableFutureCallback`, `SettableListenableFuture`, etc.)
* Deprecation of `AsyncListenableTaskExecutor` in favor of default methods in `AsyncTaskExecutor` (`submitCompletable`).
* `AsyncHandlerMethodReturnValueHandler` now has `toCompletableFuture` instead of toListenableFuture.
* `WebSocketClient` now has `execute` methods, which do the same as `doHandshake`, but return `CompletableFutures` (cf. the reactive `WebSocketClient`).

All other changes:
* add an overloaded method that takes a `CompletableFuture` parameter instead of `ListenableFuture`, and/or
* add a method with a 'Async' suffix that returns a `CompletableFuture` instead of a `ListenableFuture` (`connectAsync`, `sendAsync`)."
2038,1196662959,snicoll,490484,"We've decided to stop writing those attributes and get feedback on actual use of the attributes, if any. Based on that we can reconsider our support before GA."
2039,1196789522,sbrannen,104798,"> Never mind worked when I added requires spring.aop to my module. 

Glad to hear that you sorted it you!

> Maybe some documentation or error logging can be added for this.

We are considering providing documentation on using Spring with the Java module system in the Spring Framework 6.0 time frame."
2040,1196805195,mhalbritter,98899556,"Ah, sorry, this is a boot issue."
2041,1196847686,bclozel,103264,Closing in favor of #28880
2042,1196854616,sbrannen,104798,"> Even if a null Integer is not legit in mulitpart_form_data, I would expect a more meaningful exception message.

At a glance, it looks like the error message is coming from Tomcat's parsing (`org.apache.catalina.connector.Request.parseParts`).

What do you expect Spring Framework to do differently?"
2043,1196922652,nfin,177955,"> At a glance, it looks like the error message is coming from Tomcat's parsing (`org.apache.catalina.connector.Request.parseParts`).
> 
> What do you expect Spring Framework to do differently?

OK, I will send bug report to Apache project.  I am closing this Spring issue for now."
2044,1196958140,bclozel,103264,"I think this might be a duplicate of #27753, since Spring Boot's `FailureAnalyzer` infrastructure is loaded with `SpringFactoriesLoader`."
2045,1197174243,jamesward,65043,"One of the core goals of WebJars is making the assets easily cachable which is why the artifacts include the versions in the paths.  The usage of `webjars-locator-core` actually makes things not easily cachable (ETAG, far-future expires, etc).  So really, if we are going to change things, I'd rather try to come up with something that fits with the easily cachable goal.  With Play Framework we built a number of things that make it easy for users to use WebJars (versionless) but then resolve to the easily cachable artifacts.  As an example, in Play users use a layer on top of `webjars-locator-core` in their server-side rendering templates so they can do this:
```
@webJarsUtil.locate(""bootstrap.min.css"").css()
```
And that finds the resource and renders something like:
```
<link rel=""stylesheet"" href=""/webjars/jquery/1.10.0/bootstrap.min.css"">
```

In Play there is a whole JS / CSS pipeline that WebJars fits into as well and I'm not sure if there is something similar in Spring.

All that to say... Ultimately I'd rather help users move away from serving versionless paths to WebJar artifacts but I'm not sure how feasible that is in Spring."
2046,1197234934,bclozel,103264,"This is exactly what we've been doing [since Spring Framework 4.1](https://spring.io/blog/2014/07/24/spring-framework-4-1-handling-static-web-resources) - see [the reference documentation on static content](https://docs.spring.io/spring-framework/docs/5.3.22/reference/html/web.html#mvc-config-static-resources). We also support appending a content hash to the path for immutable resources with CDNs.

The code snippet [I pointed out above](https://github.com/spring-projects/spring-framework/issues/27619#issuecomment-1194543347) uses webjars-locator-core to resolve the correct version and rewrite links (resolutions are of course cached). As far as I understand, Play's `WebJarsUtil` is also using `WebJarAssetLocator` from webjar-locator-core. So we're essentially doing the same thing.

I think @dsyer 's point still stands."
2047,1197261815,bclozel,103264,"@mwisnicki I’ll look into skipping the optimization in this case. In the meantime, I think using a ˋWebFilter` instead for this will be much more efficient as you’ll keep the optimization. We’ve measured the performance improvement of this one and it’s not negligible.

Is your filter doing anything else or just adding a header?"
2048,1197403955,vpavic,1149230,"Just to make sure everyone's on the same page in terms of the current state of `WebJarsResourceResolver` vs what's being proposed here, I've pushed [a branch](https://github.com/vpavic/spring-framework/tree/gh-27619) with the WIP changes that I did last week."
2049,1197482536,mwisnicki,96032,This was just a minimal reproducible test case. Unfortunately I have no control over actual servlet code :(
2050,1197709142,bclozel,103264,"Then you should make sure that the filter does not perform blocking operations (like an HTTP client fetching a token synchronously) or is not reading/writing to the request or response with the blocking Servlet APIs.

This would completely defeat the runtime benefits of WebFlux."
2051,1197731023,snicoll,490484,"With the recent work on #28833, we have the ability to select if we want to consider beans from the context. At the moment, the following implementations are instantiated at build-time:

* `BeanRegistrationAotProcessor`
* `BeanRegistrationExcludeFilter`
* `BeanFactoryInitializationAotProcessor`

I think `BeanRegistrationExcludeFilter` is a little odd. I think `BeanRegistrationAotProcessor` may implement this  interface to complement what its contribution is doing. I am not sure that loading any bean that implements this interface represents an actual use case.

As for `BeanFactoryInitializationAotProcessor` there's no question about it being a good candidate but the lack of boundaries concerns me a bit. 
"
2052,1197739110,snicoll,490484,"Unfortunately, this approach is too restricted for configuration classes or builder-style that gathers a number of dependencies to produce the target bean. An example of such a use case is `LocalContainerEntityManagerFactoryBean` that is configured with various components, including a `DataSource`.

Rather than restricting the dependencies that one can inject, perhaps we could provide a proxy that would throw an exception if a component attempt to use it. Such proxy would not be created for classes that are flagged (maybe with an annotation). A list of types or predicates can also be provided."
2053,1197868715,bclozel,103264,The missing ApiDiff report was published as well here: https://docs.spring.io/spring-framework/docs/6.0.0-M4_to_6.0.0-M5/
2054,1197876190,philwebb,519772,I wonder if we've got anyone actually using `BeanRegistrationExcludeFilter`?
2055,1197967590,poutsma,330665,"> Why not set non-serializable fields as transient?

Because some implementations of the field are serializable, and some (Netty's) are not.

I suppose we can make a copy of the `HttpHeaders`, and ensure serializability that way.

"
2056,1198209826,rbri,2544132,Again more than a month gone without feedback. The HtmlUnit changes are already released.
2057,1198621639,gumanoid,4945920,"One more use case for transaction retries is CockroachDB. Retry is [needed](https://www.cockroachlabs.com/docs/v22.1/transactions#transaction-retries) for basically any [transaction](https://www.cockroachlabs.com/docs/v22.1/demo-serializable). There's [example](https://www.cockroachlabs.com/docs/v22.1/demo-serializable) of an aspect around `@Transactional`, but I cannot get it to work with e.g. `JpaRepository.save` method.

Coroutine support is highly desirable, too.

Maybe [TransactionInterceptor](https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionInterceptor.java) could be customizable to accomodate custom logic around transactional invocations.

Will appreciate any input on how to **reliably** intercept wide range of ways to wrap a piece of code in a transaction (spring's `@Transactional`, java's `@Transactional`, `TransactionTemplate`)"
2058,1198630633,gumanoid,4945920,Returning `null` instead of `Mono<Void>` feels strange. It's impossible for caller to know when method execution is finished without a `Mono` to subscribe for
2059,1198639612,mikereiche,48999328,"@gumanoid - it's possible to override TransactionInterceptor with your own class like we did for Couchbase. And define transactionInterceptor() bean in your configuration (the post just above yours).

 https://github.com/spring-projects/spring-data-couchbase/blob/main/src/main/java/org/springframework/data/couchbase/transaction/CouchbaseTransactionInterceptor.java

spring.main.allow-bean-definition-overriding=true"
2060,1198883500,bclozel,103264,"If you believe you've found a security issue, please report it using the appropriate channel as described in the issue template.

See https://spring.io/security-policy"
2061,1198895203,pivotal-cla,16822967,"@edfeff Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28885)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28885) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
2062,1198964404,snicoll,490484,@pivotal-cla this is an obvious fix
2063,1198964535,pivotal-cla,16822967,@edfeff This Pull Request contains an obvious fix. Signing the Contributor License Agreement is not necessary.
2064,1198964536,pivotal-cla,16822967,@edfeff This Pull Request contains an obvious fix. Signing the Contributor License Agreement is not necessary.
2065,1198970403,snicoll,490484,@edfeff thank you for making your first contribution to Spring Framework.
2066,1198979121,snicoll,490484,"Thanks for the suggestion, this is a duplicate of #13441"
2067,1199066897,Ynnck123,38558339,+1
2068,1199178386,rstoyanchev,401908,"Generally speaking, the Servlet API is not meant to be used directly in a WebFlux application, and we don't aim to support it. You might run into other similar limitations since the `ServletHttpHandlerAdapter` layer assumes it is at the start of request handling. As Brian mentioned, using a `WebFilter` and `ServerWebExchange` is really what we expect an application to use. "
2069,1199265443,vpavic,1149230,Is there an issue tracking the move to Antora based docs? [Searching the project for _antora_](https://github.com/spring-projects/spring-framework/search?q=antora&type=issues) returns only one hit and that's this issue.
2070,1199282110,rstoyanchev,401908,I've left it as a status-only response since the status code itself communicates the nature. I've also added logging with the exception message at INFO and the full stacktrace at DEBUG.
2071,1199507292,snicoll,490484,Thanks again @arend-von-reinersdorff 
2072,1199563613,snicoll,490484,"Thank you for making your first contribution to Spring Framework, @JiayiLi1999.

I didn't include the SQL test as it's testing the getter and we prefer to test the outcome of setting the property. I've also noticed that some tests were not testing what they were supposed to (including the test you added) as the `DataSource` was not set (so it was failing, but not for the reason that the test was expecting).
"
2073,1199590813,snicoll,490484,@xixingya thanks for the PR but we'd prefer to revisit this part of the doc in more details.
2074,1199601234,snicoll,490484,This looks like an oversight of #25811 - what do you think @jhoeller 
2075,1199602570,snicoll,490484,Closing in favor of PR #28355
2076,1199633164,snicoll,490484,@luvarqpp thank you for making your first contribution to Spring Framework.
2077,1199643175,snicoll,490484,It's back to being private so this PR is obsolete.
2078,1199649928,snicoll,490484,"Thanks for the PR @dsyer but we're not confident in our ability to maintain this in the long run. We don't use a cloud setup on a day-to-day basis, so only newcomers are likely to find out about issues. "
2079,1200012745,arend-von-reinersdorff,4946561,"Thanks for merging @snicoll :-)

You restored the word ""including"" in this phrase:

> is populated with additional default property sources including servlet config, servlet context parameters, and a JndiPropertySource

I find ""including"" a bit misleading: It sounds like more than the 3 mentioned property sources could be added by StandardServletEnvironment. But this is not the case."
2080,1200032793,gumanoid,4945920,"@mikereiche bean overriding is disabled by default for a good reason, I'm trying to avoid it.
Moreover, simply overriding TransactionInterceptor bean won't cover all cases I need - for instance, `JpaRepository.save` 
gets it's transaction via `TransactionalRepositoryProxyPostProcessor`, which [instantiates](https://github.com/spring-projects/spring-data-commons/blob/main/src/main/java/org/springframework/data/repository/core/support/TransactionalRepositoryProxyPostProcessor.java#L71) original `TransactionInterceptor` no matter what beans you've overriden."
2081,1200107722,vikeychen,3364975,I have made a pull request for this.
2082,1200225998,RovingSea,69103691,"If it can't achieve through the existing code, can developers judge the locking type first and then execute the added @ExceptionHandler method?"
2083,1200232976,kse-music,33364651,"you can set order annotation or implements Ordered interface
````
@Order(0)
public class UnsupportedMediaTypeExceptionHandler {}
````"
2084,1200237788,RovingSea,69103691,"> you can set order annotation or implements Ordered interface
> 
> ```
> @Order(0)
> public class UnsupportedMediaTypeExceptionHandler {}
> ```

I tried, but it didn't work, and set @Order(Integer.MIN_VALUE)"
2085,1200284108,puppylpg,9563181,"> **[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** commented
> 
> Spring Security for @`org.springframework.security.access.annotation.Secured` and Spring Framework for @`org.springframework.transaction.annotation.Transactional` are not using AspectJ (only) to find matching joinpoints, but instead they are using custom logic (when configured) to enable security and transactional aspects on beans that implement interfaces whose methods are annotated with mentioned annotations.
> 
> With custom aspects and AspectJ pointcuts in Spring AOP one cannot achieve the same behaviour because Spring AOP will use AspectJ only to evaluate whether given bean/class method implementation matches a pointcut expression and, to quote Spring reference docs, ""AspectJ follows Java's rule that annotations on interfaces are not inherited"". Actually all non-type annotations, so method/field/constructor/package annotations, are not inherited (see [this](http://www.eclipse.org/aspectj/doc/released/adk15notebook/annotations-pointcuts-and-advice.html#annotation-inheritance-and-pointcut-matching) and [javadoc](http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/annotation/Inherited.html) of `@java.lang.annotation.Inherited` for more info). On some reasons why interface method annotations are not inherited see [here](http://stackoverflow.com/q/4745798/381140). So, for pointcut targeting execution of class method annotated with given annotation AspectJ will return that method does not match pointcut expression if the annotation is not on the method implementation being executed - e.g. if it's only on method declaration in interface like in your example. Even if abstract class had method annotated, and concrete class did overide that method without annotation - that method would not match expression.
> 
> Spring AOP namespace `<aop:config>` tag enables schema style AOP and is processed by `org.springframework.aop.config.ConfigBeanDefinitionParser` Interesting code is in
> 
> * org.springframework.aop.aspectj.AspectJExpressionPointcut
>   
>   * public boolean matches(Method method, Class targetClass, boolean beanHasIntroductions)
>     --- private ShadowMatch getShadowMatch(Method targetMethod, Method originalMethod)
> 
> Spring TX namespace `tx:annotation-driven` tag enables declarative transaction demarcation via `@Transactional` annotation and is processed by `org.springframework.transaction.config.AnnotationDrivenBeanDefinitionParser` Interesting code is in
> 
> * org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource
>   
>   * private TransactionAttribute computeTransactionAttribute(Method method, Class targetClass)
> 
> Spring Security namespace `<global-method-security>` tag enables declarative security via `@Secured` annotation and is processed by `org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser` Interesting code is in
> 
> * org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource
> * org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource
>   
>   * protected Collection<ConfigAttribute> findAttributes(Method method, Class<?> targetClass)
> * org.springframework.core.annotation.AnnotationUtils
>   
>   * public static <A extends Annotation> A findAnnotation(Method method, Class<A> annotationType)
> 
> So framework enables this different behaviour for it's own annotations/aspects. For user/custom aspects it relies on what AspectJ/Java support, but it doesn't prevent you from adding custom logic where/if needed.
> 
> AFAICT, although bit annoying, this works as designed.

Saved my day! Thanks a lot!"
2086,1200443008,janeisklar,1239732,"I did extend the test case a bit to see where it works and where it doesn't.

Consider the following 3 Java modules:

```mermaid
graph LR;
F[Framework];
S[Spring];
F[Framework];
L[Library];
C[Consumer / Application];
F --> S;
L -.- S;
L --> F;
C -.- S;
C -.- F;
C --> L;
```

The FactoryBean in all cases is located in the `Framework` module.

The following table shows what happens when the service interface and target class are put in different modules / packages as the FactoryBean. Furthermore, different proxy naming strategies are tested, e.g. Spring's default-naming, the name of the service interface + postfix or the name of the target interface + postfix.

| Working?           | Proxy naming | Target class location | Service interface location    |
|--------------------|--------------|-----------------------|-------------------------------|
| :heavy_check_mark: | DEFAULT      | Framework             | Framework                     |
| :heavy_check_mark: | DEFAULT      | Framework             | Framework (different package) |
| :bomb:             | DEFAULT      | Framework             | Library                       |
| :bomb:             | DEFAULT      | Framework             | Consumer                      |
| :heavy_check_mark: | INTERFACE    | Framework             | Framework                     |
| :heavy_check_mark: | INTERFACE    | Framework             | Framework (different package) |
| :bomb:             | INTERFACE    | Framework             | Library                       |
| :bomb:             | INTERFACE    | Framework             | Consumer                      |
| :heavy_check_mark: | TARGET       | Framework             | Framework                     |
| :heavy_check_mark: | TARGET       | Framework             | Framework (different package) |
| :bomb:             | TARGET       | Framework             | Library                       |
| :heavy_check_mark: | TARGET       | Spring                | Consumer                      |
| :heavy_check_mark: | DEFAULT      | Spring                | Framework                     |
| :heavy_check_mark: | DEFAULT      | Spring                | Framework (different package) |
| :heavy_check_mark: | DEFAULT      | Spring                | Library                       |
| :heavy_check_mark: | DEFAULT      | Spring                | Consumer                      |
| :heavy_check_mark: | INTERFACE    | Spring                | Framework                     |
| :heavy_check_mark: | INTERFACE    | Spring                | Framework (different package) |
| :heavy_check_mark: | INTERFACE    | Spring                | Library                       |
| :heavy_check_mark: | INTERFACE    | Spring                | Consumer                      |
| :heavy_check_mark: | TARGET       | Spring                | Framework                     |
| :heavy_check_mark: | TARGET       | Spring                | Framework (different package) |
| :heavy_check_mark: | TARGET       | Spring                | Library                       |
| :heavy_check_mark: | TARGET       | Spring                | Consumer                      |
| :heavy_check_mark: | TARGET       | Application           | Consumer                      |
| :heavy_check_mark: | DEFAULT      | Application           | Framework                     |
| :heavy_check_mark: | DEFAULT      | Application           | Framework (different package) |
| :heavy_check_mark: | DEFAULT      | Application           | Library                       |
| :heavy_check_mark: | DEFAULT      | Application           | Consumer                      |
| :heavy_check_mark: | INTERFACE    | Application           | Framework                     |
| :heavy_check_mark: | INTERFACE    | Application           | Framework (different package) |
| :heavy_check_mark: | INTERFACE    | Application           | Library                       |
| :heavy_check_mark: | INTERFACE    | Application           | Consumer                      |
| :heavy_check_mark: | TARGET       | Application           | Framework                     |
| :heavy_check_mark: | TARGET       | Application           | Framework (different package) |
| :heavy_check_mark: | TARGET       | Application           | Library                       |
| :heavy_check_mark: | TARGET       | Application           | Consumer                      |
| :bomb:             | TARGET       | Library               | Consumer                      |
| :bomb:             | DEFAULT      | Library               | Framework                     |
| :bomb:             | DEFAULT      | Library               | Framework (different package) |
| :bomb:             | DEFAULT      | Library               | Library                       |
| :bomb:             | DEFAULT      | Library               | Consumer                      |
| :bomb:             | INTERFACE    | Library               | Framework                     |
| :bomb:             | INTERFACE    | Library               | Framework (different package) |
| :bomb:             | INTERFACE    | Library               | Library                       |
| :bomb:             | INTERFACE    | Library               | Consumer                      |
| :bomb:             | TARGET       | Library               | Framework                     |
| :bomb:             | TARGET       | Library               | Framework (different package) |
| :bomb:             | TARGET       | Library               | Library                       |
| :bomb:             | TARGET       | Library               | Consumer                      |

I have also updated the project that shows how these results were obtained: https://github.com/janeisklar/spring6-jdk17-cglib-bug-reproducer.

## Conclusion

If it's okay with you I would create a pull request that adds an empty class in `org.springframework.cglib.proxy`. This then can be used as a target class for the proxy and should work in all cases (see target class == Spring in the table above)."
2087,1200788544,bclozel,103264,"If you believe you've found an improvement, please send a PR explaining the change in greater details. Note that the changes must pass the entire test suite.
You'll find more information in the CONTRIBUTING document.
Thanks!"
2088,1200811720,snicoll,490484,"Good catch, thanks!
"
2089,1200822242,snicoll,490484,Thanks for the report. We don't need both a PR and an issue so I am going to close this one in favor of the PR where we can continue the discussion.
2090,1200824445,snicoll,490484,"`SimpleSart` is not annotated with `@Configuration`. This turns what is called ""the lite mode"" where only basic methods are checked. `NewBeanConfig` should also be flagged with `@Configuration`.

If you have further questions, please ask on StackOverflow. As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements."
2091,1200933045,rstoyanchev,401908,"Currently Kotlin serialization is based on classpath detection only. I'm just wondering, should it be on the classpath, and is there a way to exclude it? Or otherwise it would make sense to provide a way to disable it. @sdeleuze what do you think?

@martypitt, if you register a custom Encoder or Decoder (e.g. Jackson), it is ahead of default ones in the order, so that provides another option to influence the order."
2092,1201061903,sbrannen,104798,"What happens if you add the following to `org.springframework.web.reactive.function.client.WebClientIntegrationTests.startServer(ClientHttpConnector)`?

```java
try {
	this.server.start(0);
}
catch (IOException ex) {
	throw new UncheckedIOException(ex);
}
```"
2093,1201074182,stsypanov,10835776,Any reviews?
2094,1201091545,vpavic,1149230,"The outcome is the same.

Just to make sure I understood correctly what you meant, this is what I did locally:

```diff
$ git diff
diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java
index 80e068a474..488a38b0d0 100644
--- a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java
+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java
@@ -116,6 +116,12 @@ class WebClientIntegrationTests {
 
        private void startServer(ClientHttpConnector connector) {
                this.server = new MockWebServer();
+               try {
+                       this.server.start(0);
+               }
+               catch (IOException ex) {
+                       throw new UncheckedIOException(ex);
+               }
                this.webClient = WebClient
                                .builder()
                                .clientConnector(connector)
```"
2095,1201104906,sbrannen,104798,"> The outcome is the same.

OK. Thanks for trying it out.

> Just to make sure I understood correctly what you meant, this is what I did locally:

Yes, that's what I meant. I hoped it would use an ephemeral port other than 80, but it was admittedly a shot in the dark since I don't really have time to investigate it at the moment.

Maybe you or somebody else from the Framework team can look into it.

"
2096,1201137756,RovingSea,69103691,"Today, I chose a better method, which is to add @Order(Ordered.HIGHEST_PRECEDENCE) to other ExceptionHandlers. 😅😅"
2097,1201142237,snicoll,490484,"@marcusdacoregio please subscribe to #28115 and try again when it's fixed. If it turns out to be another issue, we can always reopen this one. "
2098,1201144608,snicoll,490484,"`RuntimeHintsUtils` has now a `registerComposableAnnotation`, so I think using it on `RequestMapping` should cover some ground. The brainstorming bit in this issue makes it harder for me to understand the scope it."
2099,1201370747,napstr,6048348,Removed the deprecation code for the callback without headers.
2100,1201439876,vpavic,1149230,"I had a quick look and to me this doesn't look like an issue with the mock server.

Failures in `WebClientIntegrationTests#exchangeWithRelativeUrl` happen on all connector implementations, and it looks like the same (or at least similar) problem as #20337.

Regarding the other two failures, they look Jetty specific."
2101,1202112700,snicoll,490484,"The javadoc of `customizeConnection` states:

> Customize the given HttpURLConnection, obtained in the course of an exists(), contentLength() or lastModified() call.

This override of yours not being called is working as designed. Let's see what the rest of the team thinks on the use case above."
2102,1202119010,markusheiden,1014626,"Has there been any progress on this issue? 

We are using RedisMessageListenerContainers that do not like Redis being closed prematurely and thus spam the log."
2103,1202121525,bclozel,103264,"While the javadoc for `AbstractFileResolvingResource` only mentions methods implemented on that class, it could make sense to also call this for `getInputStream` and update the javadoc accordingly; this looks inconsistent as all other remote calls are using this method.

On the other hand, the default implementation sets the HTTP method to `""HEAD""`, this would not work for `getInpustream` and changing that would clash with the other methods."
2104,1202136963,snicoll,490484,"Unfortunately, https://github.com/b-dzoba/spring-jms-demo is no longer accessible. 

@b-dzoba or @mbolis would you be able to share a sample we can run ourselves. That would be very helpful."
2105,1202146071,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
2106,1202173804,rstoyanchev,401908,"**Team Decision:** this is worth doing to provide sufficient control over ordering. There are some design decisions to be thought through such as relative vs explicit ordering, how to refer to others for relative ordering, etc. "
2107,1202174819,rstoyanchev,401908,Superseded by #24844.
2108,1202186523,rstoyanchev,401908,"**Team Decision:** We can do this in fallback mode, trying the built-in `Duration` formatting, and then falling back on alternative formats, in effect extending the built-in one. We should ensure the spec of what Boot supports already, works in the new arrangement."
2109,1202204019,rstoyanchev,401908,"**Team Decision:** to keep things simple, `ObjectProvider` will remain focused on type based resolution and that should serve the common case. You can use `getBeansOfType` for bean names. If there are specific issues with using that, please feel free to comment further and we can consider those separately.."
2110,1202488265,snicoll,490484,Use case is `beanClass` refers to a `FactoryBean` and `resolvedTargetType` to the bean that it produces. Right now our API assumes that `getResolvedTargetType` is the only candidate but factory beans-based scenario are a bit more complicated than that.
2111,1202489124,AAverin,1481332,"Is there any update on this issue @rstoyanchev?
We are also experiencing a similar behaviour when downstream services time out. Started after migrating to latest SpringBoot. We also sill use WebMVC and not WebFlux.
What would be the right way to suppress these errors? `@ExceptionHandler(Throwable::class)` is already configured."
2112,1202569433,sbrannen,104798,"Current work on this feature can be viewed in the following feature branch.

- https://github.com/sbrannen/spring-framework/tree/spring-test-aot

As individual aspects of the feature set mature, I incorporate them into the `main` branch."
2113,1202647057,snicoll,490484,"`ConstructorOrFactoryMethodResolver` which was copied over from Spring Native is able to identify that a `BeanDefinition` has a `FactoryBean` `beanClass` that is compatible with the `resolvedTargetType` set on the bean definition. 

As a result, the proper instance supplier is generated.

However `BeanDefinitionPropertiesCodeGenerator#addPropertyValues` uses `beanDefinition.getResolvableType()` as the source for the property. If a matching method is not found, then no hint is added. 

It would be nice if we had a way to connect those two so that they are consistent."
2114,1202666400,snicoll,490484,Does the JVM bits you've shared above is running with AOT optimizations? I'd like to understand if the order is due to native strictly or if it can reproduced on the JVM with AOT optimizations.
2115,1202684102,snicoll,490484,"Answering to self, I can reproduce the problem with AOT on the JVM so it isn't native specific. I've updated the title accordingly."
2116,1202749228,artembilan,1071590,"The `customizeConnection()` is also called from the `checkReadable()` which, in turn, is called from the `isReadable()`. 
And this one is not mentioned in the `customizeConnection()` JavaDoc.

I don't think it is a big deal to set a proper HTTP method in that `getInpustream()` after calling `customizeConnection()` to override that default `HEAD`.

Maybe the pattern is to use an `exist()` or `isReadable()` before calling `getInpustream()` therefore that `readTimeout` would have some effect?
And perhaps the connection is reused from the cache..."
2117,1202803632,snicoll,490484,"OK I figured it out. Both pieces share the same callback `BeanPostProcessor#postProcessBeforeInitialization`. However, the import aware callback is added as a bean definition for the regular case and using `.addBeanPostProcessor` for the AOT case. Adding it directly means that none of the ordering applies. It should be possible to restore the regular order by adding the import aware processor as a bean."
2118,1203132599,blake-bauman,26775078,"The issue with using getBeansOfType() is the ordering.  For example, if a bean is declared with `@Ordered` and you want to get the available beans in the proper ordering.  `ObjectProvider.orderedStream()` preserves that ordering whereas getBeansOfType() does not guarantee the ordering.  In the Javadoc, orderedStream() says it ""will be"" ordered, while getBeansOfType() says ""should be"" ordered ""as far as possible"""
2119,1203368388,dayAndnight2018,44399091,"I know that it will fetch all subClasses that extends GenericClass through 
`ApplicationContext.getBeansOfType(GenericClass.class)`

But that is not what I want..."
2120,1203562957,snicoll,490484,"Thanks for the suggestion. The Javadoc of StringUtils states:

> Mainly for internal use within the framework

We prefer to add additional methods to our internal utility when we have a need ourselves.
"
2121,1203564837,snicoll,490484,"`beanFactory.getBeanProvider(ResolvableType)` with `ResolvableType.forClassWithGenerics(GenericClass, Person.class)` should do the trick.

If you have further questions, please ask on StackOverflow."
2122,1203564931,pivotal-cla,16822967,"@Della-W-H Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28918)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28918) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
2123,1203565234,Della-W-H,69455004,ok
2124,1203566817,bclozel,103264,Please use your own fork to test GitHub features.
2125,1203639312,snicoll,490484,The order is restored. Thank you very much for the report and the sample @marcusdacoregio!
2126,1203904566,snicoll,490484,That custom code broke the native use case as it's using reflection without a hint.
2127,1203911958,snicoll,490484,This was fixed in 3a890033b78d
2128,1204248457,meeque,901490,"@xerces8 I've run into the same problem just today.

It would be great to document the escape order. According to the source code it's:

1. html encode
2. JS encode

But sadly that's documented nowhere. Do you think it's worthwhile to open a new issue to fix the documentation?

Btw, I'm ok with this issue getting closed without a solution. People who need a different order should invoke escapeBody (or similar) multiple times for the order that the need. But documentation would be great!"
2129,1204457937,bclozel,103264,"Given the conversation above, both `AbstractFileResolvingResource` and `UrlResource` have inconsistencies:

* the `customizeConnection(HttpURLConnection)` default implementation can only be used by methods that won't need to fetch the actual content of the resource because it is using HTTP HEAD requests.
* `AbstractFileResolvingResource` sub-classes (like `UrlResource`) do not always call the `customizeConnection` methods which makes the experience inconsistent; depending on the method used, timeouts or request headers will be different

While this behavior is documented in the javadoc, as it lists the methods delegating to the customization method, the developers expectations can be quite different when sub-classing a `Resource` implementation: the name of the method itself gives a false indication.

We can change this behavior without introducing breaking changes for sub-classes: we can set the HTTP request method after the customization call for each method, as it is its responsibility in the first place."
2130,1204974043,bclozel,103264,Thanks @chanhyeong ! I've rebased your contribution on the 5.3.x branch to also fix this in the next 5.3.23 release.
2131,1204999993,bclozel,103264,Closing as this change was intended.
2132,1205011532,bclozel,103264,Thanks @izeye !
2133,1205239529,bclozel,103264,"Indeed, serving an empty resource over HTTP should not result in a 404 response.

The current behavior can be tracked to #21372, where we tried to avoid serving empty files for directory entries. In the course of fixing that problem (in 69f14a20380e8 and 616a40adb64a09), it appeared that [a long-standing JVM bug prevents us from considering folders and empty resources separately](https://github.com/spring-projects/spring-framework/issues/21372#issuecomment-453471832). @JanStureNielsen this should answer your comment.

This behavior has been in place since Spring Framework 5.1 and we've been reluctant to change things more in this area, because of risks of regression or performance issues. In the meantime, this problem has been reported multiple times in Spring Boot and Spring Framework (see #28107 for the latest instance).

I'm inclined to consider this change, which should solve the JAR case and improve consistency with the file system case. Now we're quite late in the 5.3.x cycle, so maybe pushing this to 6.0.0 would make more sense. What do you think @jhoeller @rstoyanchev ?"
2134,1205353765,bclozel,103264,"httpclient5 support was introduced in #24700 for `WebClient`. While `RestTemplate` is in maintenance mode as of #24503, shipping a outdated integration with httpclient might be problematic in the 6.0 line. Something we should consider for 6.0 maybe. I'll mark this for team discussion.

"
2135,1205404901,snicoll,490484,">  and generates an ApplicationContextInitializer. 

FTR, it doesn't do only that. Participants can write code that optimize other things. I like `processAheadOfTime`. "
2136,1206005129,jingxiang,1510149,"Why not mark as  Deprecated ? 
As far as I know, this class involves many downstream dependencies, and direct deletion may lead to the unavailability of many frameworks.
For example：mybatis-spring-boot:2.2.2

`Caused by: java.lang.NoClassDefFoundError: org/springframework/core/NestedIOException
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:141)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$fde06b8c.CGLIB$sqlSessionFactory$2(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$fde06b8c$$FastClassBySpringCGLIB$$8baa1e6e.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)`"
2137,1206144087,snicoll,490484,"@jingxiang this is a good point, `NestedIOException` should have been marked as deprecated in `5.3.x`. I've created #28929. If you're working on mybatis, please update the code to catch `IOException` directly. If you don't, can you please create an issue to notify them? Thanks!"
2138,1206150209,snicoll,490484,"So the current plan is to allow `AbstractEntityManagerFactoryBean` to be ""half-initialized"" at build-time, preventing the actual `EntityManagerFactory` to be created. This lets us extract information for the `PersistenceUnitInfo` and the AOT contributions can be rewritten to use that rather than classpath scanning.

Also, Spring Data can then get the same bean as well, and get the same information to generate their metamodel."
2139,1206206452,wilkinsona,914682,"This needs to be addressed in Spring Framework's build. The problem is that the version constraints in Framework's build are configured in such a way that they're not visible to the including build. That could be related to the dependency management plugin and some limitations in Gradle. Ideally, Framework wouldn't use the dependency management plugin any more as Gradle's built-in capabilities (which we use in Boot's build) are more than adequate now."
2140,1206206454,snicoll,490484,"Thanks Andy, I am moving this to the framework issue tracker."
2141,1206338115,sbrannen,104798,"Current work on this issue can be viewed in the following feature branch.

https://github.com/sbrannen/spring-framework/commits/issues/gh-28928-ApplicationContextAotGenerator-target-component

Note, however, that I am investigating a different approach that would override the _default target type_ for each invocation of `processAheadOfTime()` (analogous to `GenerationContext#withName(String)`) instead of supplying a `targetComponent`. The following explains the rationale for investigating a different approach.

The current tests show that `BeanFactoryRegistrations` are still generated in a class whose name is based on the _default target type_ (which is `TestTarget` for the `TestGenerationContext` used in the tests):

```
org/springframework/core/testfixture/aot/generate/TestTarget__BeanFactoryRegistrations.java
org/springframework/core/testfixture/aot/generate/TestTarget__BeanFactoryRegistrations1.java
```

Whereas, ideally these would be:

```
org/springframework/context/testfixture/context/generator/SimpleComponent__BeanFactoryRegistrations.java
org/springframework/context/testfixture/context/generator/annotation/AutowiredComponent__BeanFactoryRegistrations.java
```
"
2142,1206354298,wilkinsona,914682,"If the team are interested, I would be happy to contribute the necessary changes to move from the dependency management plugin to Gradle's built-in platform support."
2143,1206403315,sbrannen,104798,"Commit https://github.com/sbrannen/spring-framework/commit/a15133942979b432a6b111c3b8459cd9d2f2b2fc reverts all changes to `ApplicationContextAotGenerator` and `ApplicationContextInitializationCodeGenerator` and addresses the underlying issue by introducing support for _forking_ the `GenerationContext` for a particular target class.

This new approach simplifies the programming model for clients of `ApplicationContextAotGenerator` that need to invoke `processAheadOfTime()` for multiple application contexts while retaining state within a single code generation/compilation phase.

"
2144,1206463154,snicoll,490484,I am still seeing `(inferred)` in generated code so it looks like the fix above does not handle all cases.
2145,1206604655,snicoll,490484,"[95b826b](https://github.com/snicoll/spring-framework/commit/95b826bb2a27da2295a76e2b31e5b982e9e381aa) has some initial work for this. It loads the FB and sets the result of the scanning in the AOT-generated bean definition.

#28838 is now a prerequisite for this (in one form or another) as the `DataSource` is starting up at build-time as well."
2146,1207741919,bclozel,103264,"What is the purpose of this issue? You've copied a Spring Security CVE advisory but failed to explain the problem.

I'm closing this as invalid."
2147,1207754282,pulkitpcc,110801539,"Can you please see the issue. I have take the format from https://github.com/spring-projects/spring-framework/issues/24434
"
2148,1207762120,pulkitpcc,110801539,Please see- I have take the format from https://github.com/spring-projects/spring-framework/issues/24434 
2149,1207763993,snicoll,490484,@pulkitpcc except the CVE is about Spring Security and you've copy/pasted the title that states it's related to Spring Web. Whatever you're suggesting is in the wrong issue tracker as well.
2150,1207772211,bclozel,103264,"Please don't open duplicate issues.
Duplicates #28934"
2151,1207775294,pulkitpcc,110801539,"> @pulkitpcc except the CVE is about Spring Security and you've copy/pasted the title that states it's related to Spring Web. Whatever you're suggesting is in the wrong issue tracker as well.

@snicoll I have updated the title accordingly. "
2152,1207775375,snicoll,490484,OK the good news is that it was a local change I was working on that mutates the bean definition late. This has the effect of making the cache stale or something which brings back the default value for some reason. We should identify why that is and keep the resolution around.
2153,1207777143,bclozel,103264,"@pulkitpcc Spring Framework doesn't depend on Spring Security so there's nothing we can do about this here.

If you have questions about this CVE you should [read the official advisory](https://tanzu.vmware.com/security/cve-2020-5408) (mitigation section) or [ask a question on StackOverlow](https://stackoverflow.com/questions/tagged/spring-security+or+spring-security-oauth2+or+spring-security-kerberos). "
2154,1207777972,pulkitpcc,110801539,"> @pulkitpcc Spring Framework doesn't depend on Spring Security so there's nothing we can do about this here.
> 
> If you have questions about this CVE you should [read the official advisory](https://tanzu.vmware.com/security/cve-2020-5408) (mitigation section) or [ask a question on StackOverlow](https://stackoverflow.com/questions/tagged/spring-security+or+spring-security-oauth2+or+spring-security-kerberos).

Thanks!"
2155,1208027454,snicoll,490484,"I am not so sure we should be extending `RegisteredBean` this way. If we need to access the original bean definition, the callback that processes it should also be invoked at a time where changes to the original bean definition are allowed.

There's one use for this atm. If that turns out to be more frequent, we should probably introduce an aot specific variant that post-processes the bean definition (something like `BeanDefinitionAotPostProcessor`)."
2156,1208070530,snicoll,490484,https://github.com/spring-projects/spring-framework/commit/2e1538a20b585132dcc671ac0a2491e4d3b7ab5a now mutates the original bean definition.
2157,1208097434,sdeleuze,141109,"@snicoll is currently trying to check if we can remove the reflection usage here and for similar patterns, so I restored the `waiting-for-triage` label."
2158,1208243444,snicoll,490484,Thank you very much for reporting the problem and the PR @OlgaMaciaszek. I've removed the need for reflection so the additional hint shouldn't be necessary. See #28939
2159,1208286057,sdeleuze,141109,@martypitt Could you please share more about your use case for using Jackson on classes annotated with `@Serializable`?
2160,1208335539,martypitt,348852,"> @martypitt Could you please share more about your use case for using Jackson on classes annotated with `@Serializable`?

Sure.  We use JSON for responses out to web requests, as part of our ""public"" api.
We use CBOR for serializing objects to put onto Kafka messages, or other downstream internal services.

Several classes are intended for serializaton in both scenarios.
We also have a large number of custom Jackson serialization adaptors / converters, and didn't see a need to migrate away to the less mature Kotlin Serialization for JSON."
2161,1209046175,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
2162,1209086246,sdeleuze,141109,Could you please clarify where the Kotlinx serialization dependency come from? Declared directly in your project (for which use case) or via a third party dependency (which one)? 
2163,1209158520,dlehammer,17439718,"I've included a working example (Spring Boot 2.7.0) for posterity below. To support those like me puzzled by the below quote from the [documentation](https://docs.spring.io/spring-boot/docs/2.7.2/reference/html/features.html#features.external-config.yaml.directly-loading), as there's no elaboration or example.
> You can also use the `YamlPropertySourceLoader` class if you want to load YAML as a Spring `PropertySource`.

(I haven't pursued the  `YamlPropertySourceLoader` approach, as I sense the time to deduce the ""right approach"" and the boiler-plate far exceeds the example I've provided)
The use-case in my case is simple, load a external .yml file into a `@ConfigurationProperties` annotated class ~ in this case the configuration contains some lists, which are readable in YAML less so in properties.

Seemingly in spite of ""Easy doesn't necessarily means correct"" this a desired approach, that has spawned tutorials as recent as 2022-07-22 [(@PropertySource with YAML Files in Spring Boot)](https://www.baeldung.com/spring-yaml-propertysource).

With a `PropertySourceFactory` like below (ex. from the Baeldung tutorial), the object binding is performed similarly to properties for a `@PropertySource(value = ""classpath:foo.yml"", factory = YamlPropertySourceFactory.class)`

```
public class YamlPropertySourceFactory implements PropertySourceFactory {

    @Override
    public PropertySource<?> createPropertySource(String name, EncodedResource encodedResource) throws IOException {
        YamlPropertiesFactoryBean factory = new YamlPropertiesFactoryBean();
        factory.setResources(encodedResource.getResource());

        return new PropertiesPropertySource(encodedResource.getResource().getFilename(),  factory.getObject());
    }
}
```

I too was surprised to discover (via this obscure issue) that Spring YAML support is missing feature-parity with properties ~ ie. consistently supported via externalized configuration, this violates[ the principle of least astonishment](https://en.wikipedia.org/wiki/Principle_of_least_astonishment) and subsequently spawns unofficial workarounds  :/ 

I vote for an official approach 👍 

See also similar tutorials
- [Use @PropertySource with YAML files](https://deinum.biz/2018-07-04-PropertySource-with-yaml-files/) (2018-07-04)
- [Spring @PropertySource using YAML](https://newbedev.com/spring-propertysource-using-yaml) (2021?)"
2164,1209310626,sdeleuze,141109,Related metadata issue: https://github.com/oracle/graalvm-reachability-metadata/issues/19.
2165,1209315865,snicoll,490484,This is no longer needed as the AOT use cases became irrelevant.
2166,1209411867,snicoll,490484,"`GenerationContext` should not have such capability. When AOT runs on a given `ApplicationContext`, it has a given target and allowing processors to change it while the context is being processed looks broken to me. 

There are essentially two ways to fix this issue that I can see based on several discussions with @philwebb.

We could add such a method to `DefaultGenerationContext` which looks pretty much the same as your proposal, except the capability is not exposed to consumers of `GenerationContext`. Here is [an example](https://github.com/snicoll/spring-framework/blob/47ba3c8f49c5ad39f6913b6230e29fbec9748580/spring-context/src/test/java/org/springframework/context/aot/DefaultGenerationContextForTestsTests.java#L22-L32).

Or we could allow the creation of a `GenerationContext` per invocation. This means that we create the stateful resources at the beginning (files and hints) and we reuse them in fresh context  created for each run. Here is [an updated example](https://github.com/snicoll/spring-framework/blob/e8a0740694e442b2367520936952162250b8c569/spring-context/src/test/java/org/springframework/context/aot/DefaultGenerationContextForTestsTests.java#L24-L34) (doesn't compile atm).

There is an additional problem regardless of which approach we pick. We can't strictly speaking rely on `withName` to provide a unique prefix for the test as processors can invoke this and therefore ""reset"" the name that was set. We should probably update `ClassNameGenerator` to be more  flexible and retain the ""Prefix of the prefix"" if `withName` is used. If we do this, then we have the guarantee that each invocation will not create similar resources. The counter in `DefaultGenerationContext` doesn't then need to be transmitted from one context to another.

"
2167,1209525020,gallyamb,5419623,"Hey, team! Who else can help me with initial discussion in this issue?"
2168,1209647074,martypitt,348852,"Sure.

In our spring boot app, we have the following:

```xml
<dependency>
   <groupId>org.jetbrains.kotlinx</groupId>
   <artifactId>kotlinx-serialization-cbor</artifactId>
</dependency>
```

We use this for serializing efficient messages between our own components.

Not sure if I've answered the question you're asking - please let me know if I can provide any other info.


"
2169,1209706193,RasikaJoshiAM,82110328,"Hi @bclozel,

I was investigating this issue, and I have an idea through which we can support both httpclient4 and httpclient5. We can create a counterpart of the `HttpComponentsClientHttpRequestFactory` class that uses httpclient5. We can probably name that class as `HttpComponentsClient5HttpRequestFactory`. If it's okay with the team then I can raise a PR as well.
"
2170,1210317055,knob-creek,3179566,"I tried the same thing as james (without  success, obviously):
```
@Configuration
@EnableWebFlux
class JsonConfiguration : WebFluxConfigurer {
    override fun configureHttpMessageCodecs(configurer: ServerCodecConfigurer) {
        val decoder = KotlinSerializationJsonDecoder(Json { ignoreUnknownKeys = true })
        configurer.defaultCodecs().kotlinSerializationJsonDecoder(decoder)
    }
}
```
The configuration is called, but the configured KotlinSerializationJsonDecoder is _not_ used for deserialization in an annotated rest service.  It is always Json.Default being used."
2171,1210372647,karolkrasnowski,12725930,"I don't want this to sound rude, but when can I expect someone to take care of this issue?"
2172,1210381259,sdeleuze,141109,"Yes you did, but our classpath detection is based on `kotlinx.serialization.json.Json` which is expected to be a class specific to `kotlinx-serialization-json` dependency. So I am not sure why `kotlinx-serialization-cbor` triggers it, could you please check on your project?"
2173,1210404014,kzander91,61500114,"Our workaround until this is fixed is to manually propagate the context:
```java
Flux<DataBuffer> bufs = ...;
Path path = ...;
Mono<Void> write = Mono.deferContextual(ctx -> DataBufferUtils.write(bufs.contextWrite(ctx), path));
```"
2174,1210440864,bclozel,103264,"Spring Boot 2.3.x is out of OSS support - can you reproduce this with a supported version?

See https://spring.io/projects/spring-boot#support"
2175,1210446088,snicoll,490484,@sbrannen can we please clarify the scope of this?
2176,1210478081,hjohn,995917,"If you are willing to customize Spring a bit, I wrote a `ContextAnnotationAutowireCandidateResolver` that supports a `NotDefault` annotation to indicate that a bean is ""private"" and will never be injected unless all qualifiers match.

See here: https://github.com/spring-projects/spring-framework/issues/26528#issuecomment-1149741516

The semantics might be slightly different than `Secondary` (if I understand it correctly), but it might still be close to what you are looking for (or give you an idea on how to change the code).  I use this for a similar purpose though.
"
2177,1210554890,karolkrasnowski,12725930,Thanks for your reply. This problem does not occur in version `2.6.0` so I suppose that this issue can be closed.
2178,1210709102,snicoll,490484,"After a review, we're not sure if we want to introduce this. We should see how far we go with the integration of the portfolio and how common such problem arises. We could argue that we may want to do the opposite in the end (flag a bean that has to be instantiated but we want to pass a proxy rather than actual instantiating it). I've moved the issue to the backlog as we're not committed to implement it for the next milestone."
2179,1210735954,snicoll,490484,`markBeanAsCreated` is clearing the cache for the bean name. 
2180,1211296626,jhoeller,1263688,"There is an initial commit coming to main now: This includes runtime storing of generated classes to a directory specified by the ""cglib.generatedClasses"" system property, to be picked up by the build process for further inclusion in a jar file (and ultimately in a native image). We also avoid lazy CGLIB fast-class generation now and replace the generated Enhancer and MethodWrapper key classes with equivalent record types. Last but not least, this introduces support for early type determination in InstantiationStrategy, AopProxy and SmartInstantiationAwareBeanPostProcessor - in order to trigger CGLIB class generation in refreshForAotProcessing (through early determineBeanType calls for bean definitions)."
2181,1211885483,akhilpratap1991,64142250,"> [Here](https://gist.github.com/pjanczyk/5d958821bafd911a5996bc0b66788ea3#file-aopwithcoroutines-kt-L92) is a sample of how it can be done. Haven't checked it but looks promising.

Anyone able to make this work? I am getting into infinite loop"
2182,1212124699,sdeleuze,141109,"I think there is no exception because there are missing reflection hints for `@Cacheable` and related annotated method.

There is also a need for a `CacheableBeanRegistrationAotProcessor` to register related JDK dynamic proxies when they are used. Class proxies will hopefully be supported via #28115 once integrated in Spring Boot.


"
2183,1212136007,kzander91,61500114,"You shouldn't do stuff like this in a `@PostConstruct` method, bean construction hasn't completely finished at that point and using other beans that might themselves not be fully initialized can cause these problems.
Wait for the context to be ready to use and then do your call. If you're using Spring Boot, you can use an event listener:
```java
@EventListener(ApplicationReadyEvent.class)
public void ready() {
  // webClient call here
}
```
Or have your bean implement `CommandLineRunner`, which will have it be invoked automatically once the context is ready to use."
2184,1212199217,sbrannen,104798,Closing as a duplicate of #21829.
2185,1212395499,sbrannen,104798,"> `RuntimeHintsUtils` has now a `registerComposableAnnotation`, so I think using it on `RequestMapping` should cover some ground.

Yes, that should help.

My original concern was that we generate too many hints for `SynthesizedAnnotation` proxies for certain sets of annotations -- for example, `@GetMapping`, etc. in `WebAnnotationsRuntimeHintsRegistrar`. See also #28953.

We should now be using `registerComposableAnnotation` for `@RequestMapping`, and for `@GetMapping`, etc. we would need a new method that only registers the reflection hints for `@GetMapping`. In other words, if we supply `GetMapping.class` to `RuntimeHintsUtils.registerAnnotation`, it will register a `SynthesizedAnnotation` proxy hint for `@GetMapping` that will never be used within a native image (or at least not as a result of standard usage in the framework itself).

So, we could consider introducing a method such as `RuntimeHintsUtils.registerAnnotationForReflectionOnly`.

> The brainstorming bit in this issue makes it harder for me to understand the scope it.

I've covered part of the brainstorming above regarding the introduction of another ""for reflection only"" registration method.

The second part is to document specific use cases in the Javadoc to make it clear to the user when to use which `registerAnnotation*` variant. `@RequestMapping` and `@GetMapping` serve as a prime example that we can discuss to clarify things for users.

The last part was about automating the process of invoking `registerAnnotation*` variants in an _agent_ that performs static analysis to determine the appropriate action instead of leaving it up to the user. This part is of course totally optional and could be added later down the road if deemed desirable.

Does that make sense now?"
2186,1212919173,snicoll,490484,"Yes please, thanks for the offer!"
2187,1213422534,snicoll,490484,It looks like this is already working as expected.
2188,1213597764,pivotal-cla,16822967,"@yuanyuyu1123 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28959)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=28959) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
2189,1214052707,bclozel,103264,"Please provide a sample application reproducing the problem, something that we can git clone and run.

Thanks!"
2190,1214198987,j4zzcat,178921,"I stumbled upon this bug myself -- there's something broken also when using trailing zeros. See the following test case in Kotlin.
```

package bugs

import org.springframework.beans.factory.config.YamlPropertiesFactoryBean
import org.springframework.boot.autoconfigure.SpringBootApplication
import org.springframework.boot.runApplication
import org.springframework.core.env.PropertiesPropertySource
import org.springframework.core.io.InputStreamResource
import org.springframework.stereotype.Component

@SpringBootApplication
class Main

fun main(args: Array<String>) {
    runApplication<Main>(*args)
}

@Component
class Testcase {
    init {
        val testcase =
            """"""
               foo:
                 7: G
                 8: H
                 9: I
                 10: J
                
               bar:
                 07: G
                 08: H
                 09: I
                 10: J
            """""".trimIndent()

        val factory = YamlPropertiesFactoryBean()
        factory.setResources(InputStreamResource(testcase.byteInputStream()))

        val p = PropertiesPropertySource(""testcase"", factory.getObject()!!)
        p.propertyNames.forEach(::println)
    }
}
```

Which produces:
```
bar.08   <-- doh
bar.09   <-- doh!
bar[10]  <-- ok
bar[7]   <-- ok
foo[10]  <-- ok
foo[7]   <-- ok
foo[8]   <-- ok
foo[9]   <-- ok
```"
2191,1214670816,firekirin67,18045389,"Thank you for your reply


Project Address: https://github.com/firekirin67/classpath_test.git

The project uses the mybatis-plus ORM framework, an extended version of mybaits.
Configured in application. yml
  mybatis-plus:
    mapper-location: classpath*:**/mapper/*.xml

Here the Resourcepatternresolver is used internally to search for matches

jdk version:1.8.301

When the HTTP request (localhost: 8081/test) is called to the corresponding ORM framework for processing it should be a normal return of 1, but an exception is thrown when the corresponding XML file is not found. By modifying the mapper-location: classpath * : configuration attribute value in application.yml, you will get different return information"
2192,1214895117,firekirin67,18045389,"When I read Pathmatchingresourcepatternresolver, the property configuration values described earlier are indeed implementation-differentiated.

PathMatchingResourcePatternResolver uses the classloader of the current class. The getResources method implementation.

When configuring：""\*\*/mapper/*.xml"", the PathMatchingResourcePatternResolver is passed to the classloader. The getResources method is an empty string, gets the Classpath directory, and the PathMatchingResourcePatternResolver retrieves the path of the current class object to its package and the jar package corresponding to the ExtClassLoader. The only thing you get from getresources is that the Classpath Directory doesn't get the file path of the dependencies under the Classpath package.

When using""com/\*\*/mapper/\*.xml"" to match the search, the JVM's own implementation retrieves the dependency files in the Classpath and gets the corresponding dependency files. The pathmatching Resourcepatternresolver then performed a second file retrieval match"
2193,1214945540,bclozel,103264,"I think this works as designed from a Spring perspective. Depending on the resource prefix being used, a different resolver will be used and resource resolution will be different. See https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#resources-resourcepatternresolver

If you disagree somehow with the behavior or the documentation you should reach out to the mybatis-plus-boot-starter maintainers as I don't think that Spring Boot is in charge of this configuration property.

Thanks!"
2194,1215008201,snicoll,490484,"This isn't complete without method invocation hints on the target class, as stated by @jhoeller:

> I'm afraid that's the case since all the interceptor callbacks behind the proxy are Method-based, just like behind a JDK proxy. The naming arrangement is stable and in our control, so taking everything before the first $$ (for a class name to provide reflection for) should be a reliable way to handle it."
2195,1215011422,frost13it,5944951,Also I have a workaround: adding an empty part after the file seems to prevent requests from hanging.
2196,1215026455,sbrannen,104798,"The log message you have provided is a `DEBUG` message and can be safely ignored.

If I recall correctly, this has been the case since 2007 when the TestContext framework was first introduced. At that time it was the case for `@Transactional` not being available on the classpath if `spring-tx` was not present.

And the Servlet APIs came into play when we introduced support for web application contexts.

So, unless you are raising this issue to make some sort of change to the behavior, I think we can close this issue as ""works as designed"".

"
2197,1215336021,snicoll,490484,"> The log message you have provided is a DEBUG message and can be safely ignored.

Thanks, but I am very much aware of that.

> So, unless you are raising this issue to make some sort of change to the behavior, I think we can close this issue as ""works as designed"".


Here is the log output with Spring Boot `2.7.2` (Spring Framework `5.3.22`):

```
[INFO] Running com.example.demo.DemoAnnotationsApplicationTests
18:37:54.527 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating CacheAwareContextLoaderDelegate from class [org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate]
18:37:54.539 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating BootstrapContext using constructor [public org.springframework.test.context.support.DefaultBootstrapContext(java.lang.Class,org.springframework.test.context.CacheAwareContextLoaderDelegate)]
18:37:54.574 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating TestContextBootstrapper for test class [com.example.demo.DemoAnnotationsApplicationTests] from class [org.springframework.boot.test.context.SpringBootTestContextBootstrapper]
18:37:54.589 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.example.demo.DemoAnnotationsApplicationTests], using SpringBootContextLoader
18:37:54.594 [main] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [com.example.demo.DemoAnnotationsApplicationTests]: class path resource [com/example/demo/DemoAnnotationsApplicationTests-context.xml] does not exist
18:37:54.595 [main] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [com.example.demo.DemoAnnotationsApplicationTests]: class path resource [com/example/demo/DemoAnnotationsApplicationTestsContext.groovy] does not exist
18:37:54.595 [main] INFO org.springframework.test.context.support.AbstractContextLoader - Could not detect default resource locations for test class [com.example.demo.DemoAnnotationsApplicationTests]: no resource found for suffixes {-context.xml, Context.groovy}.
18:37:54.595 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [com.example.demo.DemoAnnotationsApplicationTests]: DemoAnnotationsApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
18:37:54.636 [main] DEBUG org.springframework.test.context.support.ActiveProfilesUtils - Could not find an 'annotation declaring class' for annotation type [org.springframework.test.context.ActiveProfiles] and class [com.example.demo.DemoAnnotationsApplicationTests]
18:37:54.706 [main] DEBUG org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider - Identified candidate component class: file [/Users/snicoll/workspace/temp/demo-annotations/target/classes/com/example/demo/DemoAnnotationsApplication.class]
18:37:54.709 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration com.example.demo.DemoAnnotationsApplication for test class com.example.demo.DemoAnnotationsApplicationTests
18:37:54.800 [main] DEBUG org.springframework.boot.test.context.SpringBootTestContextBootstrapper - @TestExecutionListeners is not present for class [com.example.demo.DemoAnnotationsApplicationTests]: using defaults.
18:37:54.800 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.event.ApplicationEventsTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
18:37:54.808 [main] DEBUG org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Skipping candidate TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener] due to a missing dependency. Specify custom listener classes or make the default listener classes and their required dependencies available. Offending class: [javax/servlet/ServletContext]
18:37:54.810 [main] DEBUG org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Skipping candidate TestExecutionListener [org.springframework.test.context.transaction.TransactionalTestExecutionListener] due to a missing dependency. Specify custom listener classes or make the default listener classes and their required dependencies available. Offending class: [org/springframework/transaction/interceptor/TransactionAttributeSource]
18:37:54.810 [main] DEBUG org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Skipping candidate TestExecutionListener [org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener] due to a missing dependency. Specify custom listener classes or make the default listener classes and their required dependencies available. Offending class: [org/springframework/transaction/interceptor/TransactionAttribute]
18:37:54.810 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@56dc1551, org.springframework.test.context.event.ApplicationEventsTestExecutionListener@102cec62, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@74f6c5d8, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@27912e3, org.springframework.test.context.support.DirtiesContextTestExecutionListener@34b9f960, org.springframework.test.context.event.EventPublishingTestExecutionListener@43015c69, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@19b89d4, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@4bbf6d0e, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@30b6ffe0, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@791d1f8b, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@2415fc55, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener@14f232c4]
18:37:54.813 [main] DEBUG org.springframework.test.context.support.AbstractDirtiesContextTestExecutionListener - Before test class: context [DefaultTestContext@72ef8d15 testClass = DemoAnnotationsApplicationTests, testInstance = [null], testMethod = [null], testException = [null], mergedContextConfiguration = [MergedContextConfiguration@6aa8e115 testClass = DemoAnnotationsApplicationTests, locations = '{}', classes = '{class com.example.demo.DemoAnnotationsApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@26794848, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@367ffa75, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@4c178a76, org.springframework.boot.test.autoconfigure.actuate.metrics.MetricsExportContextCustomizerFactory$DisableMetricExportContextCustomizer@41a2befb, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@7530ad9c, org.springframework.boot.test.context.SpringBootTestArgs@1, org.springframework.boot.test.context.SpringBootTestWebEnvironment@1e88b3c], contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map[[empty]]], class annotated with @DirtiesContext [false] with mode [null].
18:37:54.825 [main] DEBUG org.springframework.test.context.support.DependencyInjectionTestExecutionListener - Performing dependency injection for test context [[DefaultTestContext@72ef8d15 testClass = DemoAnnotationsApplicationTests, testInstance = com.example.demo.DemoAnnotationsApplicationTests@479cbee5, testMethod = [null], testException = [null], mergedContextConfiguration = [MergedContextConfiguration@6aa8e115 testClass = DemoAnnotationsApplicationTests, locations = '{}', classes = '{class com.example.demo.DemoAnnotationsApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@26794848, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@367ffa75, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@4c178a76, org.springframework.boot.test.autoconfigure.actuate.metrics.MetricsExportContextCustomizerFactory$DisableMetricExportContextCustomizer@41a2befb, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@7530ad9c, org.springframework.boot.test.context.SpringBootTestArgs@1, org.springframework.boot.test.context.SpringBootTestWebEnvironment@1e88b3c], contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.event.ApplicationEventsTestExecutionListener.recordApplicationEvents' -> false]]].

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v2.7.2)

2022-08-15 18:37:55.103  INFO 65475 --- [           main] c.e.d.DemoAnnotationsApplicationTests    : Starting DemoAnnotationsApplicationTests using Java 17.0.3 on snicoll-a01.vmware.com with PID 65475 (started by snicoll in /Users/snicoll/workspace/temp/demo-annotations)
2022-08-15 18:37:55.104  INFO 65475 --- [           main] c.e.d.DemoAnnotationsApplicationTests    : No active profile set, falling back to 1 default profile: ""default""
2022-08-15 18:37:55.592  INFO 65475 --- [           main] c.e.d.DemoAnnotationsApplicationTests    : Started DemoAnnotationsApplicationTests in 0.738 seconds (JVM running for 1.603)
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.576 s - in com.example.demo.DemoAnnotationsApplicationTests
```

And the log, for the same app, using Spring Boot `3.0.0-SNAPSHOT` (Spring Framework `6.0.0-SNAPSHOT`):

<details>

```
[INFO] Running com.example.demo.DemoAnnotationsApplicationTests
18:39:49.246 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating CacheAwareContextLoaderDelegate from class [org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate]
18:39:49.258 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating BootstrapContext using constructor [public org.springframework.test.context.support.DefaultBootstrapContext(java.lang.Class,org.springframework.test.context.CacheAwareContextLoaderDelegate)]
18:39:49.294 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating TestContextBootstrapper for test class [com.example.demo.DemoAnnotationsApplicationTests] from class [org.springframework.boot.test.context.SpringBootTestContextBootstrapper]
18:39:49.309 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.example.demo.DemoAnnotationsApplicationTests], using SpringBootContextLoader
18:39:49.314 [main] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [com.example.demo.DemoAnnotationsApplicationTests]: class path resource [com/example/demo/DemoAnnotationsApplicationTests-context.xml] does not exist
18:39:49.314 [main] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [com.example.demo.DemoAnnotationsApplicationTests]: class path resource [com/example/demo/DemoAnnotationsApplicationTestsContext.groovy] does not exist
18:39:49.314 [main] INFO org.springframework.test.context.support.AbstractContextLoader - Could not detect default resource locations for test class [com.example.demo.DemoAnnotationsApplicationTests]: no resource found for suffixes {-context.xml, Context.groovy}.
18:39:49.315 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [com.example.demo.DemoAnnotationsApplicationTests]: DemoAnnotationsApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
18:39:49.366 [main] DEBUG org.springframework.test.context.support.ActiveProfilesUtils - Could not find an 'annotation declaring class' for annotation type [org.springframework.test.context.ActiveProfiles] and class [com.example.demo.DemoAnnotationsApplicationTests]
18:39:49.440 [main] DEBUG org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider - Identified candidate component class: file [/Users/snicoll/workspace/temp/demo-annotations/target/classes/com/example/demo/DemoAnnotationsApplication.class]
18:39:49.442 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration com.example.demo.DemoAnnotationsApplication for test class com.example.demo.DemoAnnotationsApplicationTests
18:39:49.533 [main] DEBUG org.springframework.boot.test.context.SpringBootTestContextBootstrapper - @TestExecutionListeners is not present for class [com.example.demo.DemoAnnotationsApplicationTests]: using defaults.
18:39:49.540 [main] DEBUG org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Could not load default TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener]. Specify custom listener classes or make the default listener classes available.
java.lang.NoClassDefFoundError: jakarta/servlet/ServletContext
	at java.base/java.lang.Class.getDeclaredConstructors0(Native Method)
	at java.base/java.lang.Class.privateGetDeclaredConstructors(Class.java:3373)
	at java.base/java.lang.Class.getConstructors(Class.java:2060)
	at org.springframework.core.io.support.SpringFactoriesLoader$FactoryInstantiator.findConstructor(SpringFactoriesLoader.java:408)
	at org.springframework.core.io.support.SpringFactoriesLoader$FactoryInstantiator.forClass(SpringFactoriesLoader.java:397)
	at org.springframework.core.io.support.SpringFactoriesLoader.instantiateFactory(SpringFactoriesLoader.java:229)
	at org.springframework.core.io.support.SpringFactoriesLoader.load(SpringFactoriesLoader.java:208)
	at org.springframework.core.io.support.SpringFactoriesLoader.load(SpringFactoriesLoader.java:182)
	at org.springframework.test.context.support.AbstractTestContextBootstrapper.getDefaultTestExecutionListeners(AbstractTestContextBootstrapper.java:226)
	at org.springframework.boot.test.context.SpringBootTestContextBootstrapper.getDefaultTestExecutionListeners(SpringBootTestContextBootstrapper.java:116)
	at org.springframework.test.context.support.AbstractTestContextBootstrapper.getTestExecutionListeners(AbstractTestContextBootstrapper.java:131)
	at org.springframework.test.context.TestContextManager.<init>(TestContextManager.java:139)
	at org.springframework.test.context.TestContextManager.<init>(TestContextManager.java:122)
	at org.junit.jupiter.engine.execution.ExtensionValuesStore.lambda$getOrComputeIfAbsent$4(ExtensionValuesStore.java:86)
	at org.junit.jupiter.engine.execution.ExtensionValuesStore$MemoizingSupplier.computeValue(ExtensionValuesStore.java:223)
	at org.junit.jupiter.engine.execution.ExtensionValuesStore$MemoizingSupplier.get(ExtensionValuesStore.java:211)
	at org.junit.jupiter.engine.execution.ExtensionValuesStore$StoredValue.evaluate(ExtensionValuesStore.java:191)
	at org.junit.jupiter.engine.execution.ExtensionValuesStore$StoredValue.access$100(ExtensionValuesStore.java:171)
	at org.junit.jupiter.engine.execution.ExtensionValuesStore.getOrComputeIfAbsent(ExtensionValuesStore.java:89)
	at org.junit.jupiter.engine.execution.ExtensionValuesStore.getOrComputeIfAbsent(ExtensionValuesStore.java:93)
	at org.junit.jupiter.engine.execution.NamespaceAwareStore.getOrComputeIfAbsent(NamespaceAwareStore.java:61)
	at org.springframework.test.context.junit.jupiter.SpringExtension.getTestContextManager(SpringExtension.java:294)
	at org.springframework.test.context.junit.jupiter.SpringExtension.beforeAll(SpringExtension.java:113)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeBeforeAllCallbacks$10(ClassBasedTestDescriptor.java:381)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeBeforeAllCallbacks(ClassBasedTestDescriptor.java:381)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.before(ClassBasedTestDescriptor.java:205)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.before(ClassBasedTestDescriptor.java:80)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:148)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.lang.ClassNotFoundException: jakarta.servlet.ServletContext
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)
	... 60 common frames omitted
18:39:49.545 [main] DEBUG org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Could not load default TestExecutionListener [org.springframework.test.context.transaction.TransactionalTestExecutionListener]. Specify custom listener classes or make the default listener classes available.
java.lang.NoClassDefFoundError: org/springframework/transaction/interceptor/TransactionAttributeSource
	at java.base/java.lang.Class.getDeclaredConstructors0(Native Method)
	at java.base/java.lang.Class.privateGetDeclaredConstructors(Class.java:3373)
	at java.base/java.lang.Class.getConstructors(Class.java:2060)
	at org.springframework.core.io.support.SpringFactoriesLoader$FactoryInstantiator.findConstructor(SpringFactoriesLoader.java:408)
	at org.springframework.core.io.support.SpringFactoriesLoader$FactoryInstantiator.forClass(SpringFactoriesLoader.java:397)
	at org.springframework.core.io.support.SpringFactoriesLoader.instantiateFactory(SpringFactoriesLoader.java:229)
	at org.springframework.core.io.support.SpringFactoriesLoader.load(SpringFactoriesLoader.java:208)
	at org.springframework.core.io.support.SpringFactoriesLoader.load(SpringFactoriesLoader.java:182)
	at org.springframework.test.context.support.AbstractTestContextBootstrapper.getDefaultTestExecutionListeners(AbstractTestContextBootstrapper.java:226)
	at org.springframework.boot.test.context.SpringBootTestContextBootstrapper.getDefaultTestExecutionListeners(SpringBootTestContextBootstrapper.java:116)
	at org.springframework.test.context.support.AbstractTestContextBootstrapper.getTestExecutionListeners(AbstractTestContextBootstrapper.java:131)
	at org.springframework.test.context.TestContextManager.<init>(TestContextManager.java:139)
	at org.springframework.test.context.TestContextManager.<init>(TestContextManager.java:122)
	at org.junit.jupiter.engine.execution.ExtensionValuesStore.lambda$getOrComputeIfAbsent$4(ExtensionValuesStore.java:86)
	at org.junit.jupiter.engine.execution.ExtensionValuesStore$MemoizingSupplier.computeValue(ExtensionValuesStore.java:223)
	at org.junit.jupiter.engine.execution.ExtensionValuesStore$MemoizingSupplier.get(ExtensionValuesStore.java:211)
	at org.junit.jupiter.engine.execution.ExtensionValuesStore$StoredValue.evaluate(ExtensionValuesStore.java:191)
	at org.junit.jupiter.engine.execution.ExtensionValuesStore$StoredValue.access$100(ExtensionValuesStore.java:171)
	at org.junit.jupiter.engine.execution.ExtensionValuesStore.getOrComputeIfAbsent(ExtensionValuesStore.java:89)
	at org.junit.jupiter.engine.execution.ExtensionValuesStore.getOrComputeIfAbsent(ExtensionValuesStore.java:93)
	at org.junit.jupiter.engine.execution.NamespaceAwareStore.getOrComputeIfAbsent(NamespaceAwareStore.java:61)
	at org.springframework.test.context.junit.jupiter.SpringExtension.getTestContextManager(SpringExtension.java:294)
	at org.springframework.test.context.junit.jupiter.SpringExtension.beforeAll(SpringExtension.java:113)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeBeforeAllCallbacks$10(ClassBasedTestDescriptor.java:381)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeBeforeAllCallbacks(ClassBasedTestDescriptor.java:381)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.before(ClassBasedTestDescriptor.java:205)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.before(ClassBasedTestDescriptor.java:80)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:148)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.lang.ClassNotFoundException: org.springframework.transaction.interceptor.TransactionAttributeSource
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)
	... 60 common frames omitted
18:39:49.547 [main] DEBUG org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Could not load default TestExecutionListener [org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener]. Specify custom listener classes or make the default listener classes available.
java.lang.NoClassDefFoundError: org/springframework/transaction/interceptor/TransactionAttribute
	at java.base/java.lang.Class.getDeclaredConstructors0(Native Method)
	at java.base/java.lang.Class.privateGetDeclaredConstructors(Class.java:3373)
	at java.base/java.lang.Class.getConstructors(Class.java:2060)
	at org.springframework.core.io.support.SpringFactoriesLoader$FactoryInstantiator.findConstructor(SpringFactoriesLoader.java:408)
	at org.springframework.core.io.support.SpringFactoriesLoader$FactoryInstantiator.forClass(SpringFactoriesLoader.java:397)
	at org.springframework.core.io.support.SpringFactoriesLoader.instantiateFactory(SpringFactoriesLoader.java:229)
	at org.springframework.core.io.support.SpringFactoriesLoader.load(SpringFactoriesLoader.java:208)
	at org.springframework.core.io.support.SpringFactoriesLoader.load(SpringFactoriesLoader.java:182)
	at org.springframework.test.context.support.AbstractTestContextBootstrapper.getDefaultTestExecutionListeners(AbstractTestContextBootstrapper.java:226)
	at org.springframework.boot.test.context.SpringBootTestContextBootstrapper.getDefaultTestExecutionListeners(SpringBootTestContextBootstrapper.java:116)
	at org.springframework.test.context.support.AbstractTestContextBootstrapper.getTestExecutionListeners(AbstractTestContextBootstrapper.java:131)
	at org.springframework.test.context.TestContextManager.<init>(TestContextManager.java:139)
	at org.springframework.test.context.TestContextManager.<init>(TestContextManager.java:122)
	at org.junit.jupiter.engine.execution.ExtensionValuesStore.lambda$getOrComputeIfAbsent$4(ExtensionValuesStore.java:86)
	at org.junit.jupiter.engine.execution.ExtensionValuesStore$MemoizingSupplier.computeValue(ExtensionValuesStore.java:223)
	at org.junit.jupiter.engine.execution.ExtensionValuesStore$MemoizingSupplier.get(ExtensionValuesStore.java:211)
	at org.junit.jupiter.engine.execution.ExtensionValuesStore$StoredValue.evaluate(ExtensionValuesStore.java:191)
	at org.junit.jupiter.engine.execution.ExtensionValuesStore$StoredValue.access$100(ExtensionValuesStore.java:171)
	at org.junit.jupiter.engine.execution.ExtensionValuesStore.getOrComputeIfAbsent(ExtensionValuesStore.java:89)
	at org.junit.jupiter.engine.execution.ExtensionValuesStore.getOrComputeIfAbsent(ExtensionValuesStore.java:93)
	at org.junit.jupiter.engine.execution.NamespaceAwareStore.getOrComputeIfAbsent(NamespaceAwareStore.java:61)
	at org.springframework.test.context.junit.jupiter.SpringExtension.getTestContextManager(SpringExtension.java:294)
	at org.springframework.test.context.junit.jupiter.SpringExtension.beforeAll(SpringExtension.java:113)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeBeforeAllCallbacks$10(ClassBasedTestDescriptor.java:381)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeBeforeAllCallbacks(ClassBasedTestDescriptor.java:381)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.before(ClassBasedTestDescriptor.java:205)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.before(ClassBasedTestDescriptor.java:80)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:148)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.lang.ClassNotFoundException: org.springframework.transaction.interceptor.TransactionAttribute
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)
	... 60 common frames omitted
18:39:49.548 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Loaded default TestExecutionListener implementations from location [META-INF/spring.factories]: [org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.event.ApplicationEventsTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener]
18:39:49.550 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@748741cb, org.springframework.test.context.event.ApplicationEventsTestExecutionListener@3e44f2a5, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@295cf707, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@1130520d, org.springframework.test.context.support.DirtiesContextTestExecutionListener@5f77d0f9, org.springframework.test.context.event.EventPublishingTestExecutionListener@463fd068, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@895e367, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@1b266842, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@7a3793c7, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@42b3b079, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@651aed93, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener@4dd6fd0a]
18:39:49.554 [main] DEBUG org.springframework.test.context.support.AbstractDirtiesContextTestExecutionListener - Before test class: context [DefaultTestContext@5d43661b testClass = DemoAnnotationsApplicationTests, testInstance = [null], testMethod = [null], testException = [null], mergedContextConfiguration = [MergedContextConfiguration@12299890 testClass = DemoAnnotationsApplicationTests, locations = '{}', classes = '{class com.example.demo.DemoAnnotationsApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@38afe297, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@7c9d8e2, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@1e66f1f5, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@9da1, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@77f80c04, org.springframework.boot.test.context.SpringBootTestArgs@1, org.springframework.boot.test.context.SpringBootTestWebEnvironment@42d80b78], contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map[[empty]]], class annotated with @DirtiesContext [false] with mode [null].
18:39:49.567 [main] DEBUG org.springframework.test.context.support.DependencyInjectionTestExecutionListener - Performing dependency injection for test context [[DefaultTestContext@5d43661b testClass = DemoAnnotationsApplicationTests, testInstance = com.example.demo.DemoAnnotationsApplicationTests@127a7a2e, testMethod = [null], testException = [null], mergedContextConfiguration = [MergedContextConfiguration@12299890 testClass = DemoAnnotationsApplicationTests, locations = '{}', classes = '{class com.example.demo.DemoAnnotationsApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@38afe297, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@7c9d8e2, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@1e66f1f5, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@9da1, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@77f80c04, org.springframework.boot.test.context.SpringBootTestArgs@1, org.springframework.boot.test.context.SpringBootTestWebEnvironment@42d80b78], contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.event.ApplicationEventsTestExecutionListener.recordApplicationEvents' -> false]]].

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::       (v3.0.0-SNAPSHOT)

2022-08-15T18:39:49.838+02:00  INFO 65915 --- [           main] c.e.d.DemoAnnotationsApplicationTests    : Starting DemoAnnotationsApplicationTests using Java 17.0.3 on snicoll-a01.vmware.com with PID 65915 (started by snicoll in /Users/snicoll/workspace/temp/demo-annotations)
2022-08-15T18:39:49.839+02:00  INFO 65915 --- [           main] c.e.d.DemoAnnotationsApplicationTests    : No active profile set, falling back to 1 default profile: ""default""
2022-08-15T18:39:50.326+02:00  INFO 65915 --- [           main] c.e.d.DemoAnnotationsApplicationTests    : Started DemoAnnotationsApplicationTests in 0.723 seconds (process running for 1.592)
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.592 s - in com.example.demo.DemoAnnotationsApplicationTests
```
</details>"
2198,1215602216,sbrannen,104798,"> > The log message you have provided is a DEBUG message and can be safely ignored.
> 
> Thanks, but I am very much aware of that.

Yes, I'm confident you're aware of that, but when I discuss issues in public forums I do not treat the discussion as a one-on-one discussion with an individual. Rather, I provide information that may be useful for anyone reading the discussion in order to provide a full picture of the topic at hand.

In light of that, please keep in mind that you do not need to thank me or inform me that you are already aware of something.

> And the log, for the same app, using Spring Boot `3.0.0-SNAPSHOT` (Spring Framework `6.0.0-SNAPSHOT`):

Thanks for providing the differing log output. That now clarifies why you created this issue. Specifically, the log output has changed in 6.0 milestones due to #28666.

I'll update this issue's title to reflect that, and I'll rework the exception handling in `AbstractTestContextBootstrapper.getDefaultTestExecutionListeners()` to align with the previous behavior for a `NoClassDefFoundError` (as can still be seen in `AbstractTestContextBootstrapper.instantiateListeners(Class<? extends TestExecutionListener>...)`)."
2199,1215973415,kilink,835139,"FYI, it's also the buffer size used in Guava and Apache Commons."
2200,1216045682,firekirin67,18045389,Thank you for your reply
2201,1216155250,snicoll,490484,"The Javadoc for `readOnly()` states the following:

> This just serves as a hint for the actual transaction subsystem; it will not necessarily cause failure of write access attempts. A transaction manager which cannot interpret the read-only hint will not throw an exception when asked for a read-only transaction but rather silently ignore the hint."
2202,1216163333,rbri,2544132,@bclozel any news - anything i can do to move this forward?
2203,1216282799,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
2204,1216391370,poutsma,330665,"Fixed! Thanks for spotting this, @kzander91 "
2205,1216500865,sbrannen,104798,Reopening to move `TestGenerationContext` from `spring-test` to `spring-core-test`.
2206,1216683077,snicoll,490484,This issue has been superseded by #28967
2207,1216754521,snicoll,490484,"I am not 100% sure but it looks like this issue, as described, is supesrseded now"
2208,1216760460,sbrannen,104798,Indeed it may be superseded now. I'll take another pass later in the week.
2209,1217443506,albertocavalcante,54247214,"> It seems there isn't a way to provide a custom `Json` or set config on `Json` for the `KotlinSerializationJsonDecoder`
> 
> Spring Framework 5.3.14
> 
> Workaround:
> 
> ```kotlin
> @Configuration(proxyBeanMethods = false)
> class InitConfiguration {
> 
>     @ExperimentalSerializationApi
>     @Bean
>     fun kotlinSerializationJsonDecoder() = KotlinSerializationJsonDecoder(Json {
>         explicitNulls = false
>     })
> 
> }
> 
> @ExperimentalSerializationApi
> @Configuration
> class WebConfig(val decoder: KotlinSerializationJsonDecoder) : WebFluxConfigurer {
>     override fun configureHttpMessageCodecs(configurer: ServerCodecConfigurer) {
>         super.configureHttpMessageCodecs(configurer)
>         configurer.defaultCodecs().kotlinSerializationJsonDecoder(decoder)
>     }
> }
> ```

@jamesward Thanks for sharing your workaround. Unfortunately had no luck yet in doing the same.


+1 on this request. It would be great to have some customization option, perhaps properties also available at [JSON Properties](https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.json)
but something similar to `Jackson2ObjectMapperBuilderCustomizer `would be nice for this purpose as well. 

I was wondering if @sdeleuze has any thoughts on this. "
2210,1217459836,albertocavalcante,54247214,"I just realized that for what I wanted to do I had to take a different approach. I wanted to configure the `kotlinx.serialization` Decoder for `WebClient`.

I ended up with something close to this:

```kt
object KSerializationConfig {
    val json = Json {
        ignoreUnknownKeys = true
        isLenient = true
        allowSpecialFloatingPointValues = true
        useArrayPolymorphism = true
        encodeDefaults = true
        explicitNulls = false
    }
}
```

```kt
    @Bean
    fun apiClient() = WebClient.builder()
            .baseUrl(""${apiProperties.baseUrl}/rest/api"")
            .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
            .codecs {
                val decoder = KotlinSerializationJsonDecoder(KSerializationConfig.json)
                it.defaultCodecs().kotlinSerializationJsonDecoder(decoder)
            }.build()
```

Based on: https://stackoverflow.com/a/66020393/12249394 and https://discuss.kotlinlang.org/t/kotlinx-serialization-with-spring-boot/16540/15"
2211,1217711874,jaggerwang,1255011,Same problem! I think it should be solved in application framework not in servlet container.
2212,1217718763,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
2213,1217855363,sbrannen,104798,"Closing in light of #28967 and related recent changes.

If the need arises, we can reopen this issue at a later date."
2214,1217875680,sbrannen,104798,"> Or we could allow the creation of a `GenerationContext` per invocation. This means that we create the stateful resources at the beginning (files and hints) and we reuse them in fresh context created for each run. Here is [an updated example](https://github.com/snicoll/spring-framework/blob/e8a0740694e442b2367520936952162250b8c569/spring-context/src/test/java/org/springframework/context/aot/DefaultGenerationContextForTestsTests.java#L24-L34) (doesn't compile atm).

This is effectively the route I've gone in the current implementation of #28204. The following are the only changes I had to make to core AOT infrastructure:

- introduction of a public `DefaultGenerationContext(ClassNameGenerator,GeneratedFiles,RuntimeHints)` constructor that allows me to provide a `ClassNameGenerator` for each test class for which we need to create a unique set of AOT artifacts.
- changed the return type of `DefaultGenerationContext.withName(String)` from `GenerationContext` to `DefaultGenerationContext`.

In light of that, let's hold off on providing support for targeting a component -- as I originally proposed -- until the AOT work for the TestContext framework is further along.

> There is an additional problem regardless of which approach we pick. We can't strictly speaking rely on `withName` to provide a unique prefix for the test as processors can invoke this and therefore ""reset"" the name that was set. We should probably update `ClassNameGenerator` to be more flexible and retain the ""Prefix of the prefix"" if `withName` is used. If we do this, then we have the guarantee that each invocation will not create similar resources. The counter in `DefaultGenerationContext` doesn't then need to be transmitted from one context to another.

I created #28974 to address this particular issue."
2215,1218192392,a364176773,19943636,"> i try many way to solve this problem, but any way had fail

me too"
2216,1218581118,asibross,11426802,Was this added to any 5.3.x version?
2217,1218615633,jamesbassett,2376540,Are there any updates on this issue? It's a bit of a roadblock for us - we rely on the context being propagated so can't use transactions at the moment :(
2218,1218987611,snicoll,490484,"Regarding ""Introspect vs Invoke methods"" and ""Read vs Write"" the empty customizer being different than the method that takes no customizer is an oversight and can easily be fixed.

> This results in a lot of calls to TypeReference.of in the caller code:

Can you expand what you mean by ""a lot""? 

>  A (now outdated) example can be found in

It's outdated as we're not supposed to do method lookups manually. The intention of the API is to provide a way to specify a method handle that was retrieved as part of some processing.

> Naming consistency

That's a good point. `ProxyHints` used to cover both classes and JDK proxies.  I think it makes sense to keep the proxy bits as it may very well evolve in the future.

> however, when the JSON is written all excludes and all includes are included together. See 

That is a bug that I am aware of and kept forgetting to report.
"
2219,1218998365,philwebb,519772,"> Can you expand what you mean by ""a lot""?

Perhaps the wrong phrase. More than none. (edit: [Here's a good example](https://github.com/spring-projects/spring-framework/blob/4556895e6e97931c642e30c8c874b690708f2ea1/spring-tx/src/main/java/org/springframework/transaction/annotation/TransactionRuntimeHints.java#L43-L45))

> It's outdated as we're not supposed to do method lookups manually. The intention of the API is to provide a way to specify a method handle that was retrieved as part of some processing

True, but I found method lookup also used in quite a few tests.


"
2220,1218999406,philwebb,519772,"I've pushed an experimental alternative API to https://github.com/philwebb/spring-framework/tree/gh-28977 for review.

The main difference is that there's now a fluent style API that can be used rather than the builder. There are two commits on that branch, the first changes the API and the second adapts the existing code to use it."
2221,1219005414,snicoll,490484,"> Perhaps the wrong phrase. More than none. (edit: [Here's a good example](https://github.com/spring-projects/spring-framework/blob/4556895e6e97931c642e30c8c874b690708f2ea1/spring-tx/src/main/java/org/springframework/transaction/annotation/TransactionRuntimeHints.java#L43-L45))

It's in the same ballpark as the rest of the feedback IMO. The current API is missing a `registerTypes` with a list of `Class`and that's also an oversight.

> True, but I found method lookup also used in quite a few tests.

OK. I don't understand what the problem is with that."
2222,1219008922,snicoll,490484,Fixed by [9a1b7c5](https://github.com/spring-projects/spring-framework/commit/9a1b7c5e47c8ea56ad9b91c5f3ba87eda9d9d7c9)
2223,1219017584,philwebb,519772,"> It's in the same ballpark as the rest of the feedback IMO. The current API is missing a `registerTypes` with a list of `Class`and that's also an oversight.

I was trying to list interesting things I'd found in case we didn't want to take on a new API and instead wanted to make a few tweaks to the existing one.

> OK. I don't understand what the problem is with that.

There's not a problem, but it it's easy to support method lookup in the API then it might be worth doing for the tests, even if it's not used much in `src/main`.

[FileNativeConfigurationWriterTests](https://github.com/spring-projects/spring-framework/blob/4556895e6e97931c642e30c8c874b690708f2ea1/spring-core/src/test/java/org/springframework/aot/nativex/FileNativeConfigurationWriterTests.java#L116) is a good example. 

Another one that isn't in test code is [SchedulerFactoryBeanRuntimeHints](https://github.com/spring-projects/spring-framework/blob/main/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBeanRuntimeHints.java#L54-L55)"
2224,1219425910,sbrannen,104798,"> Was this added to any 5.3.x version?

No, this issue is still open and assigned to the `5.3.x` backlog."
2225,1219442289,sbrannen,104798,"> Often the API expects a `TypeReference` parameter but the user has either a `Class<?>` or a `String`. This results in a lot of calls to `TypeReference.of` in the caller code:

This is directly related to #28781. See discussions in comment section for details.
"
2226,1219659027,philwebb,519772,"Thanks for link @sbrannen, I'd forgotten about that discussion. For the experimental API I consistently added `Class<?>`, `String` and `TypeReference` methods for all calls. Although it adds a few more lines to the code (6 more if you exclude javadoc), I don't personally think it adds much cognitive load since all the methods are named the same.

[Here's an example](https://github.com/philwebb/spring-framework/blob/e948391f7d7c01e155ddcf435b4b52082bf608c8/spring-core/src/main/java/org/springframework/aot/hint/ReflectionHints.java#L308-L339) where you can call `forPublicFieldsIn(...)` with whatever type you have.

I was a little worried about the String variants because there are some rules that the [javadoc on `TypeReference`](https://github.com/spring-projects/spring-framework/blob/eac616a83e8cd9fda3a0150ed3b9b3c323006c78/spring-core/src/main/java/org/springframework/aot/hint/TypeReference.java#L79) spells out. We could repeat that warning in the hint API javadoc, or provide a `{@link ...}` to `TypeReference.of(String)`.

 "
2227,1220318399,snicoll,490484,"We're recently extracted the logic of processing `@Reflective`-annotated types in a reusable service rather than relying on the fact that they were placed on a bean. This had the effect of reducing the boilerplate by adding `@Reflective` on the required elements and kick-off the processing by specifying the `Class`. Such processing keeps being conditional so we only contribute those hints if the infrastructure that uses it is enabled.

`@Reflective` is focused on reflection and `ReflectionHints`. While this is a major piece it is not the only one so, perhaps, we should find a way to expand that a bit. A first step could be to find a way to expand the contract to cover `RuntimeHints`.

A possible annotation reusing our infrastucture could be:

```java
@Target({ ElementType.TYPE, ElementType.METHOD })
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Reflective(RegisterReflectionProcessor.class)
public @interface RegisterReflection {

	Class<?>[] value();
	
	// Other fields
}
```

`RegisterReflectionProcessor` can read the `@RegisterReflection` based on the annotated element, and kick off a processing based on the attributes on the annotation.

We could have as ""many"" annotations and processors as we want to. `BindingReflectionHintsRegistrar` should probably become an implementation detail of one of those.
"
2228,1220382171,sdeleuze,141109,@jamesbassett Any chance you could provide a repro since we have no feedback on that on the Spring Data issue?
2229,1220689166,snicoll,490484,"In the end we extracted the logic of scanning in a dedicated type, `PersistenceManagedTypes`. This is quite similar to the approach Spring Data took with its `ManagedTypes` abstraction. The change in public API is minimal and `packagesToScan` refers to the new facility."
2230,1220796042,snicoll,490484,"It's indeed not a good idea. You could use `SmartInitializationSingleton` instead as `afterSingletonInstantied` provides a better callback for things like. 

I am going to close this as a duplicate of https://github.com/spring-projects/spring-framework/issues/20904"
2231,1221130709,mwisnicki,96032,"Forgot to mention this is for the case where one need both instances to exist in the app.
Otherwise you can put `@Conditional` on implementation classes."
2232,1221535345,sbrannen,104798,Reopening to introduce a dedicated `AotContextLoader` extension of `SmartContextLoader` instead of modifying the existing contract for `SmartContextLoader`.
2233,1221587185,snicoll,490484,@lizongbo this PR is changing two completely unrelated things so it's very unlikely we'd accept it in its current form. What's the reason for changing Quartz's default?
2234,1221588608,lizongbo,1670666,"> @lizongbo this PR is changing two completely unrelated things so it's very unlikely we'd accept it in its current form. What's the reason for changing Quartz's default?

It was two commit, and since I wasn't familiar with mentioning Pull Requests separately, I wanted to submit the second commit as a separate pull request, but on the github‘s web page there was only a button show “view pull Requests”, and I couldn't create a new Pull Request. 
The default value of quartz is false, and after Spring is set to true, quartz is not running in the transaction when acquiring and unlocking locks, and there will be a very low probability of causing bugs when concurrently acquiring locks.
the detail info is in Issue #28134。




"
2235,1221758459,snicoll,490484,Thanks for the suggestion. This is a duplicate of https://github.com/spring-projects/spring-framework/issues/27283
2236,1221793977,snicoll,490484,The proxy is now created properly but the `aspect` smoke test still fails.
2237,1221931162,sdeleuze,141109,"I was able to make it work with:
```
static class AspectRuntimeHints implements RuntimeHintsRegistrar {
		@Override
		public void registerHints(RuntimeHints hints, ClassLoader classLoader) {
			hints.reflection().registerType(TestAspect.class,
					builder -> builder.withMembers(MemberCategory.INVOKE_DECLARED_METHODS));
			hints.proxies().registerJdkProxy(FactoryBean.class, BeanClassLoaderAware.class, ApplicationListener.class);
			hints.proxies().registerJdkProxy(ApplicationAvailability.class, ApplicationListener.class);
		}
	}
```

Reflection hint should probably be inferred on Spring Framework side.

The 2 proxies are required  by `org.springframework.boot.availability.ApplicationAvailabilityBean` and `org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar` and are not created automatically by my #28980 local fix (@jhoeller could you please confirm that's expected?). Related stacktrace is:
```
at java.lang.reflect.Proxy.getProxyConstructor(Proxy.java:48) ~[aspect:na]
	at java.lang.reflect.Proxy.getProxyClass(Proxy.java:398) ~[aspect:na]
	at org.springframework.util.ClassUtils.createCompositeInterface(ClassUtils.java:784) ~[na:na]
	at org.springframework.aop.aspectj.AspectJExpressionPointcut.getTargetShadowMatch(AspectJExpressionPointcut.java:437) ~[na:na]
	at org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(AspectJExpressionPointcut.java:295) ~[na:na]
	at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:251) ~[na:na]
	at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:288) ~[na:na]
	at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:320) ~[na:na]
	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply(AbstractAdvisorAutoProxyCreator.java:128) ~[aspect:6.0.0-SNAPSHOT]
	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:97) ~[aspect:6.0.0-SNAPSHOT]
	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:78) ~[aspect:6.0.0-SNAPSHOT]
	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:366) ~[aspect:6.0.0-SNAPSHOT]
	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:318) ~[aspect:6.0.0-SNAPSHOT]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:435) ~[aspect:6.0.0-SNAPSHOT]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1757) ~[aspect:6.0.0-SNAPSHOT]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[aspect:6.0.0-SNAPSHOT]
```
If it is confirmed those can't be inferred, I guess those proxies hints should be contributed on Boot side"
2238,1221978665,sdeleuze,141109,"@snicoll @jhoeller  A draft implementation is available on [gh-28980](https://github.com/sdeleuze/spring-framework/tree/gh-28980).

While `transactional` and `cache-simple-jdk-proxy` AOT smoke tests sample work without specific hints, `validation` one fails with:
```
Caused by: com.oracle.svm.core.jdk.UnsupportedFeatureError: Proxy class defined by interfaces [interface jakarta.validation.Validator, interface org.springframework.aop.SpringProxy, interface org.springframework.aop.framework.Advised, interface org.springframework.core.DecoratingProxy] not found. Generating proxy classes at runtime is not supported. Proxy classes need to be defined at image build time by specifying the list of interfaces that they implement. To define proxy classes use -H:DynamicProxyConfigurationFiles=<comma-separated-config-files> and -H:DynamicProxyConfigurationResources=<comma-separated-config-resources> options.
	at com.oracle.svm.core.util.VMError.unsupportedFeature(VMError.java:89) ~[na:na]
	at com.oracle.svm.reflect.proxy.DynamicProxySupport.getProxyClass(DynamicProxySupport.java:158) ~[na:na]
	at java.lang.reflect.Proxy.getProxyConstructor(Proxy.java:48) ~[validation:na]
	at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:1037) ~[validation:na]
	at org.springframework.aop.framework.JdkDynamicAopProxy.getProxy(JdkDynamicAopProxy.java:126) ~[na:na]
	at org.springframework.aop.framework.ProxyFactory.getProxy(ProxyFactory.java:110) ~[na:na]
	at org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver.buildLazyResolutionProxy(ContextAnnotationAutowireCandidateResolver.java:130) ~[na:na]
	at org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver.getLazyResolutionProxyIfNecessary(ContextAnnotationAutowireCandidateResolver.java:54) ~[na:na]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1292) ~[validation:6.0.0-SNAPSHOT]
	at org.springframework.beans.factory.aot.BeanInstanceSupplier.resolveArgument(BeanInstanceSupplier.java:332) ~[na:na]
	at org.springframework.beans.factory.aot.BeanInstanceSupplier.resolveArguments(BeanInstanceSupplier.java:265) ~[na:na]
	at org.springframework.beans.factory.aot.BeanInstanceSupplier.get(BeanInstanceSupplier.java:208) ~[na:na]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.obtainInstanceFromSupplier(AbstractAutowireCapableBeanFactory.java:1225) ~[validation:6.0.0-SNAPSHOT]
```
Not sure yet why this one is not detected."
2239,1222015619,sdeleuze,141109,"As discussed with Juergen, this is due to `@Lazy` used there and will likely require a refinement to be potentially supported."
2240,1222032511,dmitry-weirdo,15837869,This CVE started to fail again with org.owasp:dependency-check-maven updated to v7.1.2. Is it still to be ignored?
2241,1222041779,bclozel,103264,"@dmitry-weirdo The suppression in dependency-check [is still here as far as I know](https://github.com/jeremylong/DependencyCheck/issues/4558), if there's a problem you should report it to the DependencyCheck project directly."
2242,1222126342,snicoll,490484,It's actually not working on the JVM either (with an `@Order` specified on the class).
2243,1222195251,bclozel,103264,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
2244,1222232604,snicoll,490484,That's because a `GenericApplicationContext` doesn't have the required comparator by default. We should add `beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE);`
2245,1222237433,edyda99,76707194,"For testing, I used to assert that the exception contains ""Connection refused: connect"" but the pipeline was failing,
I guess because the port is opened, it's returning connection timeout instead of connection refused.
When someone reviews, I need some suggestions on the best way to add unit tests to this feature."
2246,1222263665,jhoeller,1263688,"I've addressed the specific `MethodValidationPostProcessor` scenario through a `setValidatorProvider(ObjectProvider<Validator>)` method, with the suggestion to adapt the injection point declaration in Boot's `ValidationAutoConfiguration` accordingly."
2247,1222291503,jhoeller,1263688,"@sdeleuze for `@Lazy` detection on injection points, we are not going to get a complete picture through the bean type determination in `refreshForAotProcessing`. We'd have to fully initialize all beans for this since otherwise we won't hit all the - potentially nested - injection points. The key difference is that such lazy proxies are not created for managed bean instances themselves, they are rather locally created for adapting individual injection points in dependent beans.

Maybe we could cover the most common scenarios in our AOT configuration class processing, outside of the core container. As we are transforming each bean declaration into a programmatic bean definition, we could introspect the signatures of the factory methods, constructors and also setter methods that we're generating calls for - and automatically register a JDK proxy hint (or define a corresponding CGLIB subclass) for an `@Lazy` injection point type. Alternatively, we could also ask people to change every such injection point to `ObjectProvider` instead - which is generally the more efficient lazy access solution and therefore recommended in infrastructure code, but possibly not seen as convenient enough in application code."
2248,1222442197,snicoll,490484,@navyakrishna92 you haven't described what issue you're facing so I don't know what you're expecting us to do. 
2249,1222446359,jhoeller,1263688,"I've introduced a `getLazyResolutionProxyClass` mechanism in the `AutowireCandidateResolver` SPI, to be invoked for every parameter/field that we are triggering behind a specific bean definition. This works fine in a local test for both JDK proxies and CGLIB proxies. Hopefully it is straightforward to integrate into our AOT processing, @snicoll. For every Class returned, we should do something along the lines of the recent addition to `refreshForAotProcessing`:

```
	if (proxyType != null && Proxy.isProxyClass(proxyType)) {
		runtimeHints.proxies().registerJdkProxy(proxyType.getInterfaces());
	}
``` 

For CGLIB proxies, it should be sufficient to have triggered `getLazyResolutionProxyClass` to begin with, capturing the generated class underneath the covers."
2250,1222562584,snicoll,490484,Duplicate of #28305
2251,1222654869,bclozel,103264,"I think the main problem here is that issues are not reported as they should. #27373 has been declined and re-opened against rsocket-java directly. If the problem can be reproduced without Spring Framework being involved, this should be fixed in rsocket-java.

Creating issues here are just likely to get declined and not reported properly to the rsocket team. Additionally, if you believe you've found a security issue [this should be reported responsibly](https://spring.io/security-policy).

While some team members here are involved with rsocket-java, this issue tracker is understandably dedicated to Spring Framework issues only. I'll leave your other issues opened for now but if you think the problem lies in rsocket-java, you should close them and reopen them against the right project.

Thanks!"
2252,1222764555,johannespostler,1568207,"I'm on @MartinHaeusler 's team. I'm not sure whether this is relevant, but I'd like to add that we are NOT using the embedded Tomcat, but rather the latest Tomcat 9.0.x. Our application is deployed as a WAR file in Tomcat."
2253,1222778166,snicoll,490484,"`getLazyResolutionProxyClass` is integrated for `@Autowired` fields and methods, as well as on the constructor or factory method of any bean in the context."
2254,1222876320,bondolo,250420,ping! 
2255,1222977977,bclozel,103264,"Sorry for the late response.

I'm not sure this would be the preferred way of implementing this use case.
For example in Spring Boot, a `WebClient.Builder` is auto-configured to not only select the right `ClientHttpConnector`, but also configure client codecs (applying Jackson preferences) and developer-provided customizers. This allows developers to inject this builder anywhere and build an ad-hoc client for the task at hand:

```
@Component
public class WeatherService {

  private final WebClient client;

  public WeatherService(WebClient.Builder builder) {
    this.client = builder.baseUrl(""https://example.org/weather/api/"").build();
  }
}
```

Also, in the case of Netty and Jetty, the client is also auto-configured to [reuse the server HTTP resources for better efficiency](https://docs.spring.io/spring-boot/docs/current/reference/html/io.html#io.rest-client.webclient.runtime) - such resources cannot always be looked up statically, thus requiring a later phase in the application context lifecycle.

Does this mirror desired features for your `OurClientHttpConnector` or did you achieve this in some other way?"
2256,1223462156,ngorantla-equinix,87039136,"Do we've any solution for it, i'm also having same problem. ServletRequest not able to inject in thread scope Webclient Request"
2257,1223472490,navyakrishna92,72068364,"As we know, Java EE modules, including the JAXB packages javax.xml.* is completely removed in jdk11, Oracle submitted the Java EE to Eclipse Foundation and repackaged javax.xml.* to jakarta.xml.* since version 3.0.
When we're migrating to jdk11, our implementation expecting us to use  jakarta.xml.* but spring-oxm version 6 is not yet released and using  javax.xml.*. Example: 
JAXBContext context = JAXBContext.newInstance(FormBCTrnsmtSubmissionDtlType.class); // using import jakarta.xml.bind.JAXBContext;
Unmarshaller unmarshaller = context.createUnmarshaller(); // using import jakarta.xml.bind.Unmarshaller;
StaxEventItemReader<JAXBElement<ABDObject>> itemReader = new StaxEventItemReader<>();
itemReader.setUnmarshaller(unmarshaller); // compiler error is thrown here to use required 
org.springframework.oxm.Unmarshaller and i can't use ""Jaxb2Marshaller"" because inside it uses  javax.xml.* package
"
2258,1223550323,snicoll,490484,"> When we're migrating to jdk11, our implementation expecting us to use jakarta.xml.* but spring-oxm version 6 is not yet released and using javax.xml.

You don't have to use the `jakarta` namespace because you upgraded to Java 11. There are a lot of questions around this on StackOverflow, for example [this one](https://stackoverflow.com/questions/43574426/how-to-resolve-java-lang-noclassdeffounderror-javax-xml-bind-jaxbexception). If you add JAXB to your classpath (now that it's removed from the JDK) you'll be able to use the same code unchanged.

Going forward, please ask questions on StackOverflow, as mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements."
2259,1223577307,snicoll,490484,@ben-enfuse-io thank you for making your first contribution to Spring Framework.
2260,1223671062,OlegDokuka,5380167,"as the spec suggests:

> Lack of REQUEST_N frames that stops a stream is an application concern and SHALL NOT be handled by the protocol

The mentioned scenario is an application concern and should be handled by the application https://github.com/rsocket/rsocket/blob/master/Protocol.md#handling-the-unexpected"
2261,1223674088,bclozel,103264,"Thanks @OlegDokuka , I'll close this issue as invalid since this is covered by the spec already."
2262,1223690887,guosx2015,26640701,"FactoryBean that creates and configures a Quartz Scheduler, manages its lifecycle as part of the Spring application context, and exposes the Scheduler as bean reference for dependency injection.
messages above is from spring-context-support‘s document，this has expained why the error is ocurred。"
2263,1223755828,mostroverkhov,3397563,">as the spec suggests:
>
>    Lack of REQUEST_N frames that stops a stream is an application concern and SHALL NOT be handled by the protocol
>
>The mentioned scenario is an application concern and should be handled by the application https://github.com/rsocket/rsocket/blob/master/Protocol.md#handling-the-unexpected

This is completely not related to the issue reported here - not sure why It was linked:

the reproducer clearly shows there is periodic `requestN=5` sent by receiver every second,
so stream is not stopped / stalled: `payload requested: 5`.

The problem reported here is responder does not respect requested demand - and responder is free to send messages at arbitrarily high rate: `payload requested: 5, received: 49929` because *is allowed* to do so by rsocket/rsocket-java.

This is obvious omission - backpressure/flow control has to be *enforced* on receiver side if this library
is intended for servers accessed by non-trusted clients (internet clients, cloud application 3rd party clients) - 
same way how `http2` flow control is enforced on receiver side: if peer receives more bytes than requested by stream, 
connection is closed.

@bclozel I suggest Spring team to have another look at this and reopen the issue:
> The mentioned scenario is an application concern and should be handled by the application

It basically requires from spring / rsocket-java library users to have this for each channel request (pseudocode):

```
.doOnSignal(signal -> {
     if(signal is requestN) {
        totalRequestN+=requestN.value
     } else if (signal is next) {
        totalRequestN--
        if(totalRequestN<0) {
           rsocket.close(""stream flow control violation"")
        }
     }
})
```
When moving over untrusted boundary, protocol rules validation is responsibility of library
implementation - not of the application code."
2264,1223857646,mostroverkhov,3397563,">  If the problem can be reproduced without Spring Framework being involved, this should be fixed in rsocket-java.

@bclozel The purpose of issue was more for clarification why rsocket/rsocket-java - poorly maintained and arguably vulnerable library keeps being pushed through SpringBoot  onto end users, less for genuine interest in rsocket/rsocket-java itself.

It also explains why this was originally opened on` spring-boot` issue tracker - `spring-boot` is the source from which I, as well as most of the java/spring users get rsocket-java as transitive dependency of several significant projects - and expect transitive dependencies are at least safe to use. 

I think It is up to spring-boot team how latter gets achieved: upstream fix (conveniently, spring team has people with push access rights there) or phase out. Declaration as non-issue is not helpful because of how trivially outlined problems may be demonstrated in practice: https://github.com/mostroverkhov/springboot-repros.

>reported properly to the rsocket team

Previous interactions were mostly not fruitful - seems like current maintainers  are not interested accepting responsibility for delivered projects.

"
2265,1223874169,snicoll,490484,Shouldn't the condition be on a Jackson class? Or the module as it's probably optional. 
2266,1223876495,bclozel,103264,"Raising bogus issues with both Spring Framework and Spring Boot is not making your case but just wasting our time.

The Spring Framework team trusts the rsocket-java team and the community to make the right decisions. We're pretty happy about the integrations so far and get positive feedback from developers.

Please understand that your comments here are not helping; I would suggest to start engaging with the rsocket-java community in a respectful manner, and trust the process."
2267,1223883000,sdeleuze,141109,"Good point, I will update accordingly."
2268,1223885136,sdeleuze,141109,"In fact, maybe the condition is ok with the builder but we should add a classpath check on the related modules since those are instantiated reflectively."
2269,1224048546,sdeleuze,141109,"I think there is a lot of added value in the various examples listed in the description, and this is very useful inputs for improving the API.

For example, I agree there are some places where we should probably provide some `Class` or `String` based variants for popular usage patterns, I have already identified some like `onReachableType(Class<?>)` which is missing, but I am not sure we should add x3 `TypeReference` / `String` / `Class` variants everywhere. I think Stéphane has already improved some other areas based on the inputs.

I guess it is a matter of taste, but I think I am in favor of doing a few improvements here and there on current API rather than changing most of it for the fluent one of https://github.com/philwebb/spring-framework/tree/gh-28977. Also keep in mind that the underlying GraalVM capabilities will evolve outside of our control, and we will likely need to adapt our APIs to follow. In that context, I have the feeling that the builder one is more future proof."
2270,1224236152,mhalbritter,98899556,"To get another data point: I really like the API from Phil - especially the consistent `register`, `when` and `for` pattern, it reads really nice. However I can't predict how easy it will be to evolve in the future if the underlying model evolves. I'm happy to help refactoring the existing hints to the new API if we decide to use it :)"
2271,1224271719,philwebb,519772,"> and we will likely need to adapt our APIs to follow. In that context, I have the feeling that the builder one is more future proof.

Do we have any example of changes that have been made in the past? I'd be curious to know they types of changes we might face and in which ways the builder API is more resilient to them."
2272,1224295508,sdeleuze,141109,"They added conditions with reachable types (more conditions could come) and method querying in addition to invocation. More recently lambda serialization, see https://github.com/spring-projects-experimental/spring-native/pull/1670."
2273,1224949753,bclozel,103264,"The main branch has indeed moved to Jakarta but we haven't released a GA version for it on Maven Central, so we've only published 6.0.0-SNAPSHOT and Milestones on our own repo.spring.io. You can test that with a new project created on https://start.spring.io using Spring Boot 3.0 versions."
2274,1224989886,jdsalasca,31742974,"Report:

Spring Boot: 2.3.1

WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.springframework.cglib.core.ReflectUtils (file:/home/dev-juan/.m2/repository/org/springframework/spring-core/5.2.7.RELEASE/spring-core-5.2.7.RELEASE.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)
WARNING: Please consider reporting this to the maintainers of org.springframework.cglib.core.ReflectUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release"
2275,1225024398,bondolo,250420,"In current usage we provide a scope prototype bean that configures and builds a `WebClient` for injection. The bean is injected with the `WebClient.Builder` as in your example but sets the `ClientHttpConnector` to our connector and builds the web client.

> WebClient.Builder is auto-configured to not only select the right `ClientHttpConnector`, 

For some definition of ""right""… what we are looking for is a mechanism to extend/configure the choice of `ClientHttpConnector`, everything else is fine and desirable. We even considered packaging our connector an ""imposter"" that would be recognized as one of the currently supported sources of `ClientHttpConnector`, but decided that would be unsavory. 

This logic in `DefaultWebClientBuilder` doesn't allow for changing the default even though there is a public builder setter for `ClientHttpConnector` which is strangely inflexible. The ordering of the choices doesn't seem to reflect a real preference as it can probably be presumed that only one or two of the four sources will typically be on the class path.

```
private ClientHttpConnector initConnector() {
		if (reactorClientPresent) {
			return new ReactorClientHttpConnector();
		}
		else if (jettyClientPresent) {
			return new JettyClientHttpConnector();
		}
		else if (httpComponentsClientPresent) {
			return new HttpComponentsClientHttpConnector();
		}
		else {
			return new JdkClientHttpConnector();
		}
	}
```

Even just moving this method into a bean annotated with `@ConditionalOnMissingBean` so that it can be replaced/overridden would be sufficient.
	
	"
2276,1225174258,snicoll,490484,This is blocked by #29005
2277,1225195568,snicoll,490484,"`InstanceSupplierCodeGenerator` also has a method that could become irrelevant to some extent:

```java
private CodeBlock generateReturnStatement(GeneratedMethod getInstanceMethod) {
	return CodeBlock.of(""$T.$L()"", this.className, getInstanceMethod.getName());
}
```"
2278,1225226882,snicoll,490484,`toInvokeCodeBlockForInstance` also creates a new instance of the declaring class which looks a very specific decision such a generic method would take.
2279,1225249705,snicoll,490484,Most of the `of` static factory method of `MethodReference` are only used in tests.
2280,1225423694,sbrannen,104798,Reopening to remove dependency on picocli and to align with Spring Boot's [`AotProcessor`](https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/AotProcessor.java).
2281,1225443377,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
2282,1225784899,meloning,50299857,"Additionally, I checked the comments on RestTemplate to consider using WebClient.
```
NOTE: As of 5.0 this class is in maintenance mode, with only minor requests for changes and bugs to be accepted going forward. Please, consider using the org.springframework.web.reactive.client.WebClient which has a more modern API and supports sync, async, and streaming scenarios.
```

I checked the KotlinSerialization operation through the `BaseDefaultCodecs.initObjectReaders` method.
![image](https://user-images.githubusercontent.com/50299857/186439185-5cc1d3e9-4404-4ac5-96e5-5f4f39aa1d53.png)
![image](https://user-images.githubusercontent.com/50299857/186439651-7106f951-5a80-4d6f-9d0a-da84bcbf704f.png)

I am hoping to use KotlinSerialization in RestTemplate without much setup.

Please allow RestTemplate to use Kotlinx.Serialization by default."
2283,1225797919,pivotal-cla,16822967,"@meloning Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29009)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29009) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
2284,1225800070,pivotal-cla,16822967,@meloning Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29009)!
2285,1226074557,jhoeller,1263688,"After a lot of consideration, Stephane and I have taken several suggestions from here into #29011 - within the current API design style. It turns out that a few overloaded methods, e.g. taking the execution mode enum directly, bring a lot of value and make usage arguably as convenient as with a fluent variant - without breaking backwards compatibility, and with an API style that remains closer to the typical style in other core Spring mechanisms. With quite minimal changes, this takes us to a scenario where most use cases are covered by direct method calls without a builder, turning the builder into an advanced-only facility.

While there is certainly still room for further improvement, e.g. explicitly named methods for stronger semantic guidance, there are also benefits with the current style. Not least of it all, the typical/common need is first-class with direct registration methods at the hints API level, whereas advanced options - that most people don't need to care about - are separated into the builder.

Having spent quite a bit of time with the API design today, I rather strongly prefer the direct registration methods in terms of naming and argument ordering. With so few arguments commonly needed, a fluent API style cannot really show its strengths much, at the expense of nested calls and readability that is sometimes a bit backwards (e.g. `registerRead().forField(field)`), and with a lack of ""register this with the common default"" guidance.

With respect to the ""JDK proxy"" versus ""Java serialization"" naming, that was actually quite intentional since those are the common terms that we use for those mechanisms in other places. A ""JDK dynamic proxy"" as opposed to a CGLIB proxy is what we use for interface-based proxying (provided by the JDK itself as opposed to Java classes generated by us), and ""Java serialization"" is the Java language mechanism for serialization. From that perspective, I'd rather keep those distinct terms.

In any case, the list of inconsistencies and inconveniences above has turned out to be very valuable. I'll keep this issue open for a few remaining points, in particular the resource pattern processing. However, from where we stand right now, we are likely to incorporate remaining suggestions into the current API design, with as little backwards compatibility impact as possible.

As for the further evolution of this facility, I find that hard to predict. Whether a particular style of API is better suited for long-term evolution along with GraalVM, that's hard to say. Since the builder style is at least not worse than a fluent API in that respect, I don't see this as a reason to switch to a different API style from where we are. Also, this API level is primarily for integrators, so pragmatically I see it from a ""good enough"" perspective in terms of usage guidance and maintainability."
2286,1226716604,pivotal-cla,16822967,"@otw1248 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29012)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29012) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
2287,1226717569,pivotal-cla,16822967,@otw1248 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29012)!
2288,1226920058,mp911de,1035015,"There are a couple of things that come together:

1. The commit exception handling is wrong and `Mono.empty()` does nothing (as pointed out). Fixing that issue reveals a couple other problems:
2. The commit exception translation in `R2dbcTransactionManager` translates the commit failure into a DAO exception instead of a `TransactionException`. That leads to `doRollbackOnCommitException` which is unconditional. `PlatformTransactionManager` has a flag `isRollbackOnCommitFailure` that defaults to `false`.
3. `TransactionOperator`'s exception handling always calls `rollbackOnException`, `rollbackOnException` should happen only for exceptions during the actual action, not on commit errors. `TransactionAspectSupport` suffers from the same issue.
4. The Postgres driver signals the error early on without consuming the final response frame so it attempts a transaction cleanup. I filed https://github.com/pgjdbc/r2dbc-postgresql/issues/541


The most difficult part was to simplify the reproducer. I'm going to submit a pull request to fix these issues but it can take a while because I'm currently busy with other tasks."
2289,1227332729,sbrannen,104798,"Superseded by:

- #28977
- #29011"
2290,1228060821,hantsy,854520,"The original [Spring Kotlin Corutines](https://github.com/konrad-kaminski/spring-kotlin-coroutine) has great Kotlin Coroutines support, unfortunately it is discontinued. A lot of features are not support in current Spring framework although Spring has supported Kotlin for years.

I used Kotlin Coroutines/Spring Boot in my project, and I found there are still some problems when using Coroutines in events, cache, schedule/async and Spring Security DSL config. I had to wrap the corourtines codes with a `runBlocking` to use it in the existing facilities of Spring."
2291,1228069159,yoa1226,49013410,@wangweng  You can display you code repo and use branch distinguishing bad code or good.
2292,1228096210,yoa1226,49013410,"@wangweng  
You can see the reason in this method named `org.springframework.beans.BeanUtils#isSimpleValueType`.

```java

public static boolean isSimpleProperty(Class<?> type) {
		Assert.notNull(type, ""'type' must not be null"");
		return isSimpleValueType(type) || (type.isArray() && isSimpleValueType(type.getComponentType()));
	}

public static boolean isSimpleValueType(Class<?> type) {
      return (Void.class != type && void.class != type &&
		(ClassUtils.isPrimitiveOrWrapper(type) ||
		Enum.class.isAssignableFrom(type) ||
		CharSequence.class.isAssignableFrom(type) ||
		Number.class.isAssignableFrom(type) ||
		Date.class.isAssignableFrom(type) ||
		Temporal.class.isAssignableFrom(type) ||
		URI.class == type ||
		URL.class == type ||
		Locale.class == type ||
		Class.class == type));
}

```"
2293,1228176772,sdeleuze,141109,"The proposed change on `RestTemplate` would be consistent with what we do in `WebMvcConfigurationSupport` [here](https://github.com/spring-projects/spring-framework/blob/d16fa82888681e5de1753387a1b499dbe35a9cfe/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java#L916-L918) and `WebClient` which do that because Kotlin serialization require an explicit signal (the class should be annotated with `@Serializable`) otherwise serialization is delegated to Jackson.

@rstoyanchev Are you ok with doing that on `5.3.x` even if we are late in the patch release cycle? It will be a slight change of behavior but should impact very few people and I think it could be considered as a bug and a lack of consistency."
2294,1228187588,sdeleuze,141109,"Spring supports Coroutines where it support reactive types, and since #21831 supports that use case, we should indeed support this use case."
2295,1228192817,sdeleuze,141109,"Indeed, allowing users to configure JNI hints on application side is IMO a relevant use case. I think this should be part of the GA but is not super high priority so even if we try to have a complete scope for M6, I move that one in the RC1 bucket (feel free to update if that's not accurate).

@snicoll As far as I remember from Spring Native, we should potentially be able to reuse `TypeHint` for this."
2296,1228199395,wangweng,45789597,"> @wangweng You can see the reason in this method named `org.springframework.beans.BeanUtils#isSimpleValueType`.
> 
> ```java
> public static boolean isSimpleProperty(Class<?> type) {
> 		Assert.notNull(type, ""'type' must not be null"");
> 		return isSimpleValueType(type) || (type.isArray() && isSimpleValueType(type.getComponentType()));
> 	}
> 
> public static boolean isSimpleValueType(Class<?> type) {
>       return (Void.class != type && void.class != type &&
> 		(ClassUtils.isPrimitiveOrWrapper(type) ||
> 		Enum.class.isAssignableFrom(type) ||
> 		CharSequence.class.isAssignableFrom(type) ||
> 		Number.class.isAssignableFrom(type) ||
> 		Date.class.isAssignableFrom(type) ||
> 		Temporal.class.isAssignableFrom(type) ||
> 		URI.class == type ||
> 		URL.class == type ||
> 		Locale.class == type ||
> 		Class.class == type));
> }
> ```

Okay, I got it. In my intuition, I think it is only related to setters. But actually it use getters to check if the given type represents a ""simple"" property. That's what makes me confused. Thank you very much!"
2297,1228211104,wangweng,45789597,"> @wangweng You can see the reason in this method named `org.springframework.beans.BeanUtils#isSimpleValueType`.
> 
> ```java
> public static boolean isSimpleProperty(Class<?> type) {
> 		Assert.notNull(type, ""'type' must not be null"");
> 		return isSimpleValueType(type) || (type.isArray() && isSimpleValueType(type.getComponentType()));
> 	}
> 
> public static boolean isSimpleValueType(Class<?> type) {
>       return (Void.class != type && void.class != type &&
> 		(ClassUtils.isPrimitiveOrWrapper(type) ||
> 		Enum.class.isAssignableFrom(type) ||
> 		CharSequence.class.isAssignableFrom(type) ||
> 		Number.class.isAssignableFrom(type) ||
> 		Date.class.isAssignableFrom(type) ||
> 		Temporal.class.isAssignableFrom(type) ||
> 		URI.class == type ||
> 		URL.class == type ||
> 		Locale.class == type ||
> 		Class.class == type));
> }
> ```

老哥，非常感谢，我看到你ip是在上海，早知道我就用中文跟你沟通了，我英语比较烂😂，虽然知道原因了，但是我感觉这里还是有点怪怪的，不知道能不能只用setter来做判断，这样逻辑上也比较一致，自动装配通过setter注入就只与setter有关。因为有时候万一想控制get的逻辑就可能会出现这个错误。"
2298,1228211186,meloning,50299857,"Also, parts [AbstractMessageBrokerConfiguration](https://github.com/spring-projects/spring-framework/blob/d16fa82888681e5de1753387a1b499dbe35a9cfe/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java#L477) and [AllEncompassingFormHttpMessageConverter](https://github.com/spring-projects/spring-framework/blob/d16fa82888681e5de1753387a1b499dbe35a9cfe/spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java#L99) are in the same situation, can I fix it in the PR and upload it?"
2299,1228240694,mhalbritter,98899556,"Interestingly, the generated JAR from boot can be run, both in normal and in AOT mode.

But when i try to build the native image with `gradle nativeCompile`, the building of the image fails with:

```
[1/7] Initializing...                                                                                    (0,0s @ 0,27GB)
Fatal error: java.lang.SecurityException: class ""dependency.SomeBean""'s signer information does not match signer information of other classes in the same package
        at java.base/java.lang.ClassLoader.checkCerts(ClassLoader.java:1158)
        at java.base/java.lang.ClassLoader.preDefineClass(ClassLoader.java:902)
        at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1010)
        at java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:150)
        at java.base/java.net.URLClassLoader.defineClass(URLClassLoader.java:524)
        at java.base/java.net.URLClassLoader$1.run(URLClassLoader.java:427)
        at java.base/java.net.URLClassLoader$1.run(URLClassLoader.java:421)
        at java.base/java.security.AccessController.doPrivileged(AccessController.java:712)
        at java.base/java.net.URLClassLoader.findClass(URLClassLoader.java:420)
        at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:587)
        at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)
        at java.base/java.lang.Class.getDeclaredMethods0(Native Method)
        at java.base/java.lang.Class.privateGetDeclaredMethods(Class.java:3402)
        at java.base/java.lang.Class.getDeclaredMethod(Class.java:2673)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.buildImage(NativeImageGeneratorRunner.java:359)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.build(NativeImageGeneratorRunner.java:585)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.main(NativeImageGeneratorRunner.java:128)
    Error: Image build request failed with exit status 1

> Task :app:nativeCompile FAILED
```"
2300,1228268493,sdeleuze,141109,Maybe a GraalVM bug to raise on their bugtracker?
2301,1228276084,mhalbritter,98899556,"I don't think this is a bug, as we're doing something (generating code in the same package as in a signed JAR) which is not allowed by the JVM. I'm quite surprised that the resulting JAR from `gradle build` runs. I would have expected that to fail in the same way."
2302,1228352003,pivotal-cla,16822967,"@r331 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29020)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29020) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
2303,1228352532,pivotal-cla,16822967,@r331 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29020)!
2304,1228396690,yoa1226,49013410,@wangweng  just practice english. 😂
2305,1228545507,leihuazhe,25452025,"May be you can see this: 
- https://stackoverflow.com/questions/9724490/why-cant-spring-autowire-simple-types
- https://stackoverflow.com/questions/52136756/you-cannot-autowire-so-called-simple-properties-such-as-primitives-strings-and"
2306,1228564083,leihuazhe,25452025,"> > @wangweng You can see the reason in this method named `org.springframework.beans.BeanUtils#isSimpleValueType`.
> > ```java
> > public static boolean isSimpleProperty(Class<?> type) {
> > 		Assert.notNull(type, ""'type' must not be null"");
> > 		return isSimpleValueType(type) || (type.isArray() && isSimpleValueType(type.getComponentType()));
> > 	}
> > 
> > public static boolean isSimpleValueType(Class<?> type) {
> >       return (Void.class != type && void.class != type &&
> > 		(ClassUtils.isPrimitiveOrWrapper(type) ||
> > 		Enum.class.isAssignableFrom(type) ||
> > 		CharSequence.class.isAssignableFrom(type) ||
> > 		Number.class.isAssignableFrom(type) ||
> > 		Date.class.isAssignableFrom(type) ||
> > 		Temporal.class.isAssignableFrom(type) ||
> > 		URI.class == type ||
> > 		URL.class == type ||
> > 		Locale.class == type ||
> > 		Class.class == type));
> > }
> > ```
> 
> 老哥，非常感谢，我看到你ip是在上海，早知道我就用中文跟你沟通了，我英语比较烂😂，虽然知道原因了，但是我感觉这里还是有点怪怪的，不知道能不能只用setter来做判断，这样逻辑上也比较一致，自动装配通过setter注入就只与setter有关。因为有时候万一想控制get的逻辑就可能会出现这个错误。

Beacuse the Spring framework uses the java Introspector.getBeanInfo(Class) to get the Bean info.It's the Introspector mechanism uses the Getter and Setter to determine the write method and the read method of the bean you defined."
2307,1228580620,wangweng,45789597,"> > > @wangweng You can see the reason in this method named `org.springframework.beans.BeanUtils#isSimpleValueType`.
> > > ```java
> > > public static boolean isSimpleProperty(Class<?> type) {
> > > 		Assert.notNull(type, ""'type' must not be null"");
> > > 		return isSimpleValueType(type) || (type.isArray() && isSimpleValueType(type.getComponentType()));
> > > 	}
> > > 
> > > public static boolean isSimpleValueType(Class<?> type) {
> > >       return (Void.class != type && void.class != type &&
> > > 		(ClassUtils.isPrimitiveOrWrapper(type) ||
> > > 		Enum.class.isAssignableFrom(type) ||
> > > 		CharSequence.class.isAssignableFrom(type) ||
> > > 		Number.class.isAssignableFrom(type) ||
> > > 		Date.class.isAssignableFrom(type) ||
> > > 		Temporal.class.isAssignableFrom(type) ||
> > > 		URI.class == type ||
> > > 		URL.class == type ||
> > > 		Locale.class == type ||
> > > 		Class.class == type));
> > > }
> > > ```
> > 
> > 
> > 老哥，非常感谢，我看到你ip是在上海，早知道我就用中文跟你沟通了，我英语比较烂😂，虽然知道原因了，但是我感觉这里还是有点怪怪的，不知道能不能只用setter来做判断，这样逻辑上也比较一致，自动装配通过setter注入就只与setter有关。因为有时候万一想控制get的逻辑就可能会出现这个错误。
> 
> Beacuse the Spring framework uses the java Introspector.getBeanInfo(Class) to get the Bean info.It's the Introspector mechanism uses the Getter and Setter to determine the write method and the read method of the bean you defined.

okay, I see. Thank you!"
2308,1228638863,bclozel,103264,Please use StackOverflow for questions and discussions.
2309,1228972297,skjelmo,6596033,"When debugging locally, it seems that `ResourceHttpRequestHandler` which updates the response status to `304` is called after `ShallowEtagHeaderFilter`. 

If this is the problem, could this simply be the result of a bad configuration where the `ResourceHttpRequestHandler` is called after the `ShallowEtagHeaderFilter`?  I'm unsure how we have managed to get the `ResourceHttpRequestHandler` to execute after the `ShallowEtagHeaderFilter` if that is not the default behaviour. 

"
2310,1229161118,bclozel,103264,"You've obviously spent a lot of time analyzing this issue, thanks for that.

Unfortunately it's still hard to understand the core problem.
Can you provide a simple application created with https://start.spring.io showing the problem and share it on GitHub? From what I understand this would involve a Spring MVC app, a static resource and the shallow ETag filter contributed as a bean. With that, the only piece missing would be a curl command, the expected HTTP response and what you're getting instead.

The problem might be in multiple places, a documentation issue or both. Often, a simple reproducer is unbeatable!

Thanks!"
2311,1229204344,pivotal-cla,16822967,"@tsengfhy Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29033)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29033) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
2312,1229242284,meloning,50299857,"Hello @sdeleuze @rstoyanchev 
I added kotlinSerialization test case in `RestTemplateTests` and fixed the case where `MessageBrokerConfigurationTests` that test `AbstractMessageBrokerConfiguration` fails.

Please check and review.
Thank you"
2313,1229275712,skjelmo,6596033,"Thanks for the feedback @bclozel. 

I've added a simple reproducer here: https://github.com/skjelmo/spring-unexpected-304
It's a clean Spring starter with Spring Web, a HTML file and the shallow etag filter enabled. 

Opening http://localhost:8080/index.html should provide necessary values from `ETag` and `Last-Modified` in the response headers. 

Sending a curl request with the `ETag` value set as `If-None-Match`, and `Last-Modified` set as `If-Modified-Since` returns `304 Not Modified` as expected. 

If you modify `If-Modified-Since` to be back in time, you receive a `200 OK` as expected.

However, if you only modify the `ETag` value, meaning that the ETag of the cached content differs from the ETag calculated on the server, you expect to get `200 OK`. But, you get a `304 Not Modified` which is unexpected since `If-None-Match` [has precedence](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match) when `If-None-Match` is used in combination with `If-Modified-Since`. The precedence is documented in https://tools.ietf.org/html/rfc7232#section-6 referenced in [checkNotModified](https://github.com/spring-projects/spring-framework/blob/711820ec708c866d72c92142ba17e6ffe1fa7f44/spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java#L217) and seemingly obsoleted by https://www.rfc-editor.org/rfc/rfc9110#section-13.2.2. 

(Remember to replace header values)
```
curl --location --request GET 'http://localhost:8080/index.html' \
--header 'If-None-Match: ""0c01d44fcb5bdfc18313ea8cb309217af""' \
--header 'If-Modified-Since: Sat, 27 Aug 2022 23:26:55 GMT'
```

The core problem seems to be that [`checkNotModified` in `org.springframework.web.filter.ShallowEtagHeaderFilter`](https://github.com/spring-projects/spring-framework/blob/711820ec708c866d72c92142ba17e6ffe1fa7f44/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java#L125) is called before [the response is updated with status `NOT MODIFIED`](https://github.com/spring-projects/spring-framework/blob/711820ec708c866d72c92142ba17e6ffe1fa7f44/spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java#L236) when [`checkNotModified` is called from `handleRequest` in `org.springframework.web.servlet.resource.ResourceHttpRequestHandler`](https://github.com/spring-projects/spring-framework/blob/711820ec708c866d72c92142ba17e6ffe1fa7f44/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java#L574). 

The existing test [`IfNoneMatchAndIfNotModifiedSinceShouldNotMatchWhenDifferentETag`](https://github.com/spring-projects/spring-framework/blob/e53c7ae6f5840accbabbb211ae60ab1c05ca396f/spring-web/src/test/java/org/springframework/web/context/request/ServletWebRequestHttpMethodsTests.java#L269) only handles the case when `checkNotModified` is called with both `ETag` and `lastModifiedTimestamp`, and not when `checkNotModified` is called sequentially by overloaded methods. "
2314,1229866038,sdeleuze,141109,"@jhoeller After some additional analysis, I found that our use of `java.beans.Introspector` in `CachedIntrospectionResults`, `ExtendedBeanInfo` and `ExtendedBeanInfoFactory` is the biggest source of increased footprint for `command-line-runner` Spring AOT smoke test sample compared to Spring Native where we had a [substitution](https://github.com/spring-projects-experimental/spring-native/blob/0488b56862d9d6071f3bf4af7a47701d453e4aee/spring-native/src/main/java/org/springframework/nativex/substitutions/java/Target_Introspector.java) to avoid getting those dependencies.

The 288 additional classes related to AWT shipped in a native image with our current arrangement is available [here](https://gist.github.com/sdeleuze/04e1ede9367ac35bc6b9a462323f12dd) which increases the RSS footprint by `3.35M`. I suspect that this refactoring will allow even bigger footprint reduction since other classes are likely used transitively (the substitution just removes AWT dependency).

So strong +1 from me to fix this issue that significantly impacts Spring native application efficiency."
2315,1229940125,stliu,174662,"> Interestingly, the generated JAR from boot can be run, both in normal and in AOT mode.
yeah, seems it only throws `SecurityException` with `gradle bootRun` but not from `java -jar app-0.0.1-SNAPSHOT.jar`

what's the differences for these two?"
2316,1229945921,bclozel,103264,"The Spring MVC configuration (here, `WebMvcConfigurationSupport`) contributes a `FormattingConversionService` named `mvcConversionService`. It seems that your configuration arrangement has created a dependency cycle: your custom config needs a conversion service -> this service is provided by `WebMvcConfigurationSupport` but it somehow depends on your custom configuration. Maybe your custom config implements `WebMvcConfigurer`?

Anyway this is probably not a Spring Framework problem but an application issue. Please review your configuration arrangement or create a new question on StackOverflow. Thanks!"
2317,1229963915,pablo53,13529013,"Having read the maintainers' response, I still can't understand why is this ticket closed, and why the following:
`[""a"",""b"",""c""]`
is interpreted by WebClient as a single string. Former RestTemplate interpreted it correctly as a collection. So, Flux should correctly parse it as a `Flux<String>` with 3 string elements, and not one string representing JSON. WebClient would be right, if the content was like this:
`""[\""a\"",\""b\"",\""c\""]""`.
Then I'd agree that Flux should return one string element `[""a"",""b"",""c""]`.

"
2318,1230014763,bclozel,103264,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
2319,1230234947,bclozel,103264,"Thanks for the analysis and the sample application, I think I understand now what's going on. The core problem here is that you expect the resource handling (`ResourceHttpRequestHandler`) and `ShallowEtagHeaderFilter` to operate as a single entity, in one pass. This is not the case.

`ShallowEtagHeaderFilter`, as described in its javadoc and [reference doc](https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#filters-shallow-etag), is a Servlet filter that is called once the entire HTTP response has been written to the response wrapper. This is an easy strategy for generating ETag headers for any type of response sent by the application. This does not save any CPU or server side resource, as the entire response needs to be generated. This only saves network bandwidth. This filter only considers ETags and operates completely independently of Spring MVC - this Servlet filter can be applied on any Servlet-based application.

Resource handling is a [separate feature provided by Spring MVC](https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-config-static-resources). This is a complete solution for serving static resources from a Spring MVC application. This includes managing conditional and caching headers.

What happens here is that the resource handling only considers the caching aspects using the information it's got: the last modified resource metadata and the request headers. The handler is called first, as the filter at this point only wrapped the response. The handler here is in a position to skip entirely the writing of the resource to the response, saving CPU and memory. At this point, there is no ETag information available.

Once that's done, the `ShallowEtagHeaderFilter` filter sees an outgoing response marked as `304 Not Modified` and can only assume that something decided that the response should not be produced. There is no response body to operate on, so the filter cannot calculate a MD5 hash of the content and compare it with the incoming ETag.

In order to get the expected behavior here, we need to be in a position to have both the last modified information and a calculated ETag for the resource. Of course, calculating that hash is an opinion on its own. In a Spring MVC application, this can be provided at the controller level (calling `checkNotModifed` from a controller method directly using business domain information), a fixed version (the application version) or the content of the file as a hash. The last two alternatives are available through the resource chain documented [here](https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-config-static-resources) and [here](https://docs.spring.io/spring-boot/docs/current/reference/html/web.html#web.servlet.spring-mvc.static-content).

In your case, this `index.html` file be generated by a JavaScript framework or could be versioned with the app itself. In this case, a ""fixed version"" strategy would work. If you provide more details about your static resources setup - how they're generated, the caching strategy, how resources are linked to - we could find a concrete solution or improve the current infrastructure in Spring.

In general, I think that the `ShallowEtagHeaderFilter` is a low-level, crude solution. If you'd like a more evolved caching approach, I'd suggest excluding it and looking into the asset pipeline infrastructure."
2320,1230891587,stephmafole,70885007,"Hi There,

We're still encountering scenarios where this feature / implementation would have been of great importance."
2321,1231236945,r331,34960570,Nice catch!
2322,1231467296,poutsma,330665,"Thanks for providing a sample, that made this a lot easier to fix!"
2323,1231555194,ecroys,50115874,"> @halhelal I think there is a misunderstanding.
> 
> There is no fix for this vulnerability. Java serialization is unsafe, and all we can do is advise against exposing HTTP Invoker endpoints to untrusted clients in our documentation. That we have done almost 5 years ago when this CVE was first published. However, it does not make the vulnerability go away, nor does it change its score.
> 
> Why the CVE was republished again this month, I do not know. We did not publish it in the first place so it is not ours to begin with. Having said that it can be used as a reminder to check that there are no HTTP Invoker endpoints exposed to untrusted clients. If there are none, then nothing further to do.

Yesterday Blackduck started to complain about this CVE again.
Wouldn't be possible to isolate the ""dangerous"" feature in another artifact and void the common SpringWeb applications to explain it's not using it?
"
2324,1231569824,bclozel,103264,@ecroys this has been adresses in this comment already: https://github.com/spring-projects/spring-framework/issues/24434#issuecomment-744519525
2325,1231597967,ecroys,50115874,"> @ecroys this has been adresses in this comment already: [#24434 (comment)](https://github.com/spring-projects/spring-framework/issues/24434#issuecomment-744519525)

Thanks for you answer @bclozel. My point of view, this change is not to solve organizational issues, but to isolate a feature which is potential dangerous when misused. I completely understand that it depends on the developer to do not expose it.
Considering the level of the risk, the framework could help on unnecessary exposure, isolating it in an artifact which only the devs knowing what they are doing and requiring it would use."
2326,1231625331,bclozel,103264,"@ecroys we've marked the related classes as deprecated in 5.3.0, which should already send a visible signal to developers and they're removed as of 6.0. Moving those to a different artifact is really about failing to work around this CVE - not only this would create more problems as we'd be introducing split packages in our dependency arrangement, it also wouldn't help at all if the dependency itself is brought transitively in your build.

This very ticket shows that this is very much a security process + organizational issue. We're getting the same amount of feedback (and long lasting) than [serious security concerns](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement). Java deserialization and ways to secure it has never been the subject of the conversation with orgs affected, as they're not using this feature - it's always been about making this CVE go away.

We're still discussing this case with MITRE; we'll share the results here as soon as we can."
2327,1231866411,purple52,1073363,"In case it helps anyone, I am working around this in two parts:
1. Use a `YamlPropertiesFactoryBean` to create the property source with the resolution method set to `OVERRIDE_AND_IGNORE`:
```
   public PropertySource<?> createPropertySource(String name, EncodedResource encodedResource) {
        YamlPropertiesFactoryBean factory = new YamlPropertiesFactoryBean();
        factory.setResources(encodedResource.getResource());
        factory.setResolutionMethod(YamlProcessor.ResolutionMethod.OVERRIDE_AND_IGNORE);

        Properties properties = factory.getObject();

        return new PropertiesPropertySource(encodedResource.getResource().getFilename(), properties);
    }
```
2. Add a separate `@PropertySource` annotations for each file (the above did not work if I listed the potential file locations in a single annotation)."
2328,1231896665,bclozel,103264,Closing in favor of #29045
2329,1232034155,xak2000,1576014,"### The workaround:

I created a subclass of `LocalValidatorFactoryBean` and exposed it as a bean. That subclass just ignores the exception thrown from `org.springframework.validation.beanvalidation.SpringValidatorAdapter#getRejectedValue` method and uses `violation.getInvalidValue()` directly instead:

```java
@Slf4j
public class WorkaroundLocalValidatorFactoryBean extends LocalValidatorFactoryBean {

	@Override
	protected Object getRejectedValue(@NonNull String field, @NonNull ConstraintViolation<Object> violation,
			@NonNull BindingResult bindingResult) {

		try {
			return super.getRejectedValue(field, violation, bindingResult);
		} catch (Exception e) {
			log.warn(""Workaround for spring-projects/spring-framework#29043: {}"", e.getMessage());
			return violation.getInvalidValue();
		}
	}

}
```

The original `getRejectedValue` method of `SpringValidatorAdapter` class already calls `bindingResult.getRawFieldValue(field)` conditionally:

```java
	@Nullable
	protected Object getRejectedValue(String field, ConstraintViolation<Object> violation, BindingResult bindingResult) {
		Object invalidValue = violation.getInvalidValue();
		if (!field.isEmpty() && !field.contains(""[]"") &&
				(invalidValue == violation.getLeafBean() || field.contains(""["") || field.contains("".""))) {
			// Possibly a bean constraint with property path: retrieve the actual property value.
			// However, explicitly avoid this for ""address[]"" style paths that we can't handle.
			invalidValue = bindingResult.getRawFieldValue(field);
		}
		return invalidValue;
	}
```

Maybe it's possible to add more conditions here, if it turns out that generic support of custom field-wrapper types will not be possible? I'm not sure why `bindingResult.getRawFieldValue(field)` is required if we already have `violation.getInvalidValue()`, though. Maybe the first one uses `ConversionService` or something..."
2330,1232107264,bclozel,103264,Thanks very much Andy!
2331,1232691496,sdeleuze,141109,@jvalkeal Do you need that for a specific library?
2332,1232912908,jvalkeal,50398,"I think only question really is if we want to 1. fully reuse `ReflectionHints` for jni as in graal format is documented to be same or 2. duplicate existing reflection as new `JniHints`.

Latter is a bit more work for us but would be safer in future if graal makes a choice to separate reflection/jni formats."
2333,1233037297,OlgaMaciaszek,4328892,Support necessary for projects to create child contexts in AOT is now available in Framework. See https://github.com/spring-cloud/spring-cloud-commons/pull/1135 for an implementation example.
2334,1233130002,bclozel,103264,"Could we take a step back here?
Could you share a sample application that shows the incorrect behavior? Ideally, a Spring Boot application created on https://start.spring.io with the `ForwardedHeaderFilter` and a custom filter (not the authentication one) that reproduces the behavior you're seeing.

Even if we were to flush the buffer where it's suggested, it would not prevent some code to further write to the response, still leading to an incorrect HTTP message (a redirect+location response with invalid HTML content?). "
2335,1233173660,yuezk,3297602,I will try to provide minimal reproducible code.
2336,1233264593,Hollerweger,6900492,"@bclozel Is a received `ResponseEntity ` not meant to be directly returned again in a Controller?

For most usecases creating a new ResponseEntity should solve the issue (when original Headers are not required at all):
`return ResponseEntity.status(responseEntity.getStatusCode()).body(responseEntity.getBody())`"
2337,1233284601,bclozel,103264,"@Hollerweger Proxies do more than just copying HTTP responses. There are many things to consider, like compression, security headers, caching, content-neogtiation, Forward headers and more. So in general, I don't think that they're meant to be returned directly from a Controller."
2338,1233691085,j3graham,8454305,"There are a few more similar opportunities in StreamUtils:
- `copyToByteArray` could use `in.readAllBytes()` instead of going through a `ByteArrayOutputStream`
-  `copy(InputStream in, OutputStream out)` could also use `transferTo`"
2339,1233703975,1zg12,52658745,"Bump up this, as we are still having issue to overwrite this setting in the newer version of spring. Thanks."
2340,1233720328,j3graham,8454305,"Found an existing pr - #25594
"
2341,1233723497,yuezk,3297602,"@bclozel Here is the demo repo: https://github.com/yuezk/RelativeRedirectFilter-bug. It uses `RelativeRedirectFilter` instead of the `ForwardedHeaderFilter`, but the problem is the same."
2342,1233807157,skjelmo,6596033,"Thank you for the thorough response @bclozel!

You are correct in that we expected the resource handling and `ShallowEtagHeaderFilter` to operate as a single entity. 

We have not yet been able to handle both `If-Modified-Since` and `If-None-Match` with the expected behaviour. 

- Our attempt of checking the etag on the controller level seems to move the problem, since the controller is called before `ResourceHttpRequestHandler` which still rewrites the respons based solely on the `lastModifiedTimestamp`.
- Using `VersionResourceResolver` seems to be dependant on the URL, so that we cannot enable it for the root URL?
- Disabling `If-Modified-since` solves the problem with rollback for us. 
    ```java
      registry.addResourceHandler(""/path_to/index.html"")
            .setUseLastModified(false)
            .addResourceLocations(""/path_to/index.html"")
    ```
    Combining `setUseLastModified(false)` with a controller checking the etag for the html-file in question seems superflous since `ShallowEtagHeaderFilter` works with `setUseLastModified(false)`. 

However, we are curious how a `FixedVersionStrategy` can be implemented?

> If you provide more details about your static resources setup - how they're generated, the caching strategy, how resources are linked to - we could find a concrete solution or improve the current infrastructure in Spring.

CSS- and JavaScript-files are generated by webpack with a content-hash in their filename. They are included by Webpack in an `index.html`-file which is generated without a content hash. The `index.html` references cache-busting filenames, but the file itself depends on the server handling both  `If-None-Match` and `If-Modified-Since` correctly. We are running Spring only, not Spring boot. All the generated files are placed in a `resources`-folder, and we have set up a `ResourceHandler` and a `ViewController` with Java-config as follows:

```java
@Configuration
public class WebConfig extends WebMvcConfigurationSupport {

    @Override
    public void addResourceHandlers(ResourceHandlerRegistry registry) {
        registry.addResourceHandler(""/path_to_resources/**"")
            .addResourceLocations(""/path_to_resources/"");
    }

    @Override
    protected void addViewControllers(ViewControllerRegistry registry) {
        registry.addViewController(""/"").setViewName(""forward:/path_to_resources/html/index.html"");
    }
}
```

Is it perhaps possible to configure a handler that handles both `If-Modified-Since` and `If-None-Match`? Seems that we need to find a way to prevent `ResourceHttpRequestHandler.handleRequest()` from being called, since it updates the response based on `If-Modified-Since` only.

"
2343,1233961327,rstoyanchev,401908,"The solution is taking shape as a small, independent [Context Propagation library](https://github.com/micrometer-metrics/context-propagation#context-propagation-library). It happens to be under the Micrometer org because it's more generally useful, but does not depend on it. Support is being built into Reactor for version 3.5 and likewise for Spring Framework in version 6 but generally, there isn't much that we need to do in the Spring Framework, i.e. the library itself provides all the functionality and it can be used directly."
2344,1233980052,yuezk,3297602,"> Even if we were to flush the buffer where it's suggested, it would not prevent some code to further write to the response, still leading to an incorrect HTTP message (a redirect+location response with invalid HTML content?).

We also need to call `resetBuffer()` first to make sure the redirect response won't contain the body. Below are the examples from the popular Java EE implementations

- Tomcat: https://github.com/apache/tomcat/blob/14300d9bf1b6a4d351b6674ef8200718d2c69be7/java/org/apache/catalina/connector/Response.java#L1286
- Undertow: https://github.com/undertow-io/undertow/blob/fde1ca6ffc8c6248a62179e98c59eb09202545c5/servlet/src/main/java/io/undertow/servlet/spec/HttpServletResponseImpl.java#L184
- Jetty: https://github.com/dekellum/jetty/blob/3dc0120d573816de7d6a83e2d6a97035288bdd4a/jetty-server/src/main/java/org/eclipse/jetty/server/Response.java#L449

"
2345,1234137583,jvalkeal,50398,@sdeleuze for jna used in jline. I've been talking with @snicoll and he asked me to create this ticket.
2346,1234261256,bclozel,103264,Reopening for cases where methods are public but declaring class is not.
2347,1234351570,wilkinsona,914682,"Thanks for the report and for trying out our snapshots. I don't recall seeing this problem before.

It would appear that `org.springframework.beans.factory.aot.ConstructorOrFactoryMethodResolver.resolve(RegisteredBean)` has returned `null`. The method is annotated with `@Nullable` so returning `null` is reasonable there. It looks like `BeanDefinitionMethodGenerator` and the classes that it calls do not then handle the `constructorOrFactoryMethod` `Executable` being `null`. This code is all in Spring Framework so I'll transfer the issue accordingly.

@CynanX, if you're unable to reproduce the problem in a minimal sample it would be interesting to know more about the bean for which the register method cannot be generated. Could you debug your failing application and identify the `RegisteredBean` that's causing the problem? It will tell us the bean's name which will then hopefully allow you to provide some more information about how it's defined."
2348,1234333059,sdeleuze,141109,Should be fixed by #29041 if we decide to do it.
2349,1234372622,meloning,50299857,"Hi @rstoyanchev @sdeleuze 
There is no answer yet, so I'm leaving a comment again.
Please let me know if there are any errors or if there are any additional considerations.

Please check.
Thank you"
2350,1234538159,kilink,835139,"> There are a few more similar opportunities in StreamUtils:
> 
> * `copyToByteArray` could use `in.readAllBytes()` instead of going through a `ByteArrayOutputStream`
> * `copy(InputStream in, OutputStream out)` could also use `transferTo`

There's already a PR for that here: #27702"
2351,1234641393,CynanX,14311152,"After a lot of trial & error I've managed to get to the bottom of this, and it was caused by one class in my application.

This particular class has a combination of field and constructor autowired Spring beans, along with a second constructor used by a test class which could override them all.

I've not got time right now, so here is a knocked up example. I'll get a working sample put together later and provide a link if required.

E.g. code scenario: -

```java
@Component(""SampleClass"")
@Scope(""prototype"")
public class SampleClass {
    private final BeanA beanA;

    private final BeanB beanB;

    @Autowired
    private BeanC beanC;

    public SampleClass(BeanA beanA, BeanB beanB) {
        this.beanA = beanA;
        this.beanB = beanB;
    }

    @VisibleForTesting
    protected SampleClass(BeanA beanA, BeanB beanB, BeanC beanC) {
        this.beanA = beanA;
        this.beanB = beanB;
        this.beanC = beanC;
   }
}
```

Once I commented out the second constructor the application built as expected.

I totally get this is bad code, and I'm not expecting any fixes for it (that said non-native does work with it). However if the error message could indicate the class with the issue in that would be nice.
"
2352,1235132351,rstoyanchev,401908,There is now also #29056.
2353,1235157004,pivotal-cla,16822967,"@MS100 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29057)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29057) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
2354,1235167085,pivotal-cla,16822967,@MS100 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29057)!
2355,1235170578,GoossensMichael,3247871,"I have the same issue but with properties in a yaml file. The parsing always happens with the Localized(SHORT,) DateTimeFormatter and there does not seem a way to configure this."
2356,1235241101,CynanX,14311152,Sample application created [here](https://github.com/CynanX/SpringBoot3AotErrorDemo).
2357,1235276047,sdeleuze,141109,"Merged a refined version via bb3ada4a673c689b9d5c854ec021b8e96e32c447, thanks!"
2358,1235323144,sbrannen,104798,"Superseded by #29041.

Synthesized annotation proxies no longer implement `SynthesizedAnnotation`.

Please let us know if you still run into any issues with the latest Spring Framework snapshot builds."
2359,1235450498,rstoyanchev,401908,There is now a separate issue to track this https://github.com/rsocket/rsocket-java/issues/1064.
2360,1235451347,rstoyanchev,401908,Superseded by https://github.com/rsocket/rsocket-java/issues/1065.
2361,1235453909,rstoyanchev,401908,This will be tracked under https://github.com/rsocket/rsocket-java/issues/1065.
2362,1235478106,bclozel,103264,"Removing the workaround in `ApplicationContextAotGeneratorRuntimeHintsTests` still fails with the following:

```
Missing <""ReflectionHints""> for invocation <java.lang.Class#getMethods> on type <org.springframework.context.testfixture.context.generator.annotation.InitDestroyComponent> 
with arguments [].
Stacktrace:
<""org.springframework.beans.BeanUtils#findMethodWithMinimalParameters, Line 350
org.springframework.beans.factory.support.DisposableBeanAdapter#findDestroyMethod, Line 261
org.springframework.beans.factory.support.DisposableBeanAdapter#determineDestroyMethod, Line 250
org.springframework.beans.factory.support.DisposableBeanAdapter#<init>, Line 120
org.springframework.beans.factory.support.AbstractBeanFactory#registerDisposableBeanIfNecessary, Line 1857
```

Is there another instance of this problem?"
2363,1235815531,pivotal-cla,16822967,"@Vladislav-Zolotaryov Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29065)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29065) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
2364,1235815759,pivotal-cla,16822967,@Vladislav-Zolotaryov Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29065)!
2365,1236036448,izeye,1059363,It still doesn't seem to work with the same failure in the opening comment.
2366,1236084787,sreenath-tm,28177426,"I'm interested in contributing to this issue, so before I start working it, would you mind sparing your time pointing me to some resources to get started."
2367,1236085265,sreenath-tm,28177426,"I'm interested in contributing to this issue, would you mind sparing your time explaining what the fix would exactly be and pointing me to some resources to get started."
2368,1236310529,bclozel,103264,"Could you raise this issue against [Spring Data MongoDB](https://github.com/spring-projects/spring-data-mongodb/issues), with an actual sample application showing the problem?

Thanks!"
2369,1236358621,sbrannen,104798,"Although explicit support for registering run-time hints for annotations was added, that support was removed due to #29041.

This issue has therefore effectively been superseded by:

- #29041"
2370,1236397397,sbrannen,104798,Blocked until #29070 is completed.
2371,1236422918,pivotal-cla,16822967,"@donno2048 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29072)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29072) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
2372,1236423010,pivotal-cla,16822967,@donno2048 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29072)!
2373,1236530453,snicoll,490484,"@CynanX thanks for the sample.

@sreenath-tm thanks for the offer but this one is a little tricky and I am afraid I won't be able to provide direction until I get to the bottom of it. This might be a duplicate of #27920"
2374,1236543878,snicoll,490484,"Is this some sort of meta-issues or something? I see two separate issues and I am wondering if that wouldn't be more clear if they were split. The suggestion on adding support for `TypedStringValue` for code generation looks legit to me.

The second issue is about not exposing a type for the bean. What part of it is specific to XML configuration?"
2375,1236545598,snicoll,490484,"OK, let's continue the discussion on the issue please."
2376,1236546185,snicoll,490484,Should this still be opened?
2377,1236553532,snicoll,490484,"Well spotted, thanks @1993heqiang "
2378,1236561947,snicoll,490484,@MS100 thanks for the PR but returning true in the catch block makes me feel a little bit uneasy. I'd rather stick with processing them all.
2379,1236569744,snicoll,490484,"The issue is yours @sreenath-tm but please keep in mind that our next milestone is due in 10 days. If you don't get to it by then, just let us know and we'll take over.

The changes are to be done by removing `FieldHint` altogether and changing `TypeHint.Builder` to hold a `Set` of field names, to be translated to `MemberHint` in `TypeHint`'s constructor. Further simplifications are due in the predicates but we can polish that as part of merging. Let me know if you have any question."
2380,1236573326,snicoll,490484,"If am afraid that there is not much we can do about this. The JMS spec states that users can't change those QoS settings using the `Message` API, see https://javadoc.io/doc/jakarta.jms/jakarta.jms-api/latest/jakarta.messaging/jakarta/jms/Message.html for an example."
2381,1236579583,snicoll,490484,@izeye thanks for the feedback. I am unable to reproduce the problem. Can you share the command you're using?
2382,1236608497,bclozel,103264,"Thanks for the contribution, but these days we try to only add enum values there for technologies that are actively supported by Spring, meaning the enum value would have a legitimate purpose in our own codebase. This is not the case as far as I understand, so I'm declining this PR.

Thanks! "
2383,1236723880,wilkinsona,914682,"I thought I had tested this and it worked, but I can reproduce it:

```
./gradlew build --include-build ../../spring-framework     

> Task :buildSrc:compileJava
Note: /Users/awilkinson/dev/spring-projects/spring-boot/main/buildSrc/src/main/java/org/springframework/boot/build/context/properties/ConfigurationPropertiesPlugin.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.

FAILURE: Build failed with an exception.

* What went wrong:
Could not determine the dependencies of task ':spring-boot-project:spring-boot:checkTestRuntimeClasspathForProhibitedDependencies'.
> Could not resolve all task dependencies for configuration ':spring-boot-project:spring-boot:testRuntimeClasspath'.
   > Could not find com.thoughtworks.qdox:qdox:.
     Required by:
         project :spring-boot-project:spring-boot > project :spring-framework:spring-core-test

* Try:
> Run with --stacktrace option to get the stack trace.
> Run with --info or --debug option to get more log output.

* Get more help at https://help.gradle.org

Deprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

See https://docs.gradle.org/7.5.1/userguide/command_line_interface.html#sec:command_line_warnings

BUILD FAILED in 53s
47 actionable tasks: 22 executed, 21 from cache, 4 up-to-date

Publishing build scan...
https://ge.spring.io/s/jtz7qh6kklh4i
```

I'd hoped that moving away from the dependency management plugin would be enough to fix this, but it appears that's not the case. I think we'll have to chat with the Gradle team as I can't see why this wouldn't work now.
"
2384,1236735531,snicoll,490484,I still can't reproduce it @wilkinsona so perhaps something you and I can look at?
2385,1236740174,sbrannen,104798,"> Is this some sort of meta-issues or something? 

Yes, as stated in the description: ""_This issue serves as an umbrella issue for the team._""

> I see two separate issues and I am wondering if that wouldn't be more clear if they were split. The suggestion on adding support for `TypedStringValue` for code generation looks legit to me.

Sure, I can split them up. @jhoeller also stated elsewhere that it be worth investigating the `TypedStringValue` issues.

As discussed in the team during your absence, I created the umbrella issue so that the issues I'd discovered would not get lost.

> The second issue is about not exposing a type for the bean. What part of it is specific to XML configuration?

I don't know. I didn't debug it. I encountered it only when running AOT processing against test classes in `spring-test` that use XML config. So I added it to this umbrella issue.
"
2386,1236744881,sbrannen,104798,"Superseded by:

- #29074
- #29075"
2387,1236762893,sbrannen,104798,"> There is a similar issue in Spring Boot where code relies on a generated name.

I believe it's related to contexts within an application context hierarchy.

@philwebb, perhaps you can provide further details on that."
2388,1236762964,bclozel,103264,"This is a duplicate of #26434, but related to Spring Framework. See [Mark's comment for proper resolution](https://github.com/spring-projects/spring-framework/issues/26434#issuecomment-1003713436)."
2389,1236768255,Parashuraam,24707403,please can you tell me solution steps for it.
2390,1236774520,Parashuraam,24707403,may i know what is the solution ?
2391,1236776498,sbrannen,104798,"Superseded by:

- commit e5f9bb76b1207711732b843ec228c10f51a9ec64
- commit 9ab046bdbbec7b5f29284c5586e454bc8880a621
- #28974
- #29076
"
2392,1236782131,snicoll,490484,Thanks for sharing that. It's unrelated to this specific issue and affects any use of a destroy method. I've created #29077
2393,1236789343,bclozel,103264,Please read the comment I've pointed to. This is related to an OS bug. Follow Mark's advice for resolution.
2394,1236898804,sdeleuze,141109,@snicoll Maybe we should keep it (potentially with an updated Javadoc) for the manual proxy creation that can't be inferred?
2395,1236959087,snicoll,490484,"@Cocowwy that's out of our control, you need to quote the original value in the yaml configuration to avoid YAML to convert it to a number."
2396,1236962139,wilkinsona,914682,Stephane and I have reproduced this. The problem's specific to depending on a Spring Framework module that has a transitive dependency that isn't part of the including build. Spring Boot doesn't depend on QDox so its dependency on `spring-core-test` doesn't work. A similar failure can be seen with `spring-webflux` if the including build doesn't depend on Reactor. I am going to reach out to the Gradle team for some guidance.
2397,1237076423,sdeleuze,141109,@jvalkeal Ok please contribute a PR I will review it.
2398,1237136843,snicoll,490484,Fixed by  58b0251af14f177a1acc which also removes the test fixtures copy!
2399,1237295491,bclozel,103264,"I think we're only parsing the first one, because that's the only part we need to implement the `HttpServletRequestWrapper` contract after all. By design, and for security reasons, original headers should be removed as this could create problems down the line. If request header are somehow reused for creating a client request, this could make the application vulnerable.

In your case, I'd suggest adding another filter before `ForwardedHeaderFilter` (or subclassing it if possible) and copying those values as a well-known request attribute so they can be reused by the infrastructure that needs it."
2400,1237312951,snicoll,490484,"I've had a brainstorming session with @wilkinsona and @bclozel today. We've discussed various options and the pros and cons and we conclude that it is overkill to try to avoid both side having some sort of shared context. Trying to do that means too much context needs to be provided by the caller and `MethodReference` has to know too many things to take the right decision.

We came back with the original need of offering a more flexible signature and we'd like to explore how `toInvokeCodeBlock` could be changed to take something that resolves a limited number of arguments, rather than the current `CodeBlock` vararg."
2401,1237328029,snicoll,490484,"We could. I still don't like the current method arrangement. It's consistent with similar methods in this class but the consumers of the new method could use something a bit more explicit. 

I'd like to see something like `hints.proxies.registerJdkProxy(MyProxy.class, asSpringJdkProxy())` or something like that where `asSpringJdkProxy` is a consumer of the builder, adding the 3 interfaces."
2402,1237615434,btpnlsl,7227778,"@bclozel The OS bug in the Linux TCP/IP stack was fixed in version 5.10-rc6 of the Linux kernel and was backported to LTS versions of the kernel as well.  I don't think it is helpful to continue to report this to Ubuntu as requested by Mark as they have already incorporated this bugfix into their LTS versions. The best solution now is to look for an OS version which incorporates the fix.

@Parashuraam You would need to update your OS (RedHat) and investigate to determine which versions of RedHat have incorporated the bugfix.    

The bugfix you are looking for is this one: [https://github.com/torvalds/linux/commit/01770a166165738a6e05c3d911fb4609cc4eb416](https://github.com/torvalds/linux/commit/01770a166165738a6e05c3d911fb4609cc4eb416)"
2403,1237901346,snicoll,490484,"I think you misunderstood it, indeed. I am not talking about adding something to the core hint API (that would be a conceptual cycle). I am rather advocating that `spring-aop` provides a first-class, idiomatic method that allows to register a JDK proxy as an AOP proxy. I believe that the method above achieves this scenario, something like:

```java
public static Consumer<Builder> asAopProxy() {
    return builder -> builder.proxiedInterfaces(SpringProxy.class, Advised.class, DecoratingProxy.class);
}
```

"
2404,1237932868,sdeleuze,141109,"Thanks for the additional details. I don't think `AopProxyUtils` should import hints APIs and creating a dedicated class in `spring-aop` for it seems too much for me as well. I would be for your proposal if there was a way to make it available directly in the hints API in `spring-core`. Since that's not the case, I think what we have currently is reasonable and I would be for closing this issue and keep what we have."
2405,1237960491,sdeleuze,141109,"Merged via 135f9070c5de85a3fbe5aee68ba1c48d413a23cc, thanks."
2406,1238071777,bclozel,103264,"Given the 5.3.x timeline, I've moved this enhancement to the next 6.0 milestone. We'll raise the HtmlUnit baseline to 2.64.0. Thanks @rbri !"
2407,1238076854,bclozel,103264,Superseded by #28880
2408,1238091623,snicoll,490484,"I've made some good progress in https://github.com/snicoll/spring-framework/tree/gh-29005 - One advantage of knowing the ultimate location of the code is that we don't expand the class name for static internal calls. For instance, the following code:

```java
beanDefinition.setInstanceSupplier(ApplicationAvailabilityAutoConfiguration__BeanDefinitions.getApplicationAvailabilityInstanceSupplier());
```

Is now:

```java
beanDefinition.setInstanceSupplier(getApplicationAvailabilityInstanceSupplier());
```

However, knowing the ultimate target class isn't always possible so we might need to adapt some API. Perhaps `methodReference` itself could offer some sort of support for this."
2409,1238099494,snicoll,490484,"Thanks for the sample. The problem is that `<constructor-arg>` is registering a ""generic"" argument value, rather than an indexed argument value. AOT only supports the latter. To support the former, we'd have to massage the constructor to identify a matching argument."
2410,1238111276,snicoll,490484,"There's also the problem that `ConstructorOrFactoryMethodResolver` isn't resolving `TypedStringValue` at the moment. When computing the arguments to use to identify a matching constructor, it takes the raw `TypedStringValue`. 

This is one more case that links to https://github.com/spring-projects/spring-framework/issues/27920"
2411,1238112037,snicoll,490484,"Changing the XML code to use an indexed argument does not work either, see #29074."
2412,1238137913,poutsma,330665,"Fixing this will be a breaking change, so setting for 6.0."
2413,1238147865,sdeleuze,141109,"Since #29083 has been merged, I guess we should keep `RuntimeHintsUtils` and just fix #29059."
2414,1238152313,sbrannen,104798,Reopening due to 8fbd2141b7506edcbeda27b0b2bab5cc9fff9262
2415,1238153707,snicoll,490484,"@CynanX this fix the error message, not the underlying issue of resolving the constructor. As I was suspecting, the proper fix will happen once we work on https://github.com/spring-projects/spring-framework/issues/27920.

The exception on your sample is now:

```
Exception in thread ""main"" java.lang.IllegalStateException: No constructor or factory method candidate found for Root bean: class [com.example.springboot.DemoComponent]; scope=singleton; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodNames=null; destroyMethodNames=null; defined in file [/Users/snicoll/workspace/temp/SpringBoot3AotErrorDemo/target/classes/com/example/springboot/DemoComponent.class] and argument types []
	at org.springframework.beans.factory.aot.ConstructorOrFactoryMethodResolver.resolve(ConstructorOrFactoryMethodResolver.java:108)
	at org.springframework.beans.factory.aot.ConstructorOrFactoryMethodResolver.resolve(ConstructorOrFactoryMethodResolver.java:394)
```"
2416,1238198798,CynanX,14311152,Thanks @snicoll !
2417,1238218673,rodoabad,1240667,"@nkiesel  @bclozel  does spring* use semantic versioning?

Me = Non Java developer just dropping in on this thread."
2418,1238225179,bclozel,103264,"@rodoabad short answer is: Spring Framework does, but [Spring Boot does not](https://github.com/spring-projects/spring-boot/wiki/Team-Practices#versioning)."
2419,1238332961,rodoabad,1240667,"Thanks, folks!"
2420,1238346432,bclozel,103264,I've created #29091 to align the agent's behavior with GraalVM. Maybe this is superseded?
2421,1238388950,sdeleuze,141109,Temporarily [reverted](b8c1fc920275d69185e05ca89afb1dbeefe417e3) in order to let the time to portfolio projects to remove `RuntimeHintsUtils` usage.
2422,1238389116,sdeleuze,141109,Temporarily [reverted](b8c1fc920275d69185e05ca89afb1dbeefe417e3) in order to let the time to portfolio projects to remove `RuntimeHintsUtils` usage.
2423,1238437804,membersound,5269630,"Maybe in context of this issue, it might be possible for Spring to validate the included `jlink` modules, and alert if one is missing, regarding to the used classes?

I debugged my application for several days due to a `SSLHandshakeException` that only look place in production.
Turned out that because I used jlink, I was missing the `jdk.crypto.ec` and `jdk.crypto.cryptoki` module to use HTTPS.
Unfortunately, if the module is missing, the error only occurs at runtime, which makes it even worse..."
2424,1238664415,mateusbandeiraa,15495980,"I'm facing a similar problem but not sure if it is exactly the same or if I should raise another issue. I created a minimal example:

```java
public class Foo {
	private Map<Class<?>, @Valid Bar> instanceExamples;
	
	// Omitted constructors, getters and setters
}

public class Bar {
	@NotBlank
	@Length(max = 5)
	public String value;
	
	// Omitted constructors, getters and setters
}
```
```java
@SpringBootApplication
@RestController
public class SpringValidationReproducerApplication {
	
	public static void main(String[] args) {
		SpringApplication.run(SpringValidationReproducerApplication.class, args);
	}
	
	@Bean
	ApplicationRunner run(Validator validator) {
		return args -> {
			Foo foo = new Foo(
					Map.of(Bar.class, new Bar(""Invalid instance example because it is too long"")));
			BeanPropertyBindingResult bindingResult = new BeanPropertyBindingResult(foo, ""foo"");
			validator.validate(foo, bindingResult);
			System.out.println(""bindingResult: "" + bindingResult);
		};
	}
	
}
```

Stacktrace:
```log
java.lang.IllegalStateException: Failed to execute ApplicationRunner
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:765) ~[spring-boot-2.7.3.jar:2.7.3]
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:752) ~[spring-boot-2.7.3.jar:2.7.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) ~[spring-boot-2.7.3.jar:2.7.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1306) ~[spring-boot-2.7.3.jar:2.7.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1295) ~[spring-boot-2.7.3.jar:2.7.3]
	at dev.bandeira.springvalidationreproducer.SpringValidationReproducerApplication.main(SpringValidationReproducerApplication.java:18) ~[classes/:na]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:577) ~[na:na]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) ~[spring-boot-devtools-2.7.3.jar:2.7.3]
Caused by: org.springframework.beans.InvalidPropertyException: Invalid property 'instanceExamples[class dev.bandeira.springvalidationreproducer.Bar]' of bean class [dev.bandeira.springvalidationreproducer.Foo]: Invalid index in property path 'instanceExamples[class dev.bandeira.springvalidationreproducer.Bar]'; nested exception is org.springframework.beans.TypeMismatchException: Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Class' for property 'null'; nested exception is java.lang.IllegalArgumentException: Could not find class [class dev.bandeira.springvalidationreproducer.Bar]
	at org.springframework.beans.AbstractNestablePropertyAccessor.getPropertyValue(AbstractNestablePropertyAccessor.java:704) ~[spring-beans-5.3.22.jar:5.3.22]
	at org.springframework.beans.AbstractNestablePropertyAccessor.getNestedPropertyAccessor(AbstractNestablePropertyAccessor.java:843) ~[spring-beans-5.3.22.jar:5.3.22]
	at org.springframework.beans.AbstractNestablePropertyAccessor.getPropertyAccessorForPropertyPath(AbstractNestablePropertyAccessor.java:820) ~[spring-beans-5.3.22.jar:5.3.22]
	at org.springframework.beans.AbstractNestablePropertyAccessor.getPropertyValue(AbstractNestablePropertyAccessor.java:615) ~[spring-beans-5.3.22.jar:5.3.22]
	at org.springframework.validation.AbstractPropertyBindingResult.getActualFieldValue(AbstractPropertyBindingResult.java:104) ~[spring-context-5.3.22.jar:5.3.22]
	at org.springframework.validation.AbstractBindingResult.getRawFieldValue(AbstractBindingResult.java:284) ~[spring-context-5.3.22.jar:5.3.22]
	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.getRejectedValue(SpringValidatorAdapter.java:318) ~[spring-context-5.3.22.jar:5.3.22]
	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.processConstraintViolations(SpringValidatorAdapter.java:174) ~[spring-context-5.3.22.jar:5.3.22]
	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.validate(SpringValidatorAdapter.java:109) ~[spring-context-5.3.22.jar:5.3.22]
	at dev.bandeira.springvalidationreproducer.SpringValidationReproducerApplication.lambda$0(SpringValidationReproducerApplication.java:27) ~[classes/:na]
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:762) ~[spring-boot-2.7.3.jar:2.7.3]
	... 8 common frames omitted
Caused by: org.springframework.beans.TypeMismatchException: Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Class' for property 'null'; nested exception is java.lang.IllegalArgumentException: Could not find class [class dev.bandeira.springvalidationreproducer.Bar]
	at org.springframework.beans.AbstractNestablePropertyAccessor.convertIfNecessary(AbstractNestablePropertyAccessor.java:600) ~[spring-beans-5.3.22.jar:5.3.22]
	at org.springframework.beans.AbstractNestablePropertyAccessor.getPropertyValue(AbstractNestablePropertyAccessor.java:686) ~[spring-beans-5.3.22.jar:5.3.22]
	... 18 common frames omitted
Caused by: java.lang.IllegalArgumentException: Could not find class [class dev.bandeira.springvalidationreproducer.Bar]
	at org.springframework.util.ClassUtils.resolveClassName(ClassUtils.java:334) ~[spring-core-5.3.22.jar:5.3.22]
	at org.springframework.beans.propertyeditors.ClassEditor.setAsText(ClassEditor.java:65) ~[spring-beans-5.3.22.jar:5.3.22]
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429) ~[spring-beans-5.3.22.jar:5.3.22]
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402) ~[spring-beans-5.3.22.jar:5.3.22]
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155) ~[spring-beans-5.3.22.jar:5.3.22]
	at org.springframework.beans.AbstractNestablePropertyAccessor.convertIfNecessary(AbstractNestablePropertyAccessor.java:590) ~[spring-beans-5.3.22.jar:5.3.22]
	... 19 common frames omitted
Caused by: java.lang.ClassNotFoundException: class dev.bandeira.springvalidationreproducer.Bar
	at java.base/java.lang.Class.forNameImpl(Native Method) ~[na:na]
	at java.base/java.lang.Class.forNameHelper(Class.java:454) ~[na:na]
	at java.base/java.lang.Class.forName(Class.java:432) ~[na:na]
	at org.springframework.util.ClassUtils.forName(ClassUtils.java:284) ~[spring-core-5.3.22.jar:5.3.22]
	at org.springframework.util.ClassUtils.resolveClassName(ClassUtils.java:324) ~[spring-core-5.3.22.jar:5.3.22]
	... 24 common frames omitted
```

From what I could tell, Spring could not convert the String `class dev.bandeira.springvalidationreproducer.Bar` into the actual Class reference `dev.bandeira.springvalidationreproducer.Bar`.
[min-reproduction.zip](https://github.com/spring-projects/spring-framework/files/9500826/min-reproduction.zip)

"
2425,1238937305,snicoll,490484,Thanks @bclozel. I've removed the workaround in the agent test in 1e8017107a2fd6 and the test passes now.
2426,1238940216,snicoll,490484,Shouldn't #29058 only be reopened? I understand that a single commit removed the usage and the class but perhaps the usage can be removed and this issue be closed?
2427,1238964138,snicoll,490484,@sbrannen How can I reproduce this?
2428,1239042785,sdeleuze,141109,"I should be able to restore the commit end of the day, so I think it is ok to just wait that to restore the original commit that will close those 2 issues at the same time."
2429,1239052782,sdeleuze,141109,"After a second thought, I will follow your proposal and refine the commit to just remove the usage. I does not hurt to have 2 separated commits indeed."
2430,1239112336,bclozel,103264,"Thanks but Spring Framework doesn't expose a dependency to SnakeYaml in the published POMs, we're merely compiling against it for our support. We'll upgrade our optional dependencies as we see fit."
2431,1239288789,sbrannen,104798,"Running the following in `spring-test` will reproduce it.

```java
public static void main(String[] args) {
	GeneratedFiles generatedFiles = new InMemoryGeneratedFiles();
	TestContextAotGenerator generator = new TestContextAotGenerator(generatedFiles);
	generator.processAheadOfTime(Stream.of(MethodLevelTransactionalSpringRunnerTests.class));
}
```"
2432,1239406903,sbrannen,104798,"@jhoeller, I've assigned this one to both of us so that we can discuss it once you're back."
2433,1239444645,spencergibb,594085,Nice. Well done!
2434,1239496011,sdeleuze,141109,"You can find a draft commit on https://github.com/sdeleuze/spring-framework/commit/gh-29096. It uses as expected `BindingReflectionHintsRegistrar` to register entities reflection hints.

The part which is more tricky is to decide what `Class<?>` annotation attributes we support since they will require additional hints. At least for now, I have decided to only support JPA annotations, not implementation specific (like Hibernate) ones.

If I am not mistaken, `@ManyToMany`, `@ManyToOne`, `@OneToMany` and `@OneToOne` are referencing other entities no need for additional hints there.

It is unclear if `@MapKeyClass` and `ElementCollection` will require hints, so I think I prefer to now add it for now.

`@Converter` can be autoapplied without `@Convert` via `@Converter(autoApply=true)` so they should probably added via a dedicated mechanism via the `@Converter` entry point, not the `@Convert` one which is optional.

So for now in my draft commit I have added support for `@IdClass` and `@EntityListeners` which looks to me a reasonable starting point, with the plan to add more support on popular enough features raised by users or our own tests.

@snicoll @christophstrobl @schauder Please let me know if this is ok from your POV or if this should be refined. "
2435,1239510251,bclozel,103264,"Thanks @yuezk , this will be shipped in the next maintenance release. "
2436,1239521670,sdeleuze,141109,I just checked that `@Converter` classes are properly scanned by `PersistenceManagedTypesScanner` and [they were supported in Spring Native](https://github.com/spring-projects-experimental/spring-native/blob/main/spring-aot/src/main/java/org/springframework/data/JpaConfigurationProcessor.java) so I will likely add similar support via this issue. Please let me know if you see other points to refine.
2437,1239626417,sreenath-tm,28177426,The MemberHint does not have a Builder so for replacing the removed FieldHint where can we generate the set of field names that is referenced in the TypeHint class. 
2438,1239709907,philwebb,519772,"We have [this line in `SpringApplication`](https://github.com/spring-projects/spring-boot/blob/5470a6b34916b7abcc3ed2f6556a720420cc5e3e/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L414) which relies on the name generated by [`ApplicationContextInitializationCodeGenerator`](https://github.com/spring-projects/spring-framework/blob/f669e957a96506bf171dc8a29889527bae2f773c/spring-context/src/main/java/org/springframework/context/aot/ApplicationContextInitializationCodeGenerator.java#L58).

"
2439,1239715076,sdeleuze,141109,"Based on my tests, there is too much side effects when processing field types recursively, so I prefer to decline this issue."
2440,1239718981,sdeleuze,141109,@christophstrobl I have added support for `@Converter` in https://github.com/sdeleuze/spring-framework/commit/gh-29096.
2441,1239821844,rwinch,362503,"Thank you for the report, but AntPathRequestMatcher is implemented using AntPathMatcher which is a Framework bit of code. Any changes would need to happen in Spring Framework."
2442,1240224707,pivotal-cla,16822967,"@boahc077 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29104)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29104) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
2443,1240226382,pivotal-cla,16822967,@boahc077 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29104)!
2444,1240311495,snicoll,490484,@boahc077 thank you for making your first contribution to Spring Framework.
2445,1240316868,vpavic,1149230,See https://github.com/spring-projects/spring-boot/pull/31344#issuecomment-1158989081.
2446,1240349565,snicoll,490484,"In `TypeHint.Builder` there is a `private final Map<String, FieldHint.Builder> fields = new HashMap<>();`. I am suggessting to replace that with a `Set<String>`. If the field is registered multiple times, the set will make sure to keep only one copy. `MemberHint` should no longer be abstract or we can maybe keep a `FieldHint`. Does that help?"
2447,1240355349,snicoll,490484,"Thanks Vedran, I had forgotten about that. I've changed the default permission."
2448,1240378220,sbrannen,104798,Can you please confirm that you are using Microsoft Windows?
2449,1240391346,sreenath-tm,28177426,"1 ) Is moving the code from our FieldHint to MemberHint recommended.

2 ) I replaced the FieldHint related references and replaced with Set<String> fields but There are 2 usages of the FieldHint that I just require clarification on how we can handle that.
There are ```public Builder withField(String name, FieldMode mode) {
			return withField(name, FieldHint.builtWith(mode));
		}```
and ```public Builder withField(String name, Consumer<String> fieldHint) {
			FieldHint.Builder builder = this.fields.computeIfAbsent(name, FieldHint.Builder::new);
			fieldHint.accept(builder);
			return this;
		}```"
2450,1240422431,snicoll,490484,"1. No. FieldHint should only have a `name` attribute, which is what this issue is all about.
2. They should go away completely and replaced by `withField(String name)` as the additional attributes should be removed."
2451,1240449449,snicoll,490484,"So the problem is that `FactoryAwareOrderSourceProvider` has a check to verify that the instance is present in the local bean factory: https://github.com/spring-projects/spring-framework/blob/b88695a36eec16aa5315a842ab551f284aaab089/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java#L2152

In the case of the `CustomService`, it is only defined in the parent so that check fails and no source is made available. I wonder if that's an oversight, considering that `getMergedLocalBeanDefinition` looks up in the parent."
2452,1240469536,snicoll,490484,"We've had the same problem in Spring Boot with our Windows build. Using `Path.of` makes sure that the path can be resolved on all OSes, see https://github.com/spring-projects/spring-boot/blob/0f9ff867e7558ce204d76d2e86e6a1704a97c23c/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/intTest/java/org/springframework/boot/maven/AotTests.java#L43"
2453,1240485070,snicoll,490484,Thanks Sam. The problem is that we need to write a `ManagedList` for `CompositeDatabasePopulator` and the type of the elements is unknown. I'll see what I can do to support that use case and improve the exception message regardless.
2454,1240492476,sbrannen,104798,"This has been fixed on the `main` branch and should now work on MS Windows.

If it does not, please let us know.

Thanks for creating your first issue for the Spring Framework! 👍 "
2455,1240597698,snicoll,490484,"Let me take this back. This is much simpler. There is a list of inner bean definitions and the code currently doesn't support that. It only support the case where a property or an attribute is a bean definition. Looking at the code, I don't understand why the extra delegate isn't passed to `BeanDefinitionPropertyValueCodeGenerator`. We used to have a `innerBeanDefinitionWriter` that was taking care of this to be able to reused in case of a collection."
2456,1240598748,shambhand,33409682,"Thanks! Its mention on https://github.com/spring-projects/spring-boot/issues/32221
My bad! I did not check it on spring-boot repository"
2457,1240620974,snicoll,490484,I am not sure. I don't know what you mean by multiget and how that would look like. Please check if that's a duplicate of #23221
2458,1240627239,christophstrobl,2317257,@sdeleuze LGTM. @schauder thoughts?
2459,1240645621,sdeleuze,141109,I have been able to validate the build works as expected with the new dependency and GraalVM `22.3.0-SNAPSHOT`.
2460,1240666280,sdeleuze,141109,"I have pushed a refined version of the implementation which works as expected.

About the 2 issues mentioned previously:
 - It can be surprising but the lambda passed to `DuringAnalysisAccess#registerFieldValueTransformer` is only invoked for reachable fields, so for example it will not be invoked for `RestTemplate#gsonPresent` when Jackson is in the classpath because there is no need to set the value of unreachable fields that won't be included in the native image.
 - A `NoClassDefFoundError` is thrown by `subtype.getDeclaredFields()` when some field types are not in the classpath. As far as I can tell, those classes would also throw an error on the JVM so this is just happening on classes not reachable in practice during the execution.

The next step is to decide if we keep [the patterns](https://github.com/sdeleuze/spring-framework/blob/field-value-transformer/spring-core/graalvm/src/main/java/org/springframework/aot/graalvm/ConstantFieldFeature.java#L37-L43) or if we introduce an annotation to identify those fields computed at build time on native and how this annotation should be named.

I have mixed feelings : an annotation can easily be noticed when browsing the source code, but the fact the annotation will have an effect only on native and not on the JVM makes me wondering if that's a good idea to introduce it, at least for now. Also if introduced at Spring Framework level, Reactor won't be able to leverage it I (that said that's conceptually weak for Spring to set a Reactor field, and it could do it differently so this point is not blocking)."
2461,1240676463,sbrannen,104798,"I would not suggest defining an alias such as `string_bean1` that conflicts with an existing bean ID/name.

Are you expecting Spring to throw an exception if that occurs?

Also, what exactly are you trying to achieve?"
2462,1240714251,someshkoli,41543649,"Its exactly I was looking for, thanks. closing this "
2463,1240788969,snicoll,490484,"I've been spending a few hours on this and I need some help. My attempt is at https://github.com/snicoll/spring-framework/tree/gh-29075.

I've tried to prevent the `name` of the constructor argument or attribute to be mandatory but that led to some unpleasant code. My thinking is that `BeanDefinitionPropertyValueCodeGenerator` must be able to handle bean definitions, provided with a custom writer ([previous arrangement](https://github.com/spring-projects/spring-framework/blob/c5e1a774a5a1e27eb1ca693b663ec37e6583ac41/spring-beans/src/main/java/org/springframework/beans/factory/generator/BeanParameterGenerator.java#L59-L65), for reference). To still transmit the name, I was thinking of wrapping the `BeanDefinition` in some sort of container, that the custom generator could detect.

This is working but it is extra hard for collections as the generator itself loops over them. If the original value is a collection, you have to create a copy that does the wrapping upfront, with `ManagedList` & co.

I am also confused about `RegisteredBean#isGeneratedBeanName`. If we manage to make this work, then `BeanDefinitionMethodGenerator` no longer needs a `@Nullable` innerBeanName."
2464,1240871817,bclozel,103264,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
2465,1240879506,snicoll,490484,"@qrqhuang Unfortunately, Spring Boot 4.3.x is [out of OSS support](https://spring.io/projects/spring-framework#support). If you manage to reproduce the problem with a supported version, please share a small sample we can run ourselves and we can have a look."
2466,1240893764,alxxyz,75482780,"I've already asked this question on Stack Overflow
https://stackoverflow.com/questions/73636534/receive-multiple-multipart-form-data-properties-with-the-same-name-in-spring-web

and no answer yet"
2467,1240918251,bclozel,103264,"Maybe try improving the question by adding stacktraces (if any), or providing a simple curl command or `WebClient` snippet to replicate the POST content. Currently, the description doesn't make it easy to reproduce this case."
2468,1240927315,bclozel,103264,@Nheyll please don't conflate several issues in the same PR.
2469,1240949575,Nheyll,107559757,Didn't mean to do that sorry I correct it right now
2470,1240964670,sbrannen,104798,"I've pushed a working prototype for `TestAotProperties` here:

https://github.com/spring-projects/spring-framework/compare/main...sbrannen:TestAotProperties

@philwebb, let's see if this meets the needs of `SpringBootTestContextBootstrapper`."
2471,1240985745,qrqhuang,17166063,"@snicoll Use spring 5.3.22,  still the same error.


model
```java
@Data
public class OrderContext {

    private String orderNo;
}

```

component
```java
@Component
@Scope(value = BeanDefinition.SCOPE_PROTOTYPE)
public class OrderTask {

    private OrderContext orderContext;

    public OrderTask(OrderContext orderContext) {
        this.orderContext = orderContext;
    }
}
```

test case.  should not throw  error
```java
    @Autowired
    private ObjectProvider<List<OrderTask>> objectProviders;

    @Test
    void testProviders() {
        OrderContext orderContext = new OrderContext();
        orderContext.setOrderNo(""222"");
        objectProviders.getObject(orderContext);
    }
```




"
2472,1241088571,snicoll,490484,I don't understand what you're trying to achieve with a `List` on `ObjectProvider`. `ObjectProvider` should be used against the target bean and handle the list use case using `stream`. What do you expect to happen if this worked and there are multiple `OrderTask` in the context?
2473,1241134020,christianwimmer,3046476,"> It can be surprising but the lambda passed to DuringAnalysisAccess#registerFieldValueTransformer is only invoked for reachable fields

Yes, that is indeed the case. But is there anything you would like to do for non-reachable fields?"
2474,1241140589,christianwimmer,3046476,"> The next step is to decide if we keep [the patterns](https://github.com/sdeleuze/spring-framework/blob/field-value-transformer/spring-core/graalvm/src/main/java/org/springframework/aot/graalvm/ConstantFieldFeature.java#L37-L43) or if we introduce an annotation

Annotations are more explicit. But there is one important thing you need to be careful with. Calling `getAnnotation(Class c)` on a class, method, field, ... triggers initialization of the classes of *all* annotations that are on that element - not just the annotation class you are asking for. When discussing that with Paul recently, we realized that we need to expose in the native image API a way to ask for an annotation without triggering all that initialization. That is on the list for this release, see also the brief mentioning of this in https://github.com/oracle/graal/issues/4862#issuecomment-1240769232"
2475,1241667953,pivotal-cla,16822967,"@lenoch7 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29116)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29116) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
2476,1241670549,pivotal-cla,16822967,@lenoch7 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29116)!
2477,1241724471,bclozel,103264,Closing in favor of #29114
2478,1241761872,alxxyz,75482780,"@bclozel I've update the question on Stack Overflow.

The request
```
MultipartBodyBuilder bodyBuilder = new MultipartBodyBuilder();
bodyBuilder.part(""ids"", 22);
bodyBuilder.part(""ids"", 33);

webTestClient.post()
		.uri(""/create"")
		.contentType(MediaType.MULTIPART_FORM_DATA)
		.body(BodyInserters.fromMultipartData(bodyBuilder.build()))
		.exchange()
		.expectStatus().isOk();
```
The error
```
org.springframework.web.server.ServerWebInputException: 400 BAD_REQUEST ""Failed to read HTTP message""; nested exception is org.springframework.core.codec.DecodingException: JSON decoding error: Cannot deserialize value of type `java.util.ArrayList<java.lang.Integer>` from Integer value (token `JsonToken.VALUE_NUMBER_INT`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `java.util.ArrayList<java.lang.Integer>` from Integer value (token `JsonToken.VALUE_NUMBER_INT`)
 at [Source: (org.springframework.core.io.buffer.DefaultDataBuffer$DefaultDataBufferInputStream); line: 1, column: 1]
	at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.handleReadError(AbstractMessageReaderArgumentResolver.java:224)
	at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.lambda$readBody$3(AbstractMessageReaderArgumentResolver.java:190)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:94)
```"
2479,1241816839,yelouarti,66875891,"@bsreddy125 I faced a similar issue, where locally (Windows) it worked fine, but the same code remotely on a linux machine throwed an ""org.springframework.core.codec.DecodingException: Could not find end of body"". Given however, this behavior was observed during an integration test and not in production (i.e. with synthetic data).

### The Setup
A total of 3 application are involved:

- Wiremock docker container that provides a response in multipart-data format
- Unit test that sets up the wiremock instance by feeding it the response multipart data and that calls the service-under-test (SuT).
- Service (i.e. the SuT) that consumes multipart data (from the wiremock) and which ultimately throws the `DecodingException`

An important detail is that locally I'm working on Windows and Docker Desktop (enables docker under Windows).

_(Disclaimer: This was **my** setup, you can achieve the error without a wiremock!)_

### Reason for the Error
The multipart data that the unit test used was created under Windows, which per default uses CRLF for line breaks. This is also how line breaks have to be implemented in multipart data according to [RFC](https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html). This is also what the `DefaultPartHttpMessageReader` expects.

Unfortunately I didn't realize, that Git was set up to automatically change in CRLF to linux style LF ([here is a SO answer that explains this very nicely](https://stackoverflow.com/questions/1967370/git-replacing-lf-with-crlf)). **In short, the test data with which the mock was fed was different locally and remotely on linux**:

- _locally:_ Unit test reads file with CRLF -> feeds wiremock -> SuT gets the unmodified file with CRLF -> ✔
- _remotely:_ Pushed data was modified by Git -> unit test feeds ""corrupt data"" to mock -> SuT is looking for CRLF but can't find it -> ❌

### How to Bypass the Error
- You could either change the settings of your version control
- Encode your data with CRLF e.g. in Base64 and push it to your repository. Now it can be decoded by your SuT or unit tests regardless of the OS and it will always contain the desired line breaks as the line breaks weren't modified because they were encoded.

You could fix this in more than the suggested ways honestly. It could as well be, that you have a similar, but not necessarily identical, issue @bsreddy125.

### Suggestion for Spring
Regardless of whether OP has the same issue, I think it would be at least appreciated, if the exception details could hint a possible issue regarding line breaks. If not a single CRLF was found, chances are the data is corrupt, especially if LFs are available. I spent days looking for the error. However, I don't think this is an issue on Springs end to be honest."
2480,1241843451,snicoll,490484,"I am not yet convinced that we have to handle `TypedStringValue` like that. Rather I was hoping that the resolved constructor would give us the arguments needed, and the generator would write an indexed argument."
2481,1241911132,lenoch7,6397085,"I made next commit (I am very sorry, squash can be done later of course). This change should prevent to leave reference to SingleConnectionFactory (via exception listener) in invalid connection in case when connection.start() method throws JMSException."
2482,1241925444,pivotal-cla,16822967,"@tinpbe Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29121)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29121) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
2483,1241957657,sbrannen,104798,"Thanks for the PR.

Please note, however, that #28969 was assigned to @philwebb before you submitted the PR since the team had already decided that he would update the Javadoc.

In the future, please do not submit a PR for an assigned issue without first asking if an external contribution is desired.

Also, the examples in this PR are not exactly what we had in mind. Rather, we plan to add examples that are more concrete and enlightening than the technical ones proposed here.

In light of that, we might close this PR, but I will assign it to @philwebb and leave it up to him."
2484,1242026833,sbrannen,104798,"> We've had the same problem in Spring Boot with our Windows build. 

Thanks for providing the link, @snicoll.

I wasn't aware of `Path#subPath`. Combining that with `Files.walk` (instead of `Files.find` like I was previously using) helps to greatly simplify my `findFiles` implementation:

https://github.com/spring-projects/spring-framework/blob/d21d7fd6d0d2be6cc8645c2911208ad0f9a6674d/spring-test/src/test/java/org/springframework/test/context/aot/TestAotProcessorTests.java#L87-L92
"
2485,1242030233,snicoll,490484,"Juergen and I brainstormed about this one today and we're thinking about an API that would provide a richer model to account, namely, for generic constructor argument values.

Given a `BeanDefinition`, the resolver would return:

1. The `Executable` to use
2. A view over the arguments that have been ""pre-converted"" if necessary. This includes `TypeStringValue` that exposes a raw `String` value with an optional type that should be taken into account to determine the constructor anyway. There are other cases where the input value doesn't strictly match the parameter type, including for indexed constructor arguments.
3. Potentially a way to determine that an argument has to be autowired.

Based on this model we could generate code so that a  `ConstructorArgumentValue` is already in the expected type. If a generic constructor argument has been resolved, it becomes indexed rather so that code instantiation is as straightforward as possible.

A further refinement is the case where all the arguments are known upfront, avoiding the use of `AutowiredArguments` altogether.

There is such an example of such a generic argument in #29087.

"
2486,1242030916,snicoll,490484,"So this turned out to be a duplicate of #27920. The example was useful as it gave us additional ideas, namely pre-converting generic arguments."
2487,1242079615,snicoll,490484,"I've looked at this one with @jhoeller and we believe that looking the bean definition in the parent is what we should be doing for consistency.

Current status is available in https://github.com/snicoll/spring-framework/commit/e425825cc2061ef2e089a2c285ecc18b61c9f402."
2488,1242083707,sbrannen,104798,"@xieruiyuan, I have pushed a change to `main` that relies solely on `Path` APIs as suggested by @snicoll.

Please let us know if the build still works for you on Windows.

Thanks"
2489,1242099633,rishiraj88,13426986,Very interesting issue! 👍
2490,1242136181,xieruiyuan,47001086,"Hi Sam. Sorry for late reply, Yes it works perfectly now, Appreciate you help.   "
2491,1242204698,philwebb,519772,"Thanks very much for the PR @Nheyll, the second examples in your Javadoc was quite close to what I had in mind. In the end I wanted a bit more text around why you'd want to use the methods so I've gone with [this update](https://github.com/spring-projects/spring-framework/commit/665deb4d82aa0296405a3e20d70000ce8f24b920).

Sorry your PR didn't get merged this time, but thanks anyway for your efforts."
2492,1242206928,sbrannen,104798,"> Hi Sam. Sorry for late reply, Yes it works perfectly now, Appreciate you help.

Great 👍 

Thanks for letting us know."
2493,1242293941,bclozel,103264,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
2494,1242416470,bclozel,103264,"Thanks @Nheyll , this will be in the next milestone!"
2495,1242420933,bclozel,103264,"Thanks for your first contribution @kilink , this will be in the next 6.0.0 milestone."
2496,1242652718,snicoll,490484,"@sreenath-tm how is it going? Sorry to say but we'd like this (and a few related changes) to get in earlier next week so that the team can adapt their code in preparation of the release Thursday. If you have some work in progress you'd like to share, you can submit a PR and I can complete it if necessary. Thanks!"
2497,1242655792,bclozel,103264,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
2498,1242666468,Levi-dong,54319003,"> 感谢您与我们联系，但感觉这是一个更适合[Stack Overflow](http://stackoverflow.com/)的问题。正如[贡献指南中所述](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss)，我们更喜欢仅将问题跟踪器用于错误和增强功能。如果您认为这是一个真正的错误，请随时使用重新发布的问题的链接更新此问题（以便其他人可以找到它）或添加更多详细信息。

我监控了JVM，没有堆溢出，没有堆内存泄漏，没有线程爆炸导致OOM，所有监控的指标都正常，你没有做过log()的性能测试吗？"
2499,1242686086,bclozel,103264,"I'm sorry but a screenshot and a vague description of a problem that we can't reproduce is not a valid bug report.
You can share more information on StackOverflow and get some guidance there - or if you believe this is a bug, share a minimal application that reproduces the issue consistently.

We're running numerous benchmarks in Spring WebFlux and in Reactor. We can't justify spending more time on this without you spending a minimum effort to narrow down the issue."
2500,1242725277,sreenath-tm,28177426,@snicoll I have changed the corresponding FieldHint and all the instances of FieldHint. I am still figuring out the usages of the FieldHint class and the impact the removal it can cause.Will raise a draft PR so that you can also take a look at it.
2501,1242726582,Levi-dong,54319003,"I can publish my application to Github, can you download it from there? It's a very simple project"
2502,1242734476,snicoll,490484,Closing in favor of PR #29130
2503,1242737293,snicoll,490484,"Thank you @sreenath-tm. I've looked at the PR and implemented the remaining bits, see [e6fb3b2](https://github.com/snicoll/spring-framework/commit/e6fb3b280cfbae244f0f0f65a9d8265b0900fc74). I'll have a look Monday to get this merged."
2504,1242737770,sreenath-tm,28177426,Thanks @snicoll pleasure to have worked on this part.
2505,1242743082,JanStureNielsen,4248566,"As @bclozel suggested, consider creating a question on SO with a link to your public repository which demonstrates the problem."
2506,1242771714,sbrannen,104798,Reopening to switch back to the original method name and semantics.
2507,1242796056,DarrMirr,17032652,"Hello @djechelon. Maybe [Chained sql queries](https://darrmirr.medium.com/introduction-to-dbchange-junit-extension-7995a5a639e7#:~:text=for%20DbChangeMeta%20too.-,Chained%20sql%20queries,-Let%E2%80%99s%20see%20on) feature of DbChange JUnit extension helps you to manage with this issue? 

You can use `@Sql` Spring Framework feature for tests where there are no requirements for default scripts and use chained sql queries of DbChange for tests where default scripts are needed. So, you can get benefits from both approaches.

As alternative way, you can also enclose tests with default scripts by classes (inner or top level):
```java
@ExtendWith(DbChangeExtension.class)
@DbChangeOnce(sqlQueryFiles = ""sql/database_init.sql"")
@DbChangeOnce(sqlQueryFiles = ""sql/database_destroy.sql"", executionPhase = ExecutionPhase.AFTER_ALL)
@SqlExecutorGetter(""defaultSqlExecutor"")
public class DbChangeUsageTest {
    private DataSource dataSource;
    
    public DbChangeUsageTest() {
        dataSource = // code to create instance of DataSource 
    }
  
    public SqlExecutor defaultSqlExecutor() {
        return new DefaultSqlExecutor(dataSource);
    }
  
    @Test
    @DbChange(changeSet = InsertEmployee6Chained.class )
    @DbChange(changeSet = DeleteEmployee6Chained.class , executionPhase = DbChange.ExecutionPhase.AFTER_TEST)
    void changeSetChained() {
        /* code omitted */
    }
}
```"
2508,1242876623,Levi-dong,54319003,"I have push my project to Github: [https://github.com/Levi-dong/webclient-demo](url) 
This is a Maven project Version is 3.8.6，JDK11，mvn clean packaged to two jar：
1、one jar started normally with 8080 
![image](https://user-images.githubusercontent.com/54319003/189510919-97a53397-96cf-46e2-904a-3e1887ec9d9b.png)

2、the other JAR started with 8082
![image](https://user-images.githubusercontent.com/54319003/189510936-aceb3d7b-4474-4a69-8b18-6ca094e85c39.png)

3、Request path http://localhost:8080/rpc/send/webclient4/{cycle} 
4、cycle：you can write the number of loops if you write 1000 you call it 1000 times and 10000 you call it 10 times
![image](https://user-images.githubusercontent.com/54319003/189510939-795ea777-0e08-4ecc-82b6-d840f79ce013.png)

This time goes up with every call. I tried to change logback to asynchronous, but it didn't work
I hope you can take a look at this problem please, is it my configuration problem or a framework bug, thank you
"
2509,1242956268,msangel,773163,"Precisely what I was looking for. I don't know how many nanoseconds are in one second, so this will simplify my life.  "
2510,1242960638,martin-jamszolik,1155998,"Hi Team, 
I have another usecase that would help if we can implement our own `Indexer.`
consider a situation where I we want to use SpEL in `Scala` for example.  

```
Map data Error: EL1027E: Indexing into type 'scala.collection.mutable.ListBuffer<Group>' is not supported

org.springframework.expression.spel.SpelEvaluationException: EL1027E: Indexing into type 'scala.collection.mutable.ListBuffer<Group>' is not supported

	at org.springframework.expression.spel.ast.Indexer.getValueRef(Indexer.java:192)
	at org.springframework.expression.spel.ast.Indexer.getValueInternal(Indexer.java:101)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueRef(CompoundExpression.java:61)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:91)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getTypedValue(SpelNodeImpl.java:117)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:309)
	at org.viablespark.mapper.MapperExpression.getValue(MapperExpression.scala:26)
	at org.viablespark.mapper.EntityMapperImpl.mapCollection$$anonfun$1$$anonfun$1(EntityMapper.scala:51)
```

Being able to register custom collections for index access would be very cool.
"
2511,1242960710,jackmiking,7358173,自动回复：你的邮件我已经收到，如果需要回复的我会尽快回复的。感谢你的谅解····
2512,1243256920,pivotal-cla,16822967,"@HUIZHENG940722 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29133)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29133) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
2513,1243321179,loiclefevre,21245376,"Hello, do you have any news regarding this PR? Thanks"
2514,1243324500,snicoll,490484,I am afraid not. The team is busy on other themes lately and we didn't get a chance to look at it yet.
2515,1243332259,loiclefevre,21245376,"> I am afraid not. The team is busy on other themes lately and we didn't get a chance to look at it yet.

Is there any way I can help, maybe? Thing is, this one really simplifies integration with Oracle PL/SQL world (I mean from a developer standpoint)."
2516,1243405584,jdomigon,10757362,Hi @martin-jamszolik. Perhaps the use-case you describe could be covered by registering a Custom [PropertyAccessor](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/expression/PropertyAccessor.html)?
2517,1243655981,pivotal-cla,16822967,"@lbnbhl Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29134)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29134) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
2518,1243657633,lbnbhl,102413861,"> hello,i want study

"
2519,1243696486,snicoll,490484,@sreenath-tm thank you for making your first contribution to Spring Framework.
2520,1243859818,sbrannen,104798,"Superseded by:

- #29099"
2521,1243867885,act-amirsky,92257392,"Hi Brian,

I tried to hold make my suspense as much as possible 😊
Any answers from Mitre?
Side idea: If the concern if breaking changes from removing the deprecated classes – what about a 5.4.0 release making the version change impact more declared?

Thanks for keeping us in the loop. Love Spring!

Aaron
"
2522,1243926864,bclozel,103264,"Hi Aaron,

Discussions are still ongoing with MITRE. We'll share the result here as soon as we can.
There won't be any 5.4.0 version - 6.0.0 is removing those already, a major version is the right call here for this type of change.
Thanks!"
2523,1244016807,jhoeller,1263688,"I guess it would also help to call `setDefaultPersistenceUnitRootLocation(null)` since the implementation already has that escape hatch? We should make the default implementation more defensive though, there is no need to fail hard, at least not with the `ORIGINAL_DEFAULT_PERSISTENCE_UNIT_ROOT_LOCATION` as input. This could be as straightforward as just logging the ""Unable to resolve persistence unit root URL"" message and returning `null` instead of throwing a `PersistenceException` there, potentially with an `if` check to only perform such a lenient return in case of `defaultPersistenceUnitRootLocation == ORIGINAL_DEFAULT_PERSISTENCE_UNIT_ROOT_LOCATION`."
2524,1244795366,stgerhardt,113389206,Apologies for the force push on my fork - forgot to set my git command line email properly and wanted to fix it.
2525,1245041957,sdeleuze,141109,@snicoll @jhoeller Do they seem relevant proxy hints we can't infer and that we should configure?
2526,1245078998,bclozel,103264,"We've discussed this as a team and we decided to migrate the existing `ClientHttpRequestFactory` to using the new httpclient5 artifact in Spring Framework 6.0.0. We'll leave the existing arrangement in place in the 5.3.x line. We'll need to make it a noteworthy comment in our release notes, as this will be a new baseline requirement for Spring Framework 6.0."
2527,1245108389,sbrannen,104798,**Team Decision**: remove the feature since it is no longer needed and since keeping it would enable someone to accidentally disable AOT support in the TestContext framework (since `DefaultCacheAwareContextLoaderDelegate` now has built-in AOT support).
2528,1245130332,jhoeller,1263688,"The combination of `SessionFactory` and `EntityManagerProxy` seems odd, is that really necessary in that combination?

The other two are obviously the EMF/EM proxies that we create in our JPA setup arrangement. For the EMF proxy, we might be able to infer it from a narrowed `AbstractEntityManagerFactoryBean.getObjectType()` implementation. For the EM proxies, I'm not quite sure where to infer those since we typically create those on demand (i.e. not as beans)."
2529,1245143187,christophstrobl,2317257,"@jhoeller good catch - thanks - my bad, yes we can do without that one. I'll update the description"
2530,1245145031,sdeleuze,141109,"Ok let's configure hints for those for M6 since that's the last JPA blocker, I will create a follow-up issue for RC1 to see if we can infer them."
2531,1245228575,rstoyanchev,401908,Thanks for the report and sample. This seems to be a regression introduced in 6.0 M5 by #28398. 
2532,1245272134,abe0503,113435141,![image](https://user-images.githubusercontent.com/113435141/189888935-c65b1ecf-31aa-466b-ad0a-b7cd1ec538a8.jpeg)
2533,1245283792,bclozel,103264,"I'm not sure I understand. Do you have a sample application (ideally, minimal and created with https://start.spring.io) that demonstrates the issue?"
2534,1245287501,koenpunt,351038,I'm experiencing the same behavior. The workaround works well.
2535,1245302087,snicoll,490484,"We need to swap the creation of the raw class to the cglib proxy. I was hoping I could avoid having to change code generation for this but it turns out that there isn't a way to achieve this using an instance supplier. 

I've a proposal in [3b8bcdf](https://github.com/snicoll/spring-framework/commit/3b8bcdfe281b606a1ce8ee354b0cef56913ccfcd).

This is blocked by https://github.com/spring-projects/spring-boot/issues/32304 and, to some extent, https://github.com/spring-projects/spring-framework/issues/29141"
2536,1245333413,rstoyanchev,401908,"`@ExceptionHandler` in a controller method applies to exceptions raised when invoking methods of that controller. In this case, however, there is no matching handler. `HttpMediaTypeNotSupportedException` is raised when no handler fully matches the request, but there is a partial match on the URL and a mismatch in media types that can be consumed. 

`@ExceptionHandler` on an `@ControllerAdvice` is expected to work and I've confirmed that it does. I suspect there is some difference in your setup, e.g. are you sure that `MyExceptionHandler` gets registered, given that you have conditions on it?

In general, it is a good idea to provide an actual sample to debug the issue. I'll have to ask for that in this case since I can't reproduce the issue otherwise."
2537,1245412725,savinov,711887,spring-boot PR related to the issue: https://github.com/spring-projects/spring-boot/pull/15951
2538,1245467967,bclozel,103264,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
2539,1245468142,Zhupro,11290932,"Code:
@Configuration
public class WebClientBuilder {

    @Autowired
    WebReactorLoadBalancerExchangeFilterFunction filterFunction;
    @Autowired
    WebClientConfigProperties webClientConfigProperties;

    private static final Logger log = LoggerFactory
            .getLogger(WebClientBuilder.class);


    /**
     * webclient 负载均衡
     *
     * @param
     * @return
     */
    @Bean(name = ""fluxWebClient"")
    @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)
    public WebClient.Builder builder() {
        //连接池
//        ConnectionProvider provider = ConnectionProvider.builder(""order"")
//                .maxConnections(100)
//                .maxIdleTime(Duration.ofSeconds(30))
//                .pendingAcquireTimeout(Duration.ofMillis(100))
//                .build();
        TcpClient tcpClient = TcpClient.create()
                .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, webClientConfigProperties.getConnectTime()) // 链接超时时长
                .doOnConnected(connection ->
                        connection.addHandlerLast(new ReadTimeoutHandler(webClientConfigProperties.getReadTimeout())) // 读取数据超时时长
                                .addHandlerLast(new WriteTimeoutHandler(webClientConfigProperties.getReadTimeout()))); // 写数据超时时长


        return WebClient.builder()
                .filter(filterFunction) // webclient 负载均衡
//                .filter(logRequest()) //请求拦截器
//                .filter(logResponse()) //响应拦截器
                .clientConnector(new ReactorClientHttpConnector(HttpClient.from(tcpClient)));
    }

@Configuration
public class WebReactorLoadBalancerExchangeFilterFunction implements ExchangeFilterFunction {


    private static final Logger log = LoggerFactory
            .getLogger(WebReactorLoadBalancerExchangeFilterFunction.class);
    private final LoadBalancerClientFactory loadBalancerFactory;

    @Autowired
    private Environment environment;

    @Value(""${properties.application.group:}"")
    private String service;

    public WebReactorLoadBalancerExchangeFilterFunction(
            LoadBalancerClientFactory loadBalancerFactory) {
        this.loadBalancerFactory = loadBalancerFactory;
    }

    @Override
    public Mono<ClientResponse> filter(ClientRequest request, ExchangeFunction next) {
        URI originalUrl = request.url();
        String host = originalUrl.getHost();
        String serviceId = environment.getProperty(""service-name."" + host);

        if (serviceId == null) {
            String message = String.format(""Request URI does not contain a valid hostname: %s"", originalUrl.toString());
            if (log.isWarnEnabled()) {
                log.warn(message);
            }
            return Mono.just(ClientResponse.create(HttpStatus.BAD_REQUEST).body(message).build());
        }
        return choose(serviceId).flatMap(response -> {
            ServiceInstance instance = response.getServer();
            if (instance == null) {
                String message = serviceInstanceUnavailableMessage(serviceId);
//                if (log.isWarnEnabled()) {
                log.error(message);
//                }
                return Mono.just(ClientResponse.create(HttpStatus.SERVICE_UNAVAILABLE)
                        .body(serviceInstanceUnavailableMessage(serviceId)).build());
            }
            if (log.isDebugEnabled()) {
                log.debug(String.format(""Load balancer has retrieved the instance for service %s: %s"", serviceId, instance.getUri()));
            }
            ClientRequest newRequest = buildClientRequest(request, reconstructURI(instance, originalUrl));

            return next.exchange(newRequest).doOnEach((signal) -> {
                //处理webclient结束 记录请求结束指标
                if (!signal.isOnComplete()) {
                    Long startTime = WebfluxContext.getStartTime(signal.getContext());
                    ClientResponse clientResponse = signal.get();
                    Double requestTime = (double) (System.currentTimeMillis() - startTime) / 1000;
                    log.info(""WebclientResponse: service:{} url:{} status:{} time:{}"", service, newRequest.url(), clientResponse.rawStatusCode(), requestTime);
                    //指标
                    PrometheusConfig.API_SERVICE_HISTOGRAM.labels(service, newRequest.url().toString(), String.valueOf(clientResponse.rawStatusCode())).observe(requestTime);
                }
            }).subscriberContext(WebfluxContext::putStartTime);
        });

    }


    protected URI reconstructURI(ServiceInstance instance, URI original) {
        return LoadBalancerUriTools.reconstructURI(instance, original);
    }

    protected Mono<Response<ServiceInstance>> choose(String serviceId) {
        ReactorLoadBalancer<ServiceInstance> loadBalancer = this.loadBalancerFactory.getInstance(serviceId, ReactorLoadBalancer.class,
                ServiceInstance.class);
        if (loadBalancer == null) {
            return Mono.just(new EmptyResponse());
        }
        return Mono.from(loadBalancer.choose());
    }

    private String serviceInstanceUnavailableMessage(String serviceId) {
        return ""负载均衡 Load balancer 找不到WebClient服务ID: "" + serviceId;
    }

    private ClientRequest buildClientRequest(ClientRequest request, URI uri) {
        return ClientRequest.create(request.method(), uri)
                .headers(headers -> headers.addAll(request.headers()))
                .cookies(cookies -> cookies.addAll(request.cookies()))
                .attributes(attributes -> attributes.putAll(request.attributes()))
                .body(request.body()).build();
    }

}


public class WebClientRestHandler implements RestHandler {

    private WebClient.Builder clientBuilder;
    private FluxPraseClassBean fluxPraseClassBean;
    WebClientConfigProperties webClientConfigProperties;
    Logger log = LoggerFactory.getLogger(WebClientRestHandler.class);


    /**
     * 初始化
     *
     * @param fluxPraseClassBean
     * @return
     */
    @Override
    public void init(FluxPraseClassBean fluxPraseClassBean) {
        this.fluxPraseClassBean = fluxPraseClassBean;
        //获取全局配置clientBuilder
        this.clientBuilder = (WebClient.Builder) ApplicationContextProvider.getBean(""fluxWebClient"");
        this.clientBuilder.baseUrl(fluxPraseClassBean.getServiceUrl());
        this.webClientConfigProperties = ApplicationContextProvider.getBean(WebClientConfigProperties.class);
    }

    /**
     * 反射调用方法
     *
     * @param fluxPraseMethodBean
     * @return
     */
    @Override
    public Object invokeRest(FluxPraseMethodBean fluxPraseMethodBean) {
        Object result = null;
        log.info(""WebClientRequest param:{}, body:{}"", JSON.toJSONString(fluxPraseMethodBean.getParams()), JSON.toJSONString(fluxPraseMethodBean.getBody()));

        StringBuilder sb = new StringBuilder();
        if (StringUtils.isNotBlank(fluxPraseClassBean.getUrlPrefix())) {
            sb.append(fluxPraseClassBean.getUrlPrefix());
        }
        if (StringUtils.isNotBlank(fluxPraseMethodBean.getUrl())) {
            sb.append(fluxPraseMethodBean.getUrl());
        }
        //这里可以得到参数数组和方法等，可以通过反射，注解等，进行结果集的处理
        WebClient.RequestBodyUriSpec requestBodyUriSpec = this.clientBuilder
                //请求方法
                .build().method(fluxPraseMethodBean.getRequestMethod());

        //请求地址
        WebClient.RequestBodySpec responseBodySpec = null;
        if (fluxPraseMethodBean.getParams() != null) {
            if (fluxPraseMethodBean.getIsForm()) {
//                responseBodySpec = requestBodyUriSpec.uri( uriBuilder -> uriBuilder.queryParams(getRequestParamMap(fluxPraseMethodBean.getParams())).build()).contentType(MediaType.APPLICATION_JSON);
                responseBodySpec = requestBodyUriSpec.uri(sb.toString(), uriBuilder -> uriBuilder.queryParams(getRequestParamMap(fluxPraseMethodBean.getParams())).build()).contentType(MediaType.APPLICATION_JSON);
            } else {
                responseBodySpec = requestBodyUriSpec.uri(sb.toString(), fluxPraseMethodBean.getParams()).contentType(MediaType.APPLICATION_JSON);
            }
        } else {
            responseBodySpec = requestBodyUriSpec.uri(sb.toString()).contentType(MediaType.APPLICATION_JSON);
        }
        //接收格式
        WebClient.ResponseSpec responseSpec = null;
        if (fluxPraseMethodBean.getBody() != null) {
            responseSpec = responseBodySpec.body(BodyInserters.fromObject(JSON.toJSONString(fluxPraseMethodBean.getBody())))

                    .accept(MediaType.APPLICATION_JSON)

                    //发出请求
                    .retrieve();
        } else {
            responseSpec = responseBodySpec.accept(MediaType.APPLICATION_JSON)
                    //发出请求
                    .retrieve();
        }

        //处理请求
        if (fluxPraseMethodBean.getReturnFlux()) {

            Flux flux = fluxHandle(responseSpec, fluxPraseMethodBean);
            result = HystrixCommands
                    .from(flux)
                    .fallback(throwable -> {
                        HystrixUtils.checkHystrixStatus(fluxPraseMethodBean.getHystrixCommonName());
                        return flux;
                    })
                    .commandName(fluxPraseMethodBean.getHystrixCommonName())
                    .toFlux();
        } else {
            Mono mono = monoHandle(responseSpec, fluxPraseMethodBean);
            result = HystrixCommands
                    .from(mono)
                    .fallback(throwable -> {
                        HystrixUtils.checkHystrixStatus(fluxPraseMethodBean.getHystrixCommonName());
                        return mono;
                    })
                    .commandName(fluxPraseMethodBean.getHystrixCommonName())
                    .toMono();

        }

        return result;
    }
}


"
2540,1245506553,wimdeblauwe,1115823,"I did some more tests. If I change the `@ExceptionHandler` to not use the `annotations` argument on `@ControllerAdvice` anymore, then the handler is called:

```
@ControllerAdvice
@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)
public class MyExceptionHandler {
    @ExceptionHandler
    public void handleException(Exception e) {
        System.out.println(""Exception in advice!"");
        e.printStackTrace();
    }
}
```

I also tried with `@ControllerAdvice(annotations = Controller.class)`, but then the handler is also not called. Any idea why restricting the advice like that makes it so that the handler is no longer called?

I created a sample project at https://github.com/wimdeblauwe/spring-issue-29120

If you run it and access http://localhost:8080 with a http client, you will see that the custom exception handler is not called. If you comment out the `annotations = RestController.class`, you will see that it works."
2541,1245532694,mjaggard,1374579,"> spring-boot PR related to the issue: https://github.com/spring-projects/spring-boot/pull/15951

Related yes, but doesn't fix this issue - that PR was included in the releases where I've seen this behaviour."
2542,1245867516,bclozel,103264,Closed with 9c48dda
2543,1246214251,sdeleuze,141109,"Thanks for this PR, but I implemented that fix differently in #29146 in order to reuse the detection logic already implemented and only register the needed reflection entry."
2544,1246425607,sdeleuze,141109,"@christianwimmer Thanks for the update, please let me know when annotations support is available in 22.3.0-dev builds."
2545,1246550585,jensdietrich,2435830,"I just realised that checkstyle expects the annotation to be on a separate line. I can withdraw this and create another PR to comply with this rule if required. 
"
2546,1246578922,Polve,1634436,Does the problem occur without sockjs?
2547,1246596448,rstoyanchev,401908,The change is ready but needs to be postponed due to a classpath conflict between `context-snapshot` version 1.0 M5 vs 1.0 M3 brought in by Reactor Netty 2.0 M1 which in turn is waiting for a new Netty 5.0 Alpha5.
2548,1246638857,snicoll,490484,Regarding 2. I should add some sort of SPI for this would be very much welcome as this could be reused transparently for `PropertyValues`. The conversion for the expected type can happen and it could handle `TypeStringValue` transparently as well.
2549,1246694556,sbrannen,104798,"> I just realised that checkstyle expects the annotation to be on a separate line. I can withdraw this and create another PR to comply with this rule if required.

No need to create a new PR.

Whenever you need to make a change to an existing PR, you can simply push another commit to the branch for the PR.

In this particular case, we can take care of it for you.

By the way, `SettableListenableFuture#get(long, TimeUnit)` is also missing a `@Nullable` declaration, but I'll take care of that."
2550,1246744828,poutsma,330665,"If you'd like us to spend some time investigating, please take the time to provide a complete minimal sample (something that we can unzip or git clone, build, and deploy) that reproduces the problem."
2551,1246769006,sbrannen,104798,"oops... did I make _that_ mistake again? 🤦 

Thanks for catching it!

I'll get it merged."
2552,1246834329,sbrannen,104798,"This has been merged into `5.3.x` and `main`.

Thanks"
2553,1246899329,sbrannen,104798,"This has been merged into `5.3.x` and `main`.

Thanks"
2554,1246932549,sbrannen,104798,"This has been merged into `5.3.x` and `main`.

Thanks"
2555,1246956910,sbrannen,104798,"> ### Temporary solution
> 
> Annotate class inheriting _AbstractTestNGSpringContextTests_ :
> 
> ```
> @TestExecutionListeners(value = {ServletTestExecutionListener.class,
>     DirtiesContextBeforeModesTestExecutionListener.class,
>     ApplicationEventsTestExecutionListener.class, DependencyInjectionTestExecutionListener.class,
>     DirtiesContextTestExecutionListener.class, EventPublishingTestExecutionListener.class
> }, mergeMode = MergeMode.MERGE_WITH_DEFAULTS, inheritListeners = false)
> ```

What happens if you use the following instead?

```java
@TestExecutionListeners(listeners = {}, inheritListeners = false, mergeMode = MergeMode.MERGE_WITH_DEFAULTS)
```

That should allow you to switch to using all default listeners."
2556,1246994382,snicoll,490484,I have it working but I think it needs a bit more work to test it correctly. 
2557,1247071902,rstoyanchev,401908,The property is now deprecated and set to true by default. This also matches default settings in Boot.
2558,1247459359,oopschen,552799,"> > ### Temporary solution
> > Annotate class inheriting _AbstractTestNGSpringContextTests_ :
> > ```
> > @TestExecutionListeners(value = {ServletTestExecutionListener.class,
> >     DirtiesContextBeforeModesTestExecutionListener.class,
> >     ApplicationEventsTestExecutionListener.class, DependencyInjectionTestExecutionListener.class,
> >     DirtiesContextTestExecutionListener.class, EventPublishingTestExecutionListener.class
> > }, mergeMode = MergeMode.MERGE_WITH_DEFAULTS, inheritListeners = false)
> > ```
> 
> What happens if you use the following instead?
> 
> ```java
> @TestExecutionListeners(listeners = {}, inheritListeners = false, mergeMode = MergeMode.MERGE_WITH_DEFAULTS)
> ```
> 
> That should allow you to switch to using all default listeners.

Thanks for the reply.
It works, better to make the *AbstractTestNGSpringContextTests* utilize the  testExecutionListener automatic discovery mechanism(official document mention). It requires some work to find the truth while the official document haven't mention it.
Beginners  fails to start a project by integrating 3rd party library using testExecutionListener automatic discovery mechanism with TestNG or Junit4(That's how i find it)."
2559,1247662648,snicoll,490484,"Thanks for the suggestion. This class is meant to be used by consumers of AOT, Spring Boot being one of them but we anticipate any custom framework built on top of Spring Framework to find it useful as well. I can see that the use in Spring Boot has been replaced by `AotApplicationContextInitializer` in Spring Boot. 

Shouldn't this be the other way around, with `AotApplicationContextInitializer` being contributed here, rather than being a Spring Boot-specific class? Looking at the code it's not obvious to me why that is."
2560,1247827137,stsypanov,10835776,@sdeleuze is there anything I could do about this PR?
2561,1248064427,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
2562,1248163543,snicoll,490484,"If the configuration class is handled (as currently showcased in #29107) then the error is different. The compilation fails as the proxy class isn't found.

Edit: the above could be because the proxy has already been created by another test so it's not created again and therefore not visible to the compiler."
2563,1248390512,snicoll,490484,"> FilePatternResourceHintsRegistrar is not used anywhere in the Spring Framework code base,

I am not sure I understand that. Shouldn't we rather focus on whether this can be useful as a framework utility like plenty of others we don't use ourselves? I agree that the current code is a bit specific to one use case at the moment but I'd rather revisit this that if we can."
2564,1248515162,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
2565,1248544737,philwebb,519772,"That's an alternative. I wanted to get the test support into Spring Boot without derailing the Spring Framework release. We need a way for the test code to plug in an `ApplicationContextInitializer` that acts as a signal that the convention based one should not be used. If we're happy for the one here to be a real `ApplicationContextInitializer` then we could rework things after the next Boot milestone.

"
2566,1249088663,dsyer,124075,"Update: you can run the tests in the project above in a native image (`./mvnw test -PnativeTest`), but 1 of them had to be modified (there is no `File` associated with a classpath resource) and another disabled (you can't scan from the root of the classpath)"
2567,1249377119,rstoyanchev,401908,"This comes down once again to the fact there is no matching handler. The `ControllerAdvice` is set to match `@RestController` handlers but if there is no matching handler, this criteria cannot be verified. I'm not sure there is much we can do. I realize it looks counter-intuitive in this simple example, but in theory there could be multiple partially matched controller methods. 

The only other suggestion I can think of is that you can inject the `HandlerMethod` associated with the exception into an `@ExceptionHandler` method and check if that's `null` in which case at least you know that you're dealing with an exception that occurred before a handler could be selected.
"
2568,1249409376,cyw320712,42880886,"@christophstrobl 
I really want to say thank you from the bottom of my heart. I was at a loss for a long time in the process of adding MongoOperations in the process of **dynamically registering the MongoRepository bean**, and it was even more difficult because I could not find any source.(Even any piece of examples!! using MongoRepositoryFactoryBean) Thanks to the example you left in this Issue, I was able to solve the problem. Again, I want to say thank you very much."
2569,1249419674,sbrannen,104798,"Thanks for the PR, @Buzzardo!

We'll give it a try before 6.0 RC1 to make sure that no links within or into the documentation are broken before merging."
2570,1249507102,rstoyanchev,401908,Have you set a `TaskScheduler` as [mentioned in the docs](https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#websocket-stomp-handle-simple-broker)?
2571,1249512519,sbrannen,104798,"@Buzzardo, are you aware of any potential changes to links, anchors, etc.?

Did you perform any such testing before and after switching the backend?"
2572,1249514123,rstoyanchev,401908,"Is [this](https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html#rsocket-requester-server) what you're looking for? If not, please provide more details."
2573,1249531100,rstoyanchev,401908,"This seems to have been added as part of 698f923fc3178bb9a35e1cb34c388d8703e45b99 but appears to be completely unrelated to the change, and other usages of this method are in more global places like `FrameworkServlet`, `RequestContextFilter`, and `RequestContextListener`. So it looks out of place in `RequestMappingHandlerAdapter`, and it's not clear why it was added. Removing it also does not cause any test failures.

In terms of async requests, `webRequest.requestCompleted` is called in `FrameworkServlet` as well after the initial request dispatch exits, and that is also before the overall async request has completed. In that sense the lifecycle of `RequestAttributes` is per request dispatch, rather than the overall request.

Do you have a specific issue that you are experiencing?

Aside from that we should probably remove this call from `RequestMappingHandlerAdapter`. @jhoeller what do you think?"
2574,1249540927,sbrannen,104798,"This has been merged into `5.3.x` and `main`.

Thanks"
2575,1249564174,rstoyanchev,401908,"Please, elaborate on your reason for this request. Generally, the interceptors are configured and invoked within the `HandlerMapping`, and in that sense they are for internal use. "
2576,1249606654,lizongbo,1670666,"I'm implementing our development framework based on Springboot, and since we have hundreds of business function developers, and we maintain hundreds of systems, and their Java development capabilities are high and low, I have to collect information while the program is running and automatically analyze the differences in changes in production materials. So I used a unified main class in the framework, called the start method of applicationContext in the main method, and then triggered the information collection operation in the start event, and the collected information will be written to a json file.
Then, through the devops tool, the json file in the docker container is collected and the information is recorded into the database. Before each deployment of materials to the production environment, through the devops tool to compare the current branch to the material and the materials that have been published production branches, you can quickly find the differences in changes such as filters and interceptors, and timely find possible error changes. This enables a quick review of changes to hundreds of systems.

Here's some of my sample code:
1. main class:
```

public static void main(String[] args) {
ConfigurableApplicationContext configurableApplicationContext =  SpringApplication.run(XXXXServerApplication.class, args);
 configurableApplicationContext.start();
}

```
2. start event call back
```

  @Order(Ordered.HIGHEST_PRECEDENCE + 6)
    @EventListener
    public void onContextStartedEvent(ContextStartedEvent event) {
 dumpAppConfigInfo(event.getApplicationContext());
}

```

4. dump logic:


```

public static void dumpAppConfigInfo(ApplicationContext configurableApplicationContext) {
   
            Map<String, Object> map = new TreeMap<>();
//get System Properties info
 Map<String, String> mapTmp = new TreeMap<>();
            for (String key : System.getProperties().stringPropertyNames()) {
                mapTmp.put(key, System.getProperty(key));
            }
            map.put(""systemProperties"", mapTmp);
// get env info
            map.put(""systemEnv"", new TreeMap<>(System.getenv()));
//get font info
            Locale[] localeArr = { Locale.CHINESE, Locale.SIMPLIFIED_CHINESE, Locale.ENGLISH };
            for (Locale locale : localeArr) {
                String[] fontNames = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames(locale);
                List<String> fontNameList = new ArrayList<>(Arrays.asList(fontNames));
                Collections.sort(fontNameList);
                map.put(""fontNames_"" + locale, fontNameList);
            }
            Font[] allFonts = GraphicsEnvironment.getLocalGraphicsEnvironment().getAllFonts();
            List<String> allFontNameList = new ArrayList<>();
            for (Font font : allFonts) {
                allFontNameList.add(font.getName());
            }
            Collections.sort(allFontNameList);
            map.put(""allFontNameList"", allFontNameList);
  //get filter info 
   List<Map<String, Object>> webFilterList = getWebFilterList(configurableApplicationContext);
            map.put(""webFilterList"", webFilterList);
// get Interceptor info 
            List<Map<String, Object>> mappedInterceptorList = getMappedInterceptorList(configurableApplicationContext);
            map.put(""mappedInterceptorList"", mappedInterceptorList);
try {
                FileUtils.writeStringToFile(new File(logDirPath, ""appConfigInfo.json""), JSONUtil.toFullJsonStr(map, true), StandardCharsets.UTF_8);
            } catch (IOException e) {
                LOG.info(""SpringUtil.dumpAppConfigInfo|buterr"", e);
            }
}

    private static List<Map<String, Object>> getWebFilterList(ApplicationContext configurableApplicationContext) {
        List<Map<String, Object>> webFilterList = new ArrayList<>();
        if (configurableApplicationContext instanceof WebApplicationContext) {
            WebApplicationContext wac = (WebApplicationContext) configurableApplicationContext;
            ServletContext sc = wac.getServletContext();
            if (sc != null) {
                Map<String, ? extends FilterRegistration> allFiltersMap = sc.getFilterRegistrations();
                if (allFiltersMap != null) {
                    for (Map.Entry<String, ? extends FilterRegistration> e : allFiltersMap.entrySet()) {
                        Map<String, Object> m = new TreeMap<>();
                        FilterRegistration fr = e.getValue();
                        m.put(""name"", fr.getName());
                        m.put(""className"", fr.getClassName());
                        m.put(""urlPatternMappings"", fr.getUrlPatternMappings());
                        m.put(""servletNameMappings"", fr.getServletNameMappings());
                        webFilterList.add(m);
                    }
                }
            }
        }
        return webFilterList;
    }

    private static List<Map<String, Object>> getMappedInterceptorList(ApplicationContext configurableApplicationContext) {
        List<Map<String, Object>> mappedInterceptorList = new ArrayList<>();
        try {
            Map<String, RequestMappingHandlerMapping> beanMap = configurableApplicationContext.getBeansOfType(RequestMappingHandlerMapping.class);
            for (Map.Entry<String, RequestMappingHandlerMapping> e : beanMap.entrySet()) {
                String beanName = e.getKey();
                RequestMappingHandlerMapping requestMappingHandlerMapping = e.getValue();
                Field adaptedInterceptorsField = ReflectionUtils.findField(RequestMappingHandlerMapping.class, ""adaptedInterceptors"");
                if (adaptedInterceptorsField != null) {
                    adaptedInterceptorsField.setAccessible(true);
                    List<HandlerInterceptor> hiList = null;
                    try {
                        hiList = (List<HandlerInterceptor>) adaptedInterceptorsField.get(requestMappingHandlerMapping);
                    } catch (IllegalArgumentException | IllegalAccessException ex1) {
                        LOG.error(“get adaptedInterceptors fail”, ex1);
                    }
                    if (hiList != null) {
                        for (HandlerInterceptor hi : hiList) {
                            if (hi instanceof MappedInterceptor) {
                                MappedInterceptor mi = (MappedInterceptor) hi;
                                Map<String, Object> m = new TreeMap<>();
                                m.put(""requestMappingHandlerMappingBeanName"", beanName);
                                m.put(""pathPatterns"", mi.getPathPatterns());
                                m.put(""className"", getRealClassForSpringBean(mi.getInterceptor()).getName());
                                mappedInterceptorList.add(m);
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            LOG.warn(""getMappedInterceptorList|buterr|"", e);
        }
        return mappedInterceptorList;
    }

    public static Class<?> getRealClassForSpringBean(Object bean) {
        Objects.requireNonNull(bean);
        Class<?> userClass = ClassUtils.getUserClass(bean.getClass());
        Class<?> targetClass = AopProxyUtils.ultimateTargetClass(bean);
        if (!AopUtils.isJdkDynamicProxy(bean)) {
            return userClass;
        }
        return targetClass;
    }

```

"
2577,1249615170,lizongbo,1670666,"Of course, we not only collected the information involved in the above sample code, but also collected other information.
For example, the reason why the above collection collects font information is because our operators removed a font file when updating the docker container basic image, but our application used the font to generate pictures, and the result was deployed to production after user complaints that the O&M made font changes, so we collected information and then used to find some important configuration changes, such as more filters, or less interceptors.

------
My english translated by bing 
"
2578,1250048418,Abhi4281,67889216,"If this is the expected behavior then its fine. 

However, while handling large amount of configuration details this could possibly lead to a Logical error, which would be very difficult to debug for the users.

Not trying to achieve anything, just learning Spring :) "
2579,1250091355,valituguran,17927827,"Hello, what is the status of this, is this still open?"
2580,1250197571,vbezhenar,4218339,"My suggestion is to support both forms, like DataUnit.KILOBYTES, DataUnit.KIBIBYTES, etc. KILOBYTES will not change from current meaning, but `@Deprecated` probably should be added, so people would avoid it. And support parsing ""KiB"" suffix as well.

So basically does not break backwards compatibility but adds support for proper units.

For me it was surprising to find out this terminology used in Spring. I think at this point all technical usage should adhere to ISO."
2581,1250267696,sbrannen,104798,"This has been merged into `5.3.x` and `main`.

Thanks"
2582,1250489159,wplong11,5109223,"@rstoyanchev I want to use RequestScope bean in a coroutine. For this, I created a SpringContext that restores the value in ThreadLocal when the Thread is changed. But ScopeNotActiveException was occured. 

```
2022-09-19 12:08:38.976 ERROR 43080 --- [nio-8081-exec-2] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.beans.factory.support.ScopeNotActiveException: Error creating bean with name 'scopedTarget.testService2': Scope 'request' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: Cannot ask for request attribute - request is not active anymore!] with root cause

java.lang.IllegalStateException: Cannot ask for request attribute - request is not active anymore!
	at org.springframework.web.context.request.ServletRequestAttributes.getAttribute(ServletRequestAttributes.java:149) ~[spring-web-5.3.22.jar:5.3.22]
	at org.springframework.web.context.request.AbstractRequestAttributesScope.get(AbstractRequestAttributesScope.java:43) ~[spring-web-5.3.22.jar:5.3.22]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:371) ~[spring-beans-5.3.22.jar:5.3.22]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208) ~[spring-beans-5.3.22.jar:5.3.22]
	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35) ~[spring-aop-5.3.22.jar:5.3.22]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692) ~[spring-aop-5.3.22.jar:5.3.22]
	at com.example.coroutinemvctest.controller.TestService2$$EnhancerBySpringCGLIB$$b66ed748.getId(<generated>) ~[main/:na]
	at com.example.coroutinemvctest.controller.TestController2$hello$2.invokeSuspend(TestController2.kt:23) ~[main/:na]
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33) ~[kotlin-stdlib-1.6.21.jar:1.6.21-release-334(1.6.21)]
	at kotlinx.coroutines.DispatchedTaskKt.resume(DispatchedTask.kt:234) ~[kotlinx-coroutines-core-jvm-1.6.4.jar:na]
	at kotlinx.coroutines.DispatchedTaskKt.resumeUnconfined(DispatchedTask.kt:190) ~[kotlinx-coroutines-core-jvm-1.6.4.jar:na]
	at kotlinx.coroutines.DispatchedTaskKt.dispatch(DispatchedTask.kt:161) ~[kotlinx-coroutines-core-jvm-1.6.4.jar:na]
	at kotlinx.coroutines.CancellableContinuationImpl.dispatchResume(CancellableContinuationImpl.kt:397) ~[kotlinx-coroutines-core-jvm-1.6.4.jar:na]
	at kotlinx.coroutines.CancellableContinuationImpl.resumeImpl(CancellableContinuationImpl.kt:431) ~[kotlinx-coroutines-core-jvm-1.6.4.jar:na]
	at kotlinx.coroutines.CancellableContinuationImpl.resumeImpl$default(CancellableContinuationImpl.kt:420) ~[kotlinx-coroutines-core-jvm-1.6.4.jar:na]
	at kotlinx.coroutines.CancellableContinuationImpl.resumeUndispatched(CancellableContinuationImpl.kt:518) ~[kotlinx-coroutines-core-jvm-1.6.4.jar:na]
	at kotlinx.coroutines.EventLoopImplBase$DelayedResumeTask.run(EventLoop.common.kt:500) ~[kotlinx-coroutines-core-jvm-1.6.4.jar:na]
	at kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284) ~[kotlinx-coroutines-core-jvm-1.6.4.jar:na]
	at kotlinx.coroutines.DefaultExecutor.run(DefaultExecutor.kt:108) ~[kotlinx-coroutines-core-jvm-1.6.4.jar:na]
	at java.base/java.lang.Thread.run(Thread.java:833) ~[na:na]
```


```kotlin
package com.example.coroutinemvctest.controller

import kotlinx.coroutines.ThreadContextElement
import kotlinx.coroutines.delay
import kotlinx.coroutines.withContext
import org.springframework.stereotype.Service
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.RestController
import org.springframework.web.context.annotation.RequestScope
import org.springframework.web.context.request.AbstractRequestAttributes
import org.springframework.web.context.request.RequestAttributes
import org.springframework.web.context.request.RequestContextHolder
import kotlin.coroutines.AbstractCoroutineContextElement
import kotlin.coroutines.CoroutineContext

@RestController
class TestController(
    private val testService: TestService,
) {
    @GetMapping(""/hello"")
    suspend fun hello(): String = withContext(SpringContext()){
        delay(100)
        return@withContext testService.id.toString()
    }
}

private var counter = 0

@RequestScope
@Service
class TestService {
    val id: Int = ++counter
}

class SpringContext(
    private val requestAttributes: RequestAttributes? = RequestContextHolder.getRequestAttributes(),
) : ThreadContextElement<RequestAttributes?>, AbstractCoroutineContextElement(Key) {
    companion object {
        object Key : CoroutineContext.Key<SpringContext>
        private val requestActiveField = AbstractRequestAttributes::class.java.getDeclaredField(""requestActive"").apply {
            isAccessible = true
        }
    }

    override fun updateThreadContext(context: CoroutineContext): RequestAttributes? {
        val oldState = RequestContextHolder.getRequestAttributes()
        requestAttributes?.let {
            RequestContextHolder.setRequestAttributes(it)
            // requestActiveField.set(it, true) // if uncomment this line, then ScopeNotActiveException not occurs
        }

        return oldState
    }

    override fun restoreThreadContext(context: CoroutineContext, oldState: RequestAttributes?) {
        RequestContextHolder.setRequestAttributes(oldState)
    }
}
```"
2583,1250603394,snicoll,490484,"Yes it's the expected behavior. Spring Boot has an option to prevent bean overriding by default, which would prevent the use case from happening. On an `AbstractRefreshableBeanFactory` you can call `setAllowBeanDefinitionOverriding` to disallow bean overriding."
2584,1250612154,sdeleuze,141109,"FYI this issue is blocking Azure support deployed JAR to be signed.

> what's the differences for these two?

Not sure since that's more a Boot question. Maybe `java -jar app-0.0.1-SNAPSHOT.jar` just checks the app JAR (which is unsigned) while `gradle bootRun` is running in exploded mode and try to load `dependency-0.0.1-SNAPSHOT.jar` which is signed.
"
2585,1250619468,wimdeblauwe,1115823,"I have `@ControllerAdvice(annotations = RestController.class)` because my error handling library should only be active for `@RestController` controllers, not for `@Controller` classes (in case there is a mixed application with a web interface and an API). Is there another way I can have my exception handler only active for rest controllers?"
2586,1250698034,JoeMaher,4361354,"@sdeleuze I have created a reproducible example here https://github.com/JoeMaher/tx-coroutine-context-loss-example, please let me know if you have any queries/concerns"
2587,1250754567,bclozel,103264,"Thanks @Buzzardo !
I've checked that resources are generated in the same place as before, code snippets are rendered properly (including the Java/Kotlin variant selectors), anchors are not broken and internal links are still working."
2588,1250781830,bclozel,103264,Reopening as several things are broken after the deploy.
2589,1250842589,poutsma,330665,"`WebServiceTemplate` is a Spring-WS class, not Spring Framework. Please [file an issue here](https://github.com/spring-projects/spring-ws/issues)."
2590,1250855522,bclozel,103264,"Thanks, but this is already taken care of.
See https://github.com/spring-projects/spring-framework/pull/29104#issuecomment-1240355349"
2591,1250860392,lrgrz,9340430,"I'm afraid the issue is not resolved.

The AbstractStandardUpgradeStrategy still tries to get InetSocketAddresses during upgrade:
```
	@Override
	public void upgrade(ServerHttpRequest request, ServerHttpResponse response,
			@Nullable String selectedProtocol, List<WebSocketExtension> selectedExtensions,
			@Nullable Principal user, WebSocketHandler wsHandler, Map<String, Object> attrs)
			throws HandshakeFailureException {

		HttpHeaders headers = request.getHeaders();
		InetSocketAddress localAddr = null;
		try {
			localAddr = request.getLocalAddress();
		}
		catch (Exception ex) {
			// Ignore
		}
		InetSocketAddress remoteAddr = null;
		try {
			remoteAddr = request.getRemoteAddress();
		}
		catch (Exception ex) {
			// Ignore
		}
```
and ServerHttpRequest uses constructor of InetSocketAddress, which performs DNS lookup:
```
	@Override
	public InetSocketAddress getLocalAddress() {
		return new InetSocketAddress(this.servletRequest.getLocalAddr(), this.servletRequest.getLocalPort());
	}

	@Override
	public InetSocketAddress getRemoteAddress() {
		return new InetSocketAddress(this.servletRequest.getRemoteHost(), this.servletRequest.getRemotePort());
	}
```

(checked on spring 5.3.20 and java 17)"
2592,1250889149,bclozel,103264,Closed with 3e41d7f
2593,1250931131,sashashura,93376818,"I respectfully disagree. By setting the default repository setting to Read-Only you potentially breaking the backport-bot step, because it may need the permission to create/close issues.
The repo or org level read only setting is good until you actually need write permissions."
2594,1250951174,bclozel,103264,Good catch!
2595,1251588932,LuisMarques99,44167982,"I agree, this is a very relevant feature"
2596,1251600502,jensdietrich,2435830,"thanks @sbrannen for accepting the change.   I have a significant number of other missing `@Nullable` annotations inferred by the [tool](https://github.com/jensdietrich/null-annotation-inference) we have developed (part of our research at Victoria University of Wellington, with support from Oracle Labs), and I wonder what the best way is to get this actioned. I could create more PRs, but I wonder what a good level of granularity would be as some of them affect many classes. I picked this one as a pilot. An alternative would be perhaps via an issue, where I could post the reports generated with details about the inferred annotations including supporting provenance, but committers would have to do the actual changes. BTW, the tool can also make changes to the source code. Any advice is highly appreciated. 


| module        | fields | params   | returns | all      |
|----------------|--------|----------|---------|----------|
| spring-beans   | 1 (1)  | 75 (47)  | 7 (7)   | 83 (51)  |
| spring-context | 1 (1)  | 50 (34)  | 16 (15) | 67 (47)  |
| spring-core    | 0 (0)  | 39 (22)  | 1 (1)   | 40 (23)  |
| spring-orm     | 0 (0)  | 17 (13)  | 4 (4)   | 21 (14)  |
| spring-oxm     | 0 (0)  | 3 (2)    | 2 (1)   | 5 (3)    |
| spring-web     | 19 (8) | 164 (76) | 25 (19) | 208 (97) |
| spring-webmvc  | 0 (0)  | 109 (59) | 44 (36) | 153 (89) |

*Missing @Nullable Annotations Detected by Module and Type of Annotated Element. The numbers in brackets are the numbers of classes affected. See [https://github.com/jensdietrich/null-annotation-inference](https://github.com/jensdietrich/null-annotation-inference) for the methodology used.*"
2597,1251726392,kouta-kun,44276987,"Sorry, just figured out that it the newest Spring Boot doesn't bring in spring.webmvc automatically. "
2598,1251728108,snicoll,490484,"> the newest Spring Boot doesn't bring in spring.webmvc automatically

I don't understand what you mean by that. There hasn't been any change in that area that I am aware of."
2599,1251746517,kouta-kun,44276987,"> > the newest Spring Boot doesn't bring in spring.webmvc automatically
> 
> I don't understand what you mean by that. There hasn't been any change in that area that I am aware of.

You're actually right, sorry. It was brought in as a transitive dependency of spring-ws-core which we removed during the same process as the Java 17 update :P"
2600,1251895919,gallyamb,5419623,Still pinging this issue in hope that anyone will take a look at this :)
2601,1251909106,AntonioMorales97,35844399,What is the status on this? This is a very standard use case and our current solution is basically a copy-paste of the `TransactionalOperatorImpl` where we avoid rollbacks for `ConcurrencyFailureException`.
2602,1252155251,sbrannen,104798,"@lrgrz, this issue was closed back in April.

If you think you have discovered a bug or regression, please create a new issue to address that.

Thanks"
2603,1252202203,snicoll,490484,Reopening to fix the imports of `org.springframework.aot.generate` in `org.springframework.core.test.tools`.
2604,1252226472,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
2605,1252330000,snicoll,490484,Fixed by 4625e92eb86899f8
2606,1252341111,abe0503,113435141,"Oh sorry, i figured it out. There was a deprecated classs which gets the file extension and use it as negotiation strategy for the content type."
2607,1252344411,bclozel,103264,"ok thanks for letting us know, I'm glad this is sorted out on your side."
2608,1252647136,bclozel,103264,"I've raised oracle/graal#5020 to address the lack of root resource resolution. I think this is a must have if we want to offer this feature in Framework. We don't need to wait for a fix in GraalVM though, as this issue would cover quite a lot of cases already."
2609,1253229057,meloning,50299857,"@sdeleuze 
Hello, 
Thank you for checking the issue and merging. I am very happy that finally it is deployed.
However, I am asking because I am not included as a contributor in the release notes.
If you're okay, please add me as a contributor to the release notes."
2610,1253289560,sdeleuze,141109,"After a team discussion, we have decided to try to move forward without public APIs for adding `native-image.properties` parameters:
 - Dependencies like Spring Portfolio project can add a `/META-INF/native-image/$groupId/$artifiactId/native-image.properties` file to contribute parameters like `--enable-http` or `--enable-https`.
 - End users can do the same or configure those parameters at Native Build Tools level

I will create follow up issue(s) to introduce related parameters at Framework level.

If a need comes to do conditional registration of `native-image` parameters we can easily reopen this issue and implement it. "
2611,1253324207,snicoll,490484,"courtesy of Google translate:

> When the bean injection method is AUTOWIRE_BY_TYPE, when processing the set method injection, if multiple beans are matched, why can't the matching be performed according to the name of the parameter?

Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug.

"
2612,1253369307,y0zg,6439757,"Does anyone know how to fix this on AWS EKS? 
I see the latest kernel version in AMIs - 5.4 https://github.com/awslabs/amazon-eks-ami/blob/master/CHANGELOG.md"
2613,1253586328,snicoll,490484,"> We need a way for the test code to plug in an ApplicationContextInitializer that acts as a signal that the convention based one should not be used. I

I don't think I've understood that but I believe that general entry points should be provided by framework so that custom framework should build upon them the same way Spring Boot does. I've also created #29181 to move/refactor the current `AotProcessor`."
2614,1253740261,pivotal-cla,16822967,"@katamotokosuke Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29184)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29184) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
2615,1253750244,pivotal-cla,16822967,@katamotokosuke Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29184)!
2616,1253753121,sdeleuze,141109,"Once possible, I may give it a try with `@PreCompute` annotation name and rename the feature accordingly.

We should also try to see if we can support immutable `Set<String>` field for `PathMatchingResourcePatternResolver#systemModuleNames` as described in #29183.

@simonbasle @violetagg That means we will likely remove Reactor field handling, I will reach you to discuss how we should handle that."
2617,1253755766,bclozel,103264,"Thanks but we're only using this dependency as an optional dependency, we're not shipping this dependency version with our POMs. As a result, compiling against this version doesn't mean Spring Framework is vulnerable in any way. We'll upgrade our optional dependencies in 5.3.x and merge forward in main."
2618,1253756589,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
2619,1253832603,Polve,1634436,"No, even after looking closely, I was able to elude the explanation: sorry and thank for the pointer.

Anyway I've a question: this seems to completely ignore the client settings overwriting the chosen settings, is this by design?

How to honor the client setting instead?"
2620,1253870357,rstoyanchev,401908,"Your exception handler is already active for `@RestController`, but in this case where `HttpMediaTypeNotSupported` is raised before a request is matched to a handler, the condition has to fail if strictly followed. You can choose to handle it unconditionally with a late ordered controller advice perhaps, if that works."
2621,1253883593,rstoyanchev,401908,"#10968 was a proposal to have `@ResponseHeader` on a `Map` or `HttpHeaders` method parameter, as an output container to which the controller method could add response headers. It was declined because there are alternatives like injecting `HttpEntity`, returning `ResponseEntity, or directly to the response.

You're proposing a method annotation, which is a little different. What I'm wondering is how useful would a static header value be? Also does the header really only apply to one controller or others as well? An `@ControllerAdvice` that implements `ResponseBodyAdvice`, might be a better fit, allowing re-use, dynamic values, and more cross-cutting. Have you considered that?

"
2622,1254126007,StefanRankovic,45215339,"Hi @rstoyanchev, thanks for the feedback. As for the first part, you're right, the #10968 is quite different to what I'm proposing. As for the second part, I had a look at `ResponseBodyAdvice`, and while I'm quite certain that it could do the trick, it would still require too much coding to achieve what, seems to me, is a fairly simple thing. 

>Also does the header really only apply to one controller or others as well?

This is the tricky part, in our use cases it usually only applies to a specific method, sometimes even dependent on the response status. Here is one example that might illustrate things better:
- Significant portion of our mobile users have disabled the automatic app updates
- As such, the outdated apps can only partially comprehend the updated resources they get from backend, and are missing out on the new stuff
- We don't want to force users to upgrade the app, **unless** they hit the specific endpoints, in which case the app should suggest upgrade to users (_minimal supported version for the endpoint is delivered via custom header, e.g. x-min-app-version: 1.1.0, note that header value is static_)
- This header might be e.g. set on POST endpoint of a resource, but not on GET, or it might only be set when specific 4xx exception is thrown, it really depends on case-by-case basis

To be clear, right now we're using a `OncePerRequestFilter` to set this header on specific endpoints, so it's not that there is no way to achieve this, it's just that `@ResponseHeader` on method/class/exception as described in the OP would be a welcome convenience. Also, our product is running on a microservice architecture, so having less things to type and configure per microservice is always better."
2623,1254603607,mazhewei,12460469,"Same issue.
Here is minimize steps:
1. create empty springboot project using spring initializr(in IDEA)
    Project SDK: openjdk 17.0.3
    Java: 17
    SpringBoot Version 2.7.3
    SpringFramework Version 5.3.22
2. create two entity class, Person.class / PersonVO.class for example
```java
public class Person {
    String name;
    Integer age;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getAge() {
        return age;
    }

    public void setAge(Integer age) {
        this.age = age;
    }
}
```
```java
import java.util.List;

public class PersonVO extends Person {
    List<String> hobbies;

    public List<String> getHobbies() {
        return hobbies;
    }

    public void setHobbies(List<String> hobbies) {
        this.hobbies = hobbies;
    }
}
```
3. use BeanCopier
```java
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cglib.beans.BeanCopier;

@SpringBootApplication
public class BeanCopierDemoApplication {
    private static final Log logger = LogFactory.getLog(BeanCopierDemoApplication.class);

    public static void main(String[] args) {
        PersonVO personVO = testBeanCopy();
        logger.info(personVO);
        SpringApplication.run(BeanCopierDemoApplication.class, args);
    }

    public static PersonVO testBeanCopy() {
        Person person = new Person();
        person.setName(""nico"");
        person.setAge(18);
        PersonVO personVO = new PersonVO();
        final BeanCopier beanCopier = BeanCopier.create(Person.class, PersonVO.class, false);
        beanCopier.copy(person, personVO, null);
        personVO.setHobbies(null);
        return personVO;
    }
}
```
4. start springboot application and error occurred
```log
Exception in thread ""main"" org.springframework.cglib.core.CodeGenerationException: java.lang.reflect.InaccessibleObjectException-->Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) throws java.lang.ClassFormatError accessible: module java.base does not ""opens java.lang"" to unnamed module @7920ba90
	at org.springframework.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:598)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:363)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.beans.BeanCopier$Generator.create(BeanCopier.java:98)
	at org.springframework.cglib.beans.BeanCopier.create(BeanCopier.java:52)
	at com.example.beancopierdemo.BeanCopierDemoApplication.testBeanCopy(BeanCopierDemoApplication.java:24)
	at com.example.beancopierdemo.BeanCopierDemoApplication.main(BeanCopierDemoApplication.java:14)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) throws java.lang.ClassFormatError accessible: module java.base does not ""opens java.lang"" to unnamed module @7920ba90
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Method.checkCanSetAccessible(Method.java:199)
	at java.base/java.lang.reflect.Method.setAccessible(Method.java:193)
	at org.springframework.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:552)
	... 13 more
```


In my case, to resolve it, just add vm options ""--add-opens java.base/java.lang=ALL-UNNAMED""
![图片](https://user-images.githubusercontent.com/12460469/191676960-61a6a016-4ff6-4eaf-8b0d-c7b1630bbd02.png)

So i think maybe it's a compatibility issue with CGLIB?
If there are other solutions or information, that will be very grateful."
2624,1254616313,snicoll,490484,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
2625,1254893751,alxxyz,75482780,Please find the sample of the issue https://github.com/alxxyz/spring-request-part-demo
2626,1254942864,snicoll,490484,"@jhoeller and I brainstormed this morning and we believe that offering an option where AOT does not create a split package should be added. We're even considering this to be the default, with an opt-in optimization to the current behavior.

We like that AOT creates a structure that matches the structure of the original configuration. With Spring Boot in particular, it is very easy to see which auto-configurations were processed. We think we should keep this, by adding this infrastructure under the application's package name. Rather than generating code in `org.springframework.boot.web.servlet.SomeAutoConfiguration` it could be `com.example.myapp.aot.org.springframework.boot.web.servlet.SomeAutoConfiguration` or even `com.example.myapp.aot.boot.web.servlet.SomeAutoConfiguration` where `com.example.myapp` is the package of the application.

Looking at the API, we've already quite a good abstraction with `ClassNameGenerator` that we can extend. A first step would be to be able to manage package spaces that do not exist. I've started to work on this."
2627,1255051674,BarracudaX,39597353,"I had similar problem and exception when I tried to use spring data jpa repositories with validation on, where spring data jpa repositories called persistent listener that checked every method for validation metadata and threw the ArrayIndexOutOfBoundException when tried to find validation metadata for extensions on entity class that used List<T> as a receiver."
2628,1255451436,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
2629,1255790052,sdeleuze,141109,"Looks good, but please let's have data points on the RSS footprint impact and a team discussion before deciding if we switch the default or not."
2630,1255925061,rmueller83,2698076,"This change causes a big headache for us. We have our own `HandlerInterceptor` for setting CORS headers.
Previously, our interceptor added the headers and the `DefaultCorsProcessor` running afterwards did not do anything because it contains
```
		if (response.getHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN) != null) {
			logger.trace(""Skip: response already contains \""Access-Control-Allow-Origin\"""");
			return true;
		}

```
Now there is no chance for us to put our interceptor before the default one. :-("
2631,1255967833,sdeleuze,141109,"Sure, [done](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.23) not sure why that was missed. Thanks for your contribution."
2632,1255998126,snicoll,490484,"Some WIP is here https://github.com/snicoll/spring-framework/tree/gh-29019 - I can see two problems so far:

* Creating a class for a Feature does not work as it's using the class of the component. We probably need to change `ClassNameGenerator` to handle both strategies somewho.
* The generated code does not compile as `AccessVisibility` is very basic."
2633,1256043251,bclozel,103264,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
2634,1256096093,sdeleuze,141109,"Great, thanks, I will have a look shortly."
2635,1256107739,sdeleuze,141109,"The use case seems valid to me, and I have don't have a better proposal for the name, we should just make sure to annotate correctly the parameter:
```java
public static <T> ResponseEntity<T> ofNullable(@Nullable T body) {
  if (body == null) {
    return notFound().build();
  }
  return ResponseEntity.ok(body);
}
```
@poutsma @rstoyanchev Are you ok to introduce this variant?"
2636,1256109650,sdeleuze,141109,Looks like something we should fix even in 5.3.x.
2637,1256129432,sdeleuze,141109,"Reading #23282 and #23486 we could consider it is expected, but I am wondering if we should differentiate optional Spring dependencies like here `spring-context` which could potentially make sense to declare in the published `pom.xml` from external dependencies like the use cases described in #23234 where we should not as we have multiple confirmation this is a dead end. Any thoughts @bclozel ?"
2638,1256142192,sdeleuze,141109,@mp911de Could you please review the latest version of this PR and confirm (or not) you are ok for merging it (I will also have a deeper look after your confirmation)?
2639,1256144415,sdeleuze,141109,I have asked a feedback on the latest version of the PR [here](https://github.com/spring-projects/spring-framework/pull/27572#issuecomment-1256142192) and will have a look after Mark feedback.
2640,1256152840,sdeleuze,141109,Could you please share a failing test case?
2641,1256214918,mp911de,1035015,"This issue is related to #28968, I'll have another look as this PR contains already fixes that I started preparing for #28968"
2642,1256252975,bclozel,103264,"@sdeleuze I don't think this issue is related to the publishing of optional dependencies. This would not solve the point made by @Andrius-B as they still would get the compilation error in their project.

@Andrius-B spring-web ships lots of support for optional dependencies and we can't add them explicitly for obvious reasons. The validation and binding features from spring-web are used in the context of spring-webmvc or spring-webflux, and they both have a mandatory dependency on spring-context. One would argue that those features are not mandatory for using, for example, `RestTemplate`?

Could you elaborate on the original use case you were working on when encountering this problem?"
2643,1256297667,Evenprime,616090,"Sure. I've uploaded a minimalistic example to github: https://github.com/Evenprime/springtestcase

It contains only of an empty application and a test case that calls the actuator health endpoint. This results in the following exception stacktrace:

```
jakarta.servlet.ServletException: Request processing failed: java.lang.IllegalArgumentException: typeToken should be an instance of Class<?>, GenericArray, ParametrizedType or WildcardType, but actual type is org.springframework.core.ResolvableType$EmptyType@b9b97ad class org.springframework.core.ResolvableType$EmptyType (Kotlin reflection is not available)
	at app//org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at app//org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:895)
	at app//jakarta.servlet.http.HttpServlet.service(HttpServlet.java:668)
	at app//org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:880)
	at app//org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:72)
	at app//jakarta.servlet.http.HttpServlet.service(HttpServlet.java:777)
	at app//org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:165)
	at app//org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at app//org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at app//org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at app//org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at app//org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at app//org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at app//org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at app//org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:94)
	at app//org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at app//org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at app//org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at app//org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at app//org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at app//org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:201)
	at app//org.springframework.test.web.servlet.MockHttpServletRequestDsl.perform$spring_test(MockHttpServletRequestDsl.kt:207)
	at app//org.springframework.test.web.servlet.MockMvcExtensionsKt.get(MockMvcExtensions.kt:32)
	at app//org.springframework.test.web.servlet.MockMvcExtensionsKt.get$default(MockMvcExtensions.kt:30)
	at app//com.springwebtestcase.ActuatorTest.The health endpoint can be accessed(ActuatorTest.kt:20)
	at java.base@17.0.4/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base@17.0.4/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base@17.0.4/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base@17.0.4/java.lang.reflect.Method.invoke(Method.java:568)
	at app//org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
	at app//org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@17.0.4/java.util.ArrayList.forEach(ArrayList.java:1511)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@17.0.4/java.util.ArrayList.forEach(ArrayList.java:1511)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:99)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:79)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:75)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
	at java.base@17.0.4/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base@17.0.4/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base@17.0.4/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base@17.0.4/java.lang.reflect.Method.invoke(Method.java:568)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
	at jdk.proxy1/jdk.proxy1.$Proxy2.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
Caused by: java.lang.IllegalArgumentException: typeToken should be an instance of Class<?>, GenericArray, ParametrizedType or WildcardType, but actual type is org.springframework.core.ResolvableType$EmptyType@b9b97ad class org.springframework.core.ResolvableType$EmptyType (Kotlin reflection is not available)
	at kotlinx.serialization.SerializersKt__SerializersJvmKt.serializerByJavaTypeImpl$SerializersKt__SerializersJvmKt(SerializersJvm.kt:127)
	at kotlinx.serialization.SerializersKt__SerializersJvmKt.serializerOrNull(SerializersJvm.kt:76)
	at kotlinx.serialization.SerializersKt.serializerOrNull(Unknown Source)
	at kotlinx.serialization.SerializersKt__SerializersJvmKt.serializerOrNull(SerializersJvm.kt:43)
	at kotlinx.serialization.SerializersKt.serializerOrNull(Unknown Source)
	at org.springframework.http.converter.json.KotlinSerializationJsonHttpMessageConverter.serializer(KotlinSerializationJsonHttpMessageConverter.java:176)
	at org.springframework.http.converter.json.KotlinSerializationJsonHttpMessageConverter.canWrite(KotlinSerializationJsonHttpMessageConverter.java:99)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:286)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:238)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:135)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:898)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:810)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1075)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:968)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1003)
	... 109 more
```

The same can be observed when starting the application and querying the endpoint /actuator/health directly:

```
2022-09-23T16:32:59.123+02:00 ERROR 5291 --- [nio-8080-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.IllegalArgumentException: typeToken should be an instance of Class<?>, GenericArray, ParametrizedType or WildcardType, but actual type is org.springframework.core.ResolvableType$EmptyType@4e6ab5bc class org.springframework.core.ResolvableType$EmptyType (Kotlin reflection is not available)] with root cause

java.lang.IllegalArgumentException: typeToken should be an instance of Class<?>, GenericArray, ParametrizedType or WildcardType, but actual type is org.springframework.core.ResolvableType$EmptyType@4e6ab5bc class org.springframework.core.ResolvableType$EmptyType (Kotlin reflection is not available)
	at kotlinx.serialization.SerializersKt__SerializersJvmKt.serializerByJavaTypeImpl$SerializersKt__SerializersJvmKt(SerializersJvm.kt:127) ~[kotlinx-serialization-core-jvm-1.4.0.jar:1.4.0]
	at kotlinx.serialization.SerializersKt__SerializersJvmKt.serializerOrNull(SerializersJvm.kt:76) ~[kotlinx-serialization-core-jvm-1.4.0.jar:1.4.0]
	at kotlinx.serialization.SerializersKt.serializerOrNull(Unknown Source) ~[kotlinx-serialization-core-jvm-1.4.0.jar:1.4.0]
	at kotlinx.serialization.SerializersKt__SerializersJvmKt.serializerOrNull(SerializersJvm.kt:43) ~[kotlinx-serialization-core-jvm-1.4.0.jar:1.4.0]
	at kotlinx.serialization.SerializersKt.serializerOrNull(Unknown Source) ~[kotlinx-serialization-core-jvm-1.4.0.jar:1.4.0]
	at org.springframework.http.converter.json.KotlinSerializationJsonHttpMessageConverter.serializer(KotlinSerializationJsonHttpMessageConverter.java:176) ~[spring-web-6.0.0-M6.jar:6.0.0-M6]
	at org.springframework.http.converter.json.KotlinSerializationJsonHttpMessageConverter.canWrite(KotlinSerializationJsonHttpMessageConverter.java:99) ~[spring-web-6.0.0-M6.jar:6.0.0-M6]
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:286) ~[spring-webmvc-6.0.0-M6.jar:6.0.0-M6]
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:238) ~[spring-webmvc-6.0.0-M6.jar:6.0.0-M6]
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78) ~[spring-web-6.0.0-M6.jar:6.0.0-M6]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:135) ~[spring-webmvc-6.0.0-M6.jar:6.0.0-M6]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:898) ~[spring-webmvc-6.0.0-M6.jar:6.0.0-M6]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:810) ~[spring-webmvc-6.0.0-M6.jar:6.0.0-M6]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.0.0-M6.jar:6.0.0-M6]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1075) ~[spring-webmvc-6.0.0-M6.jar:6.0.0-M6]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:968) ~[spring-webmvc-6.0.0-M6.jar:6.0.0-M6]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1003) ~[spring-webmvc-6.0.0-M6.jar:6.0.0-M6]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:895) ~[spring-webmvc-6.0.0-M6.jar:6.0.0-M6]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:668) ~[tomcat-embed-core-10.0.23.jar:5.0.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:880) ~[spring-webmvc-6.0.0-M6.jar:6.0.0-M6]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:777) ~[tomcat-embed-core-10.0.23.jar:5.0.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:223) ~[tomcat-embed-core-10.0.23.jar:10.0.23]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158) ~[tomcat-embed-core-10.0.23.jar:10.0.23]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-10.0.23.jar:10.0.23]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185) ~[tomcat-embed-core-10.0.23.jar:10.0.23]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158) ~[tomcat-embed-core-10.0.23.jar:10.0.23]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.0.0-M6.jar:6.0.0-M6]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.0.0-M6.jar:6.0.0-M6]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185) ~[tomcat-embed-core-10.0.23.jar:10.0.23]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158) ~[tomcat-embed-core-10.0.23.jar:10.0.23]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.0.0-M6.jar:6.0.0-M6]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.0.0-M6.jar:6.0.0-M6]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185) ~[tomcat-embed-core-10.0.23.jar:10.0.23]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158) ~[tomcat-embed-core-10.0.23.jar:10.0.23]
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:94) ~[spring-boot-actuator-3.0.0-M5.jar:3.0.0-M5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.0.0-M6.jar:6.0.0-M6]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185) ~[tomcat-embed-core-10.0.23.jar:10.0.23]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158) ~[tomcat-embed-core-10.0.23.jar:10.0.23]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.0.0-M6.jar:6.0.0-M6]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.0.0-M6.jar:6.0.0-M6]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185) ~[tomcat-embed-core-10.0.23.jar:10.0.23]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158) ~[tomcat-embed-core-10.0.23.jar:10.0.23]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197) ~[tomcat-embed-core-10.0.23.jar:10.0.23]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97) ~[tomcat-embed-core-10.0.23.jar:10.0.23]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542) ~[tomcat-embed-core-10.0.23.jar:10.0.23]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:119) ~[tomcat-embed-core-10.0.23.jar:10.0.23]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) ~[tomcat-embed-core-10.0.23.jar:10.0.23]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78) ~[tomcat-embed-core-10.0.23.jar:10.0.23]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:356) ~[tomcat-embed-core-10.0.23.jar:10.0.23]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399) ~[tomcat-embed-core-10.0.23.jar:10.0.23]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) ~[tomcat-embed-core-10.0.23.jar:10.0.23]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:867) ~[tomcat-embed-core-10.0.23.jar:10.0.23]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1762) ~[tomcat-embed-core-10.0.23.jar:10.0.23]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) ~[tomcat-embed-core-10.0.23.jar:10.0.23]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-embed-core-10.0.23.jar:10.0.23]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.0.23.jar:10.0.23]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-embed-core-10.0.23.jar:10.0.23]
	at java.base/java.lang.Thread.run(Thread.java:833) ~[na:na]
```

Downgrading to Spring Boot version 3.0.0-M4 (and therefore Spring Web 6.0.0-M5) fixes the issue, the endpoint properly returns Status 200 ""UP"" instead of throwing an exception and returning Status 500."
2644,1256307284,snicoll,490484,"Unfortunately, the default code fragments assume that if an privileged access is required, the generated code is in the package where the privileged member is located. We need to improve that before considering what I've started as an option."
2645,1256331046,SFBorland,14253437,@simplyanything were you able to find a resolution/work-around? (other than completely disabling Netty logging).
2646,1256373515,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
2647,1256390090,rstoyanchev,401908,"I've gone with a slightly different solution. As there was an existing protected customizeWrite method, I've passed the Reactor `ContextView` as one of the hints in the hints input map. This works well also with the fact that a Reactor context isn't always available given the synchronous encode and decode methods that can be used."
2648,1256885999,bclozel,103264,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug.

In this case you can consider this as a IPVS question (""how to change the timeout?"") or consider retry patterns like resilience4J support."
2649,1256967098,sbrannen,104798,"Hi @Huaichen2021,

Thanks for reporting the issue.

In order to help us analyze the behavior you're reporting, please provide a minimal example application that reproduces the behavior -- for example, as a GitHub repository that we can check out or a ZIP file, so that we can run the code.

Thanks"
2650,1256982192,sbrannen,104798,"@rmueller83, _this_ issue was closed almost 2.5 years ago.

Please [open a new issue](https://github.com/spring-projects/spring-framework/issues/new/choose) if you'd like to discuss the topic further."
2651,1256985723,gourav,37252657,"Hello @rstoyanchev & @wilkinsona 
I encountered block hound exception today with latest version of Spring Boot. I don't think this is fixed yet.

I think [changeSessionId](https://github.com/spring-projects/spring-framework/blob/57067f58e1bcdd70506a6f2ada60eefabc107fda/spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java#L231) is still blocking.

Please consider stack trace below.
```

reactor.blockhound.BlockingOperationError: Blocking call! java.io.FileInputStream#readBytes
	at java.io.FileInputStream.readBytes(FileInputStream.java) ~[?:?]
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.authentication.AuthenticationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP POST ""/logout"" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at java.io.FileInputStream.readBytes(FileInputStream.java) ~[?:?]
		at java.io.FileInputStream.read(FileInputStream.java:276) ~[?:?]
		at java.io.FilterInputStream.read(FilterInputStream.java:132) ~[?:?]
		at sun.security.provider.NativePRNG$RandomIO.readFully(NativePRNG.java:425) ~[?:?]
		at sun.security.provider.NativePRNG$RandomIO.ensureBufferValid(NativePRNG.java:528) ~[?:?]
		at sun.security.provider.NativePRNG$RandomIO.implNextBytes(NativePRNG.java:547) ~[?:?]
		at sun.security.provider.NativePRNG.engineNextBytes(NativePRNG.java:221) ~[?:?]
		at java.security.SecureRandom.nextBytes(SecureRandom.java:758) ~[?:?]
		at java.util.UUID.randomUUID(UUID.java:151) ~[?:?]
		at org.springframework.util.JdkIdGenerator.generateId(JdkIdGenerator.java:31) ~[spring-core-5.3.22.jar:5.3.22]
		at org.springframework.web.server.session.InMemoryWebSessionStore$InMemoryWebSession.changeSessionId(InMemoryWebSessionStore.java:234) ~[spring-web-5.3.22.jar:5.3.22]
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:125) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoCacheTime.subscribeOrReturn(MonoCacheTime.java:151) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.Mono.subscribe(Mono.java:4382) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:263) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:157) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:151) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoCacheTime.subscribeOrReturn(MonoCacheTime.java:151) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:57) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:157) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2398) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:110) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoCurrentContext.subscribe(MonoCurrentContext.java:36) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:157) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.tryEmitScalar(FluxFlatMap.java:488) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onNext(FluxFlatMap.java:421) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:210) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:272) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:230) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:371) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:165) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:87) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:157) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:109) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1817) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:431) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:219) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:165) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:87) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoCacheTime.subscribeOrReturn(MonoCacheTime.java:143) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:57) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.Mono.subscribe(Mono.java:4397) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:263) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.Mono.subscribe(Mono.java:4397) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:181) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2400) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2194) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2068) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.Mono.subscribe(Mono.java:4397) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:846) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:608) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:588) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:465) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:294) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:230) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:371) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:165) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:87) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:157) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoCollectList$MonoCollectListSubscriber.onComplete(MonoCollectList.java:129) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxIterable$IterableSubscription.fastPath(FluxIterable.java:362) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:227) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoCollectList$MonoCollectListSubscriber.onSubscribe(MonoCollectList.java:80) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:165) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:87) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoFromFluxOperator.subscribe(MonoFromFluxOperator.java:81) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:157) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxFilterWhen$FluxFilterWhenSubscriber.drain(FluxFilterWhen.java:301) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxFilterWhen$FluxFilterWhenSubscriber.onNext(FluxFilterWhen.java:140) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:272) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:230) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxFilterWhen$FluxFilterWhenSubscriber.onSubscribe(FluxFilterWhen.java:200) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:165) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:87) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.Mono.subscribe(Mono.java:4397) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:263) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55) ~[reactor-core-3.4.22.jar:3.4.22]
		at reactor.netty.http.server.HttpServer$HttpServerHandle.onStateChange(HttpServer.java:967) ~[reactor-netty-http-1.0.22.jar:1.0.22]
		at reactor.netty.ReactorNetty$CompositeConnectionObserver.onStateChange(ReactorNetty.java:677) ~[reactor-netty-core-1.0.22.jar:1.0.22]
		at reactor.netty.transport.ServerTransport$ChildObserver.onStateChange(ServerTransport.java:478) ~[reactor-netty-core-1.0.22.jar:1.0.22]
		at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:570) ~[reactor-netty-http-1.0.22.jar:1.0.22]
		at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:93) ~[reactor-netty-core-1.0.22.jar:1.0.22]
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379) ~[netty-transport-4.1.79.Final.jar:4.1.79.Final]
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365) ~[netty-transport-4.1.79.Final.jar:4.1.79.Final]
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357) ~[netty-transport-4.1.79.Final.jar:4.1.79.Final]
		at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:214) ~[reactor-netty-http-1.0.22.jar:1.0.22]
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379) ~[netty-transport-4.1.79.Final.jar:4.1.79.Final]
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365) ~[netty-transport-4.1.79.Final.jar:4.1.79.Final]
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357) ~[netty-transport-4.1.79.Final.jar:4.1.79.Final]
		at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436) ~[netty-transport-4.1.79.Final.jar:4.1.79.Final]
		at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:327) ~[netty-codec-4.1.79.Final.jar:4.1.79.Final]
		at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:299) ~[netty-codec-4.1.79.Final.jar:4.1.79.Final]
		at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251) ~[netty-transport-4.1.79.Final.jar:4.1.79.Final]
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379) ~[netty-transport-4.1.79.Final.jar:4.1.79.Final]
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365) ~[netty-transport-4.1.79.Final.jar:4.1.79.Final]
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357) ~[netty-transport-4.1.79.Final.jar:4.1.79.Final]
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410) ~[netty-transport-4.1.79.Final.jar:4.1.79.Final]
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379) ~[netty-transport-4.1.79.Final.jar:4.1.79.Final]
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365) ~[netty-transport-4.1.79.Final.jar:4.1.79.Final]
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919) ~[netty-transport-4.1.79.Final.jar:4.1.79.Final]
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166) ~[netty-transport-4.1.79.Final.jar:4.1.79.Final]
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:722) ~[netty-transport-4.1.79.Final.jar:4.1.79.Final]
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:658) ~[netty-transport-4.1.79.Final.jar:4.1.79.Final]
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:584) ~[netty-transport-4.1.79.Final.jar:4.1.79.Final]
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:496) ~[netty-transport-4.1.79.Final.jar:4.1.79.Final]
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997) ~[netty-common-4.1.79.Final.jar:4.1.79.Final]
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74) ~[netty-common-4.1.79.Final.jar:4.1.79.Final]
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) ~[netty-common-4.1.79.Final.jar:4.1.79.Final]
		at java.lang.Thread.run(Thread.java:833) ~[?:?]

```

If there is anything else required from my end, please do let me know."
2652,1257067981,tomaszbadon,76441634,"Hi there,

What is happening with this Bug?

I haven't seen any PR for this, but I encountered this issue in my app.

Thank you a lot.

BR,
"
2653,1257236994,sbrannen,104798,"While working on #29163, I have encountered the following error.

```
    => com.oracle.svm.core.jdk.UnsupportedFeatureError: JRT file system is disabled
       com.oracle.svm.core.util.VMError.unsupportedFeature(VMError.java:89)
       jdk.internal.module.SystemModuleFinders$SystemImage.reader(SystemModuleFinders.java:139)
       jdk.internal.module.SystemModuleFinders$ModuleContentSpliterator.<init>(SystemModuleFinders.java:527)
       jdk.internal.module.SystemModuleFinders$SystemModuleReader.list(SystemModuleFinders.java:502)
       org.springframework.core.io.support.PathMatchingResourcePatternResolver.lambda$findAllModulePathResources$6(PathMatchingResourcePatternResolver.java:819)
```

In light of that, I am reopening this issue and co-assigning it to me since I'll work on a fix."
2654,1257510790,amolksagar,19744503,"hi @dineshkumardidugu 
Did you find a solution for this issue?"
2655,1257528522,alxxyz,75482780,"@bclozel @sdeleuze 
So, can this ticket be converted to enhancement?"
2656,1257559407,snicoll,490484,@inabajunmr thank you for making your first contribution to Spring Framework.
2657,1257560952,snicoll,490484,Thanks again @izeye!
2658,1257573854,bclozel,103264,"I think the answer on StackOverflow explains it all, the values are split across parts while `@RequestPart` is meant for accessing a single part. I don't think this qualifies as an enhancement request - how should framework deserialize parts in a non-blocking fashion when all of them are required?

Assuming you can't change what the client is sending, you could use `public String handle(@RequestBody Flux<Part> parts) {` as a method signature and `collect` all values in a single collection."
2659,1257577379,snicoll,490484,"Thanks for the PR but we prefer to avoid depending on too many external plugins in our build, especially those that are flagged as experimental."
2660,1257645468,snicoll,490484,"Unfortunately the CLA has not been signed so there's nothing we can do. @teddyjoo if you're still around and you're willing to sign the CLA, please add a comment here and we can reopen."
2661,1257647809,bclozel,103264,"Sorry we didn't get to this earlier, but we now have [dedicated support for this in Spring Framework](https://docs.spring.io/spring-framework/docs/6.0.0-SNAPSHOT/reference/html/integration.html#rest-http-interface). I'm closing this issue as a result.

Thanks!"
2662,1257650667,sdeleuze,141109,Already fixed via #28876.
2663,1257694956,poutsma,330665,Sounds good to me.
2664,1257724429,bclozel,103264,"Spring Framework has many optional dependencies and maintaining a `verification-metadata.xml` file that's over 330K big is not really manageable. In the meantime we've seen that sigstore (and it seems you're contributing there) is trying a different approach.

We're generally interested in this theme but we don't think the current approach will fit our project. We'll keep an eye on alternate solutions. Thanks!"
2665,1257728214,bclozel,103264,"Thanks, but we don't want to expose more of the API unless there is a strong use case behind this. So far we haven't received much demand for this, so we'll close this PR.

If you still feel strongly about this, please create a new issue stating what you're trying to achieve so we can take it from there.

Thanks!"
2666,1257730874,bclozel,103264,"I don't think we should add those variants as it will make IDE auto-completion noisy.
Thanks!"
2667,1257734470,snicoll,490484,@x-x-z can you share how this is a fix for the issue you've linked?
2668,1257743065,vlsi,213894,"@bclozel , sigstore won't be much different by the way.

In a nutshell:
* PGP: ""we maintain a list of PGP keys and checksums we trust. The PGP key id for each dependency is taken from the official website""
* Sigstore: ""we trust logback if the artifact was built with GitHub Action release.yaml running in github.com/qos-ch/logback repository""

In both cases, the amount of metadata is pretty much the same, and the main difference would be that ""PGP key ids are unreadable"" while ""GitHub Action release.yaml running in github.com/qos-ch/logback repository"" would be pretty-much understandable by humans."
2669,1257749417,bclozel,103264,"There hasn't been much demand for this, so I'm declining this PR.
On top of that, I don't think that using `StopWatch` for performance testing is the right call, as it's limited in many ways. Tools like JMH fixes all those issues and more."
2670,1257754970,snicoll,490484,"Sorry but I don't understand the problem you're describing and, without a failing test case that shows what it is trying to solve, we can't accept the change. I am going to close this now but we can reconsider if you provide the additional context."
2671,1257758287,bclozel,103264,I think this is the expected behavior and the application should use instead the `classpath*:/templates/` pattern to express that resources should be resolved from multiple classpath locations. I've closed #24930 as a result.
2672,1257758499,bclozel,103264,Closing because of https://github.com/spring-projects/spring-framework/issues/24929#issuecomment-1257758287
2673,1257761033,snicoll,490484,"> When @ConditionalOn.. annotations are used on @Bean methods with the same name within one configuration class, the outcome depends on the declaration order of the methods.

I am afraid that it is the expected behavior. Conditions are evaluated in order and are linked to their bean definitions. Also the configuration above is invalid as you're trying to register the same bean twice. Not two variants of the same bean with condition evaluation. Literally the same bean as they share the same identifier."
2674,1257764878,snicoll,490484,Thanks for the PR but I don't think that we should be merging this. This would ignore the original problem that the same bean definition is registered twice. See https://github.com/spring-projects/spring-framework/issues/23307#issuecomment-1257761033
2675,1257767350,snicoll,490484,#22511 has been resolved so I am going to close this as a dupe. Sorry we didn't get to this sooner @Antoniossss.
2676,1257814521,bclozel,103264,There isn't much demand for this and we tend to not introduce variants unless there is a clear use case for utility methods within Spring Framework. I'm closing this as a result.
2677,1257814713,bclozel,103264,There isn't much demand for this and we tend to not introduce variants unless there is a clear use case for utility methods within Spring Framework. I'm closing this as a result.
2678,1257872893,snicoll,490484,@Syquel thank you for making your first contribution to Spring Framework.
2679,1257874891,snicoll,490484,"Thanks for the PR but we prefer to introduce parsing of a `Duration` as a core support that can be leveraged elsewhere, see #22474"
2680,1257881159,snicoll,490484,"Thanks for the PR and the proposal. None of the Aware callback APIs have a contract that the callback is only called once. What can be seen as an optimization is more complex than this, with other code path where the code you've removed would be the only time where we get a chance to set the `BeanFactory`."
2681,1257886112,snicoll,490484,Sorry for the late review. I can see you've moved this somewhere else and I don't think we want to support the additional complexity so I am going to close this now.
2682,1257888081,snicoll,490484,@chenqimiao thanks for the PR but we'd like to keep this as is. Please also review [this note](https://github.com/spring-projects/spring-framework/blob/2c0a9e0e30d5b18734077abf37e34d4eb1e49d4d/spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java#L68-L74) on the class you've modified.
2683,1257910182,bclozel,103264,"Sorry it took so long for us to review this PR.

`AbstractRequestLoggingFilter` is only about request logging and this should remain the case. If response is interesting to your case, I'd suggest extending this contract with response-related methods. This PR mixes response information with the request logging information, I think this goes against the design of this class. I'm closing this PR as a result.

Thanks!"
2684,1257969240,snicoll,490484,Let's close this one for now. We can reopen if necessary.
2685,1257973770,snicoll,490484,Also blocked by #28875
2686,1257991452,snicoll,490484,"Thanks for the PR but we're not keen to expose APIs like that, see https://github.com/spring-projects/spring-framework/pull/23766#issuecomment-1257728214"
2687,1257996483,pivotal-cla,16822967,"@handy-git Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29204)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29204) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
2688,1257998046,snicoll,490484,@handy-git thanks for the proposal but the copyright is changed once we effectively update the file.
2689,1258001810,poutsma,330665,"Thanks for submitting a PR, our apologies for taking so long to resolve it."
2690,1258131823,poutsma,330665,"The `MappingJackson2HttpMessageConverter` is perfectly capable of reading (or writing) a byte array. For instance, this works fine:

```java
byte[] bytes = ""Foo Bar"".getBytes(StandardCharsets.UTF_8);
ByteArrayOutputStream bos = new ByteArrayOutputStream();
this.converter.write(bytes, MediaType.APPLICATION_JSON, new HttpOutputMessage() {
	@Override
	public OutputStream getBody() throws IOException {
		return bos;
	}

	@Override
	public HttpHeaders getHeaders() {
		return new HttpHeaders();
	}
});

System.out.println(bos.toString(StandardCharsets.UTF_8));
```
The above prints out: `""Rm9vIEJhcg==""`, which is the BASE64 representation of ""Foo Bar"". Note that there is no wrapper JSON object, just BASE64.

If you want to handle a JSON response where the byte array is part of object, under the name `bytes` like you posted in the screenshot, then you have to read the request into a request object, something like: 

```java
private static class MyBytes {

	private byte[] bytes;

	public byte[] getBytes() {
		return this.bytes;
	}

	public void setBytes(byte[] bytes) {
		this.bytes = bytes;
	}
}
```

In short: the JSON you POST does not match the `@RequestBody` annotated parameter.
"
2691,1258135331,bclozel,103264,"I don't think this is really an optimization. This code path can be hot in SpEL and I don't think we should introduce Map lookups for readability purposes. This also doesn't remove any duplication at all.

I'm closing this as a result."
2692,1258138666,snicoll,490484,"@dowenliu-xyz thank you for the PR and sorry it took so long to review it. In the meantime, `PropertiesBeanDefinitionReader` is deprecated so we won't make any further change to it."
2693,1258163450,snicoll,490484,"> ClassNameGenerator can currently only be created with a required non-null Class<?> defaultTarget.

I find this bit confusing. That part is not a problem per se, it's rather that the current `generatedFiles` does not offer a way to include a `GeneratedClass` with a dedicated name. Looking at the code, the above wouldn't matter if `GeneratedClasses` had a way to ""register"" a new class based on a `ClassName`. We have `getOrCreate` as well as `add` to take into consideration. "
2694,1258253403,schaa0,5368734,"Additional information about this issue:

Method overloads of `AnnotatedElementUtils.getMergedRepeatableAnnotations()` use two different types of `RepeatableContainers`:
- `ExplicitRepeatableContainers`
- `StandardRepeatableContainers`
 
`ExplicitRepeatableContainers` is used to extract repeatable annotations from the annotated element based on the provided container type. Since the provided container type is `SqlGroup` but multiple `As400Sql` annotations are composed into `As400SqlGroup`, the types don't match and the `As400Sql` annotations on `DoubleAnnotatedClass` are skipped.
This happens in the failing test case `getMergedRepeatableAnnotations_shouldReturnTwoSql_forDoubleAnnotatedClass`.

Once the annotations are determined from the annotated element, further processing of the annotation hierarchy
will use `StandardRepeatableContainers` which extracts repeatable annotations from _any_ container type which are found as meta annotation.
That's why test case `getMergedRepeatableAnnotations_shouldReturnTwoSql_forMetaDoubleAnnotatedClass` passes.

Using `StandardRepeatableContainers` for both steps gives the expected result, but requires modification in `AnnotatedElementUtils`:

```java
private static MergedAnnotations getRepeatableAnnotations(AnnotatedElement element, @Nullable Class<? extends Annotation> containerType, Class<? extends Annotation> annotationType) {
    // Instead of: RepeatableContainers.of(annotationType, containerType);
    RepeatableContainers repeatableContainers = RepeatableContainers.standardRepeatables();
    return MergedAnnotations.from(element, SearchStrategy.INHERITED_ANNOTATIONS, repeatableContainers);
}
```

As an alternative, it's possible to define a separate utility method since the required API components are public. The following is an example using the _get_ semantics.

```java
class AnnotatedElementUtilsExt {

    static <A extends Annotation> Set<A> getAllMergedRepeatableAnnotations(AnnotatedElement element, Class<A> annotationType) {
        assertIsRepeatable(annotationType);
        return MergedAnnotations.from(element, MergedAnnotations.SearchStrategy.INHERITED_ANNOTATIONS, RepeatableContainers.standardRepeatables())
                .stream(annotationType)
                .sorted(highAggregateIndexesFirst())
                .collect(MergedAnnotationCollectors.toAnnotationSet());
    }

    private static <A extends Annotation> void assertIsRepeatable(Class<A> annotationType) {
        boolean isRepeatable = annotationType.isAnnotationPresent(Repeatable.class);
        Assert.isTrue(isRepeatable, () -> ""Annotation type must be a repeatable annotation: "" +
                ""failed to resolve container type for "" + annotationType.getName());
    }

    private static <A extends Annotation> Comparator<MergedAnnotation<A>> highAggregateIndexesFirst() {
        return Comparator.<MergedAnnotation<A>> comparingInt(MergedAnnotation::getAggregateIndex).reversed();
    }
}
```"
2695,1258308873,bclozel,103264,"Sorry, I missed the fact that the Map was already concurrent friendly in #29203. Thanks!"
2696,1258448808,bclozel,103264,"Thanks @Drezir for your contribution. I've polished your changes in 9c400ed since they were breaking the build.
`Stream#toList()` returns an immutable list, unlike the original code. I've reverted some of those changes where a mutable list was expected."
2697,1258449173,sbrannen,104798,"## Related GraalVM Native Image Issues

- https://github.com/oracle/graal/issues/5020
- https://github.com/oracle/graal/issues/5080
- https://github.com/oracle/graal/issues/5081"
2698,1258554535,jabrena,147263,"Hi @snicoll, 

in reactor project & rsocket, JCstress is used, consider it :)"
2699,1258601228,Drezir,11374081,"> Thanks @Drezir for your contribution. I've polished your changes in [9c400ed](https://github.com/spring-projects/spring-framework/commit/9c400ed384ce50f17c3bc0dadb7773973b07e7a1) since they were breaking the build. `Stream#toList()` returns an immutable list, unlike the original code. I've reverted some of those changes where a mutable list was expected.

Thank you very much"
2700,1258603763,bclozel,103264,"Closing this PR in favor of #26707 - your contribution has been merged in b71e686cbd, but this outdated PR got wrongly updated with lots of duplicate commits (a rebase and a force-push without any merge would have made things better).

Sorry it took us so long to process this PR, this fix is going to be shipped with the next 5.3.x maintenance release."
2701,1258639748,sergiocard,11177317,"> Hi There,
> 
> We're still encountering scenarios where this feature / implementation would have been of great importance.

I'me facing too: the following is a classic scenario in wich we handle different languages for same event.
So Ho we can evict all the entries for the same eventId ?

    @Cacheable(value = ""EventsCache"")
    public Response getEvent(int eventId, String language) {
        return service.getEvent(eventId, language);
    }

    @CacheEvict(value = ""EventsCache"")
    public void evictEvent(int eventId) {}
"
2702,1258642791,Huaichen2021,90635120,"Hi Sbrannen,

The issue didn't occur with my sample program when I tries to reproduce it. Looking at the source code, I found that the MimeMessageHelper is using the MimeMessage library from JavaMail library, so it is not an issue with the MimeMessageHelper. The JavaMail library is actually the one that implements setTo() when MimeMessageHelper called it.

Although I have updated the JavaMail library in our POM file to the latest version (1.6.2), an old library of JavaMail has been deployed with org.apache.axis2. It seems that MimeMessageHelper is loading the old JavaMail class even though the new library is also included in the deployment file. 

After I excluded JavaMail from org.apache.axis2, MimeMessageHelper is working properly. Sorry for bothering you. The issue can be closed. Thank you for taking the time to look into this.

Huaichen
"
2703,1258657454,bclozel,103264,Thanks for letting us know @Huaichen2021 
2704,1258988662,bclozel,103264,"Could you share a minimal application that reproduces the problem? Ideally something we can git clone or download.
This might be due to a subtle change somewhere and it is hard to guess without a way to reproduce the behavior. Thanks!"
2705,1259015559,aispringli,25081167,[a simple demo ](https://github.com/aispringli/demo)
2706,1259056955,bclozel,103264,"I think this is a duplicate of spring-cloud/spring-cloud-openfeign#755, the project catching up with spring-projects/spring-boot#29699.
You will need to wait for the next cloud feign release for the fix (or try the snapshots)."
2707,1259183732,snicoll,490484,Blocked by https://github.com/spring-projects/spring-framework/issues/27920
2708,1259196480,bclozel,103264,"The edge cases being described above actually make a case against the annotation with static values: depending on the HTTP method, the response status... I think the `ResponseBodyAdvice` contract is a better choice here as the behavior can be thoroughly tested independently. The static header assumes that all controller endpoints must then be independently tested for this case.

If a more targeted selection of endpoints is required, adding a custom `@MinAppVersion` annotation on the controller methods could also be a way for the `ResponseBodyAdvice` to know whether the controller handler should be considered  (see `ResponseBodyAdvice#supports`).

I also agree with Rossen on the fact that this is likely to create an overlap with existing contracts and ask questions when both `ResponseEntity` and `@ResponseHeader` are used on the same controller method, for the same header. Overwrite the header entirely? Add a value to the header?

To summarize, I don't think we should add this contract as the benefit is limited and it might not fit well with the existing support."
2709,1259262781,rstoyanchev,401908,"I'll go ahead and remove the call to `webRequest.requestCompleted()` in `RequestMappingHandlerAdapter` that doesn't seem to have a good reason to be there. 

That said, the same call will be still be made a little later in `FrameworkServlet`, on the way out from the initial REQUEST dispatch, and that does mean that you'll likely get the same result in your scenario. 

Generally, request scoped beans rely on `ThreadLocal` to access the request, via `RequestContextHolder`, and that works only while on a Servlet container thread. For asynchronous request handling, we recommend keeping the objects you need in the controller and passing them to the methods that need them."
2710,1259272417,poutsma,330665,"Thanks for submitting a PR, @lukas-krecan. Our apologies for taking so long to resolve it."
2711,1259330644,ijonathanc,29145738,"Ok, thanks. "
2712,1259353230,rstoyanchev,401908,"I agree, there are also benefits to having this defined in a single, global place for testability and readability. I can also imagine that `@ResponseHeader` can be overused. If multiple headers are added per controller method, and that is repeated in different controllers, that should be done in code instead. "
2713,1259456112,jaesuk-kim0808,32669664,"I agree with bclozel's comment. 
I'm currently in a situation where I need a caching feature within a reactive application implemented via webflux. 
So I tried to solve this problem with future-based asynchronous APIs Caffeine and Mono.toFuture/Mono.fromFuture(reactor/reactor-addons#237), and implemented it using spring-aop and custom cache manager&annotation like this : 
```
/**
I created AsyncCacheManager and @AsyncCacheable to use instead of CacheManager and @Cacheable functions of spring-cache.
Create AsyncCache for the method declared @AsyncCacheable in BeanPostProcessor, and then use it by getting it from AsyncCacheManager.
AsyncCacheManager is implemented as ConcurrentHashMap<String, AsyncCache>.
When calling asyncCache.get(), put Mono.defer(method).toFuture() in the mapping function. And return via Mono.fromFuture.
*/

@Around(""pointcut()"")
public Object around(ProceedingJoinPoint joinPoint) throws Throwable {
	...
	AsyncCache asyncCache = asyncCacheManager.get(cacheName);
	if (Objects.isNull(asyncCache)) {
		return joinPoint.proceed();
	}

	//Return type : Mono
	Mono retVal = Mono.defer(() -> {
		try {
			return (Mono) joinPoint.proceed();
		} catch (Throwable th) {
			//error handling
		}
	});

	CompletableFuture completableFuture = asyncCache.get(generateKey(args), (key, exec) -> (retVal).toFuture());
	return Objects.nonNull(completableFuture) ? Mono.fromFuture(completableFuture) : retVal;
}
```

Before visiting this issue, I got help from ben-manes of the Caffeine Project. (https://github.com/ben-manes/caffeine/discussions/500) 
Finally, I checked the blocked section using Reactor/BlockHound (https://github.com/reactor/BlockHound) and made sure it worked as intended.

Are there any expected problems with how to use it this way?
The reason I am writing this is to share it with people who are experiencing the same problem.
If you have a better way, please share."
2714,1259467762,bhuvanaindukuri,29200083,"To me, the concern is not just documentation. It is also the ability to use this variable or to get the name of the default profile. For example, to define a certain bean for default profile. Agree? If yes would this change also qualify as an enhancement?"
2715,1259540736,rstoyanchev,401908,I've gone for a slightly different implementation. Thanks for the PR in any case!
2716,1259611043,snicoll,490484,"> Compilation fails as follows:

That's a bit odd. We have plenty of cases where AOT generates in existing packages. I don't understand why this case is different."
2717,1259944626,christianwimmer,3046476,"> @christianwimmer Thanks for the update, please let me know when annotations support is available in 22.3.0-dev builds.

It is available now: https://github.com/oracle/graal/blob/master/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/AnnotationAccess.java"
2718,1260459369,snicoll,490484,"Thanks for the report, as far as I can see this has nothing to do with kotlin or the functional config. When AOT processes the context, it honors the initializers that you've defined. This defines a bean in the bean factory so it's processed. When the AOT-optimized context runs, it uses the generated context that registers a bean, and then call your initializer again. Can you please confirm that my analysis is correct (you should see some generated code for `MyListener`)."
2719,1260616731,snicoll,490484,"I went down the route of trying to make that transparent by patching `GeneratedClasses`. It turns out it brings a number of problem:

1. The code that get an inner class is not responsible of creating the hierarchy, if necessary. This makes it hard to figure out what the type customization of the enclosing class should be
2. Dealing with unique class name is a bit fuzzy as it's unclear if the uniqueness should apply to the enclosing class, or the inner class within the same enclosing class

Implementing this specifically for bean methods generation solves both problems."
2720,1260641933,sdeleuze,141109,"I had a deeper look on alternative solutions, and was able to find a workaround on both JVM and native by passing a `-Djava.security.properties=custom.security` parameter to `java` or `native-image` with `custom.security` content being `jdk.jar.disabledAlgorithms=MD2, MD5, RSA, DSA`.

Few remarks:
 - The default configuration provided on most JDK is `jdk.jar.disabledAlgorithms=MD2, MD5, RSA keySize < 1024, DSA keySize < 1024`.
 - Another solution could be to explode signed JARs since the verification does not happen on directories, but using `-Djava.security.properties` looks less involved.
 - It is still possible to verify the JAR signature with `jarsigner -verify foo.jar` because we don't modify the JVM default security configuration and the JAR signature itself is valid, the `SecurityException` appears only when loading classes from split packages."
2721,1260814479,sbrannen,104798,"Your work on this issue has been incorporated into the `main` branch in 0eb66789edd6122ab4f395b5a76d23255c0da337.

Thanks, @dsyer! 👏 "
2722,1260847684,sbrannen,104798,"> Update: you can run the tests in the project above in a native image (`./mvnw test -PnativeTest`), 

To get `PathMatchingResourcePatternResolverTests` (current version from `main`) working, I ran the tests using the tracing agent (`./mvnw clean -PnativeTest -Dagent=true test`) and also had to create the following `resource-config.json` file.

```json
{
	""resources"": {
		""includes"": [
			{
				""pattern"": ""^.+\\.dtd$""
			},
			{
				""pattern"": ""\\Qorg/springframework/core/io/\\E.*?\\/resource.+\\.txt$""
			},
			{
				""pattern"": ""\\Qorg/springframework/core/io/support/\\E.+\\.class$""
			},
			{
				""pattern"": ""\\Qreactor/util/annotation/NonNull.class\\E""
			},
			{
				""pattern"": ""\\Qreactor/util/annotation/NonNullApi.class\\E""
			},
			{
				""pattern"": ""\\Qreactor/util/annotation/Nullable.class\\E""
			}
		]
	}
}
```

> but 1 of them had to be modified (there is no `File` associated with a classpath resource) 

I addressed that in 29442d4b7a92244399a4ce72e525d8ce71d405c0.

> and another disabled (you can't scan from the root of the classpath)

Indeed, `rootPatternRetrievalInJarFiles()` is the only remaining test failing within a native image, but that will be addressed in https://github.com/oracle/graal/issues/5020.

"
2723,1260910001,simararneja,7982347,This issue seems to have reappeared in Spring 5.3.23 https://stackoverflow.com/questions/73882172/spring-5-3-23-static-js-files-served-as-application-octet-stream-instead-of-a
2724,1260916820,sbrannen,104798,"Issuing a warning in scenarios that are completely unrelated to Spring was certainly unintentional, so thanks for raising the issue.

Generally speaking, any annotation meta-annotated with `@jakarta.validation.Constraint` (such as `@org.hibernate.validator.constraints.URL`) is participating in annotation semantics of the Java Bean Validation framework. So we could simply omit any custom validation constraint annotations from the warning, although there might be other use cases we should address.

We will investigate if we can improve this.

Related Issues:

- #28760"
2725,1260928736,bclozel,103264,@simararneja Could you create a minimal sample application (using start.spring.io) that replicates the problem? Then could you create a new issue for that? Thanks!
2726,1260962363,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
2727,1261081922,rstoyanchev,401908,I've also added some improvements in `ResponseCookie` to make it more friendly for use in `CookieLocalResolver` so that it doesn't have to replicate all of its fields.
2728,1261199265,wilkinsona,914682,"Thanks for the sample. It was very helpful in diagnosing the problem.

I believe that the root cause is a bug in `AopTestUtils.getUltimateTargetObject` in Spring Framework. When it's called with the `authenticationManager` bean it recurses until the stack overflows. This behavior can be reproduced with the following minimal test:

```java
package com.example.demo;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;
import org.springframework.test.util.AopTestUtils;

@SpringJUnitConfig
class MinimalTests {

	@Test
	void test(@Autowired AuthenticationManager authenticationManager) {
		AopTestUtils.getUltimateTargetObject(authenticationManager);
	}


	@Configuration
	@EnableGlobalMethodSecurity(prePostEnabled = true)
	static class MinimalConfiguration {

		@Bean
		AuthenticationManager authenticationManagerBean(AuthenticationConfiguration authenticationConfiguration) throws Exception {
			return authenticationConfiguration.getAuthenticationManager();
		}
	}

}
```

And these dependencies (using Spring Boot 2.7.4 purely for dependency management):

```xml
<dependency>
	<groupId>org.springframework.security</groupId>
	<artifactId>spring-security-config</artifactId>
</dependency>
<dependency>
	<groupId>org.springframework</groupId>
	<artifactId>spring-test</artifactId>
	<scope>test</scope>
</dependency>
<dependency>
	<groupId>org.junit.jupiter</groupId>
	<artifactId>junit-jupiter</artifactId>
	<scope>test</scope>
</dependency>
```

We'll transfer this issue to the Spring Framework team so that they can investigate."
2729,1261300863,mukeshjumwal,10892412,"Facing the same issue on MacOS local for a pdf file. Not sending the Content-Type header through postman, it is automatically adding that.
DecodeException: Could not find first boundary
at org.springframework.http.codec.multipart.MultipartParser$PreambleState.onComplete(MultipartParser.java:306)
			at org.springframework.http.codec.multipart.MultipartParser.hookOnComplete(MultipartParser.java:109)
			at reactor.core.publisher.BaseSubscriber.onComplete(BaseSubscriber.java:197)
			at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:142)
			at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:259)
			at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:142)
			at reactor.core.publisher.Operators.complete(Operators.java:136)......

"
2730,1261836145,bclozel,103264,"This doesn't give us much to understand the problem. Also this class is not provided by Spring Framework.

Could you create a minimal application that reproduces the problem and create a new issue on the Spring Data MongoDB project? https://github.com/spring-projects/spring-data-mongodb/issues

Thanks"
2731,1261875575,therahilshaikh,54621699,"When i pass % as parameter it throws _java.lang.IllegalArgumentException: Invalid encoded sequence ""%""_ Exception

My Controller 
```
    @GetMapping(value = ""/encode"", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<String> encodeString(@RequestParam String str) throws Exception {
        try {
            String result = utilities.encodeURIComponent(str);
            return new ResponseEntity<>(result, HttpStatus.OK);
        } catch (Exception e) {
            logger.log(Level.SEVERE, e.getMessage(), e);
            return new ResponseEntity<>(Constants.SOMETHING_WENT_WRONG_MESSAGE, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
```

Logic for encoding 

```
    @Override
    public String encodeURIComponent(String str) throws Exception {
        try {
            String afterDecoding = UriUtils.decode(str, ""UTF-8"");
            if (!afterDecoding.equals(str)) {
                return str;
            } else {
                return UriUtils.encode(str, ""UTF-8"");
            }
        } catch (Exception e) {
            throw e;
        }
    }
```

Logs

```
2022-09-29 12:35:05.767 ERROR 26858 --- [nio-8085-exec-5] com.juno.api.exam.ExamController         : Invalid encoded sequence ""%""

java.lang.IllegalArgumentException: Invalid encoded sequence ""%""
	at org.springframework.util.StringUtils.uriDecode(StringUtils.java:795) ~[spring-core-5.3.18.jar:5.3.18]
	at org.springframework.web.util.UriUtils.decode(UriUtils.java:372) ~[spring-web-5.3.18.jar:5.3.18]
	at com.juno.api.utilities.Utilities.encodeURIComponent(Utilities.java:102) ~[classes/:na]
	at com.juno.api.utilities.Utilities$$FastClassBySpringCGLIB$$65b230dd.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.3.18.jar:5.3.18]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783) ~[spring-aop-5.3.18.jar:5.3.18]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.3.18.jar:5.3.18]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753) ~[spring-aop-5.3.18.jar:5.3.18]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137) ~[spring-tx-5.3.18.jar:5.3.18]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.3.18.jar:5.3.18]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753) ~[spring-aop-5.3.18.jar:5.3.18]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698) ~[spring-aop-5.3.18.jar:5.3.18]
	at com.juno.api.utilities.Utilities$$EnhancerBySpringCGLIB$$36ca19ac.encodeURIComponent(<generated>) ~[classes/:na]
	at com.juno.api.exam.ExamController.encodeString(ExamController.java:1246) ~[classes/:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-5.3.18.jar:5.3.18]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150) ~[spring-web-5.3.18.jar:5.3.18]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117) ~[spring-webmvc-5.3.18.jar:5.3.18]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895) ~[spring-webmvc-5.3.18.jar:5.3.18]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808) ~[spring-webmvc-5.3.18.jar:5.3.18]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.3.18.jar:5.3.18]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067) ~[spring-webmvc-5.3.18.jar:5.3.18]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963) ~[spring-webmvc-5.3.18.jar:5.3.18]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.3.18.jar:5.3.18]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.3.18.jar:5.3.18]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655) ~[tomcat-embed-core-9.0.60.jar:4.0.FR]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.3.18.jar:5.3.18]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764) ~[tomcat-embed-core-9.0.60.jar:4.0.FR]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.60.jar:9.0.60]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter.doFilter(AbstractPreAuthenticatedProcessingFilter.java:142) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91) ~[spring-web-5.3.18.jar:5.3.18]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117) ~[spring-web-5.3.18.jar:5.3.18]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117) ~[spring-web-5.3.18.jar:5.3.18]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117) ~[spring-web-5.3.18.jar:5.3.18]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183) ~[spring-security-web-5.6.2.jar:5.6.2]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354) ~[spring-web-5.3.18.jar:5.3.18]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267) ~[spring-web-5.3.18.jar:5.3.18]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.3.18.jar:5.3.18]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117) ~[spring-web-5.3.18.jar:5.3.18]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.3.18.jar:5.3.18]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117) ~[spring-web-5.3.18.jar:5.3.18]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.springframework.session.web.http.SessionRepositoryFilter.doFilterInternal(SessionRepositoryFilter.java:141) ~[spring-session-core-2.4.2.jar:2.4.2]
	at org.springframework.session.web.http.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:82) ~[spring-session-core-2.4.2.jar:2.4.2]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96) ~[spring-boot-actuator-2.6.6.jar:2.6.6]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117) ~[spring-web-5.3.18.jar:5.3.18]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.3.18.jar:5.3.18]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117) ~[spring-web-5.3.18.jar:5.3.18]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:889) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
	at java.base/java.lang.Thread.run(Thread.java:833) ~[na:na]


```"
2732,1261932844,rstoyanchev,401908,"Not much has changed in the code that was touched for this issue, so it's probably not the same issue. Trying to isolate it with a minimal sample and creating a new issue is the way to go."
2733,1261962169,snicoll,490484,I've moved this to a task as these dependencies upgrade are not user-facing.
2734,1262033878,rstoyanchev,401908,"From https://github.com/spring-projects/spring-framework/issues/28671#issuecomment-1163313975 and https://github.com/spring-projects/spring-framework/issues/28671#issuecomment-1173851957, it looks unlikely there is a possible `null` value that isn't handled. 

The most likely explanation at this point is that Tomcat resets the request, possibly due to concurrent request handling and a shutdown, and I'm not sure it's worth protecting against such a `null` value since in theory it could occur anywhere else where it wouldn't otherwise be expected. 

I'm wondering if you have tried the graceful shutdown?"
2735,1262072634,poutsma,330665,"Which specific header is missing? A 400 response is applicable when some headers are missing, but definitely not all cases."
2736,1262197498,zhmaeff,7104481,"Hi @rstoyanchev , could you pls review it?"
2737,1262290205,sdeleuze,141109,"I had a look and I think your analysis is correct @snicoll. There is some code generated (`MyListener__BeanDefinitions`) and with a quick test with that updates and the messages are only printed one time each:
```
fun main(args: Array<String>) {
	runApplication<NativeKotlinApplication>(*args)  {

		this.addInitializers(beans {
			if (!AotDetector.useGeneratedArtifacts()) {
				bean {
					MyListener(ref())
				}
			}
		})
	}
}
```"
2738,1262306177,snicoll,490484,"Thanks for testing @sdeleuze. We've been discussing this one as part of https://github.com/spring-projects/spring-boot/issues/32262 and we believe that this should work out-of-the-box.

Our thinking is that adding the `AotDetector` check around the childeren in [this method](https://github.com/spring-projects/spring-framework/blob/3eaf3269979ab7d4ece032498660b019018ec3e6/spring-context/src/main/kotlin/org/springframework/context/support/BeanDefinitionDsl.kt#L1147) might do the trick + a test in a smoke test that uses the Kotlin DSL (if that doesn't exist).

WDYT?"
2739,1262333775,sdeleuze,141109,"Yeah it was not a Gradle project (so painful to test by modifying Spring Framework snapshots) so I went the easy way to do a basic test.

I am ok with your proposal, but the fix will be Kotlin DSL specific and people using directly the Java functional API to do the same thing will continue to see the double registration if they don't do the `AotDetector` check manually. I don't see a better option so I guess we have to live with that but just asking for confirmation."
2740,1262335713,snicoll,490484,"> I don't see a better option so I guess we have to live with that but just asking for confirmation.

Yes. Our plan is to gather more feedback and then make an API change if necessary with more feedback. This one looks like it can be handled internally so we should do that regardless.
"
2741,1262344351,snicoll,490484,"So it turns out this need is because the TCF needs to generate two classes at a fixed place, without taking care of a featureNamePrefix if any. I find this a little odd considering that `GeneratedClasses` is designed completely around the need of naming things consistently. It's also a dangerous API to put in people's hand. They shouldn't be allowed to determine the exact name of the class.

I am going to decline this for that reason. I also would like we take the time to revisit the arrangement in the TCF so that it doesn't generate class names that look like any other class (i.e. non-generated ones)."
2742,1262939957,philwebb,519772,I've pushed a new `AotApplicationContextInitializer` interface and deprecated the existing one. I've also refactored Spring Boot to use it. If you're happy with the new one we can probably delete `ApplicationContextAotInitializer` before RC1
2743,1263035269,PC-Chiu,8520547,"In my case, it happens on Microsoft Windows, use IDE run app, JDK11+ and match pattern like `classpath*:**/application.properties`, not on macOS、run with spring boot jar、match pattern not include `**`"
2744,1263118176,pivotal-cla,16822967,"@CodeMan-cmd Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29223)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29223) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
2745,1263121873,pivotal-cla,16822967,@CodeMan-cmd Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29223)!
2746,1263139098,snicoll,490484,Cool. I like it. 
2747,1263141559,snicoll,490484,"@CodeMan-cmd I am not sure what you mean by ""reduce code complexity"" but this check is there for a reason. Can you clarify?"
2748,1263145250,CodeMan-cmd,52879329,"> @CodeMan-cmd I am not sure what you mean by ""reduce code complexity"" but this check is there for a reason. Can you clarify?

This judgment is invalid, personally, I think some unused codes can be cleared out."
2749,1263146346,snicoll,490484,Why do you think it is invalid?
2750,1263150373,CodeMan-cmd,52879329,"> Why do you think it is invalid?

if (beanName != null && !strVal.equals(beanName)) {} this beanNmae"
2751,1263154762,CodeMan-cmd,52879329,"> Why do you think it is invalid?

I thought it was defensive programming at first. think about it, think it should be a bug."
2752,1263155639,snicoll,490484,"It's checking that the suggested component name matches the current bean name, if any. It isn't a bug and is defensive in case of misconfiguration indeed."
2753,1263209864,snicoll,490484,"It doesn't work because we use `beanFactory#findAnnotationOnBean` and that looks for the underlying type, not the `FactoryBean` itself. It can be dangerous to rely on the factory bean as it might not be exposed in certain cases and therefore the hints can be lost."
2754,1263224264,snicoll,490484,For the reason above I am going to decline this for now.
2755,1263281151,violetagg,696661,@sdeleuze @rstoyanchev PTAL
2756,1263385769,sbrannen,104798,"This has introduced a regression in that a matching _folder_ is now returned in the results.

I am therefore reopening this issue to address that."
2757,1263390118,sbrannen,104798,"**Team Decision**: in light of the lack of progress on this issue coupled with the advent of AOT support in the core framework, the team has decided not to pursue an annotation index or related features."
2758,1263392057,sbrannen,104798,"**Team Decision**: features like `MethodIntrospector` and `MergedAnnotations` are orthogonal concerns and should therefore not be combined in a common API/implementation.

"
2759,1263392788,sbrannen,104798,Closing this issue umbrella issue since all related issues have been addressed.
2760,1263489593,pivotal-cla,16822967,"@sangmin7648 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29228)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29228) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
2761,1263493356,pivotal-cla,16822967,@sangmin7648 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29228)!
2762,1263721930,baso53,8758580,"This seems like a duplicate of Github issue #19935, or JIRA issue [SPR-15371]."
2763,1263731735,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
2764,1263775300,sbrannen,104798,"@lako12, thanks for bringing this to our attention!

@wilkinsona, thanks for analyzing it and providing the minimal reproducer!

It turns out that `AopTestUtils.getUltimateTargetObject` is indeed part of the issue, but... only when the bean passed to it is a Spring AOP proxy backed by a `LazyInitTargetSource` -- which is the case for Spring Security's `AuthenticationManager` (but only in certain scenarios resulting in `AuthenticationConfiguration`'s `lazyBean(AuthenticationManager.class)` method being invoked).

If that scenario occurs, `getUltimateTargetObject()` ends up traversing an infinite object graph along the lines of: proxy -> `Advised` -> `LazyInitTargetSource` -> proxy ->`Advised` -> `LazyInitTargetSource` -> proxy -> ...

In light of that, my plan is to revise `AopTestUtils.getUltimateTargetObject` so that it returns the original object if the `TargetSource` is non-static (i.e., _dynamic_ like `LazyInitTargetSource`). I've tested that locally; it resolves the issue; and I hope the change doesn't introduce adverse side effects for anyone intentionally invoking `AopTestUtils.getUltimateTargetObject` for other types of non-static target sources.
"
2765,1263802532,marcusdacoregio,13255302,"Hi everyone.

Despite the AOP bug, the Spring Security team does not recommend exposing the `AuthenticationManager` bean by using `AuthenticationConfiguration#getAuthenticationManager`. It can lead to weird behaviors like `StackOverflowException`. Oftentimes, folks just want to use their `UserDetailsService` and `PasswordEncoder` to authenticate the user, with that said, you can create the `AuthenticationManager` like so:

```java
@Bean
AuthenticationManager authenticationManager(UserDetailsService myUserDetailsService, PasswordEncoder encoder) {
    DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
    provider.setUserDetailsService(myUserDetailsService);
    provider.setPasswordEncoder(encoder);
    return new ProviderManager(provider);
}
```

You can also rely on the [`AuthenticationFilter`](https://github.com/spring-projects/spring-security/blob/main/web/src/main/java/org/springframework/security/web/authentication/AuthenticationFilter.java) in order to create a custom authentication mechanism.

See:
 - https://github.com/spring-projects/spring-security/issues/11609
 - https://github.com/spring-projects/spring-security/issues/10419
 - https://github.com/spring-projects/spring-security/issues/10822#issuecomment-1141121007
 - https://stackoverflow.com/a/73895991/5454842"
2766,1264014704,bclozel,103264,"Sorry @Drezir but we tend to not accept large PRs with lots of unrelated changes in different packages. Those are hard to review and potential side-effects are hard to track down. This also [broke the build](https://ci.spring.io/builds/204308) meaning you did not run the build locally before submitting the PR.
I'm declining this PR as a result."
2767,1264031474,bclozel,103264,"Thanks for having a look @izeye , this really helps the team before our RC1!"
2768,1264302389,sbrannen,104798,"Caused by:

- #29163"
2769,1264322229,snicoll,490484,Thanks for the PR but we prefer to do that sort of changes ourselve. You've removed the parenthesis around  a ternary operator that we add explicitly so I am afraid the time spent on this isn't worth it.
2770,1264502446,AviranBac,48032069,"> What about adding your own spring enum type that resembles to `JSONCompareMode`? You're then free of api changes in future with `json(String, SpringJsonCompareMode)`, but give the user the ability to directly chose the desired mode.
> 
> Some of them can then delegate to existing `json(String, true)` and `json(String, false)`, while another delegates explicit to the `NON_EXTENSIBLE`?

Hey, I strongly suggest this idea since I also found myself looking for a NON_EXTENSIBLE solution in your API but there isn't an implementation for it at the moment.
I hope you can reconsider and reopen this issue."
2771,1264571403,bclozel,103264,Thanks for reporting this @kazuki43zoo this is probably linked to #29163
2772,1264590051,kazuki43zoo,5616270,Note: Occurred on Mac OS and Windows OS. Linux OS works fine. 
2773,1264590570,kazuki43zoo,5616270,Windows OS is another error. Probably it's same with https://github.com/spring-projects/spring-framework/issues/29226.
2774,1264728405,sdeleuze,141109,Could we maybe document that in the Javadoc?
2775,1264991273,snicoll,490484,"I don't think we should really. ""the annotated component or bean method"" already covers the use case here. A factory bean is not the component that it produces but a transient artifact. We can maybe clarify by providing more examples if necessary."
2776,1265104711,Dekari,6056948,"Hello @liangjihua, all
just wanted to clarify on the below ""solution"" noted above:
 ""To solve this problem, it is necessary to do a natural sorting to solve the problem of inconsistent behavior of the same code in different environments.""

Is there an example of how I can do this?

Also, last but not least, I would assume that eventually @Lazy is not at all an acceptable solution for this? or better say even with the use of @Lazy we may come across the same issue?

thanks in advance.
"
2777,1265305616,eugeniace,41577651,"To solve the bug the following code from method  `protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)` :
```
                URI rootDirUri;
		String rootDir;
		try {
			rootDirUri = rootDirResource.getURI();
                        rootDir = rootDirUri.getPath();
			// If the URI is for a ""resource"" in the GraalVM native image file system, we have to
			// ensure that the root directory does not end in a slash while simultaneously ensuring
			// that the root directory is not an empty string (since fileSystem.getPath("""").resolve(str)
			// throws an ArrayIndexOutOfBoundsException in a native image).
			if (""resource"".equals(rootDirUri.getScheme()) && (rootDir.length() > 1) && rootDir.endsWith(""/"")) {
				rootDir = rootDir.substring(0, rootDir.length() - 1);
			}
		}
		catch (Exception ex) {
			if (logger.isInfoEnabled()) {
				logger.info(""Failed to resolve %s in the file system: %s"".formatted(rootDirResource, ex));
			}
			return Collections.emptySet();
		}
            	FileSystem fileSystem = getFileSystem(rootDirUri);
		if (fileSystem == null) {
			return Collections.emptySet();
		}
		try {
			Path rootPath = fileSystem.getPath(rootDir);

```

could be replaced with the following:

`Path.of(rootDirResource.getURI())` . It also removes the ending /."
2778,1265357571,bclozel,103264,"Temporarily reverting this change and rescheduling to RC2 for now, as this triggers a particular GraalVM issue and breaks existing native applications."
2779,1265488176,violetagg,696661,"@rstoyanchev PTAL
"
2780,1265663321,sbrannen,104798,"Although this was technically a regression, that regression was not released.

In light of that, I have changed the label to `task` so that this issue does not show up in the release notes."
2781,1265801644,alex-semenk,5796601,+1
2782,1265829229,violetagg,696661,@rstoyanchev Thanks
2783,1266532016,jamesbassett,2376540,Hi @sdeleuze did you get a chance to look at @JoeMaher 's reproducer? 🤞 
2784,1266645067,sbrannen,104798,"Hi @kazuki43zoo,

Thanks for bringing this to our attention.

My initial analysis shows that there are two issues here.

1. The path is URL-encoded.
2. The path is not in normalized Unicode form.

----

You can address # 1 by accessing the _URL-decoded_ path via the `URI` instead of the `URL` as follows.

```java
path = resource.getURI().getPath().replaceFirst("".*/test-classes/"", """");
```

As stated in the Javadoc for `java.net.URL`, you can use `java.net.URI` to avoid issues with URL-encoding of the path (`URI#getPath` vs. `URI#getRawPath`).

----

You can address # 2 by _normalizing_ the path using `java.text.Normalizer` as follows.

```java
path = Normalizer.normalize(path, Normalizer.Form.NFC);
```

----

Please let us know if those modifications to your test allow the test to pass.

In addition, I will investigate if we can align with the behavior in Spring Framework 5.3.x."
2785,1266651307,ifc0,56309344,"Sorry for late response. I tried to simulate the problem by running a test with CronExpression, which is used to calculate the next date in scheduled cron jobs:
```
ZonedDateTime current = ZonedDateTime.parse(""2022-03-27T00:30+01:00[Europe/Bratislava]"");

CronExpression cronExpression = CronExpression.parse(""0 30 0 * * *"");
ZonedDateTime next = cronExpression.next(current);
assertEquals(""2022-03-28T00:30+02:00[Europe/Bratislava]"", next.toString());
```

This test failed in 5.3.10 version, where is calculated `2022-03-29T00:30+02:00[Europe/Bratislava]`, but passed in 5.3.20, so this problem seems to be fixed. Thank you."
2786,1266928936,rajkushw27,62794359,"I have already raise the concern in stack overflow also,
let me me explain again, we are setting the httpRequestFactory.setConnectionRequestTimeout(90000000) but still due to ipvs kube proxy load balancer in kubernetes cluster default timeout of tcp connection is closing the connection.
restTemplate should be able to keep alive the connection based on configuration."
2787,1266999589,sbrannen,104798,"**Team Decision**:

After further consideration, we have decided that the use of `Resource#getURL` and `Resource#getURI` should be avoided when performing direct comparisons against paths in a file system since those methods make no guarantees about the encoding of the paths with regard to the underlying file system.

Instead, if you wish to perform a direct comparison against a path in a `Resource`, you should use either the `File` or `Path` abstraction.

For example, if you change your original code to the following your tests should pass.

```java
path = resource.getFile().getAbsolutePath().replaceFirst("".*/test-classes/"", """");
```

In light of the above, we are closing this issue."
2788,1267047549,sbrannen,104798,"As a side note, if you still need to normalize paths you might find that your assertion library provides such support.

For example, AssertJ provides `assertThat(path).isEqualToNormalizingUnicode(...)`."
2789,1267129950,kazuki43zoo,5616270,@sbrannen Thanks for good advice!!
2790,1268089680,bclozel,103264,We need to revert 7dd6afc263cb2 when this is solved.
2791,1268117610,sdeleuze,141109,Sorry for the delay but I am currently focused on the latest bits of native support for Spring Framework 6 RC1.
2792,1268263276,Andrius-B,10669773,"Maybe this is a not-so-common use-case where we have a package-based build system (bazel). For each package we declare the compile time dependencies for the source files in that package. We found a couple of cases where `org.springframework.web.bind.MethodArgumentNotValidException` was used without any other usages of `spring-context`. This causes causes a build error, though we have internally patched the declared dependencies of `spring-web` to include `spring-context` which fixes our issues. This is a slight inconvenience, but if publishing this dependency does not make sense in how the `spring-web` can be used, it's not a big problem.

Publishing the dependency as optional would indeed not fix our issue, but I initially thought this was an oversight and the issue should in fact be non-optional. Since @bclozel pointed out a case where the dependency is not needed, I will close this issue.
Thanks!"
2793,1268407773,bclozel,103264,"Sorry about the delay.
I'm not familiar with Bazel. I assume that the issue is about how Bazel is structuring the JAR or the classpath. We can only consider this as a bug if we manage to reproduce the issue with a vanilla Java setup as we don't have explicit support for Bazel. Could you share a sample project (something we can git clone and run) that reproduces the problem, without Bazel being involved?"
2794,1268408972,bclozel,103264,Thanks for letting us know @Andrius-B 
2795,1268421342,bclozel,103264,"You've not given much we can use to to understand where this can come from. Even if it really hard to reproduce, we would need to see how your project is actually using the `WebClient` and which Spring project versions are involved. Could you provide a sample application that we can git clone or download? A simple application performing multiple client calls against itself could reproduce the problem quite easily if the behavior is consistent in production.
Thanks!"
2796,1268429767,mouadk,32769487,"I am using Spring starter weblfux 2.7.4 (spring web flux: 5.3.23)

Here is how I configure my web client: 

```
    private fun webClient(): WebClient {
        val exchangeStrategies = ExchangeStrategies.builder()
            .codecs { configurer -> configurer.defaultCodecs().maxInMemorySize(180 * 1024 * 1024) }
            .build()
        val provider = ConnectionProvider.builder(""connection-pool"")
            .lifo()
            .maxConnections(properties.connectionPool.maxConnections)
            .maxIdleTime(properties.connectionPool.maxIdleTime)
            .pendingAcquireMaxCount(-1)
            .build()
        val httpClient: HttpClient = HttpClient.create(provider)
        return WebClient.builder()
            .clientConnector(ReactorClientHttpConnector(httpClient))
            .baseUrl(properties.baseUrl)
            .exchangeStrategies(exchangeStrategies)
            .build()
    }
```

And here is how I use it: 

```
 webClient
            .post()
            .header(...)
            .body(request)
            .retrieve()
            .bodyToMono(typeReference<T>())
```

I hope it helps. 

"
2797,1268445366,bclozel,103264,"I don't see anything wrong so far, so this might be more subtle than that. I'm afraid we'll need a concrete application as suggested in my previous comment."
2798,1268450961,jhoeller,1263688,"I'm narrowing the scope of this ticket for our immediate purposes in 6.0, namely merging AOT constructor and factory method resolution into `ConstructorResolver` in the `beans.factory.support` package. This moves related code into the same class, unifies candidate determination for constructors and factory methods, and gets rid of the package cycle around the hard-coded `Autowired` annotation check (which is implicitly coming from `AutowiredAnnotationBeanPostProcessor` via the `determineCandidateConstructors` SPI now). The API entry point for AOT pre-resolution purposes is in `RegisteredBean` now.

Follow-up work might happen before GA still or afterwards in the 6.0.x line, ideally without affecting applications or the rest of the portfolio."
2799,1268495736,rstoyanchev,401908,This is now largely done. Check the updated documentation section on [Error Responses](https://docs.spring.io/spring-framework/docs/6.0.0-SNAPSHOT/reference/html/web.html#mvc-ann-rest-exceptions) section and the sub-section on customization and internationalization.
2800,1268498460,rstoyanchev,401908,"@vy and @wimdeblauwe, the work under #28814 to allow external customization, including internationalization, of the ""detail"" for Spring MVC / WebFlux and for any `ErrorResponseException` is now largely complete. I would appreciate your taking a look and any comments. Probably best under  #28814."
2801,1268538485,sbrannen,104798,"> I've already added it. Please review, thanks.

Thanks for making the requested changes. I'll see about getting it merged in."
2802,1268539881,snicoll,490484,"There's no link between `T` on `B` being resolvable to `A`. Looking at the code above, you're asking to autowire a bean of type `T` where `T` is not formally defined. The type should be resolved in the type signature in one way or the other for the container to be able to see it.

If you have more questions, please follow-up on StackOverflow, as mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements."
2803,1268554040,rstoyanchev,401908,"@ascopes, please take a look at #28814, which may further help with concerns here, especially as it relates  to ""governance prevents the exposure of the underlying implementation technology "" and the need to customize Spring MVC / WebFlux error messages.

"
2804,1268574833,ascopes,73482956,"Looks good, thanks for taking this into consideration!"
2805,1268589878,jhoeller,1263688,"After a lot of consideration, we have realized that this is a problem that is not practical to solve at the core framework level. Our generated configuration needs to have access to package-local elements in common scenarios, not least of it all in order to avoid unnecessary reflection. For that reason, we decided to preserve our package-local generation approach.

If a separate jar with a split package arrangement or different jar signatures turns out to be an issue (also e.g. in the module system), the application build may combine them into a single jar that contains both the original classes and the generated configuration. Alternatively, the application build may also simply remove the jar signature before proceeding."
2806,1268604843,jhoeller,1263688,"Our strategic alignment with the module system has been in competition with our AOT and GraalVM native image efforts in 6.0, so we unfortunately had no chance to experiment with a build migration to full module descriptors yet. There have been very few requests for it even in the course of this year, so we wonder whether there is much practical value to be uncovered here for the time being anyway. Looking forward, the use of jlink's module-bounded approach for application/framework-level modules might get superseded by runtime images based on GraalVM-style individual reachability analysis in the long run.

That said, OpenJDK's Project Leyden aims to reuse module system concepts and tools for its standardized static image approach, so deeper module system alignment remains part of our long-term technology strategy for the Spring Framework 6.x generation."
2807,1268615882,jhoeller,1263688,"Virtual thread support is effectively a Spring Framework 6.1 topic, assuming that Project Loom may go out of preview for JDK 21 in September next year. For the time being, we aim to be compatible with virtual threads on a best-effort basis, supported by early adoption efforts around Spring Boot.

In early practice, this typically means a Tomcat setup with a virtual thread executor configured for its connector, and possibly a corresponding TaskExecutor for scheduling purposes, as illustrated by the following Spring Boot configuration bits (coming from Mark Paluch's early demos):

```java
@Bean(TaskExecutionAutoConfiguration.APPLICATION_TASK_EXECUTOR_BEAN_NAME)
public AsyncTaskExecutor asyncTaskExecutor() {
	return new TaskExecutorAdapter(Executors.newVirtualThreadPerTaskExecutor());
}

@Bean
public TomcatProtocolHandlerCustomizer<?> protocolHandlerVirtualThreadExecutorCustomizer() {
	return protocolHandler -> {
		protocolHandler.setExecutor(Executors.newVirtualThreadPerTaskExecutor());
	};
}
```

We are currently not aware of locking implications in the core framework or the Spring web stack. Many optimizations made it into our codebase over the years based on lock contention reports in highly concurrent production scenarios, so we do not expect I/O-bound `synchronized` usage (or any other forms of locking) to be part of any performance-critical code paths. All regular usage of `synchronized` in the Spring Framework codebase is effectively just around local data structures.

If we learn about concrete potential for virtual-thread oriented optimizations in the core framework, be it certain `synchronized` usage points or certain `ThreadLocal` usage, we'll try to roll corresponding refinements into the Spring Framework 6.0.x line already (as far as possible). First-class virtual thread configuration support, as far as sensible for core framework concerns such as `TaskExecutor` setup, is only expected for Spring Framework 6.1 at this point."
2808,1268682624,jhoeller,1263688,"Closing this for the time being since we have no immediate need for closer alignment with the ServiceLoader mechanism.

From a core framework perspective, `SpringFactoriesLoader` is a rather specific mechanism for certain rarely used SPIs (such as `BeanInfoFactory`) that are meant to be local to the current deployment arrangement.

Broader appeal of `SpringFactoriesLoader`, potentially with cross-module semantics, depends on usage scenarios outside of the core framework - none of which are currently known to benefit from ServiceLoader alignment."
2809,1268716896,bclozel,103264,"It's not clear whether you're reporting an issue for `JdbcTemplate`, `LinkedCaseInsensitiveMap` or an issue with your auto-configuration setup. Could you share a minimal application that demonstrates the issue?
If the problem is about `LinkedCaseInsensitiveMap`, a simple code snippet explaining the behavior you'd expect and what you're seeing instead would be enough.

Screen captures are hard to work with - in this case we have no clue about the `schema` variable, its state or where it comes from."
2810,1268732053,guw,191472,"In the last step an ""all-in-one"" jar is produced. That works without Bazel.
```
java -jar bazel-bin/mybuilder2_deploy.jar --current-target=foo -i BUILD  -o /var/tmp/ --verbose
```

It reproduces the problem. "
2811,1268740897,sbrannen,104798,"@snicoll, @philwebb, & @wilkinsona, can one of you please create and implement an issue analogous to https://github.com/spring-projects/spring-boot/issues/32560 so that I can remove the `main()` method from `TestAotProcessor`?"
2812,1268765590,sbrannen,104798,Preparatory work for this issue has been pushed in 61cc7c0a93fcf5b92bc07313b86c030a1aeaea56.
2813,1268799355,sbrannen,104798,"Hi @guw,

As Brian mentioned, please provide a sample project that reproduces the problem.

Example command-line arguments for a project that we cannot access are not sufficient for us to reproduce the issue."
2814,1268807915,wilkinsona,914682,"I'm not sure that there is such an analogy here. https://github.com/spring-projects/spring-framework/issues/29181 was about moving some functionality from Boot into Framework. https://github.com/spring-projects/spring-boot/issues/32560 then adapted Boot to make use of that new Framework functionality. On the test side, there is no test-specific AOT processor in Boot and using Framework's `TestAotProcessor` alone already works nicely. IMO, this is a good thing and making `TestAotProcessor` abstract and requiring Boot to implement a concrete sub-class would be a step backwards."
2815,1268955401,guw,191472,@sbrannen Does `git clone git@github.com:salesforce/bazel-java-builder-template.git` work for you? License is BSD-3 Clause so should be ok I hope.
2816,1269318304,snicoll,490484,What Andy said. I don't understand why the parity is required for this as it really isn't the same thing. It is required on the Spring Boot side of things because the concept of an application (and what it requires) isn't known to framework. There's no such thing for tests as it is already abstracted by the TCF.
2817,1269339516,rishiraj88,13426986,👍
2818,1269362487,snicoll,490484,">         final BeanDefinitionRegistry beanDefinitionRegistry = (BeanDefinitionRegistry) applicationContext.getAutowireCapableBeanFactory();

You can't cast a `BeanFactory` to a `BeanRegistry` like this and/or removing bean definitions manually as you do when the context is running."
2819,1269393060,sdeleuze,141109,"@philwebb As discussed in latest weekly meeting, switching from pattern to annotations between RC1 and RC2 seems not possible with our release constraints. Portfolio projects are going to release against RC1 and the switch to annotations would require them to use the new annotations, test with RC2, etc. and I don't want to introduce those annotation blindly. So the best path seems to keep patterns for RCs and GA.

That will also give us more time to see what GraalVM 23.x is going to provide, if we want or not leveraging it as part of Spring Framework 6.1, so there are advantages to not publish public API for now."
2820,1269415274,snicoll,490484,We've already switched to snapshots as part of #29247
2821,1269456356,snicoll,490484,"It turns out that trying to support reflection-based calls, adding `Object` and making sure that downstream suppliers (such as autowiring and such) knew about it was the most effective way to make progress. I don't think removing the generic is going to buy us much in the end."
2822,1269468443,bclozel,103264,"Running the first command succeeds but creates an invalid fat JAR, as there is no manifest in it.

I'm getting the following stacktrace when running the second command:

```
java.lang.IllegalStateException: Resources not loaded correctly from classpath!
	at com.salesforce.bazel.javabuilder.mybuilder.MyBuilderCommand.doResourceCollection(MyBuilderCommand.java:121)
	at com.salesforce.bazel.javabuilder.mybuilder.MyBuilderCommand.call(MyBuilderCommand.java:60)
	at com.salesforce.bazel.javabuilder.mybuilder.MyBuilderCommand.call(MyBuilderCommand.java:29)
	at picocli.CommandLine.executeUserObject(CommandLine.java:1783)
	at picocli.CommandLine.access$900(CommandLine.java:145)
	at picocli.CommandLine$RunLast.executeUserObjectOfLastSubcommandWithSameParent(CommandLine.java:2150)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:2144)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:2108)
	at picocli.CommandLine$AbstractParseResultHandler.execute(CommandLine.java:1975)
	at picocli.CommandLine.execute(CommandLine.java:1904)
	at com.salesforce.bazel.javabuilder.mybuilder.MyBuilderInvoker$MyBuilderProcessor.processRequest(MyBuilderInvoker.java:22)
	at com.salesforce.bazel.javabuilder.worker.GenericWorker.run(GenericWorker.java:106)
	at com.salesforce.bazel.javabuilder.mybuilder.MyBuilderInvoker.main(MyBuilderInvoker.java:29)
```

Unfortunately, we can't justify spending time debugging your project if you're not investing yourself enough time to produce a minimal example (here, a vanilla java project just involving `PathMatchingResourcePatternResolver`). I'm closing this issue as a result but we can reopen it if we can get a repro project for this problem."
2823,1269471196,snicoll,490484,I've created issues for the two remaining items so I am going to close this now.
2824,1269504741,membersound,5269630,Would still be great if that feature could get some investigation.
2825,1269540217,mdeinum,606761,"I would argue that it works as designed... The key `executeSchema` key is present with a value of `null`. The default will only be returned if the key doesn't exist in the map, however as it exists the default won't apply. This is in accordance with the documentation on `getOrDefault` in the `Map` interface. 

> Returns the value to which the specified `key` is mapped, or `defaultValue` if this map contains no mapping for the key."
2826,1269577227,snicoll,490484,This might have been fixed in the meantime as I can't reproduce it.
2827,1269577868,SortfGrowingup,40589041,"Sorry, I misunderstood the meaning of the api itself...
Thanks for @mdeinum explanation. 
As you said, The ```map#key``` exists, because the wrong api is used, resulting in the ```getOrDefault#toString``` throw NullPointerException "
2828,1269703802,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
2829,1269758042,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
2830,1269896885,poutsma,330665,"Thank you for submitting a PR, @iain-henderson. After making some changes, I have merged it in https://github.com/spring-projects/spring-framework/commit/b8243e6f840d974de51d69b8279631b0cd50f3f0."
2831,1269940721,sbrannen,104798,"Thanks for the feedback. 

If there is no foreseeable need to extend the class, then I agree that it should not be abstract. I have changed the title of this issue to reflect that.

However, I don't think it's a good idea for Framework to provide the `main()` method. The current implementation of `main()` is very specific to how the Spring Boot plugins use it, and I don't think Framework should be prescriptive in that regard.

In addition, I don't like the idea of maintaining a `main()` method that accepts a position-based list of arguments due to the fragility of such an approach. 

It may be that the `main()` method is never changed, but if it does need to be changed at some point in the future, I think the build plugin that requires those changes should make those changes.

Furthermore, build plugins can already instantiate `TestAotProcessor` and invoke `process()` directly.

In summary, I don't see any good reason to keep the `main()` method in Framework's implementation of `TestAotProcessor`."
2832,1269951074,snicoll,490484,"> The current implementation of main() is very specific to how the Spring Boot plugins use it,

Can you expand on what you mean by ""very specific"". Looking at the main method it takes exactly the arguments that `TestAotProcessor` needs to process the test contexts.

> I don't like the idea of maintaining a main() method that accepts a position-based list of arguments due to the fragility of such an approach.

Isn't that the exact same problem with the current constructor?

> Furthermore, build plugins can already instantiate TestAotProcessor and invoke process() directly.

Build plugins use a forked process to run AOT.

>  I don't see any good reason to keep the main() method in Framework's implementation of TestAotProcessor.

Except the fact that you may not want to have a `main` method in the framework code base, I don't see any good reason to change the status quo."
2833,1270040312,jhoeller,1263688,"So is the Boot build plugin actually invoking that `main` method at this point? Could it instantiate a `TestAotProcessor` and call `process` directly? If we can avoid the `main` method there, I'd be in favor of it.

Point taken, the `main` method is closely aligned with the constructor, but it is different in that it has implicit rules for the given argument array whereas the constructor has explicit parameter declarations. And generally speaking, at the core framework level, we provide classes with constructor and factory method entry points, not main methods for individual execution."
2834,1270063697,wilkinsona,914682,"> So is the Boot build plugin actually invoking that main method at this point?

Not directly. Boot's Maven and Gradle plugins both fork a JVM that is configured to use `TestAotProcessor` as its main class. We could write our own class with a main method solely for the purpose of delegating to `TestAotProcessor` but it feels like unnecessary indirection to me."
2835,1270094550,jhoeller,1263688,"Alright, thanks for the clarification. I assumed that it is part of a larger orchestrated step where `TestAotProcessor` could get invoked programmatically instead of running on its own.

That said, even if this is not the case right now, potential pre- or post-processing for that execution step could emerge in the future, e.g. some kind of special parsing of the input (like the path parsing and splitting happening there already). A thin Boot-controlled entry point that parses the command line input (including the current path parsing for a start) does not seem wrong to me, as it separates that command line formatting concern.

FWIW we had recent issues with `Paths.get` and friends, with several regressions in `PathMatchingResourcePatternResolver` around slash handling and filename encodings, and that was just for transforming from `URI` instances to `Path`. I would argue that even the command line path parsing concern alone is worth factoring out into Boot."
2836,1270117048,wilkinsona,914682,"If we believe that it's important for someone to be able to use Framework without Boot to perform AOT processing of their main code and tests, I don't understand why we'd factor out into Boot an important part of that particularly when we think it may be hard to get right.

With `AotProcessor` and `TestAotProcessor` both existing in Framework – which I firmly believe is the right place for them – I think it makes sense to build on that and for Framework to make things as easy as possible for anyone, including Boot, to use them."
2837,1270155197,jhoeller,1263688,"I see your point but I'm just not sure that the plain presence of a main method with a particular format really makes things easy for outside users. It's another thing to document and understand, with custom executions having to get the command line format right. If we keep it for convenience, we'd have to properly document it for actual convenient usage for everyone, and we'd have to be willing to accept requests for enhancements around it.

Custom main methods on the user's side are not that hard to get right. They can make assumptions about the input and its format, or could even hard-code a thing or two for their purposes, without relying on conventions for String input parsing that are meant to work for everyone everywhere in every encoding. I don't think that many such users would complain about this, after all they have to write a custom main method even to start the simplest of application contexts at this point.

For better or for worse, I actually have rather strong feelings about this. If it is generally feasible that Boot could provide the command line entry point there, could we please try such an arrangement for a start?"
2838,1270189680,wilkinsona,914682,"I'm sure it's feasible and we can give it a try. Before we do that, if we're going to go down the route of having code in Boot that calls `TestAotProcessor`, I am left wondering about the asymmetry of `AotProcessor` and `TestAotProcessor`. IMO, the asymmetry makes sense at the moment because of the different requirements in how the two are used. If we require some code in Boot to call `TestAotProcessor` those requirements are now far more aligned. As such, I wonder if `AotProcessor` and `TestAotProcessor` should also become more aligned. That could be by making `TestAotProcessor` abstract and requiring inheritance as @sbrannen originally proposed or by updating `AotProcessor` to use a composition-based approach."
2839,1270221958,jhoeller,1263688,"Good point, if we're taking that design position, `AotProcessor` and `TestAotProcessor` should be as aligned as possible since they are really the same kind of delegate then. @snicoll @sbrannen what's your take on this? "
2840,1270257507,me0x847206,85886119,"Well, then a question appears: is there any way to correctly remove a bean definition from spring context after a successful bootstrapping process?"
2841,1270416450,jhoeller,1263688,"As per our 6.0 wrap-up discussions and my recent comment on #18079, the module system has not been a priority for 6.0 (for reasons explained in that comment). Not least of it all, we are not shipping module descriptors for jlink usage yet.

There would be some value in removing/reducing our dependency on the `java.desktop` module or rather the `java.beans` package specifically. However, this is not just about our internal delegation to the `java.beans.Introspector`, it is also about the API exposure of the common `java.beans.PropertyEditor` and `java.beans.PropertyDescriptor` types. Since there is plenty of third-party code (not just applications but also libraries) depending on those Spring beans APIs, we cannot easily replace them completely; we'd rather have to phase them out over a longer period and deal with the widespread disruption caused there.

At the same time, the strategic value of not requiring the presence of the `java.desktop` module is also being challenged. GraalVM's native images are based on a reachability algorithm which selectively includes types as they are actually being referenced in application and framework code, independent from deployment-level module boundaries. The proposed notion of ""static images"" in OpenJDK's Project Leyden might follow a similar approach. The benefits of such specifically tailored images outweigh the limited benefits of a custom module selection for jlink, with JDK module boundaries becoming less relevant.

We are considering a reimplementation of the beans introspection algorithm to not have to call the `java.beans.Introspector` anymore. Even that is not to be taken lightly since there are many subtleties in the JDK's algorithm there. Also, a lot of other libraries and frameworks (as commonly found in Spring-based application stacks) also use the `java.beans.Introspector`; only if all of those removed all of their usage of the `java.beans` package, the `java.desktop` module could actually be omitted. This is not likely to happen in the near term, as there has been very little movement in that direction up to now.

Last but not least, we are going to revisit our module system alignment in the context of Project Leyden which intends to build on module system concepts and tools to some degree.  From that perspective, deeper module system alignment remains part of our technology strategy for the Spring Framework 6.x generation."
2842,1270447925,bclozel,103264,"I'm afraid there is not.
What would be the expected behavior in that case? Should all the injected singletons be removed as well? How can we ensure that the global state of the system is not unstable or plain invalid?

As Stephane explained, casting the bean factory like this is not supported.
We might even make some methods throw exceptions once the context has been refreshed."
2843,1270497975,joshlong,54473,"btw the full code example is https://github.com/joshlong/cloud-native-java-2022/blob/main/e2e5/edge2/src/main/java/com/example/edge2/Edge2Application.java  

```java
package com.example.edge2;

import org.springframework.aot.hint.RuntimeHints;
import org.springframework.aot.hint.RuntimeHintsRegistrar;
import org.springframework.aot.hint.annotation.RegisterReflectionForBinding;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.ApplicationListener;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ImportRuntimeHints;
import org.springframework.core.DecoratingProxy;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.support.WebClientAdapter;
import org.springframework.web.service.annotation.GetExchange;
import org.springframework.web.service.invoker.HttpServiceProxyFactory;
import reactor.core.publisher.Flux;

@SpringBootApplication
@RegisterReflectionForBinding(Customer.class)
@ImportRuntimeHints(Edge2Application.Hints.class)
public class Edge2Application {

    static class Hints implements RuntimeHintsRegistrar {

        @Override
        public void registerHints(RuntimeHints hints, ClassLoader classLoader) {
            hints
                    .proxies()
                    .registerJdkProxy(
                            com.example.edge2.CrmClient.class, org.springframework.aop.SpringProxy.class,
                            org.springframework.aop.framework.Advised.class, DecoratingProxy.class
                    );
        }
    }

    public static void main(String[] args) {
        SpringApplication.run(Edge2Application.class, args);
    }

    @Bean
    ApplicationListener<ApplicationReadyEvent> httpClientRunner(CrmClient crmClient) {
        return event -> crmClient.getCustomers().subscribe(System.out::println);
    }

    @Bean
    HttpServiceProxyFactory httpServiceProxyFactory(WebClient.Builder http) {
        return WebClientAdapter.createHttpServiceProxyFactory(http.baseUrl(""http://localhost:8080/""));
    }

    @Bean
    CrmClient crmClient(HttpServiceProxyFactory httpServiceProxyFactory) {
        return httpServiceProxyFactory.createClient(CrmClient.class);
    }
}

interface CrmClient {

    @GetExchange(url = ""/customers"")
    Flux<Customer> getCustomers();
}

record Customer(Integer id, String name) {
}
```"
2844,1270643961,me0x847206,85886119,"I see. Thanks for answer.

The cast part may look strange but, as Internet is full with such incorrect solutions then, most probably it is something needed or asked.

> What would be the expected behavior in that case? Should all the injected singletons be removed as well? How can we ensure that the global state of the system is not unstable or plain invalid?

Is there a chance then, for spring framework, to contain one more layer of abstraction - somewhere around configuration - with a kind of `consumable-scoped` instances of beans which are `instantiated and used` during the application bootstrapping process and immediately `removed` once used? A kind of short-living instances similar to request scoped but at configuration level only.

The reason I'm asking is that currently some kind of spring based applications become over-populated with beans which are not needed for entire application life but at configuration phase only."
2845,1271197165,smilejh,31822475,"HI, @jaesuk-kim0808 
Your solution is very interesting. I have this same problem.
I want your solution code. please share with me."
2846,1271260918,snicoll,490484,"> Custom main methods on the user's side are not that hard to get right. They can make assumptions about the input and its format, or could even hard-code a thing or two for their purposes

That is a compelling argument for not having a `main` method there.

I've tried initially to reuse `AotProcessor` in `TestAotProcessor` but I didn't like the outcome at all. The processing is fairly different and `AotProcessor` does things that `TestAotProcessor` does not need. One improvements I'd like to see is that the constructor doesn't take all these arguments, but rather some sort of container that we can update without breaking the existing contract."
2847,1271406518,drekbour,2863082,"> Using `Optional` as field is not a good practice. https://stackoverflow.com/a/29033935/391148

Agree but this feels dismissive and doesn't change a fairly valid request. Getter `Optional<AnotherDto> getField2()` could just as easily be _computing_ it's return value.

The use-case that drew me here is not to auto-grow an Optional but evaluate through it like this: `obj.optEnum == 'MYENUM_NAME'` where `Optional<MyEnum> getOptEnum()`. The rules on absent etc are fairly self evident.

I think users just want **native handling for `Optional`** as they have for `Collection`. Links to https://github.com/spring-projects/spring-framework/issues/20433"
2848,1271524754,sbrannen,104798,"I don't know why it's different. I merely reported something that I observed.

Though perhaps this only fails in conjunction with the `TestCompiler` and the `CompileWithForkedClassLoaderExtension`.

```
org.springframework.core.test.tools.CompilationException: Unable to compile source


package exists in another module: java.sql /javax/sql/DataSource__TestContext001_BeanDefinitions.java 1:1
```

"
2849,1271620565,sbrannen,104798,"**Team Decision**

After further consideration, we have decided not to make any change to `AopTestUtils.getUltimateTargetObject()` with regard to a non-static `TargetSource` check.

`AopTestUtils.getUltimateTargetObject()` is not designed to be applied to every singleton bean within an `ApplicationContext`. Rather, the methods in `AopTestUtils` are designed for end users who wish to unwrap a proxy within the scope of an individual test where they know that the object is a proxied bean, and we would like to retain that focus.

However, it does make sense to highlight the limitations of `getUltimateTargetObject()` with regard to a non-static `TargetSource`, and we will add a note to the Javadoc to raise awareness.

Regarding the use of `AopTestUtils.getUltimateTargetObject()` in `SpringBootMockResolver`, we suggest introducing a more defensive variant of that code in Spring Boot. For example, something along the lines of the following may work well.

```java
public static <T> T getUltimateTargetObject(Object candidate) {
	Assert.notNull(candidate, ""Candidate must not be null"");
	try {
		if (AopUtils.isAopProxy(candidate) && candidate instanceof Advised advised) {
			TargetSource targetSource = advised.getTargetSource();
			if (targetSource.isStatic()) {
				Object target = targetSource.getTarget();
				if (target != null) {
					return (T) getUltimateTargetObject(target);
				}
			}
		}
	}
	catch (Throwable ex) {
		throw new IllegalStateException(""Failed to unwrap proxied object"", ex);
	}
	return (T) candidate;
}
```

In light of the above, we are closing this issue.

On the Boot side, I've created https://github.com/spring-projects/spring-boot/issues/32632 as a follow up.

On the Framework side, I've created #29276 to address the documentation enhancement.
"
2850,1271683332,sbrannen,104798,"Superseded by:

- #29277"
2851,1271685673,sbrannen,104798,"This has been merged into `main`.

Thanks 👍 "
2852,1271723552,sbrannen,104798,"Hi @oopschen,

Thanks for the feedback.

For 6.0 we will remove the `@TestExecutionListeners` on those 4 base classes to allow users to benefit from default `TestExecutionListener` registration.

Since that may potentially be a breaking change for some users, we will only update the documentation for `5.3.x`. I've created #29281 to address that.

"
2853,1271758408,Drezir,11374081,"> Nice refactor. I have one question: why are the synchronizations not needed?

Because the map is already thread friendly."
2854,1271779429,valituguran,17927827,"> > Nice refactor. I have one question: why are the synchronizations not needed?
> 
> Because the map is already thread friendly.

Indeed the cacheMap is a ConcurrentHashMap and is thread safe."
2855,1271823233,sdeleuze,141109,"It may not looks like, but this issue is IMO more complex than it looks like, so let's have a deep dive.

If we want to start simple, having something like `@RegisterReflection(classes = { FirstConcreteThing.class, SecondConcreteThing.class }, memberCategories = { INVOKE_PUBLIC_CONSTRUCTORS, INVOKE_PUBLIC_METHODS } )` looks appealing to me. It leverages the existing `MemberCategory` class and allows to easily add related hints without having to leverage the more involved `RuntimeHintsRegistrar` programmatic approach. Notice the need will IMO quickly arise to have repeatable annotations  to be able to specify different `MemberCategory` for each classes.

It could be tempting to unify the model and describe as suggested by @wilkinsona `@RegisterReflectionForBinding` by meta annotating it with a more flexible `@RegisterReflection` annotations, and that's where things become tricky. `@RegisterReflectionForBinding({ Foo.class, Bar.class })` is designed to provide not too much but enough hints for reflection based binding:
 - Declared field reflection is registered to be able to take in account field level annotations (used in Spring Data or Jackson for example) to annotate a property at a single place
 - Declared constructors are registered to allow instantiation
 - Getters, setters and record components are registered by taking in account type transitively used (including generics)
 - Some types like `Object` or primitive types are skipped
 - Members are not registered for Java types
 - Special processing happen for enums
The fact that `@RegisterReflectionForBinding` deals with members with different scopes than `MemberCategory`, the transitive discovery of types applied just to properties and record components, and the type/member exclusion rules seems to indicate it will be very challenging to have something we would be happy with. So I have the feeling that trying to unify `@RegisterReflection` and `@RegisterReflectionForBinding` is not necessarily the target, and that if we introduce something like `@RegisterReflection` it should try to not be too clever and basically expose a small subset of what is possible with `RuntimeHintsRegistrar`, at least that's my current feeling. Something we could do is to make `@RegisterReflectionForBinding` customizable by make it possible to specify classes to skip for example, and update `RuntimeHintsRegistrar` accordingly.

Now, I would like to understand a little bit more the use case described.

> A concrete example of the above can be found in some of Spring Boot's actuator endpoints. We have types that need to be serialised to JSON that can't be discovered by @Reflective at the method level. This can be because a method returns something quite loosely typed like Map<String, Object> or Map<String, Thing> where there are multiple different Thing sub-classes. I'd like to be able to annotate the endpoint type with something that registers additional types for a certain kind of reflection:

My 2 questions related to that use case are:
 - If the use case is reflection based binding, what currently prevents using `@RegisterReflectionForBinding({ FirstConcreteThing.class, SecondConcreteThing.class })`? If that's unreasonable bloat of unused reflection hints, could you detail which ones you would like to avoid?
 - Would `@RegisterReflection(memberCategories = { ..., ...}`)` be sufficient for your use case?"
2856,1271829328,wilkinsona,914682,"For the types returned by Boot's actuator endpoints we only need reflective access to the getter methods that are used by Jackson to serialise them to json. As such, I expect that `@RegisterReflection` with `PUBLIC_METHODS` would be sufficient.

This is just one use case of course. My hope was that we could provide a single, easy to use mechanism for registering reflection hints. If we offer both `RegisterReflectionForBinding` and `RegisterReflection`, users now have two different ways of doing the ""same"" thing. If we identify another scenario that falls somewhere in between `RegisterReflectionForBinding` and `RegisterReflection` we'll need to add a third way of doing things. It feels like a bit of a slippery slope and one that I hoped we may be able to avoid by introducing a single, more configurable mechanism that can cover the full range of scenarios all the way from what the actuator endpoints need (just public getters) right through to the far more complex binding that `RegisterReflectionForBinding` covers."
2857,1272267271,snicoll,490484,@jhoeller I didn't see a follow-up issue for the argument resolution that is quite important for XML-based scenarios. I've created another issue.
2858,1272300646,sbrannen,104798,"This has been merged into `main`.

Thanks"
2859,1272328558,sbrannen,104798,"Hi @robert-gdv,

Congratulations on creating your first bug report for the Spring Framework! 👍 

And thanks for bringing this to our attention.

This has been fixed in `5.3.x` for inclusion in 5.3.24.
"
2860,1272607440,bclozel,103264,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
2861,1272670072,snoopyhzy,47825970,"> Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug.

Our project was a normal jsp project ,and resources located in WebContent(web root).
And this project did not have browsing directory security problems until we put the Spring Boot core in our project.
Spring Boot adapter system default servlet and redirect to a wrong server and ignore was settings in ibm-web-ext.xml

Above of all, We suspect spring do someting ignore was settings in ibm-web-ext.

"
2862,1273015679,sbrannen,104798,"> Good point, if we're taking that design position, `AotProcessor` and `TestAotProcessor` should be as aligned as possible since they are really the same kind of delegate then. @snicoll @sbrannen what's your take on this?

There's a lot of overlap (duplication) between the two at the moment.

I think we should:

- introduce an `AbstractAotProcessor` base class that `AotProcessor` and `TestAotProcessor` both extend, and move common properties/functionality to the base class
- potentially change the name of `AotProcessor` to `ContextAotProcessor`
- make `TestAotProcessor` abstract like `AotProcessor`
- remove the `main()` method from `TestAotProcessor`
- consider introducing _Parameter Objects_ for the constructors (""containers"" as suggested by @snicoll)
"
2863,1273063151,poutsma,330665,"Closing this issue, because we have deprecated  `DefaultPartHttpMessageReader`'s streaming mode in 6.0 RC1, in favor of the `PartEvent` API described in #28006."
2864,1273068081,jhoeller,1263688,"Sounds good to me. I also like the name `ContextAotProcessor` next to `TestAotProcessor` but I'm open to other prefixes as well. In any case, let's definitely avoid a plain `AotProcessor` extending an `AbstractAotProcessor` class."
2865,1273071704,poutsma,330665,"Closing this issue, because we have deprecated `DefaultPartHttpMessageReader`'s streaming mode in 6.0 RC1, in favor of `PartEvent` and `PartEventHttpMessageReader` introduced through #28006. In short, the reason is that streaming mode put a lot of restrictions on its consumers, in terms of prefetch, but also other areas. See #28006 for more details, and also #29293.
"
2866,1273093530,sbrannen,104798,">  I also like the name ContextAotProcessor next to TestAotProcessor but I'm open to other prefixes as well.

I'm also open to other prefixes.

The rationale for that proposal was based on the modules in which the processors reside.

- `spring-context`: `ContextAotProcessor`
- `spring-test`: `TestAotProcessor`

Plus the one from `spring-context` processes a single `GenericApplicationContext` (at least as its starting point).

Another naming convention could be based on the context in which the processors are used: `main` and `test` (along the lines of project build folders), leading to `MainAotProcessor` (or maybe `ApplicationAotProcessor`) for the _main_ one.

Thoughts?"
2867,1273094673,sbrannen,104798,"@snicoll & @wilkinsona, shall I put together a proposal and push it to a branch for review?"
2868,1273163535,jmini,1222165,"I found an interesting pointer:

>  If it is of type `Mono`, then spring-reactor-netty will calculate the content length and send a `FullHttpMessage`. If it is of type `Flux`, it will consider this as a chunked content and thus we will not calculate the content length.

source: https://stackoverflow.com/a/57891001"
2869,1273174413,poutsma,330665,Resolved by changing the exception message so that it shows the exact string that the multipart parser is looking for (i.e. `␍␊--<boundary>`). 
2870,1273190267,wilkinsona,914682,"Yes please, @sbrannen."
2871,1273319445,sbrannen,104798,"The redesign proposal can be viewed here: https://github.com/sbrannen/spring-framework/commits/issues/gh-29266-AotProcessor-restructuring

@wilkinsona, @snicoll, and @jhoeller, please provide feedback as soon as possible so that we can make changes before the RC1 release."
2872,1273328281,marwin1991,25181517,Would be nice to have this feature
2873,1273335403,sbrannen,104798,"> I am not sure I understand that. Shouldn't we rather focus on whether this can be useful as a framework utility like plenty of others we don't use ourselves?

I think you might have missed the second half of the last sentence:

""or improve the documentation to make it clear what use cases it's suited for."""
2874,1273350205,snicoll,490484,I didn't. I was expressing a vote for the second option while questioning the first.
2875,1273362735,snicoll,490484,"LGTM, thanks."
2876,1273506649,sbrannen,104798,"OK. If you think it's worth keeping the feature in Framework, we can change the title to focus on improving the documentation."
2877,1273554113,rstoyanchev,401908,"I realize the above snippet is just a way to cause the error, but I do wonder if the root cause is a race condition where the `WebSession` is used while the response is being committed, or a pre-commit action that itself uses the `WebSession`.

For the former, we should arguably reject a concurrent registration, in the call to `beforeCommit`, because the registration otherwise may or may not succeed, depending on exact timing. Generally, the response is committed fairly late, after the controller returns and the response body is written, or at the end of the filter chain, and things happen in order thanks to the reactive chain declaration, so it's a bit hard to picture a concurrent issue but not ruling it out.

For the latter, i think there is a case to allow it, but it'd be useful to confirm that's what happens. I've looked at Spring Security header writers and don't see anything trying to use the `WebSession`, but I could ask @rwinch or @jzheaux to comment whether Spring Security registers any preCommit action with the response that might in turn use the `WebSession` internally?

"
2878,1273609698,sbrannen,104798,"As discussed with @wilkinsona, I pushed changes to address the ""container"" idea for common settings.

We went with a mutable `Settings` class with getters and setters that allow method chaining.

If we want to introduce a _Builder_ API instead, we can revisit this."
2879,1273621737,mikelhamer,10012080,"> There is no guarantee that the variables and template contained in the `RequestEntity` itself are sufficient to be resolved into a URI. 

So then what should I use if I want to pass around RequestEntity objects and then later retrieve their URL?"
2880,1273623583,sbrannen,104798,"> This PR fixes typos.

Thanks

> For your information #27606 has also the same typo in its title.

Not anymore. 😉 "
2881,1273663987,sdeleuze,141109,"For `@RegisterReflectionForBinding`, that may be counter intuitive, but I am not sure in practice it will add more than a potential `@RegisterReflection` on `PUBLIC_METHODS`. The field reflection entry adds almost no overhead and the additional reflection entry on the constructor will be likely more than compensated by the inherited public methods not included like `toString()`, `hashcode()`, `equals()`, etc.

From Spring Native days, one lesson learnt is that binding and reflection based serialization is almost always much more tricky than expected because:
 - You have to register not only the returned type, but also the types returned by the properties/record components
 - You have to take in account types referenced in generics.
 - You may miss the annotations on the field
 - You may forget to add the constructor for deserialization
 - You may be trapped by the fact that `PUBLIC_METHODS` include inherited methods while `DECLARED_METHODS` does not
 - There was no reuse of this non trivial feature across the portfolio which led to inconsistencies, suboptimal footprint and bugs

If you prefer something laser focused on exactly what you need like registering with deep control, you can just implement it in a programmatic `RuntimeHintsRegistrar` way and potentially enable it in a declarative way via `@ImportRuntimeHints`.

Now, should we introduce more declarative hint registration capabilities? Potentially, but I am not sure we have enough time and strong and various enough use cases yet to take the right decisions:
- Should we just limit it to `@RegisterReflection(memberCategories = { ..., ...})`?
- Should we go as far as Spring Native `@TypeHint` ([sources](https://github.com/spring-projects-experimental/spring-native/blob/main/spring-native/src/main/java/org/springframework/nativex/hint/TypeHint.java)) and provide a declarative counterpart to `ReflectionHints` via an annotation?
- Why should we limit to declarative reflection hints? Declarative resource, proxy or serialization hints like done in Spring Native will also be popular use cases. But that can quickly lead to this kind of [giant annotation](https://github.com/spring-projects-experimental/spring-native/blob/main/spring-native-configuration/src/main/java/org/springframework/SpringFrameworkHints.java) which could be considered an annotation abuse so not sure we want to replicate.
- As explained in [my previous comment](https://github.com/spring-projects/spring-framework/issues/29194#issuecomment-1271823233), I am not sure expressing `@RegisterReflectionForBinding` with `@RegisterReflection` meta annotations is doable and what we want.

So today we have 2 strong use cases with `@RegisterReflectionForBinding` which provides a strong added value and will likely need to evolve to be more flexible, and `RuntimeHintsRegistrar` which is much more low level and can provide all the flexibility you need.

RC1 freeze is tomorrow and RC2 is already packed with challenging issues like the GraalVM 22.3 upgrade so fixing this issue for GA sounds like not possible to me (apology for not having processed this issue earlier but I was on other topics). I am not opposed to introduce something in one of the `6.0.x` patch releases if the need is very strong (I am sure a lot of users will ask that) and we agree on the path to take. In the meantime, I would suggest to move forward on https://github.com/spring-projects/spring-boot/issues/32486 with either `@RegisterReflectionForBinding` or `RuntimeHintsRegistrar`."
2882,1273732401,bclozel,103264,Closed with fbb8cdb948f6
2883,1274169694,crazycodeon,30229688,"这是来自QQ邮箱的假期自动回复邮件。
 
您好，我最近正在休假中，无法亲自回复您的邮件。我将在假期结束后，尽快给您回复。"
2884,1274172249,JKAK47,12482698," 你好，已收到你的邮件！我尽快回复。
 
 "
2885,1274235124,bclozel,103264,Enjoy your holiday @crazycodeon 👋
2886,1274247704,act-amirsky,92257392,"Hi,

Trying to give some wait time in order not to spam. I see your 5.3.22 release is out. Have you heard back from MITRE?

From: Brian Clozel ***@***.***>
Sent: Monday, July 18, 2022 10:25 AM
To: spring-projects/spring-framework ***@***.***>
Cc: Aaron Mirsky ***@***.***>; Mention ***@***.***>
Subject: Re: [spring-projects/spring-framework] Sonatype vulnerability CVE-2016-1000027 in Spring-web project (#24434)


EXTERNAL EMAIL


@joubin<https://github.com/joubin> The latest updates we received on the matter suggest that the process is still ongoing on their side, see this twitter thread<https://twitter.com/CVEannounce/status/1534284114290954245> and this GitHub PR<https://github.com/CVEProject/cvelist/pull/5949#issuecomment-1153931058>.

You can reach out to the MITRE team using the CVE form<https://cveform.mitre.org/> if you want to send feedback about this CVE.

—
Reply to this email directly, view it on GitHub<https://github.com/spring-projects/spring-framework/issues/24434#issuecomment-1186855015>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AV73Y4EZUD3PMI7CNIW3MC3VUUBFRANCNFSM4KL4M22Q>.
You are receiving this because you were mentioned.Message ID: ***@***.******@***.***>>

Confidentiality: This communication and any attachments are intended for the above-named persons only and may be confidential and/or legally privileged. Any opinions expressed in this communication are not necessarily those of NICE Actimize. If this communication has come to you in error you must take no action based on it, nor must you copy or show it to anyone; please delete/destroy and inform the sender by e-mail immediately.
Monitoring: NICE Actimize may monitor incoming and outgoing e-mails.
Viruses: Although we have taken steps toward ensuring that this e-mail and attachments are free from any virus, we advise that in keeping with good computing practice the recipient should ensure they are actually virus free.
"
2887,1274283422,snicoll,490484,It turns out that `@ExceptionHandler` is not supported at the moment so I'll expand this issue to support that.
2888,1274317961,bclozel,103264,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug.

When asking this question on StackOverflow, please add the relevant information:

* what do you mean by no response? What would you like the HTTP client to get?
* How is HTTP/2 relevant here? Does it mean that it should send a response for HTTP 1.1?
* How is this specific to Netty? Are you dealing with the Reactor Netty API directly or Spring WebFlux?

Thanks,"
2889,1274357754,rstoyanchev,401908,Maybe consider #17773 as well for potential improvement to the parsing algorithm.
2890,1274372305,sbrannen,104798,- Duplicate of #17771
2891,1274434399,rstoyanchev,401908,"**Team Decision:** We've discussed this and see it as intended behavior, to preserve maximum detail when parsing, so not a bug. You can control `numberClass`, `numberFormat`, and `allowEmpty` through the constructor, but for custom parsing, e.g. combined with extra formatting, just use the existing `PropertyEditor` as a recipie and create your own.
"
2892,1274449298,rstoyanchev,401908,"**Team Decision:** We've discussed this, and don't see it as a good fit on, because it would make it possible to  declare multiple beans of the same type, with different stereotypes. A stereotype annotation really belonging on the class declaration where it's clear the a single class can only be one kind of component.

If this is for autowiring purposes, you could add `@Qualifier`. If not, please provide more details on how you use the stereotype metadata, so we can provide some further guidance.
"
2893,1274581646,snicoll,490484,I'd like that we take an hour to brainstorm together about what can be done. IMO it would be a shame to lose the opportunity to do something before 6.0 GA.
2894,1274584533,jaesuk-kim0808,32669664,"Hi. I share the code I use.
Although it has not yet been used in a real product, performance and functionality will be verified through load tests according to various scenarios in the near future.
Hope this helps. Please let me know if there is a problem.

```
@RequiredArgsConstructor
@Aspect
@Component
public class AsyncCacheAspect {

    private final AsyncCacheManager asyncCacheManager;

    @Pointcut(""@annotation(AsyncCacheable)"")
    public void pointcut() {
    }

    @Around(""pointcut()"")
    public Object around(ProceedingJoinPoint joinPoint) throws Throwable {
        MethodSignature signature = (MethodSignature) joinPoint.getSignature();
        Method method = signature.getMethod();

        ParameterizedType parameterizedType = (ParameterizedType) method.getGenericReturnType();
        Type rawType = parameterizedType.getRawType();

        if (!rawType.equals(Mono.class) && !rawType.equals(Flux.class)) {
            throw new IllegalArgumentException(""The return type is not Mono/Flux. Use Mono/Flux for return type. method: "" + method.getName());
        }

        AsyncCacheable asyncCacheable = method.getAnnotation(AsyncCacheable.class);
        String cacheName = asyncCacheable.name();
        Object[] args = joinPoint.getArgs();

        AsyncCache asyncCache = asyncCacheManager.get(cacheName);
        if (Objects.isNull(asyncCache)) {
            return joinPoint.proceed();
        }

        //Return type : Mono
        if (rawType.equals(Mono.class)) {
            Mono retVal = Mono.defer(() -> {
                try {
                    return (Mono) joinPoint.proceed();
                } catch (Throwable th) {
                    throw new BusinessException(ResultCode.UNKNOWN_ERROR, th.getMessage());
                }
            });

            CompletableFuture completableFuture = asyncCache.get(generateKey(args), (key, exec) -> (retVal).toFuture());
            return  Mono.fromFuture(completableFuture);
        }

        //Return type : Flux
        Mono retVal = Mono.from(Flux.defer(() -> {
            try {
                return  ((Flux) joinPoint.proceed()).collectList();
            } catch (Throwable th) {
                throw new BusinessException(ResultCode.UNKNOWN_ERROR, th.getMessage());
            }
        }));

        CompletableFuture<List> completableFuture = asyncCache.get(generateKey(args), (key, exec) -> (retVal).toFuture());
        return Flux.from(Mono.fromFuture(completableFuture)).flatMap(x -> Flux.fromIterable(x));
    }

    private String generateKey(Object... objects) {
        return Arrays.stream(objects)
            .map(obj -> obj == null ? """" : obj.toString())
            .collect(Collectors.joining(""#""));
    }
}
```

```
@RequiredArgsConstructor
@Component
public class AsyncCacheableMethodProcessor implements BeanPostProcessor {

    private final AsyncCacheManager asyncCacheManager;

    @Override
    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {

        Arrays.stream(bean.getClass().getDeclaredMethods())
            .filter(m -> m.isAnnotationPresent(AsyncCacheable.class))
            .forEach(m -> {
                AsyncCacheable asyncCacheable = m.getAnnotation(AsyncCacheable.class);
                String cacheName = asyncCacheable.name();
                CacheType cacheType = CacheType.nameOf(cacheName);
                if (Objects.nonNull(cacheType)) {
                    asyncCacheManager.computeIfAbsent(cacheName, (key) ->  {
                        return Caffeine.newBuilder()
                            .maximumSize(cacheType.getMaximumSize())
                            .expireAfterWrite(cacheType.getExpiredAfterWrite(), TimeUnit.SECONDS)
                            .buildAsync();
                    });
                }
            });

        return bean;
    }

}
```

```
//This code is in Data access layer.
@AsyncCacheable(name = ""getBySvcId"")
@Override
public Mono<Domain> getBySvcId(String svcId) {}
```

AsyncCacheManager is a spring-bean with ConcurrentHashMap<String, AsyncCache>.
CaheType is an enum that defines the key to be stored in AsyncCacheManager and 'maximumSize, expireAfterWrite' required to create Caffeine's AsyncCache.
"
2895,1274755540,rstoyanchev,401908,All tasks are now complete.
2896,1274786622,gkgeorgiev,7082716,"In addition to the mentioned above, I found out that an advice with such annotation always intercept all methods `@Around(""target(com.example.demo.BusinessRelationshipRepository)"")`

Thx"
2897,1274850041,iyappan,4113634,"**what do you mean by no response? What would you like the HTTP client to get?**
        As we know, in http2 one full transaction identified by stream Id. Is there any way I can close the transaction or stream without regular response. Like sending [RST_STREAM] frame without any other response. 

**How is HTTP/2 relevant here? Does it mean that it should send a response for HTTP 1.1?**
      As of today, I am only looking for http2 based messages only.

**How is this specific to Netty? Are you dealing with the Reactor Netty API directly or Spring WebFlux?**
         Yes I am using Reactor Netty. "
2898,1274876486,Ahmdmslb238,107887510,`لااعرف `
2899,1274929819,sbrannen,104798,Reopening to address the same issue in `AnnotatedElementUtils.getMergedRepeatableAnnotations()`.
2900,1274946007,gianielsevier,61051858,I'm having the same issue I was expecting the spring framework to be agnostic of the server and I could centralize the exception handling from my ControllerAdvice as @wangxing-git  mentioned we can do that when running the application with tomcat. Is there a way to bring this convenience to the framework?
2901,1274957677,sbrannen,104798,"It turns out that we already had support for finding repeatable annotations used as meta-annotations on other repeatable annotations.

This is possible via the `MergedAnnotations` API.

However, the way that `RepeatableContainers` were previously configured in `AnnotatedElementUtils` for the `getMergedRepeatableAnnotations()` and `findMergedRepeatableAnnotations()` methods effectively limited the annotation search in a way that it only supported one type of repeatable annotation.

I fixed this in 828f74f71a068f30b9c158f2a182f7fb9dc50b5e and 9876701493717704cfe6e8258c6f1d6ce0c016e1.

See the commit messages as well as the associated tests for details."
2902,1275148688,vy,72137,"@rstoyanchev, this PR is in our roadmap and we will extensively review it in a week or two. I will really appreciate it if you can allow us some time."
2903,1275161365,rstoyanchev,401908,"@vy, I presume you mean the changes under #28814? Ahead of next week's RC2 would be much appreciated, but either way, I look forward to your feedback."
2904,1275648658,seletz,26406,"Hi, I believe I'm also running into this using spring boot 2.7.3.

I try to implement a AttributeConverter to convert an object to JSON using a custom deserialiser which I registered in a object mapper bean.  Injecting this object mapper to the AttributeConverter fails -- the constructor is never called.

For now I'll resolve this by building the mapper in a static field on the first access, but this seems hacky to me."
2905,1275659246,a364176773,19943636,"@rstoyanchev Sorry I'm just now seeing your message, thanks, and hopefully I'll have the opportunity to contribute again in the future"
2906,1275686638,a364176773,19943636,"https://github.com/spring-projects/spring-framework/commit/badba7c3e976666536522102c9a90f8098be6e0f
This commit doesn't seem to carry support for SpEL expressions
@rstoyanchev "
2907,1275698440,fmbenhassine,1210553,"Shouldn't Spring Framework provide a dedicated `DataFieldMaxValueIncrementer` for MariaDB as well? I think treating MariaDB as an independent database should not be limited to the change in this PR.

For example, we have the same request in Spring Batch (see https://github.com/spring-projects/spring-batch/issues/3891), where we use a `DataFieldMaxValueIncrementer` to increment the IDs of the Batch domain model entities, and it feels odd to use the MySQL incrementer with MariaDB. Do you agree?"
2908,1275706492,xaviertesch,11976791,"Hi @jhoeller,
thanks for looking into this !
Considering the title update, I would simply like to note that the problem is not only in  BeanPostProcessorCacheAwareList, but also in AbstractBeanFactory, as even with a fully thread safe BeanPostProcessorCacheAwareList, at least the two methods named addBeanPostProcessors(...) and addBeanPostProcessor(...) would still not be thread safe. At least unless you would group the remove + add calls in one method in BeanPostProcessorCacheAwareList.

Kind regards,
Xavier"
2909,1275714168,snicoll,490484,@fmbenhassine please create a separate issue where we can have that discussion.
2910,1275717264,jhoeller,1263688,"Good catch. I'm aware of that remove/add part being the problem, we're going to see what we can do about it, maybe providing dedicated operations for those steps in BeanPostProcessorCacheAwareList indeed.

A general note: It is not common to perform post-processor registration concurrently. A typical Spring application startup is primarily single-threaded, at least during the post-processor registration phase.

Out of curiosity, what kind of concurrent startup arrangement are you using there?"
2911,1275800625,xaviertesch,11976791,"On our side, this concurrent initialization was not on purpose. A Thread was started during the initialization phase, using a spring bean and triggering initialization of dependent beans in the Thread. All was working fine until 5.3 when we started to experience Exceptions in a small percentage of our application startups.

Clearly our code wasn't optimal but I thought there was no obvious reason not to make this possible in spring, especially considering the time lost on our side investigating this problem.

Note that we are considering concurrent initialization to improve startup times in the future, so if supported and useful, this might become critical for us again. In the meantime, I made sure not to use a different thread during the initialization phase."
2912,1275825339,rstoyanchev,401908,"Thanks for the comment. From the opening of the spec:
```
   This document defines a ""problem detail"" as a way to carry machine-
   readable details of errors in a HTTP response to avoid the need to
   define new error response formats for HTTP APIs.
```

It uses both singular (""problem detail"") and plural (""machine-readable details"") in the same sentence, so clearly there is something very intentional here. Most of the spec uses plural, but the double quotes around ""problem detail"" seems meant to draw a distinction. Here is my interpretation of it.

The singular form refers to the fact there is one problem to explain, you can choose one HTTP status and reason, and there is one String field called ""detail"". In other words, here is the problem and a description of it. The plural form, by contrast, refers to all the additional fields included in the response, which can be seen as auxiliary details along with the description.

There is a bit of an overlap of terminology there. The spec could have used a different name for the ""detail"" field, perhaps ""description"", ""cause"", or similar. Overall, I think neither `ProblemDetail` nor `ProblemDetails` is wrong. It just depends on your perspective. The former is more focused on the [single] problem / description, and the latter on all the auxiliary fields included in the response.

We'll try and finalize this for RC2 next week, but comments welcome in the mean time.



"
2913,1275829937,rstoyanchev,401908,"Just noticing the PR. For future reference, if you intend to submit a PR, you don't need to create a separate issue. If you create both, we'll close one as superseded by the other. In this case, the conversation has already started under the issue, so I'll close this for now. Thanks for the PR."
2914,1275832727,rstoyanchev,401908,Linking here to a related discussion for the class name `ProblemDetail` in #29303.
2915,1275861218,membersound,5269630,"I would see the `ProblemDetail` class as a wrapper object, which should be singular.
Compare it with shopping: you have several products, and group them into a basket (not into baskets). Or you group them into an order (not orders).

Also, http APIs are usually kept in singular names as best practice.

In contrast, the naming `ProblemDetail**s**` could pretend that it contains multiple `ProblemDetail` objects as an array. Which is not the plan afaik."
2916,1276011760,rstoyanchev,401908,"The reporter tried using SpEL and suggested support for it, but my read of the issue is that the main goal was to inject an array through an external property. So we've added support for a coma-delimited value, which takes care of that goal.
"
2917,1276030819,a364176773,19943636,"@bclozel When can you review the PR, please?"
2918,1276182716,rstoyanchev,401908,"The handling of exceptions before a controller method is selected is a relatively recent Spring MVC feature, added in 5.3 with #22619. We could align the two and provide an equivalent feature in WebFlux. "
2919,1276185860,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
2920,1276189230,violetagg,696661,@rstoyanchev @poutsma PTAL
2921,1276425257,dreis2211,6304496,"> We are considering a reimplementation of the beans introspection algorithm to not have to call the java.beans.Introspector anymore.

That's great to hear, @jhoeller . As we're talking mostly about the modular aspect of this here and the impact on additional classes being loaded in Native, I thought I might give another perspective on this particular sentence. I recently profiled a fairly vanilla Spring-Boot test suite (the project uses Data JPA, Flyway, Web - nothing fancy) and noticed that `java.beans.Introspector` pops up fairly often.

![introspector-impact](https://user-images.githubusercontent.com/6304496/195392297-a23f2820-f434-480b-9fa4-d78b84686d68.jpg)

All these purple blocks show the usage of `java.beans.Introspector`. The madness behind that is that a large chunk of time is spent on finding the `Customizer` classes that 99% of people don't really have. Or looking up `java.lang.ObjectCustomizer` because it looks up superclasses internally. Including throwing & catching `ClassNotFoundExceptions` that are not really exceptional. Etc. As you can hopefully see there are quite a lot of small to big tinted blocks. Optimizing this via Spring's own functionality could be quite substantial for certain projects, so you brought me some joy with your plans.

On the reversed allocation profile for the test suite I get almost 25% of allocations that are only caused by calls to `Introspector` and everything that comes along with it. (Roughly 20% of which are calls to find the `Customizer` classes)
<img width=""1671"" alt=""image"" src=""https://user-images.githubusercontent.com/6304496/195426215-6d3499ab-42fb-43f0-93d3-78f174dd9db1.png"">


But: in all fairness. In our huge projects I only see 1% impact in production, rather than 13% in the mentioned vanilla project test suite. As tests start several application contexts usually it's not far fetched that the whole beans infrastructure - including `Introspector` - is more common in these profiles like I showed here. The truth is probably somewhere in the middle.

Maybe this particular aspect is worth its own ticket, though?"
2922,1276755984,fredo999,115666482,"I believe the issue is with the request being sent without a CRLF sequence. Postman is sending only LF at the end of lines, which is causing the error. Is there any way around this problem?"
2923,1276902429,quaff,143040,"FYI: spring-security use `UserDetails` instead of `UserDetail`, and .net use `ProblemDetails` instead of `ProblemDetail`."
2924,1277136169,membersound,5269630,And AWS is using `ProblemDetail` (https://docs.aws.amazon.com/de_de/devicefarm/latest/APIReference/API_ProblemDetail.html). You probably find both ways 50:50.
2925,1277229270,rstoyanchev,401908,"The Spring Security example isn't something to go by. Yes, the same ending, but other than that, its own context and reasons. Let's stick to the case of RFC 7807. I've already laid out [my interpretation](https://github.com/spring-projects/spring-framework/issues/29303#issuecomment-1275825339) of the language used there. If you have any comments or thoughts on that, please share.

@membersound I take it you see this as the plural applying to both ""problem"" and ""detail"", and that there is only one problem to be detailed.  

"
2926,1277307916,vpavic,1149230,"FWIW, I agree with the current naming and interpretation outlined by @rstoyanchev.

The way I see it, this is a part of story that's basically about translating an exception (singular) to some specific representation of the underlying error. The translation is 1:1 so it seems natural to me to name the representation as `ProblemDetail` (singular again)."
2927,1277316130,snicoll,490484,I believe the value in your YAML configuration needs to be quoted. Can you please try that?
2928,1277341589,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
2929,1277380721,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
2930,1277556157,bellatoris,14350953,duplicated with https://github.com/spring-projects/spring-framework/issues/29192
2931,1277690899,sbrannen,104798,"Good catch!

This has been merged into `main`.

Thanks"
2932,1277911913,jhoeller,1263688,"@dreis2211 We decided to move forward with the Introspector bypass for 6.0 still, in time for Boot 3.0 RC1 next week: #29320
The implementation that is about to be pushed there passes the entire core test suite already."
2933,1277925753,dreis2211,6304496,"@dsyer said ""It is fairly inefficient"", which is very polite of him but I want to stretch on that a bit: 

I was profiling a test-suite the other day whose allocations flame-graphs have ~63% 
 of the frames only matched by classgraph scanning that is entirely caused by resolving/locating webjars. 
<img width=""1319"" alt=""image"" src=""https://user-images.githubusercontent.com/6304496/195658252-49b92c6d-970f-47ab-bf14-27f4e90e3b70.png"">

Now of course this doesn't translate to CPU 1:1 where it's only ~10%, but notice how much is spent in G1 garbage collection on top of that (unsurprisingly).
<img width=""1319"" alt=""image"" src=""https://user-images.githubusercontent.com/6304496/195660081-5911a398-5d85-4b01-ac44-67dbb2f8d10c.png"">

A test-suite is obviously not a production environment where this isn't as noticeable. But tests usually start several contexts and the general startup routine is executed more often usually. So working on improving that inside Spring directly might be a tremendous boost in developer productivity for certain projects, because it will directly impact test suites, startups etc..."
2934,1277956125,dreis2211,6304496,"That's great news, thanks @jhoeller . Unfortunately, the projects I'm profiling these days are far away from being able to test this easily though. I will report back as soon as I get hold of an internal project here that is willing to experiment with Spring-Boot 3 :)"
2935,1278373240,quaff,143040,The code originate from `asm` project not `springframework` self.
2936,1278377993,divcon,7947445,"> The code originate from `asm` project not `springframework` self.

Does it mean that this pr is not valid in spring framework project?"
2937,1278438642,quaff,143040,"> > The code originate from `asm` project not `springframework` self.
> 
> Does it mean that this pr is not valid in spring framework project?

I think so."
2938,1278455785,divcon,7947445,"> > > The code originate from `asm` project not `springframework` self.
> > 
> > 
> > Does it mean that this pr is not valid in spring framework project?
> 
> I think so.

Thanks for your comment.
Then I will close this issue."
2939,1289413105,raddatzk,8616693,Seems like `@ComponentScan` also accepts nested `@Configuration` classes. Maybe doing an additional check if the candidate has a parent conditional `@Configuration` before parsing the candidate?
2940,1278738781,jhoeller,1263688,"Our initial experience with this is pretty compelling, both for native images and for regular JVM deployments. In microbenchmarks, the new ""basic"" discovery is about 10 times faster than ""standard"" Introspector usage when `spring.beaninfo.ignore=true` (the optimization flag available before) has been set - against default Introspector settings, the new algorithm is even about 16 times faster.

It's worth noting that the algorithm can be customized in 5.3 as well, using the `BeanInfoFactory` mechanism. Plugging in a custom `SimpleBeanInfoFactory` with the equivalent of our ""basic"" algorithm should work for 5.3 as-is, ideally ordering it before `ExtendedBeanInfoFactory` (the 5.3 implementation that handles non-void setter methods) since it covers that part as well.

We could potentially backport such a `SimpleBeanInfoFactory` as an optional variant for configuration in a custom `META-INF/spring.factories` file, for performance-critical scenarios where the `spring.beaninfo.ignore=true` property does not make enough difference. If the wider integration tests against 6.0 do not reveal problems, we could even do so for 5.3.24 already."
2941,1278740202,jhoeller,1263688,"@dreis2211 see my comment on #29320 - we could potentially backport an optional variant of this to 5.3.x. Let's continue the conversation over there, we've been hijacking this thread enough already :-)"
2942,1278764641,dreis2211,6304496,"Have you measured the memory impact, by any chance?
I wouldn't have anything against this to be backported - on the contrary. I wrote a little agent for testing reasons that instrumented/transformed `Introspector.findCustomizerClass` to simply return null and that showed ~5-20% (on average I'd say little less than 10%) improvement for the **test suites** I have at hand. For normal startups and deployments it's barely noticeable unfortunately. But it's great to hear that you see positive results.
"
2943,1278796613,jbesta,1836647,"Hi,

I'm facing exactly same issues as @xak2000 mentions. I'm using validation of `JsonNullable` from https://github.com/OpenAPITools/jackson-databind-nullable"
2944,1278828376,jhoeller,1263688,"We're substituting the same thing for native images: `Introspector.findCustomizerClass` to return null. We might keep doing this even with our new introspection algorithm in place, for third-party use of Introspector to be covered.

No memory numbers yet. The footprint is as minimal as possible now, so I would expect a measurable difference. Like with startup time, not sure whether it will really matter in regular application bootstrap, but it's the best we can do in terms of streamlining for the introspection functionality that 99.9% of Spring-based applications actually need.

For the time being, I've extracted a `SimpleBeanInfoFactory` as an internal delegate for `SimpleBeanInfo` adaptation in 6.0. This is also prepared for a straightforward backport to 5.3.x whenever we decide to proceed with it: picking a slightly modified version of `SimpleBeanInfoFactory` (turning `public`) along with a slightly modified version of `PropertyDescriptorUtils.determineBasicProperties` (using `Introspector.decapitalize` instead of `StringUtils.uncapitalizeAsProperty`)."
2945,1278833453,vpavic,1149230,"@dreis2211 If you have time and are willing to, maybe you could do the same profiling session against the `WebJarsResourceResolver` implementation I've prepared in [vpavic/spring-framework/tree/gh-27619](https://github.com/vpavic/spring-framework/tree/gh-27619)? Just for sake of showing the impact of the proposed changes.

I still can't understand downside of having this natively in Spring as:
- it's just some 20 lines of code to maintain
- it removes the need for 3rd party dependency (and its own transitive dependencies)
- it's much more efficient
- it only uses Spring's own facilities to interact with class path resources (nothing more is really needed, because as @dsyer points out, WebJars have a well-defined structure)"
2946,1278849248,dreis2211,6304496,"@vpavic I've profiled against a slightly trimmed down version of @dsyer's proposal which looks very similar to yours. (But e.g. we don't need the NPM lookup in our projects). The impact on the flamegraphs is pretty obvious. No block of classpath scanning anymore (no purple block anymore on the left)
<img width=""1670"" alt=""image"" src=""https://user-images.githubusercontent.com/6304496/195829555-e1dd528f-e85c-4780-9795-fd7b7c2477d8.png"">

Unfortunately, the allocation profiles are almost 700MB large and have trouble to be rendered at the moment, but I assume the impact is of course also noticeable there. (I will add that once I have proof - might be next week though). 

**EDIT**: Here we go. As expected no `classgraph` frames anymore (no purple blocks).
<img width=""1315"" alt=""image"" src=""https://user-images.githubusercontent.com/6304496/195833507-41881872-482e-4e82-9922-69082bac3a2e.png"">


The impact on GC didn't turn out to be that huge as you can tell from the CPU profile. Which is somewhat explainable by the fact that our environment is fairly memory restricted and probably busy anyway with GC. Even with the included improvement.

Now to the actual timing improvements: hard to say. My local tests (on a Macbook) showed **10-15%** improvement in terms of times, tests on our CI environment (Linux Jenkins) only **5-10%** (and unfortunately more to the 5% side). It also hardly depends on the test suite of course. E.g. how many test application contexts are started (where the classpath scanning is done) etc.. So some projects might benefit, others won't. For example and fairness reasons, I have some internal projects that are highly optimized to not start too many tests contexts, that will barely benefit, I suppose.

TL;DR: Actual impact on timing could be better - or at least I hoped for more - but it's definitely noticeable."
2947,1278859806,dreis2211,6304496,"For completeness reasons if someone is interested: https://github.com/dreis2211/remove-introspector-customizer-agent
I've put my little agent in a project for the interested bunch and poor souls that might not be able to try the goodness that @jhoeller is crafting 😉 "
2948,1278926865,jamesward,65043,"Optimizing the runtime approach is great but I'd still really like to see a compile time approach as well.  For run time - @vpavic if that doesn't make sense in the spring project we could create a webjars-locator-spring project for it.  For compile time, could we rely on the spring gradle & maven plugins to provide what we need (webjars on classpath to a mapping file)?"
2949,1279013125,sdeleuze,141109,"@dreis2211 Thanks for those useful feedback.

I strongly care about this use case, and I understand it can be tempting to solve it on Spring side as a workaround but I agree with @bclozel, we should not implement this logic in Spring Framework especially without any spec, this should be provided by a WebJars library integrated by frameworks like Spring, as that would also benefits to others.

@jamesward I am not aware of all the details of WebJars, but based on @dsyer and @vpavic experiments like https://github.com/vpavic/spring-framework/tree/gh-27619 I am not sure there is a need for a build-time approach. I think the proposed approach which consists in resolving at runtime the version from the embedded `pom.properties` is efficient, does not require any scanning, and it also works on native (with the related resource hints). IMO the best outcome would be to have this approach contributed in a WebJars library, ideally directly in `webjars-locator-core`, and we would update `WebJarsResourceResolver` to leverage it. If it is not possible in `WebJarAssetLocator`, could be in another class. If you are open to that, maybe you could provide some guidance in order to allow @dsyer, @vpavic or somebody else who would be interested to contribute it on https://github.com/webjars side?

In the meantime, since we need a short term solution, I have created #29322 to recommend using for the time being WebJars versioned URL + resourceLocations configuration without `WebJarsResourceResolver`. Happy to refine it to recommend again using `WebJarsResourceResolver` when there will be a way to use it without the scanning overhead and the impact on native image compatibility."
2950,1279050080,vpavic,1149230,"I'd happily contribute this wherever is deemed as best fit, naturally with some guidance if it's outside of Spring.

However, if lack of formal spec is what prevents this from landing in Spring, I really wonder if that route is preferred. Because as @jamesward mentioned in https://github.com/spring-projects/spring-framework/issues/27619#issuecomment-1194385157, class path reading feels like something that should be done in Spring having in mind it has its own facilities to do so."
2951,1279063693,sdeleuze,141109,Looks pretty straightforward to implement without Spring using `getResourceAsStream()` + `Properties` unless I miss something.
2952,1279074109,baso53,8758580,Updated the pull-request with the fix for previously failing tests added with the submitted changes.
2953,1279114755,dsyer,124075,"I also don't understand the reluctance to do something simple in Spring, but @sdeleuze is correct - there's nothing Spring-specific about the implementation, and you can do it simply using only JDK library APIs. I opened an issue over in Webjars in case we can agree on something sensible over there (https://github.com/webjars/webjars-locator-core/issues/96). @jamesward will probably have noticed already."
2954,1279237909,jhoeller,1263688,"Actually, now that we have a complete fork there just like with ASM, we can apply some general enhancements. We have patched CGLIB significantly in the meantime, and effectively have to maintain it ourselves now. So thanks for the PR, I'll merge it right away!"
2955,1279361949,jamesward,65043,"Thanks all for the progress on this.  I had assumed at some point Spring was doing some classpath scanning already that WebJars could potentially piggyback on to avoid double scanning.  Has that thread of thought reached the end-of-the-line?

I think it makes sense to move the discussion about improving the runtime locator support to: https://github.com/webjars/webjars-locator-core/issues/96

For build time locator support, a question... would it make any sense to explore doing this as part of Spring's existing Gradle & Maven plugins or should we really move that discussion out to somewhere Spring-less as well?"
2956,1279504475,sdeleuze,141109,"> Thanks all for the progress on this. I had assumed at some point Spring was doing some classpath scanning already that WebJars could potentially piggyback on to avoid double scanning. Has that thread of thought reached the end-of-the-line?

Hey James. Typical Spring Boot application only performs scanning of the user package to discover classes so nothing reusable for WebJars use case.

> I think it makes sense to move the discussion about improving the runtime locator support to: webjars/webjars-locator-core#96

I agree.

> For build time locator support, a question... would it make any sense to explore doing this as part of Spring's existing Gradle & Maven plugins or should we really move that discussion out to somewhere Spring-less as well?

I don't think a build time approach makes sense here because scanning seems not needed for Spring (and probably most other frameworks) use case, so the extra complexity of a such approach would be hard to justify. I think exploring scanning-less at runtime implementation as part of webjars/webjars-locator-core#96 via Maven property metadata is really the best way to move forward."
2957,1279530225,simplyanything,19511300,"@SFBorland I haven't found any viable solution yet, sadly. "
2958,1279710999,hantsy,854520,"Oh, it is still lack of support in RC1. And as planed Spring 6 will be finally released in the next month, it means bean validation on Record will not work in Spring 6 GA?"
2959,1279986268,cmdjulian,33688601,"I also did encounter the problem for a for two other situations:

Mind the following controller:

```kotlin
@RestController
@RequestMapping(NOTE_ENDPOINT)
class NoteController(private val service: NoteService) {

    @PostMapping
    fun createNote(@PathVariable notebookId: UUID, @Valid @RequestBody command: NoteCommand): NoteDto {
        return service.createNote(command.toNote(notebookId), command.tags).toDto()
    }

    @GetMapping
    fun findNotes(@PathVariable notebookId: UUID, filters: NoteFilters): List<NoteDto> {
        return service.findNotes(notebookId, filters.tagNames, filters.content).map(Note::toDto)
    }
}

data class NoteCommand(

    @get:Size(min = 3, max = 128)
    val title: String,

    @get:Size(max = 65536)
    val content: String?,

    val tags: List<String> = emptyList()

)

data class NoteFilters(val tagNames: List<String>?, val content: String?)
```

Sending a valid `NoteCommand` works as expected. But if some of the constraints are violated, an error is raised resulting in a 500 server error, as the previously described problem is triggered as well.

Secondly, requesting the collection endpoint, having a container object for a bunch of request parameters, in my case `NoteFilters`, also causes the application to respond with a 500 server error because of missing reflection config.

Bot can be prevented by registering the aforementioned types in the reflect config, something like that works:

```kotlin
class AotConfig : RuntimeHintsRegistrar {
    override fun registerHints(hints: RuntimeHints, classLoader: ClassLoader?) {
        hints.reflection().registerType(NoteCommand::class.java, *MemberCategory.values())
        hints.reflection().registerType(NoteFilters::class.java, *MemberCategory.values())
    }
}
```

with `src/main/resources/META-INF/spring`: 
```
org.springframework.aot.hint.RuntimeHintsRegistrar=com.example.app.config.AotConfig
```
"
2960,1279986717,sdeleuze,141109,"Interestingly, WebJars versioned URLs work out of the box with Spring Boot which configures `/META-INF/resources` resource location by default (at least for now, see spring-projects/spring-boot#28295 related issue) so no need for `WebMvcConfigurer` bean for regular use case."
2961,1280001630,sdeleuze,141109,[This branch](https://github.com/sdeleuze/spring-framework/commit/pre-compute-feature) contains the draft commit of the new feature now names `PreComputeFieldFeature` and directly integrated in `spring-core` module since it does not require anymore JPMS exports of GraalVM internal classes.
2962,1280002717,sdeleuze,141109,"This kind of issue should be reported on https://github.com/oracle/graalvm-reachability-metadata side, and has already be fixed via https://github.com/oracle/graalvm-reachability-metadata/pull/68 that is available in GraalVM reachability repository 0.2.2+."
2963,1280251375,sreeraj2408,69113398,I found somewhat similar issue from spring-webflux 5.3.16 in my project. Is the root cause confirmed and fixed? 
2964,1280363141,smilejh,31822475,Thank you. This is very helped me.
2965,1280404894,vpavic,1149230,"Did you consider linking to WebJars' own documentation, more specifically to [its Spring MVC section](https://www.webjars.org/documentation#springmvc)?

It is a bit dated (I'll try to open a PR to address that) but it should cover everything."
2966,1280505577,sdeleuze,141109,Missing hints on `FetchableFluentQuery` should probably be reported in https://github.com/spring-projects/spring-data-commons/issues.
2967,1280533052,sdeleuze,141109,"We could maybe support something like:
```
@RegisterReflectionHint(Foo.class, memberCategories = { ..., ...})
@RegisterReflectionHint(Foo.class, binding = true)
@RegisterReflectionHint(classNames = ""com.example.Foo"", memberCategories = { ..., ...})
@RegisterResourcesHint(""META-INF/resources/webjars/*"")
@RegisterSerializationHint(Foo.class)
```"
2968,1280664600,sdeleuze,141109,@cmdjulian Could be a different issue. I have created https://github.com/spring-projects/spring-framework/issues/29331 for something I have been able to reproduce. Please create another issue if you see other problems and please add a repro prject + the exception you see.
2969,1280681146,jhoeller,1263688,The 5.3.x backport should be available in the current snapshot there now: #29330
2970,1280728097,cmdjulian,33688601,"Okay, will do, thanks!"
2971,1280867051,poutsma,330665,"> I believe the issue is with the request being sent without a CRLF sequence. Postman is sending only LF at the end of lines, which is causing the error. Is there any way around this problem?

From Spring Framework's side, there is no way around the CRLF check, as that is specified in [RFC 1521](https://www.rfc-editor.org/rfc/rfc1521.html#section-7.2.1).

So the only way I can think of is to make sure postman sends proper multipart requests. Perhaps [this comment](https://github.com/spring-projects/spring-framework/issues/28067#issuecomment-1241816839) can help you."
2972,1280949798,jonnybecker,2277642,Will `RestTemplate` then come out of maintenance mode or maybe the `WebClient` will get a non reactive API on top?
2973,1281089110,sdeleuze,141109,"Good point, feel free to provide a PR to refine."
2974,1281126912,xenoterracide,5517,"reading your patch... this was only fixed for synchronized? why not unsynchronized? why is it not for everything? I'm trying to figure out if I'm getting cache hits (seems to be misses), nothing is being logged for calls to this this method... even though I'm definitely calling it, it does seem to have cache misses.

```log
2022-10-17 12:09:07.172 TRACE 77112 --- [  restartedMain] o.s.c.a.AnnotationCacheOperationSource   : Adding cacheable method 'findAll' with attribute: [Builder[public java.util.List com.capitalone.e1.domain.core.dmsr.BusinessDivisionRepository.findAll()] caches=[book-divisions] | key='' | keyGenerator='' | cacheManager='' | cacheResolver='' | condition='' | unless='' | sync='false']
```

 just using simple cache per the reference docs as I have not configured anything regarding the cache starter.
 
```properties
spring.cache.cache-names=book-divisions
spring.cache.caffeine.spec=maximumSize=1000,expireAfterAccess=60s
```"
2975,1281140155,xenoterracide,5517,worth mentioning if the log isn't saying it that method has no arguments
2976,1281235218,sbrannen,104798,"This has been addressed in `main`.

> Only affects `@URL` amongst those I use, so there could be more or it could be a one-off. Not certain.

It applied to Bean Validation `@Constraint` annotations that were meta-annotated with other `@Constraint` annotations. Hibernate's `@URL` annotation is meta-annotated with `@Pattern`, and the former overrides attributes in the latter."
2977,1281323932,bclozel,103264,"Thanks a lot @izeye for the PR, this triggered an extensive review from the team and we decided to reorganize things more. I'm closing this PR in favor of #29334"
2978,1281610659,Tristan971,875533,"Makes sense, thanks!"
2979,1281828733,tukez,5762429,"I'm running into the same bug. Here is a full stack trace.

```
2022-10-17 12:26:19.947 [reactor-http-epoll-2] ERROR reactor.core.publisher.Operators - Operator called default onErrorDropped
io.netty.util.IllegalReferenceCountException: refCnt: 0, decrement: 1
	at io.netty.util.internal.ReferenceCountUpdater.toLiveRealRefCnt(ReferenceCountUpdater.java:83)
	at io.netty.util.internal.ReferenceCountUpdater.release(ReferenceCountUpdater.java:147)
	at io.netty.util.AbstractReferenceCounted.release(AbstractReferenceCounted.java:76)
	at org.springframework.messaging.rsocket.annotation.support.MessagingRSocket.lambda$handleAndReply$5(MessagingRSocket.java:176)
	at reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.runFinally(FluxDoFinally.java:146)
	at reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.cancel(FluxDoFinally.java:135)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.cancel(FluxOnAssembly.java:654)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.cancel(MonoIgnoreElements.java:104)
	at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.cancel(FluxConcatArray.java:286)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.cancel(FluxOnAssembly.java:654)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.cancel(FluxContextWrite.java:141)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.cancel(FluxOnAssembly.java:654)
	at reactor.core.publisher.Operators.terminate(Operators.java:1240)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.cancel(MonoFlatMapMany.java:131)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.cancel(FluxOnAssembly.java:654)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.cancel(FluxOnAssembly.java:654)
	at io.rsocket.core.RequestStreamResponderSubscriber.handleCancel(RequestStreamResponderSubscriber.java:300)
	at io.rsocket.core.RSocketResponder.cleanUpSendingSubscriptions(RSocketResponder.java:193)
	at io.rsocket.core.RSocketResponder.doOnDispose(RSocketResponder.java:172)
	at io.rsocket.core.RSocketResponder.tryTerminate(RSocketResponder.java:106)
	at io.rsocket.core.RSocketResponder.tryTerminateOnConnectionClose(RSocketResponder.java:99)
	at reactor.core.publisher.LambdaMonoSubscriber.onComplete(LambdaMonoSubscriber.java:135)
	at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onComplete(SecurityReactorContextConfiguration.java:176)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:549)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:549)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:549)
	at reactor.core.publisher.SinkEmptyMulticast$VoidInner.complete(SinkEmptyMulticast.java:238)
	at reactor.core.publisher.SinkEmptyMulticast.tryEmitEmpty(SinkEmptyMulticast.java:70)
	at reactor.core.publisher.SinkEmptySerialized.tryEmitEmpty(SinkEmptySerialized.java:46)
	at io.rsocket.internal.BaseDuplexConnection.dispose(BaseDuplexConnection.java:51)
	at io.rsocket.transport.netty.WebsocketDuplexConnection.lambda$new$0(WebsocketDuplexConnection.java:54)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)
	at io.netty.channel.DefaultChannelPromise.trySuccess(DefaultChannelPromise.java:84)
	at io.netty.channel.AbstractChannel$CloseFuture.setClosed(AbstractChannel.java:1164)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.doClose0(AbstractChannel.java:755)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.close(AbstractChannel.java:731)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.close(AbstractChannel.java:620)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.close(DefaultChannelPipeline.java:1352)
	at io.netty.channel.AbstractChannelHandlerContext.invokeClose(AbstractChannelHandlerContext.java:622)
	at io.netty.channel.AbstractChannelHandlerContext.close(AbstractChannelHandlerContext.java:606)
	at io.netty.channel.AbstractChannelHandlerContext.close(AbstractChannelHandlerContext.java:472)
	at io.netty.channel.DefaultChannelPipeline.close(DefaultChannelPipeline.java:957)
	at io.netty.channel.AbstractChannel.close(AbstractChannel.java:244)
	at reactor.netty.DisposableChannel.dispose(DisposableChannel.java:72)
	at reactor.netty.channel.ChannelOperations.dispose(ChannelOperations.java:203)
	at reactor.netty.transport.ServerTransport$ChildObserver.onStateChange(ServerTransport.java:474)
	at reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:478)
	at reactor.netty.http.server.WebsocketServerOperations.lambda$onInboundNext$1(WebsocketServerOperations.java:154)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:552)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)
	at io.netty.util.concurrent.DefaultPromise.addListener(DefaultPromise.java:184)
	at io.netty.channel.DefaultChannelPromise.addListener(DefaultChannelPromise.java:95)
	at io.netty.channel.DefaultChannelPromise.addListener(DefaultChannelPromise.java:30)
	at reactor.netty.http.server.WebsocketServerOperations.sendCloseNow(WebsocketServerOperations.java:262)
	at reactor.netty.http.server.WebsocketServerOperations.sendCloseNow(WebsocketServerOperations.java:245)
	at reactor.netty.http.server.WebsocketServerOperations.onInboundNext(WebsocketServerOperations.java:154)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:93)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.rsocket.transport.netty.server.BaseWebsocketServerTransport$PongHandler.channelRead(BaseWebsocketServerTransport.java:60)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:327)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:299)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)
	at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:487)
	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:385)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
```"
2980,1281932682,vladimirfx,1281463,I think is better to enhance Java HTTP client support instead of rehidrate RestTemplate. 
2981,1281940680,bclozel,103264,Thanks for having a look at this last minute refactoring @izeye !
2982,1281982963,sbrannen,104798,"I imagine this is due to the change in d21eea7de4259a1b0636d132406091905b9755cf, since we explicitly only return ""regular files"" as a result of that.

@wilkinsona had reported a regression in that we _started_ returning directories and had not done so before.

And now _this_ issue is claiming that we did previously return directories and no longer do.

So these two claims seem to contradict, but perhaps it's due to a nuance in the patterns that are used."
2983,1281999260,sbrannen,104798,"I just confirmed that removing `Files.isRegularFile(path)` from the `isMatchingFile` predicate in `PathMatchingResourcePatternResolver.doFindPathMatchingFileResources()` allows the `configdir/subdir` to be found again (as was to be expected).

So if we revert that change, we'll need to investigate a different solution to the issue raised by @wilkinsona."
2984,1282006099,wilkinsona,914682,https://github.com/spring-projects/spring-boot/commit/7eb8abbda86da7a456148cfae7d5f2cd466bbf9a is the change that I had to make when the behaviour first changed and https://github.com/spring-projects/spring-boot/commit/03b3a772c9d1b8157ee15c935bd3fdb86c073cb3 is the change after https://github.com/spring-projects/spring-framework/commit/d21eea7de4259a1b0636d132406091905b9755cf. Hopefully the tests that were affected  show the patterns that were involved.
2985,1282064733,sbrannen,104798,"It looks like the difference between returning directories and not is that a pattern like `subdir/**` now (in Framework 6) returns `subdir/` as a matching resource; whereas, in Framework 5.3.x and prior `subdir/**` did not match against `subdir/`."
2986,1282148650,cunhap,64083007,"Hey guys, having the same problem here using `spring data elasticsearch`. Any news? @rstoyanchev"
2987,1282151595,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
2988,1282174715,Linda-pan,18511489,"if set config 
```
 test:
   date: 2022-10-18 00:00:00
```

then error log shows
```
Failed to convert from type [java.lang.String] to type [@org.springframework.beans.factory.annotation.Value java.util.Date] for value 'Tue Oct 18 08:00:00 SGT 2022'; 
```
if set config
```
 test:
   date: ""2022-10-18 00:00:00""
```

then error log shows
```
Failed to convert from type [java.lang.String] to type [@org.springframework.beans.factory.annotation.Value java.util.Date] for value '2022-10-18 00:00:00''; 
```
if not config and set default value to @Value。
` @Value(""${test.date:2022-10-13 00:00:00}"")`

then error log shows
```
Failed to convert from type [java.lang.String] to type [@org.springframework.beans.factory.annotation.Value java.util.Date] for value '2022-10-13 00:00:00'
```

I think there are two problems, one is that when the @Value is in a bean, the bean cannot support the default date value in the format ""yyyy-MM-dd HH:mm:ss"". Another is when the @Value is in a bean and region is similar to ""Asia/Singapore"",the time with timezone from environment config which resolved by snakeyaml may cause a parsing error.

These are pivotal code:
get value with timezone
`org.springframework.beans.factory.support.DefaultListableBeanFactory#doResolveDependency(DefaultListableBeanFactory:1332)`  
```
1331          if (value instanceof String) {
1332   	          String strVal = resolveEmbeddedValue((String) value);
1333	          BeanDefinition bd = (beanName != null && containsBean(beanName) ?
1334			          getMergedBeanDefinition(beanName) : null);
1335	          value = evaluateBeanDefinitionString(strVal, bd);
1336         }
```
and create Instance
`org.springframework.core.convert.support.ObjectToObjectConverter#convert(ObjectToObjectConverter.java:115)`
```
112        else if (executable instanceof Constructor) {
113		   Constructor<?> ctor = (Constructor<?>) executable;
114		   ReflectionUtils.makeAccessible(ctor);
115		   return ctor.newInstance(source);
116	     }
```
then go to `java.util.Date#parse`
"
2989,1282176022,jhoeller,1263688,"I've slightly repurposed this issue for revisiting our fallback parsing behavior there. Based on the scenario described above, we should indeed leniently accept the default `parse` format of every `java.time` type.

This is different from switching `useIsoFormat` to `true` since that affects printing as well and generally bypasses other style settings. Also, this new ISO fallback behavior only kicks in if no fallback patterns have been specified, so it's easy to bypass."
2990,1282180486,jhoeller,1263688,"Related enhancements in 6.0: #1215, #19846"
2991,1282639124,sbrannen,104798,"**Update**: I do not have time to resolve this issue before the 6.0 RC2 release tomorrow; however, I have checked in tests that verify the status quo for `5.3.x` and merged those to `main` (with failing tests `@Disabled`) in 004875670b1e4476c9ffe4030f3b455c45e35f97.

The disabled tests should help us to sort out the differences between `5.3.x` and `main`."
2992,1282667791,sdeleuze,141109,"GraalVM 22.3 artifacts are now available on Maven Central, for example in https://repo1.maven.org/maven2/org/graalvm/sdk/graal-sdk/, but let's wait Liberica NIK 22.3 before pushing the upgrade."
2993,1282953091,1997sanket,61391940,Hi @sbrannen I am new to open source and want to contribute. Can I try with the documentation change ?  
2994,1282973136,jhoeller,1263688,"With some custom treatment, we can restore the original intent of #27716 as well as preserve square brackets for index/key expressions. Finally making it into RC2..."
2995,1283532599,jhoeller,1263688,"Scoped proxy detection seems to be broken at the moment due to an explicit ""decorated definition"" bypass in the BeanFactory implementation, always determining the type of the target bean instead. Removing that bypass makes the proxy discoverable through `ScopedProxyFactoryBean.getObjectType()` as part of our regular `preDetermineBeanTypes` algorithm, for CGLIB proxies as well as JDK proxies (auto-inferring the runtime hints for the latter).

The remaining question is why that (old) type determination bypass was needed in the first place. I'll revise this towards not being necessary for scoped proxies anymore at least, in time for the RC2 release."
2996,1283569126,bclozel,103264,Thanks @izeye !
2997,1283579445,violetagg,696661,"@rstoyanchev PTAL
I moved the ownership change from `Netty5WebSocketSessionSupport#toMessage` to `WebSocketMessage#retain`"
2998,1283583701,jhoeller,1263688,"This should work now, with CGLIB proxy classes captured as well as runtime hints registered for both types of scoped proxies (no explicit hints necessary for either anymore)."
2999,1283599953,sdeleuze,141109,"The logic to support this use case is quite involved and the simplified one we have currently implemented in [ControllerMappingReflectiveProcessor#registerParameterTypeHints](https://github.com/spring-projects/spring-framework/blob/6b6cf1b4a2f8b03693876dd7b534b49c48a288bd/spring-web/src/main/java/org/springframework/web/bind/annotation/ControllerMappingReflectiveProcessor.java#L78) won't be able to cover this usage of `ServletModelAttributeMethodProcessor` in catch-all mode configured in [RequestMappingHandlerAdapter#getDefaultArgumentResolvers](https://github.com/spring-projects/spring-framework/blob/6b6cf1b4a2f8b03693876dd7b534b49c48a288bd/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java#L682).

A solution discussed with @rstoyanchev yesterday and previously with @snicoll would be to reuse the logic from `RequestMappingHandlerAdapter#getDefaultArgumentResolvers` but we would have to provide different implementations for WebFlux versus WebMVC and adapt the hint after evaluating the argument resolver returned. Doable but involved so I move this issue in the `6.0.x` bucket.

In the meantime, users can use `@RegisterReflectionForBinding(Foo.class)` (see related [Javadoc](https://docs.spring.io/spring-framework/docs/6.0.0-SNAPSHOT/javadoc-api/org/springframework/aot/hint/annotation/RegisterReflectionForBinding.html)) to add the relevant hints."
3000,1283621267,qiangmao,2240416,添加一条评论
3001,1283621537,qiangmao,2240416,这里是活动日志
3002,1283622765,qiangmao,2240416,测试评论123
3003,1283691726,vpavic,1149230,"Could you consider this change for 6.0?

I'd like to be able to set up `LoggingCacheErrorHandler` with a custom logger, but without being forced to use `org.apache.commons.logging.Log`.

Thanks."
3004,1283702297,vpavic,1149230,"As someone who got burned by this in a project that surfaced `DataSize` through configuration properties, I'd kindly ask the team again to reconsider this. Not respecting (and redefining) the SI prefixes only has the potential to cause confusion, and I can only echo what @sstock already [pointed out](https://github.com/spring-projects/spring-framework/pull/23682#issuecomment-816857856):

> The https://github.com/spring-projects/spring-framework/issues/23697 documentation certainly helps with direct consumers of the class. But does not alleviate the need to replicate such clarification to values parsed by `DataSize`, e.g. Spring Boot externalized configuration."
3005,1283743821,jhoeller,1263688,"Good point, we seem to have missed that part the first time around in the 5.3.22 revision.

I don't see a real need to deprecate the existing constructor (since we allow direct `Log` passing in other places as well) but we could easily add an alternative `LoggingCacheErrorHandler(String loggerName, boolean logStackTraces)` constructor for your scenario, avoiding Commons Logging API references in user code when specifying a custom logging category.

Drafting this locally, it is straightforward enough for a backport to 5.3.24, so I'm inclined to commit it there and repurpose this ticket for that addition to 5.3.x? Otherwise I can also create a separate GitHub issue for it."
3006,1283777395,vpavic,1149230,"Thanks for the feedback Juergen.

Not deprecating the constructor that accepts `org.apache.commons.logging.Log` is fine with me, I simply assumed once there's one that accepts the `String`, it would be preferred. Also great if you can make this a part of `5.3`.

I can update the PR to remove the deprecation if that's your preference, and add some tests that use the new constructor."
3007,1283802197,jhoeller,1263688,"@vpavic If you could remove the deprecation and ideally rebase the PR onto 5.3.x (with a `@since 5.3.24` label), I'd merge it there right away!"
3008,1283849939,vpavic,1149230,That is done now. I also added a simple test just for the sake of having something in the codebase that uses the newly introduced constructor.
3009,1283879148,jhoeller,1263688,"Thanks, that was quick :-)"
3010,1284029685,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
3011,1284037314,rstoyanchev,401908,"I'm closing this in favour of the current choice, `ProblemDetail`, focusing on the actual problem and its description, rather than all the additional auxiliary details. Thanks for raising this in any case, it's good to have considered this with more scrutiny. "
3012,1284121316,snicoll,490484,"Thanks for the proposal but we can't really add such a feature to Spring WebFlux. This is a core container feature and while it makes sense to handle a common interface from the JDK, I don't think we should do so on a library like reactor."
3013,1284163145,snicoll,490484,"Supporting a proxy at that level means that AOT exposes it and any container lifecycle callback is invoked on it. Looking at the AOT contribution for the scoped proxy, it's a bit odd as it's exposing the underlying type from the instance supplier. I bet this was done to make sure that type resolution works but I am not entirely sure it is still relevant."
3014,1284192649,artemptushkin,22632802,"Spring boot 3 is coming and this would be really needed, any chance we can raise the priority?"
3015,1284194412,snicoll,490484,This should now be fixed with https://github.com/spring-projects/spring-framework/commit/affccba8f1beccdb5910e4a0e909701d33255db5
3016,1284435654,sdeleuze,141109,Liberica NIK distribution of GraalVM 22.3.0 can be downloaded from https://bell-sw.com/pages/downloads/native-image-kit/#/nik-22-17-ea.
3017,1284483196,violetagg,696661,@rstoyanchev Thanks
3018,1284665256,philwebb,519772,@bclozel You might want to review this fix just in case I messed something up
3019,1285297175,dmytro-dobrovolskyi,17985495,"Spent a lot of time on this... Apparently, if you want `@QuartzDataSource` to work you need to make your other dataSource (if you have one) as `@Primary` which is kinda implied in javadoc but it is not clear that you really *have to* mark it as primary."
3020,1285471478,sbrannen,104798,"Hi @1997sanket,

Thanks for the offer.

However, since we are considering more than a documentation change, we've yet to decide on the exact scope of this issue. In light of that, one of the core committers will likely take care of this issue.

Regards,

Sam"
3021,1285498181,karolkrasnowski,12725930,"I don't want this to sound rude, but when could I expect someone to take care of this? If this cannot be resolved in the foreseeable future, we will have to schedule a downgrade, so I'd like to know what we should prepare for."
3022,1285574705,christophstrobl,2317257,"Ran into the same issue with data-mongodb lazy loading proxies. I also had to add access to declared fields and ended up with this
```java
Class<?> proxyClass = LazyLoadingProxyFactory.resolveProxyType(field.getType(),() -> LazyLoadingInterceptor.none());
						
generationContext.getRuntimeHints().reflection().registerType(proxyClass,
	MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS, MemberCategory.DECLARED_FIELDS);
```

to avoid

```
java.lang.IllegalStateException: Failed to execute CommandLineRunner"",
    ""	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:772) ~[data-mongodb:3.0.0-SNAPSHOT]"",
    ""	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:753) ~[data-mongodb:3.0.0-SNAPSHOT]"",
    ""	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318) ~[data-mongodb:3.0.0-SNAPSHOT]"",
    ""	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1304) ~[data-mongodb:3.0.0-SNAPSHOT]"",
    ""	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1293) ~[data-mongodb:3.0.0-SNAPSHOT]"",
    ""	at com.example.data.mongodb.DataMongoDbApplication.main(DataMongoDbApplication.java:22) ~[data-mongodb:na]"",
    ""Caused by: org.springframework.cglib.core.CodeGenerationException: java.lang.NoSuchFieldException-->CGLIB$FACTORY_DATA"",
    ""	at org.springframework.cglib.proxy.Enhancer.wrapCachedClass(Enhancer.java:813) ~[na:na]"",
    ""	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:111) ~[na:na]"",
    ""	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108) ~[na:na]"",
    ""	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:55) ~[na:na]"",
    ""	at java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[data-mongodb:na]"",
    ""	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:62) ~[na:na]"",
    ""	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:35) ~[na:na]"",
    ""	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134) ~[na:na]"",
    ""	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319) ~[data-mongodb:6.0.0-SNAPSHOT]"",
    ""	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:567) ~[na:na]"",
    ""	at org.springframework.cglib.proxy.Enhancer.createClass(Enhancer.java:412) ~[na:na]"",
    ""	at org.springframework.data.mongodb.core.convert.LazyLoadingProxyFactory.getEnhancedTypeFor(LazyLoadingProxyFactory.java:141) ~[na:na]"",
```
"
3023,1285740448,sbrannen,104798,"The main reason for the lengthy DEBUG logging is that Spring Boot's `ImportsContextCustomizer` implements `toString()` which results in logging of the fully qualified class names of 27 configuration classes in the provided example (twice).

So we can reduce the DEBUG logging significantly by logging the class names of `ContextCustomizer` implementations instead of invoking their `toString()` methods.

We can do the same when logging `TestExecutionListener` implementations.

And we can further reduce the logging by only logging trace-like information in `TestExecutionListener` methods at TRACE level."
3024,1285749497,bclozel,103264,Closing in favor of eclipse/jetty.project#8724
3025,1285843545,molnarp,1827633,"As far as I can tell, even though the code has changed in the `main` branch, the issue is still present:
https://github.com/spring-projects/spring-framework/blob/main/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java#L266

Why does the `isResourceNotModified()` method remove those headers in the first place?"
3026,1285878593,bclozel,103264,"In these cases, a sample application demonstrating the problem would help a lot.
Could you share a small project (typically a small web app created with start.spring.io m) that we can git clone or download? Ideally, with a readme that lists a curl request, the expected result and what you got instead.

Pointing to various places in the codebase helps, but it's too early for that and we need consider the use case as a whole first.
Thanks!"
3027,1286176515,molnarp,1827633,"Hello Brian,
here you go: https://github.com/molnarp/http-conditional-response-test/blob/main/src/test/java/com/example/demo/FruitResourceTest.java#L36
"
3028,1286579112,harikrishnayadlapalli,64837600,Why this issue closed as Jetty HttpClient is working fine and issue comes when spring webclient in reactive mode is used with httpclient.
3029,1286649487,bclozel,103264,"It looked like this was identified as a Jetty issue, I see that now this cannot be reproduced on the Jetty side. Reopening."
3030,1286962748,bclozel,103264,"Thanks for the sample @molnarp , this is now fixed and will be released with our next maintenance version in November."
3031,1288151954,bclozel,103264,"Thanks @erikliebelt for your feedback.
The short answer is: our decision still stands and it's unfortunately too late.

> It seems that the main author Michael Bazos (mbazos) has had strong doubts about the idea of deprecation initially. Finally Juergen has convinced him according to the thread there.

I don't think Michael really cared about `HTTPInvoker` itself, but rather about a way to get rid of CVE alarm bells going off because of #24434. This incident was just an additional data point for the Framework team to decide to deprecate this.

> Personally I stick to the very open mindset Microsoft shows these days.
> They explicitly allow for binary serialization of the objects exchanged via REST APIs for performance reasons:

You seem to conflate Java deserialization and binary protocols in general. Spring Framework officially supports binary deserialization protocols over REST, such as protobuf and binary JSON ""Smile"".

> Juergen writes: ""Also, the Oracle JDK team intends to deprecate serialization in some form; we can easily anticipate that here.""
> We could not find a valid confirmation on that on the web.
> For sure there are individuals working for Oracle having this opinion. But there is no official decision in this sense according to our research.

Even if no JEP is officially out [Mark Reinhold gave a pretty detailed explanation on that in 2018](https://www.youtube.com/watch?v=Zzs4zEkGbiE&list=PLRsbF2sD7JVpRvLpv_Cub94zsM1aHm-Op&index=20); he might be an individual working for Oracle, but as Chief artchitect of the Java platform, we're taking this statement quite seriously.

I think that the proposal you're describing in your comment is already pretty well covered by the Java platform itself. Over the years, several features were added to further lock this feature down. This is all explained in details [on the official secure coding guidelines for Java](https://www.oracle.com/java/technologies/javase/seccodeguide.html#8).

Finally, this feature has been deprecated officially in 2020 with the 5.3.0 release, and removed altogether in 6.0.0-RC1.
Walking this back now would go against the Java team's opinion, the Java community's sentiment, the Spring team's opinion and would also go against years of consistent management of our API.

At this point, I would suggest considering options for your future transition to Spring Framework 6.0, [looking at our support timeline](https://spring.io/projects/spring-framework#support). There are many well supported, high performance binary protocols supported by the Spring community. You can still choose to keep using Java deserialization, but this first deprecation+removal is in our opinion a warning sign for Java developers that the community is moving away from such approaches."
3032,1288158774,erikliebelt,96829432,"> lock

Thank you for answering so fast and for adding these interesting details for further reading.
So we will take a look on the two alternatives you have mentioned. 
Besides performance the more intuitive automatic passing through of (business) exceptions was a big argument for Spring Boot with HTTPInvoker compared to regular Spring Boot with REST and JSON in an evaluation we did. 
This is an advantages only for pure Java to Java communications, I know, but this is exactly this special case that we have here.
"
3033,1288474226,pivotal-cla,16822967,"@NYForever Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29369)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29369) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
3034,1289413109,wilkinsona,914682,"The behavior of condition evaluation during component scanning is out of Spring Boot's control as it's determined by Spring Framework. Here's a minimal example of the behavior that you have described that doesn't use Spring Boot:

```java
package com.example;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Condition;
import org.springframework.context.annotation.ConditionContext;
import org.springframework.context.annotation.Conditional;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.type.AnnotatedTypeMetadata;

@Configuration
public class MyConfiguration {

	@Configuration
	@Conditional(Disabled.class)
	static class DisabledConfiguration {

		@Configuration
		@Conditional(Enabled.class)
		static class FirstClientConfiguration {

			@Bean
			public MyClient firstClient() {
				return new FirstClient();
			}

		}

		@Configuration
		@Conditional(Disabled.class)
		static class SecondClientConfiguration {

			@Bean
			public MyClient secondClient() {
				return new SecondClient();
			}

		}

	}

	@Configuration
	@Conditional(Enabled.class)
	static class ThirdClientConfiguration {

		@Bean
		public MyClient thirdClient() {
			return new ThirdClient();
		}

	}
	
	static class Enabled implements Condition {

		@Override
		public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {
			return true;
		}

	}
	
	static class Disabled implements Condition {

		@Override
		public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {
			return false;
		}

	}
	
	public static interface MyClient {

	}
	
	public static class FirstClient implements MyClient {

	}
	
	public static class SecondClient implements MyClient {
		
	}
	
	public static class ThirdClient implements MyClient {
		
	}

}
```

```java
package com.example;

import static org.assertj.core.api.Assertions.assertThat;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;

import com.example.MyConfiguration.MyClient;
import com.example.MyConfiguration.ThirdClient;

@SpringJUnitConfig(MyConfiguration.class)
public class ContextConfigurationTests {

	@Autowired
	ApplicationContext context;

	@Test
	void contextLoads() {
		assertThat(context.getBeansOfType(MyClient.class).size()).isEqualTo(1);
		assertThat(context.getBean(MyClient.class)).isInstanceOf(ThirdClient.class);
	}

}
```

```java
package com.example;

import static org.assertj.core.api.Assertions.assertThat;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;

import com.example.ComponentScanTests.EnableComponentScan;
import com.example.MyConfiguration.MyClient;
import com.example.MyConfiguration.ThirdClient;

@SpringJUnitConfig(EnableComponentScan.class)
public class ComponentScanTests {

	@Autowired
	ApplicationContext context;

	@Test
	void contextLoads() {
		assertThat(context.getBeansOfType(MyClient.class).size()).isEqualTo(1);
		assertThat(context.getBean(MyClient.class)).isInstanceOf(ThirdClient.class);
	}

	@ComponentScan(""com.example"")
	static class EnableComponentScan {

	}

}
```

We'll transfer this issue to the Spring Framework issue tracker so that the Framework team can take a look."
3035,1288842598,reda-alaoui,2890843,"Here is a reproducer: https://github.com/Cosium/spring-framework/blob/2332bc659f1bb089da1b98b26f6ca572face29ab/spring-orm/src/test/java/org/springframework/orm/jpa/hibernate/HibernateMultiEntityManagerFactoryIntegrationTests.java#L77-L77

The test will fail because `sharedEntityManager.persist(person)` will find the wrong active `TransactionManager`.
Note that `sharedEntityManager` is controlled by `transactionManager`, not `transactionManager2`."
3036,1288898213,rstoyanchev,401908,@jhoeller this looks like it should be covered/superseded by #20806? Maybe just an extra comment there to ensure it works for records too.
3037,1289162076,skaba,1618821,Will this be backported to Spring 5?
3038,1290308767,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
3039,1290401298,sdeleuze,141109,Should be similar to #29271.
3040,1290453322,sdeleuze,141109,"After a first quick look, does not look like a Framework issue.

Since this use case seems similar to http client ones, could you try to add a `@RegisterReflectionForBinding(Person.class)` annotation to the sample ?

cc @jzheaux since that's related to https://github.com/spring-projects/spring-ldap/."
3041,1290476962,mhalbritter,98899556,"Oh sorry, i was under the impression that the LDAP code is in SF, sorry about that.

> Since this use case seems similar to http client ones, could you try to add a @RegisterReflectionForBinding(Person.class) annotation to the sample

The strange thing is that this is running fine in native image when starting the application, but it fails in JUnit tests."
3042,1290487770,mhalbritter,98899556,I'll close this issue and reopen it on the spring-ldap tracker.
3043,1290499548,rstoyanchev,401908,"For everyone following here, there is a specific corner case described in #29378."
3044,1290660967,jhoeller,1263688,Superseded by PR #29379.
3045,1290677659,sbrannen,104798,"### Related Issues

- #29380
- #29381 "
3046,1290817606,sbrannen,104798,"## Comparison of Log Output

The following log output was generated for a Spring Boot test class annotated with `@WebMvcTest`. The log output shown is all logging prior to Boot taking over control of Logback.

### Spring Boot 2.7.5 / Spring Framework 5.3.24

```
18:08:45.351 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating CacheAwareContextLoaderDelegate from class [org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate]
18:08:45.355 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating BootstrapContext using constructor [public org.springframework.test.context.support.DefaultBootstrapContext(java.lang.Class,org.springframework.test.context.CacheAwareContextLoaderDelegate)]
18:08:45.371 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating TestContextBootstrapper for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests] from class [org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper]
18:08:45.376 [main] INFO org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests], using SpringBootContextLoader
18:08:45.377 [main] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests]: class path resource [com/example/boot_test_logging/BootTestLoggingApplicationTests-context.xml] does not exist
18:08:45.377 [main] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests]: class path resource [com/example/boot_test_logging/BootTestLoggingApplicationTestsContext.groovy] does not exist
18:08:45.378 [main] INFO org.springframework.test.context.support.AbstractContextLoader - Could not detect default resource locations for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests]: no resource found for suffixes {-context.xml, Context.groovy}.
18:08:45.378 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests]: BootTestLoggingApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
18:08:45.405 [main] DEBUG org.springframework.test.context.support.ActiveProfilesUtils - Could not find an 'annotation declaring class' for annotation type [org.springframework.test.context.ActiveProfiles] and class [com.example.boot_test_logging.BootTestLoggingApplicationTests]
18:08:45.424 [main] DEBUG org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider - Identified candidate component class: file [/example-app/bin/main/com/example/boot_test_logging/BootTestLoggingApplication.class]
18:08:45.425 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration com.example.boot_test_logging.BootTestLoggingApplication for test class com.example.boot_test_logging.BootTestLoggingApplicationTests
18:08:45.426 [main] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - @TestExecutionListeners is not present for class [com.example.boot_test_logging.BootTestLoggingApplicationTests]: using defaults.
18:08:45.426 [main] INFO org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.security.test.context.support.WithSecurityContextTestExecutionListener, org.springframework.security.test.context.support.ReactorContextTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.event.ApplicationEventsTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
18:08:45.431 [main] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Skipping candidate TestExecutionListener [org.springframework.test.context.transaction.TransactionalTestExecutionListener] due to a missing dependency. Specify custom listener classes or make the default listener classes and their required dependencies available. Offending class: [org/springframework/transaction/interceptor/TransactionAttributeSource]
18:08:45.431 [main] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Skipping candidate TestExecutionListener [org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener] due to a missing dependency. Specify custom listener classes or make the default listener classes and their required dependencies available. Offending class: [org/springframework/transaction/interceptor/TransactionAttribute]
18:08:45.431 [main] INFO org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@2af004b, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@248e319b, org.springframework.test.context.event.ApplicationEventsTestExecutionListener@5d0bf09b, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@793f29ff, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@3e8c3cb, org.springframework.test.context.support.DirtiesContextTestExecutionListener@563f38c4, org.springframework.security.test.context.support.WithSecurityContextTestExecutionListener@543295b0, org.springframework.test.context.event.EventPublishingTestExecutionListener@54422e18, org.springframework.security.test.context.support.ReactorContextTestExecutionListener@117159c0, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@3e27ba32, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@7ef82753, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@3b0fe47a, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@202b0582, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener@235ecd9f, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@1ca3b418]
18:08:45.433 [main] DEBUG org.springframework.test.context.support.AbstractDirtiesContextTestExecutionListener - Before test class: context [DefaultTestContext@1c5920df testClass = BootTestLoggingApplicationTests, testInstance = [null], testMethod = [null], testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@17f9d882 testClass = BootTestLoggingApplicationTests, locations = '{}', classes = '{class com.example.boot_test_logging.BootTestLoggingApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.autoconfigure.OverrideAutoConfigurationContextCustomizerFactory$DisableAutoConfigurationContextCustomizer@1f2586d6, org.springframework.boot.test.autoconfigure.actuate.metrics.MetricsExportContextCustomizerFactory$DisableMetricExportContextCustomizer@385c9627, org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizer@b0675020, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@1d75eafb, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@6aaceffd, [ImportsContextCustomizer@79e4c792 key = [org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration, org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration, org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration, org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration, org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration, org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration, org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration, org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration, org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration, org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration, org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration, org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebClientAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebDriverAutoConfiguration, org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration, org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcSecurityConfiguration, org.springframework.boot.test.autoconfigure.web.reactive.WebTestClientAutoConfiguration]], org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@55f616cf, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@1329eff, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.context.SpringBootTestArgs@1, org.springframework.boot.test.context.SpringBootTestWebEnvironment@0], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map[[empty]]], class annotated with @DirtiesContext [false] with mode [null].
18:08:45.438 [main] DEBUG org.springframework.test.context.support.DependencyInjectionTestExecutionListener - Performing dependency injection for test context [[DefaultTestContext@1c5920df testClass = BootTestLoggingApplicationTests, testInstance = com.example.boot_test_logging.BootTestLoggingApplicationTests@8462f31, testMethod = [null], testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@17f9d882 testClass = BootTestLoggingApplicationTests, locations = '{}', classes = '{class com.example.boot_test_logging.BootTestLoggingApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.autoconfigure.OverrideAutoConfigurationContextCustomizerFactory$DisableAutoConfigurationContextCustomizer@1f2586d6, org.springframework.boot.test.autoconfigure.actuate.metrics.MetricsExportContextCustomizerFactory$DisableMetricExportContextCustomizer@385c9627, org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizer@b0675020, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@1d75eafb, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@6aaceffd, [ImportsContextCustomizer@79e4c792 key = [org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration, org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration, org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration, org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration, org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration, org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration, org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration, org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration, org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration, org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration, org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration, org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebClientAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebDriverAutoConfiguration, org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration, org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcSecurityConfiguration, org.springframework.boot.test.autoconfigure.web.reactive.WebTestClientAutoConfiguration]], org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@55f616cf, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@1329eff, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.context.SpringBootTestArgs@1, org.springframework.boot.test.context.SpringBootTestWebEnvironment@0], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.event.ApplicationEventsTestExecutionListener.recordApplicationEvents' -> false]]].
```

<details>

> 18:08:45.351 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating CacheAwareContextLoaderDelegate from class [org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate]
> 18:08:45.355 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating BootstrapContext using constructor [public org.springframework.test.context.support.DefaultBootstrapContext(java.lang.Class,org.springframework.test.context.CacheAwareContextLoaderDelegate)]
> 18:08:45.371 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating TestContextBootstrapper for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests] from class [org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper]
> 18:08:45.376 [main] INFO org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests], using SpringBootContextLoader
> 18:08:45.377 [main] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests]: class path resource [com/example/boot_test_logging/BootTestLoggingApplicationTests-context.xml] does not exist
> 18:08:45.377 [main] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests]: class path resource [com/example/boot_test_logging/BootTestLoggingApplicationTestsContext.groovy] does not exist
> 18:08:45.378 [main] INFO org.springframework.test.context.support.AbstractContextLoader - Could not detect default resource locations for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests]: no resource found for suffixes {-context.xml, Context.groovy}.
> 18:08:45.378 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests]: BootTestLoggingApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
> 18:08:45.405 [main] DEBUG org.springframework.test.context.support.ActiveProfilesUtils - Could not find an 'annotation declaring class' for annotation type [org.springframework.test.context.ActiveProfiles] and class [com.example.boot_test_logging.BootTestLoggingApplicationTests]
> 18:08:45.424 [main] DEBUG org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider - Identified candidate component class: file [/example-app/bin/main/com/example/boot_test_logging/BootTestLoggingApplication.class]
> 18:08:45.425 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration com.example.boot_test_logging.BootTestLoggingApplication for test class com.example.boot_test_logging.BootTestLoggingApplicationTests
> 18:08:45.426 [main] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - @TestExecutionListeners is not present for class [com.example.boot_test_logging.BootTestLoggingApplicationTests]: using defaults.
> 18:08:45.426 [main] INFO org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.security.test.context.support.WithSecurityContextTestExecutionListener, org.springframework.security.test.context.support.ReactorContextTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.event.ApplicationEventsTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
> 18:08:45.431 [main] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Skipping candidate TestExecutionListener [org.springframework.test.context.transaction.TransactionalTestExecutionListener] due to a missing dependency. Specify custom listener classes or make the default listener classes and their required dependencies available. Offending class: [org/springframework/transaction/interceptor/TransactionAttributeSource]
> 18:08:45.431 [main] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Skipping candidate TestExecutionListener [org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener] due to a missing dependency. Specify custom listener classes or make the default listener classes and their required dependencies available. Offending class: [org/springframework/transaction/interceptor/TransactionAttribute]
> 18:08:45.431 [main] INFO org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@2af004b, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@248e319b, org.springframework.test.context.event.ApplicationEventsTestExecutionListener@5d0bf09b, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@793f29ff, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@3e8c3cb, org.springframework.test.context.support.DirtiesContextTestExecutionListener@563f38c4, org.springframework.security.test.context.support.WithSecurityContextTestExecutionListener@543295b0, org.springframework.test.context.event.EventPublishingTestExecutionListener@54422e18, org.springframework.security.test.context.support.ReactorContextTestExecutionListener@117159c0, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@3e27ba32, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@7ef82753, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@3b0fe47a, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@202b0582, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener@235ecd9f, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@1ca3b418]
> 18:08:45.433 [main] DEBUG org.springframework.test.context.support.AbstractDirtiesContextTestExecutionListener - Before test class: context [DefaultTestContext@1c5920df testClass = BootTestLoggingApplicationTests, testInstance = [null], testMethod = [null], testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@17f9d882 testClass = BootTestLoggingApplicationTests, locations = '{}', classes = '{class com.example.boot_test_logging.BootTestLoggingApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.autoconfigure.OverrideAutoConfigurationContextCustomizerFactory$DisableAutoConfigurationContextCustomizer@1f2586d6, org.springframework.boot.test.autoconfigure.actuate.metrics.MetricsExportContextCustomizerFactory$DisableMetricExportContextCustomizer@385c9627, org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizer@b0675020, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@1d75eafb, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@6aaceffd, [ImportsContextCustomizer@79e4c792 key = [org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration, org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration, org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration, org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration, org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration, org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration, org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration, org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration, org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration, org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration, org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration, org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebClientAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebDriverAutoConfiguration, org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration, org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcSecurityConfiguration, org.springframework.boot.test.autoconfigure.web.reactive.WebTestClientAutoConfiguration]], org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@55f616cf, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@1329eff, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.context.SpringBootTestArgs@1, org.springframework.boot.test.context.SpringBootTestWebEnvironment@0], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map[[empty]]], class annotated with @DirtiesContext [false] with mode [null].
> 18:08:45.438 [main] DEBUG org.springframework.test.context.support.DependencyInjectionTestExecutionListener - Performing dependency injection for test context [[DefaultTestContext@1c5920df testClass = BootTestLoggingApplicationTests, testInstance = com.example.boot_test_logging.BootTestLoggingApplicationTests@8462f31, testMethod = [null], testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@17f9d882 testClass = BootTestLoggingApplicationTests, locations = '{}', classes = '{class com.example.boot_test_logging.BootTestLoggingApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.autoconfigure.OverrideAutoConfigurationContextCustomizerFactory$DisableAutoConfigurationContextCustomizer@1f2586d6, org.springframework.boot.test.autoconfigure.actuate.metrics.MetricsExportContextCustomizerFactory$DisableMetricExportContextCustomizer@385c9627, org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizer@b0675020, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@1d75eafb, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@6aaceffd, [ImportsContextCustomizer@79e4c792 key = [org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration, org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration, org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration, org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration, org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration, org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration, org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration, org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration, org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration, org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration, org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration, org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebClientAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebDriverAutoConfiguration, org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration, org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcSecurityConfiguration, org.springframework.boot.test.autoconfigure.web.reactive.WebTestClientAutoConfiguration]], org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@55f616cf, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@1329eff, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.context.SpringBootTestArgs@1, org.springframework.boot.test.context.SpringBootTestWebEnvironment@0], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.event.ApplicationEventsTestExecutionListener.recordApplicationEvents' -> false]]].

</details>

### Spring Boot 3.0.0-SNAPSHOT / Spring Framework 6.0.0-RC2

```
17:31:08.633 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating CacheAwareContextLoaderDelegate from class [org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate]
17:31:08.640 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating BootstrapContext using constructor [public org.springframework.test.context.support.DefaultBootstrapContext(java.lang.Class,org.springframework.test.context.CacheAwareContextLoaderDelegate)]
17:31:08.656 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating TestContextBootstrapper for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests] from class [org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper]
17:31:08.661 [main] INFO org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests], using SpringBootContextLoader
17:31:08.662 [main] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests]: class path resource [com/example/boot_test_logging/BootTestLoggingApplicationTests-context.xml] does not exist
17:31:08.662 [main] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests]: class path resource [com/example/boot_test_logging/BootTestLoggingApplicationTestsContext.groovy] does not exist
17:31:08.662 [main] INFO org.springframework.test.context.support.AbstractContextLoader - Could not detect default resource locations for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests]: no resource found for suffixes {-context.xml, Context.groovy}.
17:31:08.663 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests]: BootTestLoggingApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
17:31:08.671 [main] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Loaded ContextCustomizerFactory implementations from location [META-INF/spring.factories]: [org.springframework.boot.test.autoconfigure.OverrideAutoConfigurationContextCustomizerFactory, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory, org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizerFactory, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizerFactory, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory, org.springframework.boot.test.context.ImportsContextCustomizerFactory, org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizerFactory, org.springframework.boot.test.graphql.tester.HttpGraphQlTesterContextCustomizerFactory, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory, org.springframework.boot.test.mock.mockito.MockitoContextCustomizerFactory, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizerFactory, org.springframework.boot.test.web.reactive.server.WebTestClientContextCustomizerFactory, org.springframework.test.context.web.socket.MockServerContainerContextCustomizerFactory, org.springframework.test.context.support.DynamicPropertiesContextCustomizerFactory]
17:31:08.687 [main] INFO org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Using ContextCustomizers: [org.springframework.boot.test.autoconfigure.OverrideAutoConfigurationContextCustomizerFactory$DisableAutoConfigurationContextCustomizer@63070bab, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@9da1, org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizer@8b7f760e, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@3c01cb0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@7671cb68, [ImportsContextCustomizer@7fee8714 key = [org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration, org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration, org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration, org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration, org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration, org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration, org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration, org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration, org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration, org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration, org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration, org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebClientAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebDriverAutoConfiguration, org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration, org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcSecurityConfiguration, org.springframework.boot.test.autoconfigure.web.reactive.WebTestClientAutoConfiguration]], org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@4d02f94e, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@2053d869, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0]
17:31:08.690 [main] DEBUG org.springframework.test.context.support.ActiveProfilesUtils - Could not find an 'annotation declaring class' for annotation type [org.springframework.test.context.ActiveProfiles] and class [com.example.boot_test_logging.BootTestLoggingApplicationTests]
17:31:08.713 [main] DEBUG org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider - Identified candidate component class: file [/example-app/bin/main/com/example/boot_test_logging/BootTestLoggingApplication.class]
17:31:08.714 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration com.example.boot_test_logging.BootTestLoggingApplication for test class com.example.boot_test_logging.BootTestLoggingApplicationTests
17:31:08.715 [main] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - @TestExecutionListeners is not present for class [com.example.boot_test_logging.BootTestLoggingApplicationTests]: using defaults.
17:31:08.719 [main] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Skipping candidate TestExecutionListener [org.springframework.test.context.transaction.TransactionalTestExecutionListener] due to a missing dependency. Specify custom TestExecutionListener classes or make the default TestExecutionListener classes and their required dependencies available. Offending class: [org/springframework/transaction/interceptor/TransactionAttributeSource]
17:31:08.720 [main] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Skipping candidate TestExecutionListener [org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener] due to a missing dependency. Specify custom TestExecutionListener classes or make the default TestExecutionListener classes and their required dependencies available. Offending class: [org/springframework/transaction/interceptor/TransactionAttribute]
17:31:08.720 [main] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Loaded default TestExecutionListener implementations from location [META-INF/spring.factories]: [org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.event.ApplicationEventsTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.security.test.context.support.WithSecurityContextTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener, org.springframework.security.test.context.support.ReactorContextTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener]
17:31:08.721 [main] INFO org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@69c81773, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@4d14b6c2, org.springframework.test.context.event.ApplicationEventsTestExecutionListener@7e990ed7, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@c05fddc, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@25df00a0, org.springframework.test.context.support.DirtiesContextTestExecutionListener@4d15107f, org.springframework.security.test.context.support.WithSecurityContextTestExecutionListener@7b4c50bc, org.springframework.test.context.event.EventPublishingTestExecutionListener@5884a914, org.springframework.security.test.context.support.ReactorContextTestExecutionListener@50378a4, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@60f00693, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@79207381, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@491b9b8, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@1a4927d6, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener@7a6d7e92, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@aba625]
17:31:08.721 [main] DEBUG org.springframework.test.context.support.AbstractDirtiesContextTestExecutionListener - Before test class: context [DefaultTestContext@782859e testClass = BootTestLoggingApplicationTests, testInstance = [null], testMethod = [null], testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@23f5b5dc testClass = BootTestLoggingApplicationTests, locations = '{}', classes = '{class com.example.boot_test_logging.BootTestLoggingApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.autoconfigure.OverrideAutoConfigurationContextCustomizerFactory$DisableAutoConfigurationContextCustomizer@63070bab, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@9da1, org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizer@8b7f760e, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@3c01cb0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@7671cb68, [ImportsContextCustomizer@7fee8714 key = [org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration, org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration, org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration, org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration, org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration, org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration, org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration, org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration, org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration, org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration, org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration, org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebClientAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebDriverAutoConfiguration, org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration, org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcSecurityConfiguration, org.springframework.boot.test.autoconfigure.web.reactive.WebTestClientAutoConfiguration]], org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@4d02f94e, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@2053d869, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.context.SpringBootTestAnnotation@cee59c14], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map[[empty]]], class annotated with @DirtiesContext [false] with mode [null].
17:31:08.726 [main] DEBUG org.springframework.test.context.support.DependencyInjectionTestExecutionListener - Performing dependency injection for test context [DefaultTestContext@782859e testClass = BootTestLoggingApplicationTests, testInstance = com.example.boot_test_logging.BootTestLoggingApplicationTests@6e2aa843, testMethod = [null], testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@23f5b5dc testClass = BootTestLoggingApplicationTests, locations = '{}', classes = '{class com.example.boot_test_logging.BootTestLoggingApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.autoconfigure.OverrideAutoConfigurationContextCustomizerFactory$DisableAutoConfigurationContextCustomizer@63070bab, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@9da1, org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizer@8b7f760e, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@3c01cb0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@7671cb68, [ImportsContextCustomizer@7fee8714 key = [org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration, org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration, org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration, org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration, org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration, org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration, org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration, org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration, org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration, org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration, org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration, org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebClientAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebDriverAutoConfiguration, org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration, org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcSecurityConfiguration, org.springframework.boot.test.autoconfigure.web.reactive.WebTestClientAutoConfiguration]], org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@4d02f94e, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@2053d869, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.context.SpringBootTestAnnotation@cee59c14], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.event.ApplicationEventsTestExecutionListener.recordApplicationEvents' -> false]]
```

<details>

> 17:31:08.633 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating CacheAwareContextLoaderDelegate from class [org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate]
> 17:31:08.640 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating BootstrapContext using constructor [public org.springframework.test.context.support.DefaultBootstrapContext(java.lang.Class,org.springframework.test.context.CacheAwareContextLoaderDelegate)]
> 17:31:08.656 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating TestContextBootstrapper for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests] from class [org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper]
> 17:31:08.661 [main] INFO org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests], using SpringBootContextLoader
> 17:31:08.662 [main] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests]: class path resource [com/example/boot_test_logging/BootTestLoggingApplicationTests-context.xml] does not exist
> 17:31:08.662 [main] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests]: class path resource [com/example/boot_test_logging/BootTestLoggingApplicationTestsContext.groovy] does not exist
> 17:31:08.662 [main] INFO org.springframework.test.context.support.AbstractContextLoader - Could not detect default resource locations for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests]: no resource found for suffixes {-context.xml, Context.groovy}.
> 17:31:08.663 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests]: BootTestLoggingApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
> 17:31:08.671 [main] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Loaded ContextCustomizerFactory implementations from location [META-INF/spring.factories]: [org.springframework.boot.test.autoconfigure.OverrideAutoConfigurationContextCustomizerFactory, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory, org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizerFactory, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizerFactory, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory, org.springframework.boot.test.context.ImportsContextCustomizerFactory, org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizerFactory, org.springframework.boot.test.graphql.tester.HttpGraphQlTesterContextCustomizerFactory, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory, org.springframework.boot.test.mock.mockito.MockitoContextCustomizerFactory, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizerFactory, org.springframework.boot.test.web.reactive.server.WebTestClientContextCustomizerFactory, org.springframework.test.context.web.socket.MockServerContainerContextCustomizerFactory, org.springframework.test.context.support.DynamicPropertiesContextCustomizerFactory]
> 17:31:08.687 [main] INFO org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Using ContextCustomizers: [org.springframework.boot.test.autoconfigure.OverrideAutoConfigurationContextCustomizerFactory$DisableAutoConfigurationContextCustomizer@63070bab, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@9da1, org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizer@8b7f760e, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@3c01cb0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@7671cb68, [ImportsContextCustomizer@7fee8714 key = [org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration, org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration, org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration, org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration, org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration, org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration, org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration, org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration, org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration, org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration, org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration, org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebClientAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebDriverAutoConfiguration, org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration, org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcSecurityConfiguration, org.springframework.boot.test.autoconfigure.web.reactive.WebTestClientAutoConfiguration]], org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@4d02f94e, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@2053d869, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0]
> 17:31:08.690 [main] DEBUG org.springframework.test.context.support.ActiveProfilesUtils - Could not find an 'annotation declaring class' for annotation type [org.springframework.test.context.ActiveProfiles] and class [com.example.boot_test_logging.BootTestLoggingApplicationTests]
> 17:31:08.713 [main] DEBUG org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider - Identified candidate component class: file [/example-app/bin/main/com/example/boot_test_logging/BootTestLoggingApplication.class]
> 17:31:08.714 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration com.example.boot_test_logging.BootTestLoggingApplication for test class com.example.boot_test_logging.BootTestLoggingApplicationTests
> 17:31:08.715 [main] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - @TestExecutionListeners is not present for class [com.example.boot_test_logging.BootTestLoggingApplicationTests]: using defaults.
> 17:31:08.719 [main] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Skipping candidate TestExecutionListener [org.springframework.test.context.transaction.TransactionalTestExecutionListener] due to a missing dependency. Specify custom TestExecutionListener classes or make the default TestExecutionListener classes and their required dependencies available. Offending class: [org/springframework/transaction/interceptor/TransactionAttributeSource]
> 17:31:08.720 [main] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Skipping candidate TestExecutionListener [org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener] due to a missing dependency. Specify custom TestExecutionListener classes or make the default TestExecutionListener classes and their required dependencies available. Offending class: [org/springframework/transaction/interceptor/TransactionAttribute]
> 17:31:08.720 [main] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Loaded default TestExecutionListener implementations from location [META-INF/spring.factories]: [org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.event.ApplicationEventsTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.security.test.context.support.WithSecurityContextTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener, org.springframework.security.test.context.support.ReactorContextTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener]
> 17:31:08.721 [main] INFO org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@69c81773, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@4d14b6c2, org.springframework.test.context.event.ApplicationEventsTestExecutionListener@7e990ed7, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@c05fddc, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@25df00a0, org.springframework.test.context.support.DirtiesContextTestExecutionListener@4d15107f, org.springframework.security.test.context.support.WithSecurityContextTestExecutionListener@7b4c50bc, org.springframework.test.context.event.EventPublishingTestExecutionListener@5884a914, org.springframework.security.test.context.support.ReactorContextTestExecutionListener@50378a4, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@60f00693, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@79207381, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@491b9b8, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@1a4927d6, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener@7a6d7e92, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@aba625]
> 17:31:08.721 [main] DEBUG org.springframework.test.context.support.AbstractDirtiesContextTestExecutionListener - Before test class: context [DefaultTestContext@782859e testClass = BootTestLoggingApplicationTests, testInstance = [null], testMethod = [null], testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@23f5b5dc testClass = BootTestLoggingApplicationTests, locations = '{}', classes = '{class com.example.boot_test_logging.BootTestLoggingApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.autoconfigure.OverrideAutoConfigurationContextCustomizerFactory$DisableAutoConfigurationContextCustomizer@63070bab, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@9da1, org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizer@8b7f760e, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@3c01cb0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@7671cb68, [ImportsContextCustomizer@7fee8714 key = [org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration, org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration, org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration, org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration, org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration, org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration, org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration, org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration, org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration, org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration, org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration, org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebClientAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebDriverAutoConfiguration, org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration, org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcSecurityConfiguration, org.springframework.boot.test.autoconfigure.web.reactive.WebTestClientAutoConfiguration]], org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@4d02f94e, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@2053d869, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.context.SpringBootTestAnnotation@cee59c14], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map[[empty]]], class annotated with @DirtiesContext [false] with mode [null].
> 17:31:08.726 [main] DEBUG org.springframework.test.context.support.DependencyInjectionTestExecutionListener - Performing dependency injection for test context [DefaultTestContext@782859e testClass = BootTestLoggingApplicationTests, testInstance = com.example.boot_test_logging.BootTestLoggingApplicationTests@6e2aa843, testMethod = [null], testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@23f5b5dc testClass = BootTestLoggingApplicationTests, locations = '{}', classes = '{class com.example.boot_test_logging.BootTestLoggingApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.autoconfigure.OverrideAutoConfigurationContextCustomizerFactory$DisableAutoConfigurationContextCustomizer@63070bab, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@9da1, org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizer@8b7f760e, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@3c01cb0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@7671cb68, [ImportsContextCustomizer@7fee8714 key = [org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration, org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration, org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration, org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration, org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration, org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration, org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration, org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration, org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration, org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration, org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration, org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebClientAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebDriverAutoConfiguration, org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration, org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcSecurityConfiguration, org.springframework.boot.test.autoconfigure.web.reactive.WebTestClientAutoConfiguration]], org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@4d02f94e, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@2053d869, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.context.SpringBootTestAnnotation@cee59c14], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.event.ApplicationEventsTestExecutionListener.recordApplicationEvents' -> false]]

</details>

### Spring Boot 3.0.0-SNAPSHOT / Spring Framework 6.0.0-SNAPSHOT (RC3)

With the changes in 997dd3ee65b0e30b396fa06db75eb6a80b3809bc, we now see the following _tremendously reduced_ log output at DEBUG level.

```
18:01:45.962 [main] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [BootTestLoggingApplicationTests]: using SpringBootContextLoader
18:01:45.965 [main] DEBUG org.springframework.test.context.support.AbstractContextLoader - Could not detect default resource locations for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests]: no resource found for suffixes {-context.xml, Context.groovy}.
18:01:45.965 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests]: BootTestLoggingApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
18:01:45.989 [main] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Using ContextCustomizers for test class [BootTestLoggingApplicationTests]: [DisableAutoConfigurationContextCustomizer, DisableObservabilityContextCustomizer, TypeExcludeFiltersContextCustomizer, PropertyMappingContextCustomizer, Customizer, ImportsContextCustomizer, ExcludeFilterContextCustomizer, DuplicateJsonObjectContextCustomizer, MockitoContextCustomizer]
18:01:46.013 [main] DEBUG org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider - Identified candidate component class: file [/example-app/bin/main/com/example/boot_test_logging/BootTestLoggingApplication.class]
18:01:46.014 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration com.example.boot_test_logging.BootTestLoggingApplication for test class com.example.boot_test_logging.BootTestLoggingApplicationTests
18:01:46.019 [main] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Skipping candidate TestExecutionListener [org.springframework.test.context.transaction.TransactionalTestExecutionListener] due to a missing dependency. Specify custom TestExecutionListener classes or make the default TestExecutionListener classes and their required dependencies available. Offending class: [org/springframework/transaction/interceptor/TransactionAttributeSource]
18:01:46.019 [main] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Skipping candidate TestExecutionListener [org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener] due to a missing dependency. Specify custom TestExecutionListener classes or make the default TestExecutionListener classes and their required dependencies available. Offending class: [org/springframework/transaction/interceptor/TransactionAttribute]
18:01:46.020 [main] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Using TestExecutionListeners for test class [BootTestLoggingApplicationTests]: [ServletTestExecutionListener, DirtiesContextBeforeModesTestExecutionListener, ApplicationEventsTestExecutionListener, MockitoTestExecutionListener, SpringBootDependencyInjectionTestExecutionListener, DirtiesContextTestExecutionListener, WithSecurityContextTestExecutionListener, EventPublishingTestExecutionListener, ReactorContextTestExecutionListener, RestDocsTestExecutionListener, MockRestServiceServerResetTestExecutionListener, MockMvcPrintOnlyOnFailureTestExecutionListener, WebDriverTestExecutionListener, MockWebServiceServerTestExecutionListener, ResetMocksTestExecutionListener]
18:01:46.021 [main] DEBUG org.springframework.test.context.support.AbstractDirtiesContextTestExecutionListener - Before test class: class [BootTestLoggingApplicationTests], class annotated with @DirtiesContext [false] with mode [null]
18:01:46.026 [main] DEBUG org.springframework.test.context.support.DependencyInjectionTestExecutionListener - Performing dependency injection for test class com.example.boot_test_logging.BootTestLoggingApplicationTests
```

<details>

> 18:01:45.962 [main] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [BootTestLoggingApplicationTests]: using SpringBootContextLoader
> 18:01:45.965 [main] DEBUG org.springframework.test.context.support.AbstractContextLoader - Could not detect default resource locations for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests]: no resource found for suffixes {-context.xml, Context.groovy}.
> 18:01:45.965 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [com.example.boot_test_logging.BootTestLoggingApplicationTests]: BootTestLoggingApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
> 18:01:45.989 [main] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Using ContextCustomizers for test class [BootTestLoggingApplicationTests]: [DisableAutoConfigurationContextCustomizer, DisableObservabilityContextCustomizer, TypeExcludeFiltersContextCustomizer, PropertyMappingContextCustomizer, Customizer, ImportsContextCustomizer, ExcludeFilterContextCustomizer, DuplicateJsonObjectContextCustomizer, MockitoContextCustomizer]
> 18:01:46.013 [main] DEBUG org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider - Identified candidate component class: file [/example-app/bin/main/com/example/boot_test_logging/BootTestLoggingApplication.class]
> 18:01:46.014 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration com.example.boot_test_logging.BootTestLoggingApplication for test class com.example.boot_test_logging.BootTestLoggingApplicationTests
> 18:01:46.019 [main] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Skipping candidate TestExecutionListener [org.springframework.test.context.transaction.TransactionalTestExecutionListener] due to a missing dependency. Specify custom TestExecutionListener classes or make the default TestExecutionListener classes and their required dependencies available. Offending class: [org/springframework/transaction/interceptor/TransactionAttributeSource]
> 18:01:46.019 [main] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Skipping candidate TestExecutionListener [org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener] due to a missing dependency. Specify custom TestExecutionListener classes or make the default TestExecutionListener classes and their required dependencies available. Offending class: [org/springframework/transaction/interceptor/TransactionAttribute]
> 18:01:46.020 [main] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Using TestExecutionListeners for test class [BootTestLoggingApplicationTests]: [ServletTestExecutionListener, DirtiesContextBeforeModesTestExecutionListener, ApplicationEventsTestExecutionListener, MockitoTestExecutionListener, SpringBootDependencyInjectionTestExecutionListener, DirtiesContextTestExecutionListener, WithSecurityContextTestExecutionListener, EventPublishingTestExecutionListener, ReactorContextTestExecutionListener, RestDocsTestExecutionListener, MockRestServiceServerResetTestExecutionListener, MockMvcPrintOnlyOnFailureTestExecutionListener, WebDriverTestExecutionListener, MockWebServiceServerTestExecutionListener, ResetMocksTestExecutionListener]
> 18:01:46.021 [main] DEBUG org.springframework.test.context.support.AbstractDirtiesContextTestExecutionListener - Before test class: class [BootTestLoggingApplicationTests], class annotated with @DirtiesContext [false] with mode [null]
> 18:01:46.026 [main] DEBUG org.springframework.test.context.support.DependencyInjectionTestExecutionListener - Performing dependency injection for test class com.example.boot_test_logging.BootTestLoggingApplicationTests

</details>"
3047,1291200107,gabfssilva,5403842,"> Batching through `.add() `would only properly work if the SQL doesn't change.

@mp911de, correct me if I'm wrong, but the SPI has two ways of batching, right? One that allows you to send a single command with multiple parameters (via parameter binding) & another that allows you to pass multiple commands and, although both are sent in a single roundtrip, the latter one is slower since the database will have to parse every single command, so if your command won't change, you should stick with the first approach.

I'm asking because the implementation of this PR is probably the most optimized (since it uses the first approach), although less flexible. Isn't there a way to add both ways to the `DatabaseClient`, so the developer would choose which way fits better for them?"
3048,1291212330,biergit,1071968,"Hi @rstoyanchev 
I was wondering how I as a user of Spring should go about providing i18n messages for my custom exceptions.
It seems you are proposing to override the `ResponseEntityExceptionHandler` but I don't see as much support for reusing the default message source lookup mechanism as used for the Spring exceptions as I hoped for.
Ideally I would like to provide my `problemDetail.com.example.MyException` message in my `message.properties` and write something like
```
@ControllerAdvice
class MyExceptionHandler extends ResponseEntityExceptionHandler {

  @ExceptionHandler
  public ResponseEntity<Object> handleMyException(MyException ex, NativeWebRequest request) {
    return handleExceptionInternal(ex, BAD_REQUEST, request, ""My default message"", new Object[] {ex.getParam1(), ex.getParam2()});
  }
}
```
Instead what I thought I had to do was something like this
```
@ControllerAdvice
public class MyExceptionHandler extends ResponseEntityExceptionHandler {
    @ExceptionHandler
    ResponseEntity<Object> handleMyException(MyException myException, NativeWebRequest nativeWebRequest) {
        ProblemDetail body = ProblemDetail.forStatusAndDetail(HttpStatus.BAD_REQUEST, myException.getMessage());
        ErrorResponseException mappedException = new ErrorResponseException(HttpStatus.BAD_REQUEST, body, myException,
            ErrorResponse.getDefaultDetailMessageCode(myOtherException.getClass(), null), null);
        return handleExceptionInternal(mappedException, null, null, HttpStatus.BAD_REQUEST,
            nativeWebRequest);
    }
}
```
This feels quite awkward and in finally getting to that solution I stumbled across an NPE [here](https://github.com/spring-projects/spring-framework/blob/main/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandler.java#L557) when I did `ErrorResponseException mappedException = new ErrorResponseException(HttpStatus.BAD_REQUEST, !!null!!, myOtherException,
            ErrorResponse.getDefaultDetailMessageCode(myOtherException.getClass(), null), null);` instead.

Does `ProblemDetail` have to be so weird to use? Why not go for a full builder? 

Also the current implementation essentially only supports customizing the message detail via the message source for `ErrorResponse`s. So `problemDetail.org.springframework.web.servlet.NoHandlerFoundException=No handler` works while `problemDetail.org.springframework.beans.TypeMismatchException=Ooops` does not. Would you agree that this is not ideal and also not clearly described in the documentation [here](https://docs.spring.io/spring-framework/docs/6.0.0-RC2/reference/html/web.html#mvc-ann-rest-exceptions-i8n)?"
3049,1291767544,mp911de,1035015,"@gabfssilva your perception is correct. Parametrized batching parses the command once and sends a execute command to the database for each binding set. I think it would be possible to bridge the `.add(…)`-based mechanism into `DatabaseClient`. The other type of batching, where commands are concatenated with `;` can be used already because you're in control of the SQL statement."
3050,1291823874,kidhack83,13467849,"Hi, @jaesuk-kim0808 I'm integrating your code but the AOP is not invoked...

```
//This code is in Data access layer.
@AsyncCacheable(name = ""getBySvcId"")
@Override
public Mono<Domain> getBySvcId(String svcId) {}
```

Can I put the method to cached in a service implementation as a private method? For example:
```
@AsyncCacheable(name = ""getCurrencies"")
private Mono<List<RateDto>> getCurrencies(String source, String target) {
  return currencyRatesApi.getCurrencyRates()
      .collectList();
}
```

The parameters aren't used in the code because I need to cache all elements. I need to change this code, but the pointcut is not launched
I try to change it to public but the AOP is not invoked...

Thanks for your great work"
3051,1291835170,rstoyanchev,401908,"@biergit, thanks for taking a look and for the feedback.

Generally, you don't need to extend `ResponseEntityExceptionHandler`. It can be any `@ControllerAdvice`, and it's easy for such a class to perform a lookup via `MessageSource`. That said, you're right that `ResponseEntityExceptionHandler` could make it easier to map custom exceptions. 

I've created #29384 to make an improvement, and there is a specific proposal. Please, take a look and let's continue the discussion there.

As for `TypeMismatchException`, that should work, [see here](https://github.com/spring-projects/spring-framework/blob/997dd3ee65b0e30b396fa06db75eb6a80b3809bc/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandler.java#L424), but it's not actually passing the messageCode, so that's an oversight. I'll fix this that as part of #29384 since the handling for `TypeMismatchException` will take advantage of the same improvement.




"
3052,1292001918,sbrannen,104798,What happens if you manually add GraalVM native image reflection configuration for `com.fasterxml.jackson.databind.PropertyNamingStrategies.UpperSnakeCaseStrategy`?
3053,1292948350,sdeleuze,141109,"Those are former modules now removed, could you elaborate on why they should be included in `.gitignore`?"
3054,1293111653,biergit,1071968,"Hey @rstoyanchev 

on another thought there is also the ""title"" member for which having an equally convenient i18n measure may be nice. What do you think?
Then I read about additional members in the RfC:

> If such additional members are defined, their names SHOULD start with
   a letter (ALPHA, as per [[RFC5234], Appendix B.1](https://www.rfc-editor.org/rfc/rfc5234#appendix-B.1)) and SHOULD consist
   of characters from ALPHA, DIGIT ([[RFC5234], Appendix B.1](https://www.rfc-editor.org/rfc/rfc5234#appendix-B.1)), and ""_""
   (so that it can be serialized in formats other than JSON), and they
   SHOULD be three characters or longer.

and wondered if this could be checked by Spring as well or if I'm definitely going to far now? 😃"
3055,1293128269,snicoll,490484,@diguage remove those two folders from your local copy and you'll be fine. No need to update the ignore list. 
3056,1293527999,diguage,2121467,Sorry. I got it wrong. I thought the two folders were some compiled results.
3057,1293568464,sbrannen,104798,"> I wanted to understand why it doesn't recognize `PLS_INTEGER` automatically like it does for other types.

I believe it's because `PLS_INTEGER` is not a standard SQL type, but @jhoeller can likely provide additional information."
3058,1293734876,sdeleuze,141109,"As discussed in spring-projects/spring-boot#32903, we should add documentation for `@ImportRuntimeHints` and `@RegisterReflectionForBinding` that Boot could link."
3059,1294059417,pivotal-cla,16822967,"@davidcostanzo Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29393)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29393) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
3060,1294064087,pivotal-cla,16822967,@davidcostanzo Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29393)!
3061,1294182832,imkulwant,26582066,"Why are you getting these WARN? 
```
2022-10-14T19:40:44.506+0530 WARN o.s.w.s.r.PathResourceResolver.isInvalidEncodedPath ""Resolved resource path contains encoded ""../"" or ""..\"": file:../../test/404%E0%A4%8F.html""
2022-10-14T19:40:44.507+0530 WARN o.s.w.s.r.PathResourceResolver.isInvalidEncodedPath ""Resolved resource path contains encoded ""../"" or ""..\"": file:../../test/404%E0%A4%8F.html""
```
Maybe some encoding issue here `""file:../../test""` ?

"
3062,1294364606,Garnerye,52538385,@spring-projects-issues 
3063,1294517654,sanjerai,116335417,"Adding more details to the ticket.

The HTTP 307 redirection works with only **Jetty HttpClient**  as the request is reproducible as explained by Jetty team.
![image](https://user-images.githubusercontent.com/116335417/198516851-f6e0304b-6a6a-48f3-9b8f-24c5e4f742ef.png)
Output
![image](https://user-images.githubusercontent.com/116335417/198516939-24b4504e-ec51-4cee-9ea8-ec4f204ee777.png)


But if we use **Spring WebClient** with **Jetty HttpClient** it fails after HTTP 307 redirection as the request is not reproducible and gives error ""Multiple subscription not allowed on the request""
![image](https://user-images.githubusercontent.com/116335417/198517382-e1155c43-2b1a-4695-998d-86b235a7fee1.png)

Failure logs
[spring307.log](https://github.com/spring-projects/spring-framework/files/9885756/spring307.log)

**Jetty's** _StringRequestContent_ seems to be reproducible in nature after 307 redirect , whereas _BodyInserters.fromValue_ of **Spring**  content is empty after 307 direct and might be causing the issue.
"
3064,1294899245,2hyjun,27001666,"~This feature has been implemented on [this commit](https://github.com/spring-projects/spring-framework/commit/f80fbe30cc8bdcd5351b95257bfb707a73ee0b64)~

Invoking suspend functions with customized CoroutineContext has been [implemented](https://github.com/spring-projects/spring-framework/commit/f80fbe30cc8bdcd5351b95257bfb707a73ee0b64), but there's no way to provide it currently."
3065,1295044441,santoshgangavaram,21265773,"@sdeleuze Would this be good to add in core-aot.adoc at the end to highlight about RegisterReflectionForBinding and ImportRuntimeHints annotations?

```
Custom Hints

If you need to provide your own hints for reflection, resources, serialization, proxy usage etc. you can use the RuntimeHintsRegistrar API. Create a class that implements the RuntimeHintsRegistrar interface, then make appropriate calls to the provided RuntimeHints instance:

code:MyRuntimeHints

You can then use @ImportRuntimeHints on any @Configuration class (for example your @SpringBootApplication annotated application class) to activate those hints.

If you have classes which needs binding (mostly needed when serializing or deserializing JSON), you can use @RegisterReflectionForBinding on any bean. Most of the hints are automatically inferred, for example when accepting or returning data from a @RestController method. But when you work with WebClient or RestTemplate directly, you might need to use RegisterReflectionForBinding:

code:JsonSerialization

Testing custom hints
The RuntimeHintsPredicates API can be used to test your hints. The API provides methods that build a Predicate that can be used to test a RuntimeHints instance.

If you’re using AssertJ, your test would look like this:

code:MyRuntimeHintsTests
```"
3066,1295264389,viniciusao,71805493,"> As of Spring Framework 5.3, we have deprecated `CronSequenceGenerator`, and replaced it with [`CronExpression`](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/support/CronExpression.html).
> 
> When running the sample patterns and test dates you provided, I did not run into any problems with `CronExpression`. For instance, the following code runs fine:
> 
> ```
> String pattern = ""0 0 6 25 DEC SAT"";
> Instant instant = Instant.ofEpochMilli(1308425503952L); // // Sat Jun 18 19:31:43 UTC 2011
> ZonedDateTime dateTime = ZonedDateTime.ofInstant(instant, ZoneId.of(""UTC""));
> CronExpression expression = CronExpression.parse(pattern);
> ZonedDateTime result = expression.next(dateTime);
> System.out.println(result);
> ```
> 
> and prints out: `2021-12-25T06:00Z[UTC]`.

Is there some workaround for those who can't upgrade spring?"
3067,1295267306,jmussman,6170555,"Yep. Lots of us need this. Anything that's hard-coded is really bad code, so it's high time it was refactored anyways. Externalize it and use polymorphism to support Yaml!"
3068,1295895084,wplong11,5109223,"@2hyjun This feature is not implemented. [That commit](https://github.com/spring-projects/spring-framework/commit/f80fbe30cc8bdcd5351b95257bfb707a73ee0b64) only added new invokeSuspendingFunction that accepts CoroutineContext. To implement this feature, InvocableHandlerMethod must be fixed to use new invokeSuspendingFunction and CoroutinesDispatchersProvider should be added.

https://github.com/spring-projects/spring-framework/blob/983c6e233fa21e2672484ee8f4f8e8c8bcd51f95/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java#L139-L145"
3069,1295895339,wplong11,5109223,"@rstoyanchev @be-hase  Can we discuss about design of CoroutinesDispatchersProvider? If there is an agreement on the design, I am willing to write a PoC PR."
3070,1295915003,IIShabalin,37696723,"Hi @leoshusar,

What you're observing must be an effect of type erasure in Java:
- existed in Java 8: https://docs.oracle.com/javase/tutorial/java/generics/erasure.html
- present in Java 17: https://docs.oracle.com/en/java/javase/17/docs/specs/patterns-switch-jls.html
- article on Baeldung: https://www.baeldung.com/java-type-erasure

According to the docs, it's just not possible to distinguish the second type parameter of QueryHandler, because it's unbounded (defined as type `Any`).

@rstoyanchev, FYI.
"
3071,1296320636,sbrannen,104798,"Hi @coney,

Thanks for raising your first issue for the Spring Framework. 👍 

This is a duplicate of https://github.com/spring-projects/spring-boot/issues/24888.

Note, however, that the issue will be addressed in Spring Boot 3 in conjunction with https://github.com/spring-projects/spring-boot/issues/31793.

In light of that, I am closing this issue."
3072,1296529567,guysmart694,76242473,If you see the URL contains utf8 encoded character and hence the warning. But the warning happens for the encoded url which are loaded from file:../../test/ folder and for for the encoded urls under classpath /static folder.
3073,1296738063,sdeleuze,141109,"Merged via e1df05605907faf710fe351c0743d21c4c2fa037, thanks."
3074,1296768657,CynanX,14311152,"HI, do you have a link to the follow up issue, please so I can follow it?

With the latest snapshots I still see the issue as I raised under https://github.com/spring-projects/spring-framework/issues/29052 when trying to compile as native."
3075,1296811387,bclozel,103264,"Closing as a duplicate of https://github.com/spring-projects/spring-boot/issues/32857
Thanks!"
3076,1296832070,snicoll,490484,Alright. Please create a separate issue and share a small sample we can use to reproduce. 
3077,1297250326,rstoyanchev,401908,"The 200 status is expected because the `@ExceptionHandler` does not set it.

For the aggregated content, the behavior depends on the underlying library (Jackson in this case) as to whether it leaves the response stream open. I'm not sure it's worth spending any effort to change anything. It is a bit of an odd scenario in the sense that the controller method has succeeded, the response is written, and there is no way to undo that. 

That means, there isn't much that an `@ExceptionHandler` method could do to ""handle"" this. Note that if the controller methods had had enough content to write, eventually it would exceed the Servlet container's buffer, the response would be committed and the response status would be not possible to change. So an `@ExceptionHandler` can't do much reliably anyway, and I'd argue that a `postHandle` method should not allow any exceptions to escape, especially for an `@RestController`.


"
3078,1297428701,bclozel,103264,"Hey @jonatan-ivanov 

From what I understand, this is being logged from an `org.apache.catalina` class? In this case, it's called outside of the observation scope of the Servlet filter so it's expected at this stage not to have the log correlation anymore.

I don't think Framework can do anything about that.
"
3079,1297441371,jonatan-ivanov,3044070,"Yes, it is definitely out of the scope of the Observation.
I'm not sure if it is purely Catalina or a component that we provide to Catalina (`dispatcherServlet` in the name of the logger).

@marcingrzejszczak might have more details, in Sleuth, we fixed it with a `Valve`: [TraceValve](https://github.com/spring-cloud/spring-cloud-sleuth/blob/3.1.x/spring-cloud-sleuth-instrumentation/src/main/java/org/springframework/cloud/sleuth/instrument/web/tomcat/TraceValve.java)"
3080,1297463119,rstoyanchev,401908,"Yes, it should be straight forward to do the same for the ""title"", so I've created #29407. 

Additional members are less straight forward as those could be in the ""properties"" map in `ProblemDetail` or actual fields on a sub-class. I'll leave those out for now."
3081,1297520902,bclozel,103264,"> I'm not sure if it is purely Catalina or a component that we provide to Catalina (dispatcherServlet in the name of the logger).

I guess Tomcat is logging the name of the Servlet.

I did discuss the Valve possibility with Marcin, and while it would bring better measurements in general, I don't think it's the right approach for Framework:

* we don't ship container specific API and we usually stick to the Servlet API
* we would need to implement the same feature for Jetty, Undertow and others - containers would need to offer the same features and apply it at the same phase during the request lifecycle

Taking a step back, I think the Servlet filter is enough to instrument the application behavior."
3082,1298097782,oneandzeros,12198564,same issue I have
3083,1298253886,skarpushin,4069181,"> Such a style of remoting is old school and not recommendable for many reasons these days

@jhoeller would you be so kind and elaborate on 2 things: ""why is it old school"" and ""what are those many reasons""? 

I'll explain a bit why I'm asking. 

**First** -- I'm just eager to know what are those many reasons that I might not be aware of, while I should be. 

**Second** -- there is a tool for the job. For internet-scale applications HttpInvoker might be considered inappropriate, but not all applications are of internet-scale. And not all software solutions consist of hundreds microservices created using 5 different platforms (java, .net, go, python, nodejs, etc...)

**Third** -- HttpInvoker allows to cut corners and waive necessity to create REST API servers and client and just allow different instances to conveniently talk to each other, this decreases efforts and hence cost. This is a huge benefit from project budget and schedule perspective.

For those who concerned about security -- they must refrain from usage of Java's Object serialization and use JSON instead with list of whitelisted classes and beans.

**And forth** -- I also cannot imagine why is this considered old school. New approaches (i.e. Feign client) gravitate towards same paradigm that allows you to use Java interfaces without explicitly implementing REST API client. 
So people want to write less boiler-plate code (probably now more than ever) and in that sense HttpInvoker achieves the same. 
"
3084,1298320401,awstutorials,46156044,"Hi, I am also facing the similar issue. Running the spring boot application in Java 17. For me also the application is in the process of shutdown. I am using embedded tomcat running in CloudFoundry environment. What type of information you are looking for and I can try to provide that information."
3085,1298321833,awstutorials,46156044,Also as additional point we are running 20-30 applications in the Cloud Foundry environment and this issue is happening only in handful of applications. I noticed a spring framework version difference and we upgraded to 2.7.4 but still i see the same issue.
3086,1298348113,sbrannen,104798,"This has been merged into `main`.

Thanks"
3087,1298369472,sbrannen,104798,"Hi @imkulwant,

Thanks for creating your first PR for the Spring Framework.

Aside from some Checkstyle violations and unnecessary Javadoc changes (which I can address for you), I think this PR seems reasonable.

So, would you mind if we reopen and merge this PR?"
3088,1298459331,rstoyanchev,401908,"There is not much we can do on our end. The server is shutting down, and there are in-flight requests being processed. You can try graceful shutdown. At best we could put something that ignores the `null` but that's hardly the ideal place for such a fix and a similar issue could appear elsewhere."
3089,1298586880,sbrannen,104798,"This has been merged into `main`.

Thanks"
3090,1298610617,rstoyanchev,401908,"The `resolveLazily` flag in `StandardServletMultipartResolver` is set to `false` by default, but in your case you must be setting it to `true`. If this is a Boot application, then this controlled with the `spring.servlet.multipart.resolve-lazily` property, also `false` by default.

This is probably a configuration issue, but if not please comment."
3091,1298615268,invzbl3,24904825,"@mazhewei, thank you, your post was very helpful for me!"
3092,1298657839,rstoyanchev,401908,"Well spotted, this is confusing. Indeed `String` and `void` are already covered. What it should say is that any other Object is treated as a model attribute by default."
3093,1298677449,rstoyanchev,401908,Can you please provide the actual sample that you have? 
3094,1298706528,poutsma,330665,"Thanks for checking out this new API! There are a couple of things causing the failure.

- You are using Reactor Netty 2.0.0-M2, which is still in the milestone phase. Changing that to 1.0.24 got me a lot further. 
- `handlePartsEvents` has a bug. The [PartEvent Javadoc](https://docs.spring.io/spring-framework/docs/6.0.0-SNAPSHOT/javadoc-api/org/springframework/http/codec/multipart/PartEvent.html) says that 

>File uploads will produce one or more `FilePartEvent`s, ...

in your code, you're only handling the first event, not any subsequent ones. At the very least, you have to dispose the contents of the following events, otherwise you'll end up with stale connections. So do something like:

```java
return partEvents.map(PartEvent::content)
    .map(DataBufferUtils::release)
    .then(Mono.just(filename));
```
- There was a bug in Spring Framework in the way `PartEvent`s were written, causing issues with the `JdkClientHttpConnector`. None of the other client connectors had this problem. This bug has now been fixed.
"
3095,1298714954,rstoyanchev,401908,"The `RestTemplate` like many other Spring infrastructure components, was designed for startup initialization when the Spring `ApplicationContext` creates and initializes framework and application components and injects them with dependencies. Once this is done, which is typically before requests are processed, it is not designed to be re-configured at runtime again. That's a general assumption and pattern of usage. The Javadoc would call it out otherwise when a particular configuration setting is explicitly designed for change at runtime. This is also something that's easy to work out by taking a look at the field and setter implementation. 

The more recently designed `WebCilent` comes with a `Builder` interface and a `mutate()` method that let's you drop back into the `Builder` and build a new `WebClient` that's pre-configured to match the original, and that gives you two independent client instances. The only safe way where concurrency is expected. You can use Boot's `RestTemplateBuilder` to achieve a similar effect.

Aside from that we are not looking to make further changes to the `RestTemplate` and this would be a significant change. At best we could add something to the Javadoc to indicate more explicitly that configuration shouldn't be changed at runtime."
3096,1298735037,lako12,58422683,"@sbrannen @jhoeller any updates?
Thanks "
3097,1298747629,hantsy,854520,"@poutsma My example is copied from the Spring official doc, check [PartEvent](https://docs.spring.io/spring-framework/docs/6.0.0-RC1/reference/html/web-reactive.html#partevent).

>in your code, you're only handling the first event, not any subsequent ones. 

The `windowsUntil` will split the original flux into a `Flux<Flux<PartEvent>>` by `PartEvent.isLast` method, every PartEvent(I have checked the `FormPartEvent` and `FilePartEvent`) has a `isLast` method, that ensure the original FormPartEvent and FilePartEvent is split into standalone Fluxs correctly.

Finally uses a `contactMap` to collect the result(form value and file name) into the result Flux.

"
3098,1298770444,poutsma,330665,"> @poutsma My example is copied from the Spring official blogs.

Indeed. You might want to check the author of said documentation (and the `PartEvent` API) before you ignore their suggestion.

In the [PartEvent Javadoc](https://docs.spring.io/spring-framework/docs/6.0.0-SNAPSHOT/javadoc-api/org/springframework/http/codec/multipart/PartEvent.html) it says:

>NOTE that the body contents must be completely consumed, relayed, or released to avoid memory leaks.

In your sample, you handling not handling the body content. The code snippet I gave above fixes that by releasing it.
"
3099,1298785227,imkulwant,26582066,"> Hi @imkulwant,
> 
> Thanks for creating your first PR for the Spring Framework.
> 
> Aside from some Checkstyle violations and unnecessary Javadoc changes (which I can address for you), I think this PR seems reasonable.
> 
> So, would you mind if we reopen and merge this PR?

Hi @sbrannen 

I had closed the PR to fix some test failures. Will fix them and re-open again.

"
3100,1298810259,hantsy,854520,"OK, updated my example.

* use stable Reactor Netty 1
* use Reactor Http Connector instead in the WebClient in IntegrationTests.
* Update the file part handling as you suggested(adding consume and release data). 

The IntegrationTests still failed with messages like.

https://github.com/hantsy/spring6-sandbox/actions/runs/3371019674/jobs/5592675195#step:4:10358

```bash 
Decoded ""[""test"",""spring.png""]""
Error:  Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.685 s <<< FAILURE! - in com.example.demo.IntegrationTests
Error:  com.example.demo.IntegrationTests.testPartEvents  Time elapsed: 0.501 s  <<< FAILURE!
java.lang.AssertionError: expectation ""expectNextCount(2)"" failed (expected: count = 2; actual: counted = 1; signal: onComplete())
```"
3101,1298917364,rstoyanchev,401908,"> 573 actual sessions, 4791 reported websocket sessions

This is strange. The first is the size of `sessions` map in `SubProtocolWebSocketHandler`, and the second is a counter that gets incremented/decremented as sessions are added/removed. They are always updated together, in [afterConnectionEstablished](https://github.com/spring-projects/spring-framework/blob/6e9fbcc24317d31cc3aab81239dd06f52793af88/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java#L319-L321) and in [clearSession](https://github.com/spring-projects/spring-framework/blob/6e9fbcc24317d31cc3aab81239dd06f52793af88/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java#L527-L529). I don't understand how the two can get out of sync.

> I don't know if this issue also extends to Http Streaming or Polling, because we have very few clients using this method.

It does seem like there is a fair number of transport errors (connection dropped). Also those ""closed abnormally"" means that a WebSocket connection can be established but no messages came which could be a proxy issue. In cases a WebSocket connection can't even be established, it should fall back on HTTP transports, and I would have thought those polling/streaming session numbers should be higher.

"
3102,1298946431,Butzlabben,29730180,"We use traefik as our proxies and have no problems connecting via websocket. The http status code stats do not indicate any abnormal behaviour regarding the proxying of requests. The ""connect failure"" stats are probably from users behind coporate proxies, which remove the Upgrade Header from all requests, which we know exist (a few). 
I guess the huge number of transport errors are rooted in the long uptime and that we have app clients, which can switch networks, be in a car, ..."
3103,1299610845,guysmart694,76242473,"You can refer to Git Project 
HTTP URL  https://github.com/guysmart694/TestLanguage.git
Project URL https://github.com/guysmart694/TestLanguage
SSH URL git@github.com:guysmart694/TestLanguage.git"
3104,1299773120,skaba,1618821,Will this be backported to Spring 5?
3105,1299953428,poutsma,330665,"That failure is because the response is encoded as a JSON list. Spring MVC picked JSON as the response type, because the return type of `handlePartsEvents` is `ResponseEntity<Flux<Object>>`, which does not give sufficient information. If you change it to `ResponseEntity<Flux<String>>`, the response will be encode to the string `testspring.png`, which still fails the test. To make the test succeed, you will need to make sure that the response strings are decoded into separate events, and you do that by adding a newline delimiter. So `return Mono.just(value + ""\n"")` instead of `return Mono.just(value)`, and similarly for the `FilePartEvent`. With those changes, the test succeeds for me."
3106,1299960082,poutsma,330665,"We would love to use zero-copy (aka sendfile) in Servlet environments, but unfortunately the Servlet API does not give us access to any kind of `Channel`, just input and output streams. So as far as I know, `sendFile` can't be used.

Note that we do use zero-copy in WebFlux, see `ResourceHttpMessageWriter`."
3107,1299988230,poutsma,330665,"I think this is due to the fix for #28024.

@rstoyanchev Thoughts? Should we do a case insensitive comparison instead? "
3108,1299990653,sdeleuze,141109,"Merged, thanks!"
3109,1300006882,echolakov,99324696,"Thank you for your answer and spent time on this issue, Rossen Stoyanchev. I had a task to fix a ConcurrentModificationException, so other microservices/projects may have/face the same wrong behavior/way. I understand that the Spring team built the RestTemplate a long time ago. Not-so-skillful developers must use a particular mind pattern when using the legacy RestTemplate. I acknowledge now that the Spring team cannot make such a significant fix change because of the legacy code and the corporations' usage. But it is easy and natural to go with the anti-design pattern if you come from a scripting experience like the Laravel framework. Yes, it will be great if there are a new tutorial and new java docs comments in the space of the Spring community. Emphasizing the marked behavior of the RestTemplate will be enough."
3110,1300044136,sdeleuze,141109,"`DateFormat` should not be `null`, we will refine the tests accordingly."
3111,1300050704,rstoyanchev,401908,"Yes, I think that would make sense."
3112,1300088247,reda-alaoui,2890843,"Here is `test3` :
```java
@Test
  void test3() throws SQLException {
    TransactionStatus transaction = transactionManager.getTransaction(null);
    DataSource unWrappedDataSource =
        ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource();
    Connection conn = DataSourceUtils.getConnection(unWrappedDataSource);
    transactionManager.commit(transaction);
    conn.createStatement().execute(""select 1"");
  }
```

It is similar to `test1` but unwrap the `DataSource` from `TransactionAwareDataSourceProxy` before using `DataSourceUtils`. It behaves as `test1`, it fails."
3113,1300121444,sdeleuze,141109,"Merged via fded79d807b7d6b69e01ecc4e241399a438ee220 without the `testFunction` method. Thanks for the Kotlin tests, but for the sake of consistency and since we intend to introduce later globally null-safety validation during the build, I did not introduce them."
3114,1300132227,rstoyanchev,401908,"I want to emphasize again, this isn't some isolated pattern, but a general design approach. In a Spring application, components are typically initialized and configured at startup. For people who come from a very different language background and concurrency model, this does present a learning challenge, but in my opinion that challenge has to do with much broader concepts. The `RestTemplate` is just the specific instance where they hit the problem, but it's bound to happen elsewhere too if these general concepts are not well understood.

Note also that using a synchronized collection or otherwise allowing interceptors to be added at runtime would be dangerous, as the `RestTemplate` is a shared component, and it would lead to side effects in other places. So I'm not sure what the expectations were but at best this is a programming error. The only outcome really should be to have differently configured instances, which can be done even without explicit support (like the `WebClient` mutable builder), either on startup or at runtime, and for that Boot's `RestTemplateBuilder` should be quite helpful.

In any case, we'll add something to the Javadoc if it helps. 
 "
3115,1300168471,echolakov,99324696,"Thank you, Rossen Stoyanchev."
3116,1300201588,sbrannen,104798,"These commits have been merged into `main` and revised in 723e09c1648ff723abcd89e3d25fa1daef015de8.

Thanks"
3117,1300257586,dreis2211,6304496,"Addendum 1:

There aren't exactly many benchmarks based on Tomcat (the default for SB apps), but comparing the JSON serialization with e.g. a vanilla undertow reveals that there seems to be a quite a lot of framework overhead. And it's not Jackson (because that is used in both `undertow` and `spring` (haven't checked Quarkus)) 

<img width=""1171"" alt=""image"" src=""https://user-images.githubusercontent.com/6304496/199486924-90be659f-bfea-4d8b-9326-0668d8d9fe7f.png"">
"
3118,1300374459,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
3119,1300398471,poutsma,330665,"Looks like we used `equalsIgnoreCase` before this was refactored because of #28024, see https://github.com/spring-projects/spring-framework/blob/259bcd60fbbc5cdb8b230595a5004707f4c6ff23/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/ProducesRequestCondition.java#L369."
3120,1300403261,bclozel,103264,Closing in favor of #29388.
3121,1300404888,ionel-sirbu-crunch,68114012,"Probably in the same functional area, spaces (` `) embedded in query params don't get decoded properly either, they are left as pluses (`+`). I've added a test to reflect that too in the demo app."
3122,1300435197,georgiivanov9,97232031,"I do not think this is configuration issue because we do not expect requests to random paths with MIME type multipart/* to be accessible at all and to throw an error independent on the request. For me it makes more sense to check first if there is that path declared and then resolve multipart elements. I would expect that with this `spring.servlet.multipart.resolve-lazily` set to true is the default behavior. We tried with some older versions of Spring boot from 2.3.12.RELEASE , 2.4.13 ,2.7.1. "
3123,1300494602,sbrannen,104798,"The technical use of the terms ""include"" and ""exclude"" in these passages is specific to include/exclude features that allow one to specify something that is included or excluded.

In other words, it is not the _pattern_ or _path_ itself that is included or excluded. For example, an ""`include` pattern"" is used to determine what will be ""included"". So the thing that will be ""included"" is the artifact that matches the ""include pattern"".

I hope that makes sense.

In light of that, I am closing this PR."
3124,1300550500,sbrannen,104798,"This has been merged into `5.3.x` and `main`.

Thanks"
3125,1300605504,rstoyanchev,401908,"My bad, I misinterpreted the default flag setting, so yes, this would happen with default settings. Nevertheless, arguments could be made, either for lazy parsing and search all mappings, or parsing immediately and rejecting an invalid request early on. If you prefer the former, than you have control to change that setting."
3126,1300631722,reda-alaoui,2890843,"If I rewrite `test2` like this:
```java
@Test
  void test2() throws SQLException {
    TransactionStatus transaction = transactionManager.getTransaction(null);
    Connection conn = dataSource.getConnection();
    conn.createStatement().execute(""select 1""); <-- added line
    transactionManager.commit(transaction);
    conn.createStatement().execute(""select 1"");
  }
```
 `test2` will then behave as `test1` and `test3` (i.e. the second statement creation will fail). 

I think I found the reason of these differences:
- `JpaTransactionManager` unwraps `TransactionAwareDataSourceProxy` to manipulate only the underlying `DataSource`
- `TransactionAwareDataSourceProxy` connection's proxy delays underlying connection fetch as much as possible

What happens:
- When `JpaTransactionManager` commits, it closes the underlying `Connection`. `TransactionAwareDataSourceProxy` is unaware of that.
- Creating the statement on the `TransactionAwareDataSourceProxy` connection's proxy after the commits leads to the acquisition of a new connection, not bound to any transaction

IMO, the easiest fix would be to make `TransactionAwareDataSourceProxy` fetch its underlying connection eagerly if `TransactionAwareDataSourceProxy#reobtainTransactionalConnections` is false (default value).
An alternative that looks more risky would be to make `JpaTransactionManager` works with `TransactionAwareDataSourceProxy` (without unwrapping it)."
3127,1300750399,OndraZizka,644904,"Not directly related, but: I can't persuade httpclient 4.x not to spam the log with DEBUG messages, and no logging configuration seems to help. I could configure httpclient 5 to stop spamming, as it uses SLF4J. Any hints?"
3128,1301104016,jonatan-ivanov,3044070,"I think having traceId/spanId on error logs is a vital feature.
Errors are the events where users most likely want to look into, with missing traceId/spanId they are unable to do so out of the box."
3129,1301213819,bclozel,103264,"I think that the main issue here is that exceptions unhandled by the web framework are not logged by Spring and bubble up to the Servlet container, which chooses to log them at the ERROR level. If Spring web frameworks logged those exceptions, this user experience issue would be solved. Considering a custom valve here would only work for Tomcat and would not address the issues listed in my previous comment.

`DispatcherServlet` is not logging those at the moment, maybe a dedicated logger and/or a configuration setting would help. This is a fundamental part of the logging experience, and it's been like this for a very long time so changing this behavior is likely to bother a lot of Spring developers out there.

Note that exceptions handled by Spring MVC are logged by the Framework, not by the container. For example here, using the new Problem Detail support (this would also work for any exception handler in general).

```java
@Controller
public class SomeController {

	private static final Log logger = LogFactory.getLog(SomeController.class);

	@GetMapping(""/test"")
	public String test() {
		logger.info(""test() is called"");
		throw new IllegalStateException(""the request has an invalid state"");
	}

	@ExceptionHandler(IllegalStateException.class)
	ProblemDetail handleIllegalState(IllegalStateException exc) {
		ProblemDetail problemDetail = ProblemDetail.forStatus(HttpStatus.BAD_REQUEST);
		problemDetail.setTitle(""Illegal State"");
		return problemDetail;
	}

}
```

```
$ http localhost:8080/test

HTTP/1.1 400
Connection: close
Content-Type: application/problem+json
Transfer-Encoding: chunked

{
    ""instance"": ""/test"",
    ""status"": 400,
    ""title"": ""Illegal State"",
    ""type"": ""about:blank""
}
```

```
INFO [,ec159f78ffd24972f83a88a093fd16dc,b23d770731d64cb8]  28380 --- [nio-8080-exec-1] com.example.error.SomeController         : test() is called
WARN [,ec159f78ffd24972f83a88a093fd16dc,b23d770731d64cb8]  28380 --- [nio-8080-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.IllegalStateException: the request has an invalid state]
```"
3130,1301442615,jhoeller,1263688,"The present check is needed to bypass any attempt for serializable type proxies in a native image environment. Serializable type proxies are a rarely used mechanism to begin with, and we haven't heard any feedback on this limitation yet.

That said, we could support serializable type proxies in a native image as well if the corresponding proxy hints are provided. We could also try proxy creation there and silently proceed with a non-serializable type reference if proxy creation fails. However, we'd really need some concrete use cases for this, otherwise it seems preferable to simply define it as a known limitation."
3131,1301764993,imkulwant,26582066,"> I have requested some changes.
> 
> In addition, please note that we use the present tense command form for commit message titles. For example, ""Fix typo"" instead of ""Fixed typo"". Can you please update your commit messages accordingly?
> 
> Thanks

Updated commit messages."
3132,1301765646,bclozel,103264,"This behavior is expected, as `ResponseBodyAdvice` is only involved for the following cases:

>  * Allows customizing the response after the execution of an `@ResponseBody`
>  * or a `ResponseEntity` controller method but before the body is written
>  * with an `HttpMessageConverter`.

In Spring MVC, those are involved in the `HttpEntityMethodProcessor` - the case you're showing here doesn't involve this mechanism and the controller handler is supposed to handle the response entirely.

For further questions, please use StackOverflow."
3133,1301860961,sdeleuze,141109,I tentatively add this one for 6.0 GA since that breaking some propular use cases.
3134,1302140705,varshith-v,30930913,"Hi @bclozel,
As I see from comments, the classes concerned with this CVE are HTTPInvokerServiceExporter, RemoteInvocationSerializingExporter and are deprecated.
Could you please confirm if there are any other classes concerned with this vulnerability?"
3135,1302222532,bclozel,103264,"@varshith-v the CVE is really about Java deserialization, so `ObjectInputStream` is really the one to look for in your code base. In Spring Framework, the classes you listed are the ones that leverage this mechanism."
3136,1302322673,sdeleuze,141109,"> I'm not a particular huge fan of the [TechEmpower benchmarks](https://www.techempower.com/benchmarks/#section=data-r21), because they barely reflect real use-cases

@dreis2211 Same, but as I am myself working on some benchmarks to compare Boot 3 JVM and native apps, we can maybe use this opportunity to compare:
 - How Spring Framework performs in a default Spring Boot 3 application versus Spring Boot 2 and see what is the evolution if any
 - Compare Undertow versus Tomcat on recent versions
 - Check if we can find low hanging fruits to optimize

Let's maybe start by focusing on the https://github.com/TechEmpower/FrameworkBenchmarks/tree/master/frameworks/Java/spring. Do you have the bandwidth to create a branch with a Spring Boot `3.0.0-SNAPSHOT` (we are close to GA so should be pretty stable) version of it, upgrading to Java 17, Jakarta EE, etc. and compare the result you have locally with the Spring Boot `2.6.9` version used currently? And to compare Undertow versus Tomcat on both?"
3137,1302332252,dreis2211,6304496,"I will have some time next week or earliest this weekend to do some preliminary tests, I guess."
3138,1302407808,dreis2211,6304496,"Fun fact, apparently the `spring` benchmarks already run with Undertow and Round 21 doesn't include these changes yet."
3139,1302548747,bclozel,103264,"This is selecting `InputStreamResource` only if streaming is supported (in the case `RestTemplate`, streaming is not supported) and the target type is `InputStreamResource`. The Javadoc of `InputStreamResource` states [why it should only be used in some cases](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/io/InputStreamResource.html).

Applying the change you've suggested would:

1. prevent developers from reading the stream multiple times
2. force them to properly drain and close the stream, otherwise the state of the HTTP connection would be invalid and would need to be closed.
3. break many applications out there if they're not dealing with 1) and 2) properly
"
3140,1302585204,dreis2211,6304496,"So, I had a bit of time tonight:

*Local specs:*
  **Model**: MacBookPro:
  **Processor**:	8-Core Intel Core i9 2,3 GHz
  **Memory**:	32 GB

**NOTE:** The results should be taken with a grain of salt. After all, local benchmarks are not really isolated and might be influenced by things running on my machine.

**Spring-Boot 2.6.9 (Undertow)**:

<img width=""1167"" alt=""image"" src=""https://user-images.githubusercontent.com/6304496/199812396-8755ec0c-526e-4fac-8000-36b223229db3.png"">

**Spring-Boot 2.6.9 (Tomcat)**:
<img width=""1167"" alt=""image"" src=""https://user-images.githubusercontent.com/6304496/199828888-66ff9e4c-c343-4830-893c-56213402461d.png"">


**Spring-Boot 3.0.0-SNAPSHOT (Undertow)**:

<img width=""1167"" alt=""image"" src=""https://user-images.githubusercontent.com/6304496/199814967-8225a7f4-0371-45ea-8562-20c4e5aaface.png"">

**Spring-Boot 3.0.0-SNAPSHOT (Undertow)** (with `produces` on `GetMapping`):
<img width=""1167"" alt=""image"" src=""https://user-images.githubusercontent.com/6304496/199814713-b5706a3e-435d-47c8-bb74-aedbcb150241.png"">

**Spring-Boot 3.0.0-SNAPSHOT (Tomcat)** (with `produces` on `GetMapping`):
<img width=""1167"" alt=""image"" src=""https://user-images.githubusercontent.com/6304496/199825540-2893cbe8-628e-4284-86e5-1e9f5a3dacb9.png"">

**Spring-Boot 2.3.1 (Tomcat) (Round 20)**:
<img width=""1167"" alt=""image"" src=""https://user-images.githubusercontent.com/6304496/199814807-44111307-84d4-4cf5-8760-32be27ace4b8.png"">

**Quarkus**:
<img width=""1167"" alt=""image"" src=""https://user-images.githubusercontent.com/6304496/199812988-857f8e53-a65b-4486-ac4b-c33b6785679e.png"">

I'm sort of focussing on the Plaintext & JSON ones here as the others are somewhat volatile and due to the database involvement include some more flakyness not under any frameworks control. What I found was that there seems to be a substantial overhead if the application needs to determine the producible media types. E.g. the changes that moved from 2.3.1 & 2.6.9 include the `produces` field on the `GetMapping` annotations for plaintext. As one can see the different runs for 3.0.0 also differ largely for JSON. And there the only change is again the manual `produces` on the endpoint. Maybe the following plays a role here: https://github.com/spring-projects/spring-framework/blob/b72ee5f0345efd281716ce95b63bfb492df1ddbd/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java#L385-L395 .

Funny enough I came across this method already when playing around with the [type pollution agent](https://github.com/RedHatPerf/type-pollution-agent) from @franz1981 / RedHat, which yields the following output:

```
--------------------------
Type Pollution Statistics:
--------------------------
1:      org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
Count:  58366
Types:
        org.springframework.http.converter.HttpMessageConverter
        org.springframework.http.converter.GenericHttpMessageConverter
Traces:
        org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.getProducibleMediaTypes(AbstractMessageConverterMethodProcessor.java:385)
                class: org.springframework.http.converter.HttpMessageConverter
                count: 29208
        org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.getProducibleMediaTypes(AbstractMessageConverterMethodProcessor.java:386)
                class: org.springframework.http.converter.GenericHttpMessageConverter
                count: 29115
        org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.getProducible
MediaTypes(AbstractMessageConverterMethodProcessor.java:387)
                class: org.springframework.http.converter.GenericHttpMessageConverter
                count: 43
```
If true, this would maybe indicate a scaling/performance problem caused by https://bugs.openjdk.org/browse/JDK-8180450 . Maybe it's not that, but just the fact, that it iterates over 8 message converters for each request to get their producible media types. I haven't really had the time tonight to look deeper into this.

In terms of Tomcat vs Undertow, there seems to be a huge difference for plain text responses (e.g. Tomcat only reaching half of what Undertow achieves).

Cheers,
Christoph"
3141,1302592955,ainGitHub,12911422,"@bclozel thanks for the explanation. I assume that for my application, I can just create my own resourceConverter and use it without changing the implementations from Resource to InputStreamResource.
By the way, there is a similar question for [ResourceDecoder](https://github.com/spring-projects/spring-framework/blob/main/spring-core/src/main/java/org/springframework/core/codec/ResourceDecoder.java). There, in the decode method, for some reason, for InputStreamResource, data is created from ByteArrayInputStream. Whether it is impossible to implement receiving of the data from DataBuffer in a stream form there?"
3142,1302611508,bclozel,103264,"> By the way, there is a similar question for [ResourceDecoder](https://github.com/spring-projects/spring-framework/blob/main/spring-core/src/main/java/org/springframework/core/codec/ResourceDecoder.java). There, in the decode method, for some reason, for InputStreamResource, data is created from ByteArrayInputStream. Whether it is impossible to implement receiving of the data from DataBuffer in a stream form there?

In this case, the data here is already read in memory as a `DataBuffer`, so there is no `InputStream` to plug in. The data should be read in a non-blocking fashion, so `InputStream` do not work there. If you wish to read asynchronously, `Flux<DataBuffer>` is a better choice there.

I'm closing this issue as the matter seems to be resolved. Thanks!"
3143,1302731206,sdeleuze,141109,"Interesting, better to focus initially on JSON and plaintext indeed.

It would be interesting to do for example a new round of JSON test with only `MappingJackson2HttpMessageConverter` and remove the other default converters.

I can also provide a branch that removes this `instanceof` check, I will try to create that tomorrow and share it with you."
3144,1302755920,dreis2211,6304496,"I think `AbstractMessageConverterMethodProcessor.writeWithMessageConverters` is indeed something to look at.

E.g. if I force the content-type to [be preselected](https://github.com/spring-projects/spring-framework/blob/b72ee5f0345efd281716ce95b63bfb492df1ddbd/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java#L214) (a.k.a skipping even more logic than just the producible media types) via

```
	@GetMapping(value = ""/plaintext"")
	String plaintext(HttpServletResponse response) {
		response.setContentType(""text/plain"");
		return ""Hello, World!"";
	}

	@GetMapping(value = ""/json"")
	Message json(HttpServletResponse response) {
		response.setContentType(""application/json"");
		return new Message(""Hello, World!"");
	}
```
it yields the following numbers:

**Spring-Boot 2.6.9 (Undertow):**

<img width=""1167"" alt=""image"" src=""https://user-images.githubusercontent.com/6304496/199846264-3d58ebc1-0c29-4223-8182-3d615cece949.png"">

Remember - the status quo of that was:

<img width=""1167"" alt=""image"" src=""https://user-images.githubusercontent.com/6304496/199812396-8755ec0c-526e-4fac-8000-36b223229db3.png"">"
3145,1302906407,jonatan-ivanov,3044070,"I only used the valve as an example (Tomcat), I'm not saying we should use it or that would be a universal solution. I'm only saying that out of the box this does not work and this is a rather important functionality.

I guess the question for me is: can we do anything with this in the 6.0 timeline or in 6.1? I.e.: brainstorming about it with the whole team?

If this can't be fixed in 6.0, can we document it? I guess other options should work too, like having a ControllerAdvice or using a custom [ObservationHandler](https://github.com/micrometer-metrics/micrometer-samples/blob/d700c5b70d398373c19e3deaf7510b2bc6a5b69e/micrometer-samples-boot3-database/src/main/java/io/micrometer/boot3/samples/db/Boot3WithDatabaseSampleApplication.java#L33-L48).
"
3146,1303433082,sdeleuze,141109,"Thanks for raising this, I was expecting this kind of refinements being needed at some point.

The fact that `BindingReflectionHintsRegistrar` doesn't register private, package-private and non setters/record components methods is done on purpose since we walk on thin ice here. I previously attempted to register more by default but that ends up with far too much included in the native image due to the transitive inclusion of types used in return values/parameters.

To solve this issue, I am in favor of using the fact that those elements are annotated with `@JsonProperty` as a signal. I guess it will be useful to support other annotations, but we can maybe start by this one, see what other needs come later and potentially introduce a pluggable infrastructure for it if that grows too much."
3147,1303486576,wilkinsona,914682,"Thanks, @sdeleuze. That sounds good to me. In my example above, Jackson only considered the field and method due to the presence of `@JsonProperty`. It would be good to look for `@JsonValue` too I think."
3148,1303789096,sbrannen,104798,"This has been merged into `5.3.x` and `main`.

Thanks"
3149,1304502792,dreis2211,6304496,"Another finding: the current tests run inside a Debian Buster image. With Debian Bullseye I can reach a substantially better score on both JSON and Plaintext with 3.0.0 and the forced Content-Type:
<img width=""1167"" alt=""image"" src=""https://user-images.githubusercontent.com/6304496/200117789-ad534c2a-8460-4fab-8076-0b004815c355.png"">
"
3150,1304560366,wilkinsona,914682,I've been testing Boot against a local build of Framework that contains [this change](https://github.com/wilkinsona/spring-framework/commit/f879e2c2070c5d867b8e802b4cdf78bf8c47f30f) and it seems to do the trick.
3151,1304618471,jhoeller,1263688,@wilkinsona Looks like we had an old code path just for Tomcat 9.0 compatibility there which obviously isn't relevant anymore. Your change looks straightforward. Could you turn this into a PR? Otherwise we can also manually upgrade the code accordingly.
3152,1304638139,wilkinsona,914682,Closing in favor of https://github.com/spring-projects/spring-framework/pull/29434.
3153,1304712970,pivotal-cla,16822967,"@chenyhd Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29437)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29437) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
3154,1304739770,pivotal-cla,16822967,@chenyhd Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29437)!
3155,1304805631,sdeleuze,141109,"@dreis2211 Pretty good results on skipping `instanceof GenericHttpMessageConverter` checks, see #29438. I was able to confirm the gains on 2 different benchmarks, but if you can check on your side as well, please share the results in the PR."
3156,1304806611,jhoeller,1263688,"Note that we are upgrading to the Servlet 6.0 based Undertow 2.3 for Spring Framework 6.0 RC4 (#29435), aiming to retain runtime compatibility with Undertow 2.2. This allows us to rely on the new Undertow 2.2 cookies API, hopefully helping here."
3157,1304806757,sdeleuze,141109,"Additional data points from my `hey` benchmarks:
 - Original throughput with default converters : 142169 req/sec
 - Throughput with default converters and `produces = MediaType.APPLICATION_JSON_VALUE` : 145944 req/sec
 - Throughput with a single converter configured : 150544 req/sec
 - Throughput with default converters and this PR: 149985 req/sec

So those figures seems to confirm that this change improves significantly the efficiency of the iteration on converters."
3158,1304810693,sdeleuze,141109,After discussing with @jhoeller it seems we could even consider inclusion in `5.3.x`.
3159,1304812327,dreis2211,6304496,"Without confirming the improvements yet, the type pollution agent is still producing this output, because of the checkcast.

```
--------------------------
Type Pollution Statistics:
--------------------------
1:	org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
Count:	192143
Types:
	org.springframework.http.converter.GenericHttpMessageConverter
	org.springframework.http.converter.HttpMessageConverter
Traces:
	org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.getProducibleMediaTypes(AbstractMessageConverterMethodProcessor.java:387)
		class: org.springframework.http.converter.GenericHttpMessageConverter
		count: 96087
	org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.getProducibleMediaTypes(AbstractMessageConverterMethodProcessor.java:385)
		class: org.springframework.http.converter.HttpMessageConverter
		count: 96056
```
So from that point of view, nothing really changed and **potentially** there could be still a scaling problem caused by https://bugs.openjdk.org/browse/JDK-8180450. But given that a simple boolean check is faster than an `instanceof` and that less activity is happening on the internal cache **potentially**, I'm not surprised to see some improvements here."
3160,1304813582,sdeleuze,141109,"Notice we need to find a way to fix the broken test `RequestResponseBodyMethodProcessorTests#resolveArgumentTypeVariableWithNonGenericConverter` :
```
class jdk.proxy3.$Proxy29 cannot be cast to class org.springframework.http.converter.GenericHttpMessageConverter (jdk.proxy3.$Proxy29 is in module jdk.proxy3 of loader 'app'; org.springframework.http.converter.GenericHttpMessageConverter is in unnamed module of loader 'app')
java.lang.ClassCastException: class jdk.proxy3.$Proxy29 cannot be cast to class org.springframework.http.converter.GenericHttpMessageConverter (jdk.proxy3.$Proxy29 is in module jdk.proxy3 of loader 'app'; org.springframework.http.converter.GenericHttpMessageConverter is in unnamed module of loader 'app')
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver.readWithMessageConverters(AbstractMessageConverterMethodArgumentResolver.java:176)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.readWithMessageConverters(RequestResponseBodyMethodProcessor.java:163)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:136)
```
Calling `ProxyFactory#getProxy(java.lang.Class<T>, org.springframework.aop.TargetSource)` on an interface with a default method seems not working for this use case, not sure why yet."
3161,1304823610,sdeleuze,141109,Test fixed via [this change](https://github.com/spring-projects/spring-framework/pull/29438/commits/f43892693fbd17d459b693282a459a1363a793e8#diff-6f035c3adc1e6f86d471a8ea716fe861cfc7f02adc32e912609a5a65ff3f2eb1R281) which looks ok to me based on what was discussed in #29438.
3162,1304825401,sdeleuze,141109,"> Without confirming the improvements yet, the type pollution agent is still producing this output, because of the checkcast.

@dreis2211 Notice I initially tried a more elegant/effective fix that would use casting only in the constructor by adding a new `List<GenericHttpMessageConverter<?>> genericMessageConverters` field in addition to the existing `List<HttpMessageConverter<?>> messageConverters` one, but I stopped because the order of the converters matters so we can't iterate first on the `GenericHttpMessageConverter` and after on the non generic `HttpMessageConverter`.

Given the good figures of the changes of this PR, I think my proposal is in practice effective enough, if you see a reasonable way to avoid per request casting, feel free to share."
3163,1304846478,bclozel,103264,"@marcingrzejszczak Can we safely use `io.micrometer.observation.contextpropagation.ObservationThreadLocalAccessor` from ""micrometer-observation""? Your [comment in this class](https://github.com/spring-projects/spring-framework/blob/19cf5035343922111e7c03b60933bf178170f9d4/spring-web/src/main/java/org/springframework/web/filter/reactive/ServerHttpObservationFilter.java#L62-L65) seems to avoid a dependency on purpose.

Or is the key supposed to be maintained in ""[context-propagation](https://github.com/micrometer-metrics/context-propagation)""?"
3164,1304932727,M-Whitaker,32771451,Given the new addition of ResponseEntityExceptionHandler as a part of https://github.com/spring-projects/spring-framework/issues/27052 I would expect there this to work. As of the moment I can't get a subclass (annotated with ContollerAdvice) to handle exceptions like method not supported even though the code implies this should work. Maybe be missing a configuration item though...
3165,1304936284,sidhartha11,11034476,"I forgot to mention:  The error is that standard oracle message that is meaningless:
PLS-00306: wrong number or types of arguments in call to 'BLAHBLAH' 
ORA-06550:  line 1, column 7    (  which is totally sillly because it does not point to anything )"
3166,1305240501,bclozel,103264,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [StackOverflow](https://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-boot/blob/master/CONTRIBUTING.adoc#using-github-issues), we prefer to use GitHub issues only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug.

> PLS-00306: wrong number or types of arguments in call to 'BLAHBLAH'
> ORA-06550: line 1, column 7 ( which is totally sillly because it does not point to anything )

I suggest that you [take some time crafting an actual sample that reproduces the problem](https://stackoverflow.com/help/minimal-reproducible-example) before reaching out to StackOverflow. Many community members run this use case in production and numerous tests are being checked as well."
3167,1305373916,karolkrasnowski,12725930,@poutsma thanks a lot for fixing this!
3168,1305427095,harikrishnayadlapalli,64837600,@bclozel are you able to reproduce the issue?
3169,1305445008,marcingrzejszczak,3297437,Context Propagation is typically an optional dependency. If we make it a compile time dependency then we can use the `ObservationThreadLocalAccessor` safely. Otherwise we might reference a class that implements an interface that is not on the classpath
3170,1305452696,sdeleuze,141109,"Based on @poutsma feedback, I am testing various alternative implementations without impact on the public APIs."
3171,1305479012,izeye,1059363,"I'm not sure if I fully understand the current arrangement as the previous code comment was saying `micrometer-core`, and @marcingrzejszczak seems to be saying `context-propagation`, but actually the constant (`ObservationThreadLocalAccessor.KEY`) is in `micrometer-observation`: https://github.com/micrometer-metrics/micrometer/blob/main/micrometer-observation/src/main/java/io/micrometer/observation/contextpropagation/ObservationThreadLocalAccessor.java#L37"
3172,1305480745,marcingrzejszczak,3297437,I made a mistake with the code comment :facepalm: 
3173,1306026978,sdeleuze,141109,"After increasing significantly (10x) the number of runs of my benchmarks with both Techempower and `hey`, I am not able to reproduce a significant difference between `main` and the `isGeneric` property variant anymore, so I will just close this PR unmerged."
3174,1306873118,mdeinum,606761,"This has been declined earlier in other requests and PRs, like 

https://github.com/spring-projects/spring-framework/pull/1814 and https://github.com/spring-projects/spring-framework/pull/28476"
3175,1306994378,snicoll,490484,Thanks for the report but there's nothing we can do. MyBatis should upgrade to Spring Framework 6. This was reported previously and I've requested to create [an issue in MyBatis](https://github.com/spring-projects/spring-framework/issues/28198#issuecomment-1206144087) if one doesn't already exist. 
3176,1307211670,sbrannen,104798,"This has been merged into `main` in ba136dcf40123445aa959786cdc006112d35774a and revised (and partially reverted in 95f3337bb526e639f3362d5158a15a4c6ca36958).

For details on what needed to be reverted and why, please see the latter commit.

Thanks for the contribution"
3177,1307250860,bclozel,103264,"Declining this PR for the same reasons.
Thanks @mdeinum !"
3178,1307337784,bclozel,103264,@chenyhd Isn't `ISO-8859-1` still the default encoding in the Servlet spec? Wouldn't this change break lots of applications as a result?
3179,1307402781,sdeleuze,141109,@wilkinsona I decided to add hints for every field and method annotated with a Jackson annotation since `com.fasterxml.jackson.annotation.JacksonAnnotation` makes that easy.
3180,1307539422,sbrannen,104798,"This has been merged into `main` just in time for 6.0 RC4.

Thanks!"
3181,1307558220,sbrannen,104798,"This has been merged into `5.3.x` and `main`.

Thanks 👍 "
3182,1307630894,nitinsh99,1389212,I am seeing this exact same deadlock. Why are we `synchronizing` on a `ConcurrentHashMap (singletonObjects)` anyways?
3183,1307665593,sbrannen,104798,"This has been merged into `main` in debe78b7f9329b6864440eb3d2f18717a2c0b263 and slightly revised (along with other polishing) in 7d68d0625c499422afae9f9fba2b52af449d131b.

Thanks 👍 "
3184,1307702499,sbrannen,104798,"This has been merged into `main` in b2c8546013914d0a58a6f2d7b5aecb796fae3e90 and revised in f26a7dee977a0f109596cdc42f3aa8cb2fc1d846.

Thanks"
3185,1307771239,wilkinsona,914682,"Things have improved, but the problem isn't fully resolved. While the slightly simplified reproducer now passes, the other test in the sample still fails:

```
> Task :test FAILED

FactoryBeanProblemApplicationTests > contextLoads() FAILED
    org.springframework.beans.factory.UnsatisfiedDependencyException at AutowiredAnnotationBeanPostProcessor.java:744
        Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException at DefaultListableBeanFactory.java:1812

3 tests completed, 1 failed

FAILURE: Build failed with an exception.
```

As before, this test passes when AOT processing is not enabled."
3186,1307804899,wilkinsona,914682,"With the recent changes, `ResolvableType.isAssignableFrom(ResolvableType, Map<Type, Type>)` is now called with `this` being `org.springframework.boot.test.json.JacksonTester<com.example.demo.Request>` and `other` being `org.springframework.boot.test.json.JacksonTester<java.lang.Object>`. `false` is returned as the generics do not align as `com.example.demo.Request` is not assignable from `java.lang.Object`."
3187,1307809512,wilkinsona,914682,"This failure to match the generics can be reproduced by changing the type of the `@Autowired` field in `Consumer` to `JacksonTester<Request>`:

```java
static class Consumer {

	@Autowired
	JacksonTester<Request> tester;

}
```

This then fails as `com.example.demo.MinimalReproductionTests$Request` is not assignable from `java.lang.Object`."
3188,1308295267,chenyhd,18431131,"Hi @bclozel, good point. 

I was using version 5.0.4 and faced the same issue as #25328, fixed in 5.2.x


Other things spring web:
1. Use UTF-8 as the default encoding for 'text/plain'.and declarative, you will get 'text/plain;charset=UTF-8' 
```
org.springframework.http.converter.FormHttpMessageConverter#DEFAULT_CHARSET
org.springframework.http.converter.FormHttpMessageConverter#FormHttpMessageConverter
org.springframework.http.converter.FormHttpMessageConverter#applyDefaultCharset
```

2. Use UTF-8 as the default encoding for 'application/json', but not declarative,you will get 'application/json' 
```
org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
```

Should I continue? or close PR?"
3189,1308299351,chenyhd,18431131,`org.springframework.http.MediaType#APPLICATION_JSON_UTF8` marked as `@Deprecated` and explain major browser use `UTF-8` not servlet change to 'UTF-8' as default encoding
3190,1308328886,snicoll,490484,"@Artur- thanks for the report, I believe this could have been a duplicate of #29397 but you're already using the version with that fix. We'll have another look."
3191,1308334943,snicoll,490484,"I think this is good enough for now. When we revisit how the runtime infrastructure translates annotation-based hook points to a declarative API, we can certainly get back to this."
3192,1308335032,Artur-,260340,I believe I am using Spring 6.0.0-RC2 and the fix is marked for 6.0.0-RC3?
3193,1308337616,snicoll,490484,"Indeed, sorry. It might be a duplicate after all. Can you please try with either `3.0.0-SNAPSHOT` or by setting `spring-framework.version` to `6.0.0-RC3`?"
3194,1308342311,mdeinum,606761,"This is a breaking change as when a comma is detected it will now keep it as is with 1 comma and still parse it when there are more then 1. 
"
3195,1308344404,Artur-,260340,"Using `<spring-framework.version>6.0.0-RC3</spring-framework.version>` indeed seems to solve this problem, thanks. 
I do run into other errors about missing classes but those are probably my fault"
3196,1308362030,snicoll,490484,Thanks for checking and reporting back.
3197,1308410094,jhoeller,1263688,"Thanks, Andy. This is probably not related to the original `FactoryBean` problem anymore but rather to an AOT difference with our fallback matching for incomplete generics (we had similar reports elsewhere). Since this is the last known AOT problem for GA, I'm trying to sort this out for good today."
3198,1308421613,jhoeller,1263688,"Andy, with the injection point changed as above, if the AOT-determined target type is then also set to `FactoryBean<JacksonTester<Request>>`, your revised test passes fine. So this is literally about `JacksonTester<Object>` not being assignable to `JacksonTester<Request>` now - a different problem where our lenient fallback matching for generics only kicks in if no target type has been pre-determined.

I do wonder why we keep having such non-matching generics to begin with. In an ideal world, we would not need the lenient fallback match at all anymore. That said, I'm currently looking into how to let it kick in even for a pre-determined target type."
3199,1308485144,jhoeller,1263688,"I got an arrangement for this now where for pre-determined FactoryBean types, we only take the resolved Class in a fallback match, which is equivalent to how lazy type determination for FactoryBeans proceeds in a fallback scenario. I'll push this shortly."
3200,1308505440,ionel-sirbu-crunch,68114012,"The way I see it, at a very high level, the parameter resolution needs to be processed in 2 rather distinct initial stages:

1. extraction of raw query parameters from the query string - this is where we account for commas (`?q=what,where`) & repeated params (`?q=what&q=where`);
2. URL decoding of the extracted values.

That way commas, equal signs & ampersands encoded into the values (stage 2) are not mixed with the ones that are actually part of the URL syntax (stage 1).

Obviously, further processing will take place after these initial steps, e.g. data conversion.
How conversion is handled when multiple values are provided, but the method contract dictates a single value (e.g. a plain string), is probably up for debate. Off the top of my head, I'm thinking some flexibility between choosing the first value & ignoring the rest, and rejecting the request altogether by throwing some exception, depending on the requirements of the application. The level of flexibility could then vary from a global setting, e.g. via a Spring property, down to endpoint level, via some annotation."
3201,1308510973,itunic,23350236,hello ，Is there a solution to this problem?
3202,1308536594,jhoeller,1263688,@wilkinsona This should be addressed in the upcoming snapshot now. Please let me know whether it works for Boot...
3203,1308538358,chenyhd,18431131,"I checked out more information,  `org.springframework.http.MediaType#APPLICATION_JSON_UTF8`  marked as `@Deprecated` because of [RFC 8259 Charset Encoding](https://www.rfc-editor.org/rfc/rfc8259#page-9:~:text=Issues%0A%0A8.1.-,Character%20Encoding,-JSON%20text%20exchanged), But this only for `application/json`, I didn't found RFC for `text/plain` charset encoding.

Anyway
- `application/json` from RFC
- `text/plain` from Servlet

The current code is already compatible with both cases.
"
3204,1308621630,dmytro-zhelieznyi,48699067,"Hello, thank you for pointing out the error. I have made changed, so now ""comma"" will not be detected as separator for creating array. In this case if @RequestParam receive string like this ""?res=aaa,bbb,ccc"" it will be consumed as single string and assigned as 1st element of collection. For separating parameters we should separate it in the following way ""?res=aaa&res=bbb&res=ccc"". In this case spring will use org.springframework.core.convert.support.ArrayToCollectionConverter."
3205,1308653654,mdeinum,606761,"Which still is a breaking change especially with such a converter which is used in other places as well (like binding variables with `@Value`) which would fail now as well. 
"
3206,1308659236,be-hase,903482,"@wplong11 
Sorry for the late reply.
of course! always ready to discuss :)"
3207,1308672271,wilkinsona,914682,"We've just seen this problem again in https://github.com/spring-projects/spring-boot/issues/33070. Here's a slightly simpler recreation that uses an `ObjectProvider` rather than a `@Lazy` `Validator` to trigger the problem:

```java
package com.example.demo;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import jakarta.annotation.PostConstruct;

public class SingletonCreationDeadlockTests {
	
	@Test
	public void create() {
		new AnnotationConfigApplicationContext(Config.class).close();;
	}
	
	private static final class Registry {
		
		private final ObjectProvider<ConfigProperties> properties;
		
		Registry(ObjectProvider<ConfigProperties> properties) {
			this.properties = properties;
		}
		
		void register() {
			this.properties.getIfAvailable().getSetting();
		}
		
	}
	
	static class ConfigProperties {

		private int setting = 5;

		public int getSetting() {
			return this.setting;
		}

		public void setSetting(int setting) {
			this.setting = setting;
		}
		
	}
	
	@Configuration
	static class Config {
		
		@Bean
		public Registry registry(ObjectProvider<ConfigProperties> properties) {
			return new Registry(properties);
		}
		
		@Bean
		public Registrar registrar(Registry registry) {
			return new Registrar(registry);
		}
		
		@Bean
		public ConfigProperties properties() {
			return new ConfigProperties();
		}
		
	}
	
	static class Registrar {
		
		private final Registry registry;
		
		Registrar(Registry registry) {
			this.registry = registry;
		}
		
		@PostConstruct
		void register() {
			Thread thread = new Thread(() -> {
				registry.register();
			});
			thread.start();
			try {
				thread.join();
			} catch (InterruptedException ex) {
				Thread.currentThread().interrupt();
			}
		}
		
	}

}
```"
3208,1308682407,jhoeller,1263688,"The problem here is the starting of a new thread in `@PostConstruct` which is conceptually a variant of `InitializingBean.afterPropertiesSet`, only really meant to validate configuration state before publishing the bean instance to the container (which is why it has happening within the singleton creation lock). It's a bit like the end of a constructor implementation.

Doing extensive work that might trigger new threads - and even wait for them to return - is rather meant to happen in a `SmartInitializingSingleton.afterSingletonsInstantiated` callback (or in an `ApplicationListener<ContextRefreshedEvent>` or the like). For a simple guideline: Whatever you would not do in a constructor, you should not do in a `@PostConstruct` method either.

Revisiting the singleton creation lock is a tough challenge due to singleton beans typically being part of a larger bean dependency graph. With a relaxed per-bean lock, circular references might run into a deadlock when triggered from different threads. There is no simple works-for-everything solution here, I'm afraid."
3209,1308697758,wilkinsona,914682,"Thanks, Juergen. The new thread started in `@PostConstruct` was just a synthetic way of recreating the deadlock. In the latest situation where we've seen the problem there's no user code starting or joining a thread.

The two threads that are involved are the main thread and the JVM's ""Notification Thread"". Due to Micrometer listening for GC notifications, the notification thread is making a call to a `SingletonSupplier` that's calling `ObjectProvider.getObject()` to supply the singleton. This results in it waiting to take the singleton creation lock. At the same time, the main thread is holding the singleton creation lock and then ends up trying to call the same `SingletonSupplier` which is locked by the notification thread."
3210,1308700689,jhoeller,1263688,"Thanks for the clarification, Andy - that clarifies a lot.

Could Micrometer possibly only start listening to GC notifications once it is fully initialized, including the beans that it depends on? It seems brittle to let GC notifications trigger any kind of bean initialization to begin with..."
3211,1308703370,bclozel,103264,"Looking at the current situation with form data, plain text and JSON, I think we're in the right place. The Jakarta Servlet spec version 6.0 stills states the following:

> If the servlet does not specify a character encoding before the getWriter method of the ServletResponse interface is called or the response is committed, the default ISO-8859-1 is used.

I'm declining this PR as a result. Thanks for looking into it!"
3212,1308706188,sbrannen,104798,"Hi @dmytro-zhelieznyi,

Thanks for submitting your first PR to the Spring Framework.

Unfortunately, as pointed out by @mdeinum, this constitutes a breaking change to the contract of `StringToCollectionConverter`.

In light of that, I am closing this PR."
3213,1308709172,wilkinsona,914682,"It's tricky and quite complex. In some situations, listening to the GC notification won't cause any bean creation. It will cause bean creation if you're using Prometheus, have Exemplars enabled, and the lazily created `SpanContextSupplier` implementation hasn't already been created. The laziness is necessary as there's a dependency cycle otherwise:

```
/**
 * Since the MeterRegistry can depend on the {@link Tracer} (Exemplars) and the
 * {@link Tracer} can depend on the MeterRegistry (recording metrics), this
 * {@link SpanContextSupplier} breaks the cycle by lazily loading the {@link Tracer}.
 */
```

I take the general point though that in all likelihood we need to find a way to resolve this in Boot and/or Micrometer.

/cc @jonatan-ivanov"
3214,1308722495,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
3215,1308800924,sbrannen,104798,"It is possible to register hints for individual test classes via the `org.springframework.test.context.aot.TestRuntimeHintsRegistrar` SPI; however, that requires that a custom `TestRuntimeHintsRegistrar` be registered via `aot.factories`.

So I agree that support for registering hints _local_ to a particular test class (for example, via the aforementioned standard annotations) could be useful."
3216,1308819472,snicoll,490484,"Note that we had a similar report in Spring Boot and we've just pushed something that would contribute those hints, see https://github.com/spring-projects/spring-boot/pull/33080"
3217,1308835391,sbrannen,104798,"@snicoll, it looks to me like the PR in Boot will only register those constant fields for reflection, not the constructors for the actual `PropertyNamingStrategy` implementations.

Or am I missing something?"
3218,1308894320,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
3219,1309109743,iay,233976,"This is a breaking change for us. We use the Spring Mocks in our tests too, and therefore had to update to compile vs. Servlet 6.

However, we have classes which implement and proxy `HttpServletRequest`. Our proxy implementation, compiled against Servlet 6, needed to implement the following method as part of the Servlet 6 version of the interface:

```java
ServletConnection getServletConnection();
```

`ServletConnection` is itself introduced in Servlet 6, and does not exist in Servlet 5. This means that this proxy class _cannot be loaded in a Servlet 5 container_ and contrary to your intention we do _not_ have runtime compatibility with such containers as a result of this change.

Please reconsider."
3220,1309127414,jhoeller,1263688,"Unfortunately, we have no choice here. Compiling against Servlet 5, some parts of our framework arrangement and in particular the mocks would be incompatible with Servlet 6 (due to having to refer to the now-removed `HttpSessionContext`), and we absolutely have to launch Boot 3.0 with Servlet 6 due to Tomcat 10.1 now (since the Servlet 5 based Tomcat 10.0 has been declared EOL already), and make mock usage possible with Servlet 6 on the classpath as a part of that offering.

On a forward-looking note, it is more important to be compatible with Servlet 6+ than to make Servlet 5 usage convenient. In all likelihood, Servlet 5 will be very short-lived in the Spring ecosystem, only really relevant for Jetty 11 purposes until Jetty 12 goes GA some time next year. If it wasn't for Jetty, we might have been able to launch with a Servlet 6 baseline right away.

Note that the framework itself is compatible with Servlet 5 containers at production level. It is literally just the mocks that bring in Servlet 6, and the mocks are not meant to be used in a Servlet container environment to begin with. For compilation purposes with a Servlet 5 compatibility impact, we recommend compiling your main sources against the Servlet 5.0 API jar and your mock-using test sources against the Servlet 6.0 API jar, side by side.

Last but not least, for custom purposes where our mocks leak through to production sources in some form, feel free to fork them for the time being, maybe even just fork `MockHttpServletRequest` if that is the key part. The mocks are not an essential part of our framework arrangement but rather just convenient test utilities that we happen to ship as well.

As a side thought, if you prefer building your main sources against Servlet 6 as well, you could possibly derive from `HttpServletRequestWrapper` for request proxy classes, avoiding a direct reference to the new `ServletConnection` type in your classes and therefore keeping them compatible with Servlet 5 at runtime.

P.S.: I clarified the issue description that our mocks mean to retain compatibility with Servlet 5 based code that is being tested, not with running against the Servlet 5.0 API themselves. The mocks are based on the Servlet 6.0 API now, requiring the latter on the test classpath. FWIW we had a similar situation before with Servlet 4.0 vs 3.1 where the mocks were 4.0 based as well."
3221,1309472213,iay,233976,"Thanks for the guidance. We're going to try to fork the relevant mock as suggested and see if that gets us back to the status quo for now.

If that doesn't work out, we may have to wait for Jetty 12 (Jetty's our preferred container, for various reasons) and skip Servlet 5. Again, knowing that you think Servlet 5 is not going to have a position longer term is useful information. There's something to be said for getting all the transitions out of the way at once rather than one  by one."
3222,1309836913,zjunothing,10829314,Just pass value into the other thread，not  pass in the whole request ...
3223,1310019452,M-Whitaker,32771451,"Hi, this is still happening with a 404 as it comes back with the original response:

```
{
    ""timestamp"": ""2022-11-10T09:40:11.551+00:00"",
    ""path"": ""/"",
    ""status"": 404,
    ""error"": ""Not Found"",
    ""message"": null,
    ""requestId"": ""3da6254c-1""
}
```
I would have thought this would have been fixed with 307247b is the intended behaviour?"
3224,1310039582,snicoll,490484,"That version of IJ is quite old and Java 17 is required to build the `main` branch. Unfortunately, we can't justify spending time helping you with Gradle. Please ask on StackOverflow or on the Gradle support forum."
3225,1310126517,jhoeller,1263688,"That commit has not changed any of the characters materially, just using char instead of String values for them. I'm wondering why that could have caused an actual difference in the output...

As for the SSE spec, I'm reading it as alternatives: either CR LF or just CR or just LF. Could you please double-check what kind of effect you are seeing there, and whether it actually is a regression from earlier Spring Framework versions?"
3226,1310182559,alexm76x,109352939,"I'm terribly sorry, this is false alarm. The problem turned out to be with my JS client code."
3227,1310196099,rstoyanchev,401908,"Odd, we [have a test](https://github.com/spring-projects/spring-framework/blob/2878ade980ca72badb17428f433c2f3cdddc728d/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingExceptionHandlingIntegrationTests.java#L117) for that."
3228,1310408075,jhoeller,1263688,Just realized that the original commit got backported to 5.3.x as well. Will fix it there with a cherry-pick.
3229,1310514511,rishiraj88,13426986,"Apt feature request, @totakura ."
3230,1310589173,sbrannen,104798,"Hi @MisterRnobe,

Thanks for bringing this to our attention, and congratulations on creating your first issue for the Spring Framework.

> In fact, the actual expression is different since it multiplies 0 to 10 first and then applies ternary operator

The following test demonstrates that the expression is evaluated successfully, but the assertion for `toStringAST()` indeed fails as you pointed out.

```java
@Test
void ternaryExpressionEnclosedInParentheses() {
    SpelExpressionParser parser = new SpelExpressionParser();
    SpelExpression expression =
        (SpelExpression) parser.parseExpression(""((4 % 2 == 0) ? 2 : 1) * 10"");

    assertThat(expression.getValue()).isEqualTo(20);
    assertThat(expression.getAST().toStringAST()).isEqualTo(""(((4 % 2) == 0) ? 2 : 1) * 10"");
}
```

So the issue seems to only be the output of `toStringAST()`.

We will look into it."
3231,1310718033,bclozel,103264,"Thanks for creating this issue. I'll try to summarize the current state of things here.

MVC and WebFlux have a different instrumentation and that's intended.

With Spring MVC, we're indeed [opening an `Observation.Scope`](https://github.com/micrometer-metrics/micrometer/blob/8a7c662cae0508339b11d333888bcc2fa320adf1/micrometer-observation/src/main/java/io/micrometer/observation/Observation.java#L432-L437) so that the current context is put in the `ThreadLocal`.
With Spring WebFlux (and as of #29388) we're not opening a scope, because populating the `ThreadLocal` doesn't make sense. Instead, we're setting the current observation in the reactor context so that it can be [picked up as a parent observation](https://github.com/micrometer-metrics/micrometer/blob/8a7c662cae0508339b11d333888bcc2fa320adf1/micrometer-observation/src/main/java/io/micrometer/observation/Observation.java#L295-L305) later for tracing.

Micrometer documents [the various instrumentation strategies for reactive libraries](https://micrometer.io/docs/observation#instrumentation_of_reactive_libraries). If I'm not mistaken, using the `.tap()`or `handle()` operators will set things up for you, or you can get the reactor context and set up thread locals yourself, [as demonstrated in this micrometer sample](https://github.com/micrometer-metrics/micrometer-samples/blob/bb777d40daacd0dc108e20731ce4dc4f72d47a2f/webflux/src/main/java/com/example/micrometer/WebFluxApplication.java).

I think you're conflating observation scopes and traces.
The Observation API provides an abstraction, and `ObservationHandler` implementations can react to observations and create metrics, traces as a result. If you're not convinced, you can [check out the tracing handler implementation in micrometer](https://github.com/micrometer-metrics/tracing/tree/main/micrometer-tracing/src/main/java/io/micrometer/tracing/handler). An `Observation.Scope` is merely a way to wrap calls and make the tracing context available to that snippet. The Javadoc for `openScope()` and `parentObservation()` should heopfully clear that up.

We will not open a scope in the reactive Observation filter as it won't solve this problem. Your sample is using a simple, synchronous variant of a Controller handler, but using the same setup and logging from the pipeline (within a `deferContextual` for example) will not yield the expected result.
The critical difference here is that executing a Controller handler method in WebFlux can be asynchronous - it sets up the reactive pipeline but nothing gets executed until the subscription happens. In the case of a reactive web application, this subscription happens on any or even multiple server worker threads.

I'm closing this issue as a result, pinging @marcingrzejszczak so that he can correct me if I said something wrong!
Thanks!"
3232,1310813711,marcingrzejszczak,3297437,I can add one more thing that  setting scope in reactive (so putting in thread local) and closing out on finally can lead to the situation where observation is put in thread local for thread 1 but it's cleared for thread 2 (cause on finally would be called in thread 2). So we would be polluting thread number 1. 
3233,1311228851,guysmart694,76242473,please let me know if you need any other input 
3234,1311325171,Brize-hash,57348969,"> 
IDEA upgrade to 2021.2.3，this problem has solved.
"
3235,1311383922,grubeninspekteur,705835,"Just adding some thoughts for your consideration of modules in the long term: Smaller artifacts generated by jlink are not the only benefit (cf. Ron Pressler: [What modules are about](https://inside.java/2021/09/10/what-are-modules-about/)). One is having an encapsulation level above package. For example, classes like [Function](https://github.com/spring-projects/spring-framework/blob/main/spring-core/src/main/java/org/springframework/cglib/core/internal/Function.java) in the `org.springframework.cglib.core.internal` package can be properly hidden from user code and only exported to Spring's own modules. This also allows to evolve classes like `Assert` without having to deprecate methods first. People tend to import these types by accident, despite the ""internal"" warning. As a bonus, the number of code completion suggestions for such types in IDEs is reduced.

Directly following from the encapsulation feature is more secure code, since modules must explicitly open their types for reflection. Now of course Spring relies heavily on reflection, so you would have to open most of your beans/data types to it anyway; but you could restrict access only to those parts that need it; for example, open beans to spring.core, but not spring.validation, so a vulnerability in the validation module could not be exploited to gain access to a private EntityManager, for example. Native images somewhat mitigate reflection attacks with their requirement of explicitly stating the types to reflect on, but they do not discriminate between _who_ is doing the reflection.

However, since adding such strong encapsulation would be a breaking change, I do not expect it to arrive before the next major bump of Spring. And like you said, there are no stable automatic module names in all dependencies. Unfortunately, unlike generics, we seem to have arrived at a catch-22 situation with JPMS. No one bothers to use it until the big libraries and frameworks migrate (often taking the role of trailblazers, see AOT), and they won't migrate since there is little demand."
3236,1311548895,mdeinum,606761,"That is to be expected as it is what the async request handling in the Servlet API does and that is what is being used under the covers. 
"
3237,1311600343,xenoterracide,5517,"My personal reason for wanting this is to avoid accidental imports as well. Unfortunately tools like Gradle and maven only go so far to prevent you from importing a jar that you didn't intentionally intend to import from. Basically trying to avoid transient hell. I've seen people not only import from internal packages but also from utility packages of libraries that we'd rather not be using directly in that way, for example."
3238,1311658697,0x006EA1E5,210691,"> I think you're conflating observation scopes and traces.

Well, this is probably true; I am just trying to learn this stuff now, so apologies if I have misunderstood. :)

I think I follow you now, and see the issue.

I have had another look at this.  It seems that it can be made to work using a Reactor `Hook`, to call `ContextSnapshot.setThreadLocalsFrom` around a `Subscriber`'s `onNext()`: 
https://github.com/0x006EA1E5/spring-boot-3-reactive-trace-logging/blob/use-reative-hook/src/main/java/me/geales/spring/trace/logging/ObservationContextSnapshotLifter.java#L54

This seems to work well across multiple execution threads.

Would something like the above be problematic, perhaps from a performance point of view?

The thing with all this is, the initial problem statement remains: users will expect the `Observation` stuff to ""just work"".  As it does in MVC, people will want it to work in a WebFlux app, e.g., if something writes a log deep inside the work of processing a request, it should have the trace info available.

It seems to me that expecting users to known about `ContextSnapshot.setThreadLocalsFrom`, and paste that boilerplate all over their code, is an unfortunate barrier to adopting ""observability"" in the Spring WebFlux eco-system 😿 

So getting as much of this to work ""out of the box"" seems like a reasonable thing to expect, at least in Spring Boot.
"
3239,1311790430,sbrannen,104798,"It turns our that Elvis expressions are also missing enclosing parentheses in the generated AST string representation, so I'll address that as well."
3240,1311920645,GeorgeSalu,9308386,is it worth testing with jetty ?
3241,1312400608,bclozel,103264,Our Servlet mocks require Servlet 6.0 now. See https://github.com/spring-projects/spring-framework/wiki/What%27s-New-in-Spring-Framework-6.x#testing and #29435
3242,1312406001,hantsy,854520,"OK, upgraded to Jakarta EE 10 APIs, it is simply resolved. "
3243,1312461334,bclozel,103264,"> I have had another look at this. It seems that it can be made to work using a Reactor Hook, to call ContextSnapshot.setThreadLocalsFrom around a Subscriber's onNext():
> https://github.com/0x006EA1E5/spring-boot-3-reactive-trace-logging/blob/use-reative-hook/src/main/java/me/geales/spring/trace/logging/ObservationContextSnapshotLifter.java#L54
> 
> This seems to work well across multiple execution threads.
> 
> Would something like the above be problematic, perhaps from a performance point of view?

[The MDC topic is extensively documented in Reactor](https://projectreactor.io/docs/core/release/reference/#faq.mdc) and [your performance concerns have been experienced by others](https://github.com/reactor/reactor-core/issues/1985#issuecomment-824593594). 

> The thing with all this is, the initial problem statement remains: users will expect the Observation stuff to ""just work"". As it does in MVC, people will want it to work in a WebFlux app, e.g., if something writes a log deep inside the work of processing a request, it should have the trace info available.

Taking a step back, this is not really about observability but the fact that MDC is based on `ThreadLocal`. We could discuss here the runtime behavior and programming style of reactive and how `ThreadLocal` could be replaced in such an environment, but that's partially [the goal of the entire context-propagation project](https://github.com/micrometer-metrics/context-propagation/). Spring Framework here merely applies the guidance provided by context-propagation, micrometer-observation and reactor-core.

> It seems to me that expecting users to known about ContextSnapshot.setThreadLocalsFrom, and paste that boilerplate all over their code, is an unfortunate barrier to adopting ""observability"" in the Spring WebFlux eco-system 😿
> 
> So getting as much of this to work ""out of the box"" seems like a reasonable thing to expect, at least in Spring Boot.

You can follow the reasoning and multiple solutions considered in reactor/reactor-core#3149.

I understand the appeal of that feature, but I think that making the MDC available everywhere in reactive code is a non-goal in general. This is likely to make the runtime cost higher than just using a Servlet-based approach. Issues related to `ThreadLocal` usage are not limited to reactive, but also a well-known design problem for Loom."
3244,1312655002,pivotal-cla,16822967,"@Encyclopedias Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29474)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29474) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
3245,1312655467,pivotal-cla,16822967,@Encyclopedias Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29474)!
3246,1312699523,dreis2211,6304496,"@GeorgeSalu Generally, I wouldn't worry too much about Jetty or Undertow. Tomcat is usually the one that falls behind a bit.

But I've compared it just for you - with latest snapshots, bullseye and enforced content-type (throughout all benchmark modes and thus having a better weighted score overall):

**Undertow**
<img width=""1179"" alt=""image"" src=""https://user-images.githubusercontent.com/6304496/201517277-9733a641-8b26-48d8-a857-e8321ceba0cc.png"">

**Jetty**
<img width=""1179"" alt=""image"" src=""https://user-images.githubusercontent.com/6304496/201517290-15282faf-9321-400e-b8f8-2103466dd18f.png"">

From personal experience, the margin between them is not as huge as one might read from this results. I'm in fact a little bit surprised about the numbers generally. I have done some memory improvements that don't explain these results, though. I need to take a deeper look what changed in the snapshots in the meanwhile. What has changed is that my Macbook runs on Ventura now. Maybe there have been major improvements to the host OS that generally boost the numbers. Don't forget there is a bit of flakyness involved doing these on a local setup.

Anyhow: Back to your question. Undertow usually wins, also in internal loadtests that we do. There is also a dated benchmark comparison over at https://www.baeldung.com/spring-boot-servlet-containers that hasn't drastically changed in my opinion over recent years.

Cheers,
Christoph"
3247,1312713133,dreis2211,6304496,"I've run a new round of benchmarks to have comparable results between Spring-Boot 3.0.0 RC1 and RC2

**RC1**
<img width=""1179"" alt=""image"" src=""https://user-images.githubusercontent.com/6304496/201520505-f776d72b-8c57-4244-bf33-6bffceb45856.png"">

**RC2**
<img width=""1179"" alt=""image"" src=""https://user-images.githubusercontent.com/6304496/201520518-8efbad8e-d769-4e81-8883-c34cbf743a59.png"">

There is an upgrade from Undertow 2.2.x to 2.3.x - I wouldn't be surprised if this brings some improvements. Next to several tiny improvements in Spring itself. "
3248,1312764795,sbrannen,104798,"I am closing this as a duplicate of #26409.

If you feel this is not a duplicate, please provide additional information here."
3249,1312819433,bclozel,103264,"Removing the `ServerWebExchange` and `PathPattern` dependency from the reactive instrumentation seems straightforward enough and aligns well with the Servlet variant. Moving the server instrumentation to different packages also brings a clearer structure.

We can consider the following changes. 

Servlet HTTP server instrumentation:
* lives in `org.springframework.http.server.observation`
* depends on `io.micrometer.*` and `org.springframework.http.*` and `jakarta.servlet.http.*` types
* is used by the `ServerHttpObservationFilter` in `org.springframework.web.filter`

Reactive HTTP server instrumentation:
* lives in `org.springframework.http.server.reactive.observation`
* depends on `io.micrometer.*` and `org.springframework.http.*` and `org.springframework.http.server.reactive.*` types
* is used by the `ServerHttpObservationFilter` in `org.springframework.web.filter.reactive`

We could also keep all server instrumentation under `org.springframework.http.server.observation` but this would mean maintaining an `observation.reactive` sub-package. While this has been a common pattern so far, we don't need to nest reactive variants under a parent package, especially for new features and deeply nested packages. In this case, `observation` and `observation.reactive` share no common types and only depend on the corresponding HTTP API.

On the client side, we'll leave things as is, since the current situation looks right:

HTTP client instrumentation:
* lives in `org.springframework.http.client.observation`
* depends on `io.micrometer.*` and `org.springframework.http.client.*` types
* is used by `org.springframework.web.client.RestTemplate`

Reactive HTTP client instrumentation:
* lives in `org.springframework.web.reactive.function.client` because moving it to `org.springframework.web.reactive.function.client.observation` would create a cycle between both packages
* unlike other instrumentations, we cannot use `org.springframework.http.client.reactive.*` types for building the instrumentation. Instead of instrumenting the `WebClient` directly, we would need to move the instrumentation to wrap the `ClientHttpConnector`, but we would still be in `org.springframework.web.reactive.function.client.ExchangeFunctions`. Also, the instrumentation needs to mutate the client request before writing it out (for propagating headers) and this introduces additional complexity with `ClientHttpRequest`
* depends on `io.micrometer.*` and `org.springframework.web.reactive.function.client.*` types
* is used by `org.springframework.web.reactive.function.client.WebClient`"
3250,1312828048,nithril,583507,Would be nice indeed to get control and optimize test execution
3251,1312911204,quaff,143040,It confuse me too.
3252,1312979542,hannah23280,4410920,"> > In fact, I was also suggesting to be able to **exclude scan** for specific classess e.g `@EntityScan(excludeClasses = ""MyClass1"")`, so that all classes are scanned except for the listed ones.
> 
> I'm not convinced that selecting individual entity classes (instead of scanning the package) is worthwhile, but I can foresee it being useful to be able to exclude particular classes based on a filter. That's also what @wilkinsona suggested in [spring-projects/spring-boot#29193 (comment)](https://github.com/spring-projects/spring-boot/issues/29193#issuecomment-1005667589).
> 
> Note that `@ComponentScan` already supports `excludeFilters`.

Even though i support the idea of exclude on filter, but why not make it more complete by also giving the ability to include only specific ones.  To cater for a wide range of developers."
3253,1313247725,bclozel,103264,"The sample you've shown indeed begs the question - why not share the server annotations for the interface client generation? `@RequestMapping` method signatures can be very flexible and in many cases, they can depend on server types or worse, are not precise enough to generate an actual HTTP request.

Spring Cloud OpenFeign has tested this approach and is moving away from it on purpose. See spring-cloud/spring-cloud-openfeign#678. This also has been discussed in more details in this talk: https://youtu.be/5LNOnVJKW_4?t=1156"
3254,1313260900,ilgrosso,1064664,Thank you for explanation and further details @bclozel 
3255,1313278714,quaff,143040,"> 

Could spring provider built-in annotations that combine server and client annotations. like this
```java
@GetMapping
@GetExchange
public @interface Get {

	@AliasFor(annotation = {GetMapping.class, GetExchange.class})
	String[] value() default {};

}
```"
3256,1313393170,bclozel,103264,"@quaff unfortunately, this wouldn't solve the problems listed in the issues/talk I've pointed to."
3257,1313413216,sdeleuze,141109,"This is more complex than adding a `ContinuationArgumentResolver` since this involves the proxied invocation of a suspended function, I think it depends on #22462."
3258,1313466794,jhoeller,1263688,"I see your point, and there might be a way to fine-tune that rule towards accepting AutoCloseable property types on declaring classes that are AutoCloseable themselves.

That said, there are other ways to express such a dereference in configuration scenarios, e.g. using SpEL:
`<constructor-arg name=""sessionFactory"" value=""#{abcEntityManagerFactory.sessionFactory}""/>`

Or alternatively, using an intermediate bean definition:
```
<constructor-arg name=""sessionFactory"">
    <bean factory-bean=""abcEntityManagerFactory"" factory-method=""getSessionFactory""/>
</constructor-arg>
```

I would generally recommend either of the two over a JavaBeans property for such purposes."
3259,1313749391,snicoll,490484,I've added a section on runtime hints so closing for now.
3260,1314077213,sbrannen,104798,This has been addressed in 27f3feea1a2488df17c3b6fbcbbf416768e7a5b3 for inclusion in 5.3.24 and 6.0 GA.
3261,1314077793,sbrannen,104798,"This has been merged into `5.3.x` and `main`.

Thanks"
3262,1314095567,sbrannen,104798,- Superseded by #29132
3263,1314110261,sbrannen,104798,"## Related Issues

- #28811
- https://issues.apache.org/jira/browse/HTTPCLIENT-2227"
3264,1314276660,sbrannen,104798,"This has been merged into `5.3.x` and `main` in ee51dab1f348361f26c477ad64ab730ad7359d6e and revised in 698f8995f72239d11052e1319c6b2802a34ba3e8.

Thanks"
3265,1314354148,M-Whitaker,32771451,"Ah I see, that is not what is being displayed. Do you want a zip project file with the issue?"
3266,1314358146,rstoyanchev,401908,"Sure, or a github repo."
3267,1314465585,jhoeller,1263688,"This turns out to be rather involved due to the differences between URI and URL rules and the restricted behavior of the `java.net.URI#toURL()` method. As a first step, #29486 prepares the codebase for alternative URL construction arrangements in 6.0; a full replacement/reimplementation of URL construction rules from user-supplied Strings is likely to come in 6.1 then."
3268,1314552048,jhoeller,1263688,"With a combination of URI construction from a cleaned path and subsequent defensive URL conversion, all our tests pass. This is still rather involved but seems to be equivalent for our common purposes now.

Corresponding code is available in `UrlResource(String)`, `ResourceUtils.toURL(String)` and `ResourceUtils.toRelativeURL` in comment blocks now, for an easy switch in 6.1 (or whenever we find it appropriate)."
3269,1314617121,quaff,143040,"> @quaff unfortunately, this wouldn't solve the problems listed in the issues/talk I've pointed to.

I understand that, but it will satisfy some scenes that people doesn't face those issues."
3270,1314856291,snicoll,490484,"@Encyclopedias there are now three pull requests for the same thing. Please refrain from creating more as each sends a notification to a lot of watchers. If you need to update your PR, you can push additional commits on your existing branch.

Thanks for the PR but the code as it is now reads fine to me and removing the `else` does not add value IMO. "
3271,1315120094,rstoyanchev,401908,This is expected indeed. Kotlin Coroutines suspending functions are handled through Servlet asynchronous request processing.
3272,1315150818,dmytro-zhelieznyi,48699067,https://github.com/spring-projects/spring-framework/issues/29411
3273,1315187499,dkubicki,6486339,"Thanks, save us a few hours :) "
3274,1315408262,felipelo,950553,"Same issue with Spring Framework 5.3.22 and Spring Boot 2.7.0.

Hoping this issue from April can get some attention."
3275,1315418852,snicoll,490484,"@felipelo @alexandgit I don't understand how that could ever have worked. `ApplicationEnvironmentPreparedEvent`, as its name indicates, is triggered when the environment has been prepared. It is too late to add something to the environment and expects to be take into account. If it worked before, it might have been by accident. Can we take a step back and can you share what you're trying to do?"
3276,1329424127,snicoll,490484,What is the benefit of suppressing the deprecation automatically? I don't think we should be doing that for generated code. 
3277,1329424131,akefirad,2142363,"Well, the code is generated by the library, so there's no way for me to suppress it. That means we'd see the warning during compilation. I guess this would be an issue wherever the source code is used (e.g. code analysis tools maybe? if they look at the generated code as well)"
3278,1329424146,snicoll,490484,"Yes, I understand that. I don't think your code analysis tool should be looking at generated code. In the absence of an actual problem, I am going to close this. I understand that the warning can be annoying but blindly (automatically) suppressing it is worse IMO."
3279,1315678503,pivotal-cla,16822967,"@ophiuhus Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29493)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29493) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
3280,1315679446,pivotal-cla,16822967,@ophiuhus Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29493)!
3281,1315687744,rstoyanchev,401908,Thanks!
3282,1315966347,Encyclopedias,32696764,"@snicoll sorry, I will not do this
next time. In this PR, there is a merge commit, the commit is produce after i update the code from spring main branch to my fork spring main branch. Does it impact the next pr?"
3283,1316243508,pivotal-cla,16822967,"@koo-taejin Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29496)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29496) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
3284,1316255489,pivotal-cla,16822967,@koo-taejin Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29496)!
3285,1316401143,AntonLGVS,1646035,"Currently, this status is generating by the application server in implementation of the HttpServletResponse. For example, Tomcat uses SC_FOUND = 302 for a responce.
```java
package org.apache.catalina.connector;
//........
public class Response implements HttpServletResponse {
//........
@Override
    public void sendRedirect(String location) throws IOException {
        sendRedirect(location, SC_FOUND);
//........
```
Tomcat is still runnig legacy software that might not support status 303. I think Tomcat will switch to the new status (303) in future.
I think this issue is not related to Spring."
3286,1316432043,xiaoxiyao,12003562,"> Currently, this status is generating by the application server in implementation of the HttpServletResponse. For example, Tomcat uses SC_FOUND = 302 for a responce.
> 
> ```java
> package org.apache.catalina.connector;
> //........
> public class Response implements HttpServletResponse {
> //........
> @Override
>     public void sendRedirect(String location) throws IOException {
>         sendRedirect(location, SC_FOUND);
> //........
> ```
> 
> Tomcat is still runnig legacy software that might not support status 303. I think Tomcat will switch to the new status (303) in future. I think this issue is not related to Spring.

https://github.com/spring-projects/spring-framework/blob/09a58a55bf7882f24352c0bb2ecf742c14c22cc3/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java#L150

https://github.com/spring-projects/spring-framework/blob/09a58a55bf7882f24352c0bb2ecf742c14c22cc3/spring-web/src/main/java/org/springframework/web/filter/RelativeRedirectFilter.java#L47
"
3287,1316570533,snicoll,490484,Closed by https://github.com/spring-projects/spring-framework/commit/37b439182e4aacf48b33d9c1ad3201a2ef5a6f13
3288,1316722106,act-amirsky,92257392,"> Hi Aaron,
> 
> Discussions are still ongoing with MITRE. We'll share the result here as soon as we can. There won't be any 5.4.0 version - 6.0.0 is removing those already, a major version is the right call here for this type of change. Thanks!

Hi again Brian (@bclozel ) 

I understand the rational but implore you to reconsider some 5.4 or 5.3.24 version that can mitigate this. This is because - to my understanding - Spring 6 has some pretty major environment changes such as a Java 17 minimum and moving to Jakarta packages.

Some groups deliver their software to major organizations with their own pace of technology stack and are not ready (or yet willing) to move to Java 17 JDKs. You would be surprised how slow and bureaucratic these system can be in parallel to strict security policies.

Also moving to Jakarta is a major code upheaval. We (and I going on a limb to assume many other projects) do not yet know if beyond code/API changes between Spring 5/6 if all dependencies (and sub dependencies) in our project are yet with versions compliant with Jakarta.

EDIT:
I am going to add that previous discussions on a 5 version were rejected due to break backwards compatibility. I would argue that Spring has warned not to used (and deprecated?) for years now so a 5.4 can be fair game. Also the critical CVE hanging over 5 already makes it unusable and a forced upgrade to Spring 6 for security also (naturally) break backward compatibility (as it is a proper right of a major release). So I personally think a final 5.4 release with HTTPInvoker removed will do a lot more good they any potential harm. "
3289,1317007089,bclozel,103264,"Hello @act-amirsky 

I'm sorry but we won't be releasing a new 5.4 generation and 6.0 is already out. [Support timelines](https://spring.io/projects/spring-framework#support) have been published a long time ago.

I understand that it will take time for many companies to upgrade to Spring Framework 6.0, but in this case improving the security process is the thing we all need to focus on.

On the Spring side, we're now part of VMware's CNA and have been working with the VMware security response team to improve our processes. This means that now a Spring CVE cannot be created without us being involved (unlike this one). We've also improved in many other ways and I believe we've shown that with the Spring4Shell CVE.

In the enterprise world, I think that the sources of information and processes should be improved as well. In this case, MITRE did not publish or calculate a CVSS score for CVE-2016-1000027. So maybe reviewing where the high score comes from and challenging this source of information in your security processes is a key point here.

We got an initial response back in August from the MITRE team. In our message, we underlined the time and resources consumed on this CVE and how this should need fixing. They replied the following (excerpt):

> The CVE team does not feel that the existence of a CVE Record implies anything about whether it is worthwhile to expend time or resources to change the security behavior of a product.
> The information reported in the CVE-2016-1000027 description is likely to be relevant to some people, and the CVE description does not state that any default or recommended use case is inherently unsafe.

We understand that the mere existence of a CVE record can be a problem so we asked MITRE, back in August, to revisit the entry and mark it as resolved as of 5.3.0 where we officially deprecated the feature, sending an even stronger signal to developers. We didn't receive any response.

I can't think of any other way to improve the situation, despite our efforts."
3290,1317024031,0x006EA1E5,210691,"Thanks for the detailed reply.  

It is interesting that since https://github.com/reactor/reactor-core/pull/3180 it is now the default behaviour to transparently restore the ThreadLocals for the `handle` and `tap` operators, if the `context-propagation` library is available at runtime.

https://projectreactor.io/docs/core/release/reference/#_operators_that_transparently_restore_a_snapshot_handle_and_tap

One last question: is it worth considering, in the special case where the handler method returns a non-reactive type, to use the `handle` operator instead of `Mono.just(result)`?

Something like:
```        ReactiveAdapter adapter = this.reactiveAdapterRegistry.getAdapter(returnType.getParameterType());
        if (adapter == null) {
            return Mono.just(args)
                .handle((arguments, synchronousSink) -> synchronousSink.next(method.invoke(getBean(), arguments)))
                .map(value -> new HandlerResult(this, value, returnType, bindingContext));
        }
```

This then delegates all of the special handling to Reactor."
3291,1317024728,act-amirsky,92257392,"Awkward timing, 

I posted an edit above to try to strengthen my ""case"" so I guess you may have missed it. I would not expect a full technical fix but suggest even aggressive removal of HTTP Invoker code is much more good than harm with justifications I mention just above in my ""EDIT"".

Don't get us wrong. We greatly appreciate the power and utility the Spring project has provided the world.

Final question/attempt then I guess this subject will need to rest. :(
You provided a link on Support timelines and, unless I read it wrong, it states that OSS support (Free security updates and bugfixes with support from the Spring community.) for the 5.3.x branch lasts until 2024-12-31?"
3292,1317050334,bclozel,103264,"I've just read your edit. I totally understand your concerns. From our perspective, retroactively releasing an unplanned 5.4 has a huge cost (maintenance, OSS and commercial support), all for a CVE record that's mostly a misunderstanding.

> You provided a link on Support timelines and, unless I read it wrong, it states that OSS support (Free security updates and bugfixes with support from the Spring community.) for the 5.3.x branch lasts until 2024-12-31?

That is correct. Customers can also ask for additional backports until 2026-12-31; Spring artifacts are always published publicly on Maven Central."
3293,1317070782,sbrannen,104798,"Can you provide the full stack trace?

Also, have you tried this with Spring Framework 6.0.0 (GA)?"
3294,1317094348,eiswind,1238044,"I updated everything to spring boot 3-SNAPSHOT which pulls in 6.0.0. Still get the same error. Full stacktrace is
```
 Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1] with root cause

java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
        at de.eiswind.training.spring.rest.customer.responseentity.CustomerApiController$$SpringCGLIB$$1.setCallbacks(<generated>)
        at org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder$ControllerMethodInvocationInterceptor.initProxy(MvcUriComponentsBuilder.java:814)
        at org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.controller(MvcUriComponentsBuilder.java:383)
        at org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.on(MvcUriComponentsBuilder.java:358)
        at de.eiswind.training.spring.rest.customer.responseentity.CustomerApiController.insert(CustomerApiController.java:105)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
        at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:699)
        at de.eiswind.training.spring.rest.customer.responseentity.CustomerApiController$$SpringCGLIB$$0.insert(<generated>)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
        at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
        at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:891)
        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:804)
        at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1080)
        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:973)
        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1003)
        at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:906)
        at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:731)
        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:880)
        at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:814)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:223)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)
        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)
        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)
        at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)
        at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:108)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)
        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:119)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:400)
        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1739)
        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
        at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
        at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
        at java.base/java.lang.Thread.run(Thread.java:833)

2022-11-16T15:15:15.722+01:00 ERROR 58498 --- [           main] o.s.t.w.reactive.server.ExchangeResult   : Request details for assertion failure:

> POST http://localhost:43657/api/customer
> accept-encoding: [gzip]
> user-agent: [ReactorNetty/1.1.0]
> host: [localhost:43657]
> accept: [*/*]
> WebTestClient-Request-Id: [1]
> Content-Type: [application/json]
> Content-Length: [64]

{""customerNumber"":""C001"",""firstname"":""Test"",""lastname"":""Mensch""}

< 500 INTERNAL_SERVER_ERROR Internal Server Error
< Content-Type: [application/json]
< Transfer-Encoding: [chunked]
< Date: [Wed, 16 Nov 2022 14:15:15 GMT]
< Connection: [close]

{""timestamp"":""2022-11-16T14:15:15.695+00:00"",""status"":500,""error"":""Internal Server Error"",""path"":""/api/customer""}
```
"
3295,1317113894,harikrishnayadlapalli,64837600,@bclozel Any update on this issue.
3296,1317118039,eiswind,1238044,"Please give me a minute, I'll try to set up a reproducible example."
3297,1317164063,spring-projects-issues,16028288,"Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.
"
3298,1317195116,eiswind,1238044,"That was a ride. I found that the failing proxy starts to be generated as soon as I have starter-hateoas on the classpath.
removing it ends up with a different error, as the MvcUriComponentsBuilder then tries to generate a class at runtime. 

Please have a quick look at

https://github.com/eiswind/mvcuri-native

where both failures are reproducible.

I did not find a way to register a cglib proxy manually yet. Is there one?"
3299,1317243431,marcwrobel,2988912,And congratulation for the 6.0.0 release !
3300,1317266424,bclozel,103264,[Support dates are available on the website](https://spring.io/projects/spring-framework#support). We'll update the wiki shortly.
3301,1317269374,marcwrobel,2988912,"Thanks @bclozel, missed that page."
3302,1317277719,bclozel,103264,"I've updated the wiki page, including a link to the support page.
I've left the `(expected)` in place as the JDK range we're supporting could be extended still.

Thanks!"
3303,1317657594,bclozel,103264,"I think this has been explained very well by [this comment](https://github.com/eclipse/jetty.project/issues/8724#issuecomment-1292396626). We're operating with reactive `Publlisher` here and from a client perspective, we have zero guarantee that the request input can be ""replayed"". In your sample the body is a plain String, but the byte could come from a remote server response or any type of non-replayable stream.

To me, the easiest way to properly deal with this right now is to configure `httpClient.setFollowRedirects(false);`. This will prevent the client from following automatically redirects and you can be more explicit about it. I've tested this approach and it works.

Note that using the `exchange()` method can lead to a whole lot of other problems and this is why it's deprecated as shown in your IDE.

I'll keep that issue opened for the time being because the team should discuss a few things:
* How do other clients behave in this case? Do they also try and re-send the request body for HTTP 307 responses?
* Should we update the default Jetty client configuration to not follow redirects by default?
* Is there anything we can do to help with the ""replayable nature"" of requests or should we document this limitation?"
3304,1318192189,sanjerai,116335417,"@bclozel 

Adding details for your point 

> How do other clients behave in this case? Do they also try and re-send the request body for HTTP 307 responses?

We tested 307 redirection with **webclient+netty** and that seems to be working fine.
![image](https://user-images.githubusercontent.com/116335417/202379840-d926d6b1-56a7-4d70-9195-f94e70cb100b.png)
Output
![image](https://user-images.githubusercontent.com/116335417/202379948-a26eb0c7-a95a-4583-976e-3b5924afdce6.png)

Maybe this is a issue with the implementation of ClientConnector of Jetty. **JettyClientHttpConnector**
We do see code to convert Flux to Buffer.
![image](https://user-images.githubusercontent.com/116335417/202380653-cee9e1f5-b490-4a1c-a571-62f057b3aaf9.png)


"
3305,1318206060,snicoll,490484,"@dfjfj sorry, but I don't understand the problem you're trying to report. What do you mean by ""redundant remark""?"
3306,1318207476,snicoll,490484,"Thanks but that's the wrong issue tracker to report this to. The page you've referenced has a ""Go To Repo"" on the right hand side. This points to https://github.com/spring-guides/tut-spring-boot-oauth2 and that's where you should have reported it.

Can you please report the issue there? Thanks."
3307,1318210445,snicoll,490484,"@divcon I am afraid I am not keen to process this PR. It mixes style change (such as removing `final` keywords) with Java 17 API usage. `k` and `v` are not really variable names we'd use. In short, it'd take us more time to polish this than doing this ourselves. Thanks anyway."
3308,1318217285,dfjfj,43194876,"Sorry for the language trouble, please check the picture. 
incorrect:
![屏幕截图 2022-11-17 153638](https://user-images.githubusercontent.com/43194876/202386047-7843f0f4-2e96-4d1f-8d35-21589d684f1b.png)
correct:
![屏幕截图 2022-11-17 154229](https://user-images.githubusercontent.com/43194876/202386089-2052d871-6992-4c6b-85ef-ac7a562cd7ae.png)
"
3309,1318221915,snicoll,490484,@dfjfj I see it now. Thanks very much.
3310,1318224701,dfjfj,43194876,"You're welcome, a little effort."
3311,1318260085,snicoll,490484,That looks like a bug in the asciidoc rendering as the callout isn't in the source. I've noticed that switching to the Kotlin sample makes it go away.
3312,1318318901,divcon,7947445,"@snicoll Thanks for your comment.
"
3313,1318354494,0x006EA1E5,210691,"Sorry, the above suggestion is for `org.springframework.web.reactive.result.method.InvocableHandlerMethod#invoke`"
3314,1318355958,snicoll,490484,"Thanks for the report. I don't really understand why you think this is related to auto-configuration. Looking at the call stack, there's nothing Spring Boot specific so I expect a regular `@Configuration` to have the same problem. Moving to framework."
3315,1318412382,akefirad,2142363,"You're right, apologies."
3316,1318431335,snicoll,490484,"@koo-taejin for the record, there's no need to open both an issue and a PR as one supersedes the other.

Closing in favor of PR #29496 "
3317,1318510800,alexandgit,103741062,"If ""It is too late to add something to the environment and expects to be take into account."" then when it is not too late ?
Not sure about your ""too late"" becase it's a try to customize the Environment before the application context is created.

According to https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.spring-application.application-events-and-listeners, `ApplicationStartingEvent `is only before `ApplicationEnvironmentPreparedEvent`, but imho it's not applicable for setting environment.

BTW 
According to https://docs.spring.io/spring-boot/docs/current/reference/html/howto.html#howto.application.customize-the-environment-or-application-context ""_1.3. Customize the Environment or ApplicationContext Before It Starts_"" that is state ""_It is also possible to customize the Environment before the application context is refreshed by using EnvironmentPostProcessor_"", the example of using ""`MyEnvironmentPostProcessor implements EnvironmentPostProcessor`"" also does not work for above case.
Simply change using MyListener to MyEnvironmentPostProcessor and debug it (AbstractEnvironment is in accent)."
3318,1318663464,koo-taejin,10057874,@snicoll Thank you for letting me know. :) 
3319,1318698037,snicoll,490484,"Thanks @IIShabalin. 

@leoshusar type erasure is indeed the problem here."
3320,1318829679,sbrannen,104798,"I have pushed a workaround for this bug in ac7d428a627e6dabbde500266eaeed4670e37bfb.

However, as mentioned in the commit message this appears to be a general bug that still needs to be addressed. As @snicoll pointed out elsewhere, this is likely an issue with the Javascript that supports this feature.

To address this, I have opened https://github.com/spring-io/spring-asciidoctor-backends/issues/68.

In light of that, I am closing this issue."
3321,1318913138,bclozel,103264,"Duplicates spring-projects/spring-boot#33243.
Please don't create duplicate issues across projects."
3322,1318913887,andrealuciano71,18540770,Sorry I'm new to Spring.
3323,1319479453,dikaewiwurae7,110891531,today is 2022.11.18
3324,1319535926,ttddyy,459116,"@Andrew-Russell-fingo Spring Framework 6 requires Java 17+ as a baseline. So, it doesn't work with Java8.

> As a major revision of the core framework, Spring Framework 6.0 comes with a Java 17+ baseline and a move to Jakarta EE 9+ (in the jakarta namespace), with a focus on the recently released Jakarta EE 10 APIs such as Servlet 6.0 and JPA 3.1.

From https://spring.io/blog/2022/11/16/spring-framework-6-0-goes-ga


Though, looking at the 6.0.0 documentation, it could be read it works with Java8+.

> As of Spring Framework 5.1, Spring requires JDK 8+ (Java SE 8+) and provides out-of-the-box support for JDK 11 LTS. Java SE 8 update 60 is suggested as the minimum patch release for Java 8, but it is generally recommended to use a recent patch release.

https://docs.spring.io/spring-framework/docs/current/reference/html/overview.html#overview

I believe this documentation needs an update."
3325,1319641505,pivotal-cla,16822967,"@qiangmao Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29515)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29515) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
3326,1319651385,HimanshuGuptaDavita,114953531,I am trying to achieve transactional with async but no luck.
3327,1319748324,william-aqn,327121,"Here's another example:
Pagination of entities. (the key will be entityId+currentPage)
We need to reset everything with entityId but without currentPage.

How?
Need add this construction https://github.com/spring-projects/spring-framework/issues/15586#issuecomment-453405906"
3328,1319772900,snicoll,490484,Fixed by https://github.com/spring-projects/spring-framework/commit/a18842b72b779664bc9ae40714a86a08449958d9
3329,1319932918,sbrannen,104798,"This is to be expected due to the switch to using `SQLExceptionSubclassTranslator` by default.

See:

- commit 083113d8a4ce1220ee4ee7e21395830e34ea8450
- #28216 

If you absolutely need to differentiate between `DataIntegrityViolationException` and `DuplicateKeyException` (which is a subclass of `DataIntegrityViolationException`), you can configure your `JdbcTemplate` to use `SQLErrorCodeSQLExceptionTranslator` instead.

For example:

```java
DataSource dataSource = ...
JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);
jdbcTemplate.setExceptionTranslator(new SQLErrorCodeSQLExceptionTranslator(dataSource));
jdbcTemplate.afterPropertiesSet();
```

----

In light of the above, I am closing this issue as ""works as designed""; however, I have also created #29518 to update the [Upgrading to Spring Framework 6.x](https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-6.x) wiki page."
3330,1319971112,albertus82,8672431,"Hi @sbrannen,

I cannot set anything on `JdbcTemplate` because my class is part of a library that depends on the `JdbcOperations` provided by the client. However this new behaviour seems to me a slight regression: I could catch `DataIntegrityViolationException` but how to differentiate a duplicate key violation from other substantially different violations without binding my library to a specific RDBMS?

Thanks a lot."
3331,1319973682,snicoll,490484,@goafabric thanks but that's not a Spring Boot concern. Moving to framework.
3332,1319995399,sbrannen,104798,"> I cannot set anything on `JdbcTemplate` because my class is part of a library that depends on the `JdbcOperations` provided by the client. 

Understood.

> However this new behaviour seems to me a slight regression: 

Technically speaking it is indeed a regression in the default behavior, but there are ways to get the old behavior back (the one I mentioned previously and one that I'll mention below).

> I could catch `DataIntegrityViolationException` but how to differentiate a duplicate key violation from other substantially different violations without binding my library to a specific RDBMS?

I believe you should be able to introduce an empty `sql-error-codes.xml` file in the root of the classpath to achieve the same result.

If neither of these options works for you, please post back here, and we will continue the discussion.
"
3333,1320000619,sbrannen,104798,- Potentially a duplicate of #28711
3334,1320036229,goafabric,5617159,"Thx for answering that fast .. insanely fast ...

https://github.com/spring-projects/spring-framework/issues/28711 is a little different 

It at least explains why i had to set
`hints.reflection().registerType(TestAspect.class, MemberCategory.INVOKE_DECLARED_METHODS)`.

But with this the invocation works .. for all use cases as long as it is a simple console application.

Combine it with web and it crashes. So I guess this is a little different."
3335,1320059786,albertus82,8672431,"Fixed adding the following ""empty"" `sql-error-codes.xml` file:

```xml
<?xml version=""1.0"" encoding=""UTF-8""?>
<!DOCTYPE beans PUBLIC ""-//SPRING//DTD BEAN 2.0//EN"" ""https://www.springframework.org/dtd/spring-beans-2.0.dtd"">
<beans />
```

Thank you again."
3336,1320065023,tianshuang,10725601,@rstoyanchev 
3337,1320068874,sbrannen,104798,"Thanks for the contribution!

This has been merged into `main` in e9555d482554c3f4c7b33fbf1f38591002a94857 and revised in cefd74555ada1285ecd8dc174f6dfc68115807f8.

Regarding double invocation of `hasInstantiationAwareBeanPostProcessors()`, I decided to leave that in place since the state of the bean factory can change during the act of resolving autowiring candidates. "
3338,1320541743,akefirad,2142363,"This `java.lang.reflect.Method#kotlinFunction` implementation is messing in other places as well (Let me know if I need to create another ticket). For example I've got a simple class:
```kotlin
data class Name(val value: String) {
    companion object {
        @JvmStatic
        @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
        fun from(value: String) = Name(value.trim())
    }
}
```
The class is used in some HTTP request body, thus has to be deserialized at some point and when it does, it fails with the following error:
```
kotlin.reflect.jvm.internal.KotlinReflectionInternalError: Could not compute caller for function: public final fun from(value: kotlin.String): com.example.demo.Name defined in com.example.demo.Name.Companion[DeserializedSimpleFunctionDescriptor@233e514a] (member = null)
        at kotlin.reflect.jvm.internal.KFunctionImpl$caller$2.invoke(KFunctionImpl.kt:88)
        at kotlin.reflect.jvm.internal.KFunctionImpl$caller$2.invoke(KFunctionImpl.kt:61)
        at kotlin.reflect.jvm.internal.ReflectProperties$LazyVal.invoke(ReflectProperties.java:63)
        at kotlin.reflect.jvm.internal.ReflectProperties$Val.getValue(ReflectProperties.java:32)
        at kotlin.reflect.jvm.internal.KFunctionImpl.getCaller(KFunctionImpl.kt:61)
        at kotlin.reflect.jvm.ReflectJvmMapping.getJavaMethod(ReflectJvmMapping.kt:63)
        at kotlin.reflect.jvm.ReflectJvmMapping.getKotlinFunction(ReflectJvmMapping.kt:129)
        at com.fasterxml.jackson.module.kotlin.KotlinAnnotationIntrospector.hasRequiredMarker(KotlinAnnotationIntrospector.kt:187)
        at com.fasterxml.jackson.module.kotlin.KotlinAnnotationIntrospector.access$hasRequiredMarker(KotlinAnnotationIntrospector.kt:26)
        at com.fasterxml.jackson.module.kotlin.KotlinAnnotationIntrospector$hasRequiredMarker$hasRequired$1.invoke(KotlinAnnotationIntrospector.kt:44)
        at com.fasterxml.jackson.module.kotlin.KotlinAnnotationIntrospector$hasRequiredMarker$hasRequired$1.invoke(KotlinAnnotationIntrospector.kt:36)
        at com.fasterxml.jackson.module.kotlin.ReflectionCache.javaMemberIsRequired(ReflectionCache.kt:88)
        at com.fasterxml.jackson.module.kotlin.KotlinAnnotationIntrospector.hasRequiredMarker(KotlinAnnotationIntrospector.kt:36)
        at com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair.hasRequiredMarker(AnnotationIntrospectorPair.java:319)
        at com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair.hasRequiredMarker(AnnotationIntrospectorPair.java:319)
        at com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair.hasRequiredMarker(AnnotationIntrospectorPair.java:320)
        at com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getMetadata(POJOPropertyBuilder.java:230)
        at com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._anyIndexed(POJOPropertiesCollector.java:1240)
        at com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._sortProperties(POJOPropertiesCollector.java:1142)
        at com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.collectAll(POJOPropertiesCollector.java:470)
        at com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.getPropertyMap(POJOPropertiesCollector.java:386)
        at com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.getProperties(POJOPropertiesCollector.java:233)
        at com.fasterxml.jackson.databind.introspect.BasicBeanDescription._properties(BasicBeanDescription.java:164)
        at com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findProperties(BasicBeanDescription.java:239)
        at com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findCreatorsFromProperties(BasicDeserializerFactory.java:328)
        at com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._constructDefaultValueInstantiator(BasicDeserializerFactory.java:272)
        at com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.findValueInstantiator(BasicDeserializerFactory.java:223)
        at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.buildBeanDeserializer(BeanDeserializerFactory.java:262)
        at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer(BeanDeserializerFactory.java:151)
        at com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer2(DeserializerCache.java:415)
        at com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer(DeserializerCache.java:350)
        at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(DeserializerCache.java:264)
        at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCacheValueDeserializer(DeserializerCache.java:244)
        at com.fasterxml.jackson.databind.deser.DeserializerCache.findValueDeserializer(DeserializerCache.java:142)
        at com.fasterxml.jackson.databind.DeserializationContext.findNonContextualValueDeserializer(DeserializationContext.java:638)
        at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.resolve(BeanDeserializerBase.java:539)
        at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(DeserializerCache.java:294)
        at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCacheValueDeserializer(DeserializerCache.java:244)
        at com.fasterxml.jackson.databind.deser.DeserializerCache.findValueDeserializer(DeserializerCache.java:142)
        at com.fasterxml.jackson.databind.DeserializationContext.findNonContextualValueDeserializer(DeserializationContext.java:638)
        at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.resolve(BeanDeserializerBase.java:539)
        at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(DeserializerCache.java:294)
        at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCacheValueDeserializer(DeserializerCache.java:244)
        at com.fasterxml.jackson.databind.deser.DeserializerCache.findValueDeserializer(DeserializerCache.java:142)
        at com.fasterxml.jackson.databind.DeserializationContext.findNonContextualValueDeserializer(DeserializationContext.java:638)
        at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.resolve(BeanDeserializerBase.java:539)
        at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(DeserializerCache.java:294)
        at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCacheValueDeserializer(DeserializerCache.java:244)
        at com.fasterxml.jackson.databind.deser.DeserializerCache.hasValueDeserializerFor(DeserializerCache.java:191)
        at com.fasterxml.jackson.databind.DeserializationContext.hasValueDeserializerFor(DeserializationContext.java:593)
        at com.fasterxml.jackson.databind.ObjectMapper.canDeserialize(ObjectMapper.java:3515)
        at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.canRead(AbstractJackson2HttpMessageConverter.java:265)
        at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver.readWithMessageConverters(AbstractMessageConverterMethodArgumentResolver.java:177)
        at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.readWithMessageConverters(RequestResponseBodyMethodProcessor.java:163)
        at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:136)
        at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
        at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:181)
        at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:148)
        at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:891)
        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:804)
        at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1080)
        ... 53 common frames omitted
```
Adding the following runtime hint resolve the issue (Most probably not all `MemboerCategory` values are needed.):
```java
h.registerType(Name.Companion.class, MemberCategory.values());
```
Please note that Spring AoT adds a hint for the `from` method like for class `Name` and not its companion:
```json
{
  ""name"": ""from"",
  ""parameterTypes"": [
    ""java.lang.String""
  ]
}
```
I'm not entirely sure what is the correct way to add the hint for a companion-object method of a Kotlin class. But what is clear is that current hints are not enough.
I'm discovering more cases that involves `Method#kotlinFunction` one way or another and all of them break the native image. The way it's working right now, it seems any non-trivial Kotlin application requires a lot of hint. Not sure if there's any workaround.
Let me know if you need a sample project or anything else."
3339,1320720512,Encyclopedias,32696764,"@sbrannen 
You think the bean factory can change during the act of resolving autowiring candidates. And i see the add the data to 
 instantiationAware list only in the getBeanPostProcessorCache() method. When the beanPostProcessorCache is null, the code can init the BeanPostProcessorCache. So the data will add to instantiationAware list. And the instantiationAware list is only changed in the getBeanPostProcessorCache() method.  When the method(hasInstantiationAwareBeanPostProcessors) is called twice, the beanPostProcessorCache must not null, because the cache has already initialized, it does not add the data to instantiationAware list. So the list does not change during the process.
 
 If there is any misunderstanding, correct me please. I hope to receive you reply. Thanks."
3340,1320890499,pivotal-cla,16822967,"@wplong11 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29527)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29527) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
3341,1320891340,pivotal-cla,16822967,@wplong11 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29527)!
3342,1320892174,sbrannen,104798,Fixed in cad6e8756d43f0710b02cf92a30c61f6fd3dbc61
3343,1320906087,hantsy,854520,"@sdeleuze I would like get the following cases working in a Spring/Kotlin Coroutines project.

1. Allow a `suspend` `main` fun for the application entry.
2. @EventListener on a `suspend` fun or a fun returns a Kotlin `Flow`.
3. Make cache annotation working on any suspend fun or Flow return type.
4. Make it work in Spring Security Kotlin DSL `http{}`(similar to `route`, there is `coRoute` for coroutines)
5. provides a coroutines versions of CommandLineRunner, ApplicationRunner, ReactiveAuditorAware, ReactiveEntityCallback, etc."
3344,1321166156,sdeleuze,141109,Superseded by #29531.
3345,1321205210,sbrannen,104798,"Hi @tehnodev,

Congratulations on raising your first issue for the Spring Framework! 👍 

This turns out to be the same underlying issue raised in #29505 which will later be automatically handled by the fix for https://github.com/spring-io/spring-asciidoctor-backends/issues/68.

However, I'll go ahead and address the issues in `core-beans.adoc` since I don't know when we'll be able to upgrade to [spring-asciidoctor-backends](https://github.com/spring-io/spring-asciidoctor-backends) 0.0.4."
3346,1321206849,sbrannen,104798,"This has been merged into `main`.

Thanks"
3347,1321208794,sbrannen,104798,"It sounds to me like this would need to be addressed in the Spring Data project.

@odrotbohm, @mp911de: can one of you transfer this?"
3348,1321211107,snicoll,490484,I think this should behave the same way on the JVM. the check should be on AOT not native. 
3349,1321216959,vgaborabs,26428985,"Hi @kidhack83 
As far as i know Spring AOP advices rely on proxies, which means they do not fire when the methods are being called from within the same instance. Try to adjust your code accordingly:
```java
@Component
public class ServiceA {
  ...
  @AsyncCacheable(name = ""getCurrencies"")
  public Mono<List<RateDto>> getCurrencies(String source, String target) {
    return currencyRatesApi.getCurrencyRates()
        .collectList();
  }
  ...
}

@Component
@RequiredArgsConstructor
public class ServiceB {
  private final ServiceA serviceA;
  ...
  private Mono<List<RateDto>> someMethod(String source, String target) {
     return serviceA.getCurrencies(source, target);
  }
  ...
}
```
I hope this helps."
3350,1321244515,Andrew-Russell-fingo,48190317,Thanks for resolving the documentation.
3351,1321574922,Evenprime,616090,"Will this issue also affect the new Spring Releases, e.g. Spring Boot 3.0.x and the then used Spring Framework 6.0.x ?"
3352,1321717299,sdeleuze,141109,Could be great for consistency indeed even if technically on JVM + AOT we have to the capability to use it. Let's validate the choice in today's Framework meeting.
3353,1321742924,sdeleuze,141109,I updated the PR accordingly.
3354,1321797236,jhoeller,1263688,"An interesting case in terms of automatic exclusion indeed.

We certainly don't want to support that parameter name discovery strategy in a native image (where the underlying class files are generally not available), and it's not recommended in any other scenario either... since you can always compile with `-parameters` instead, with no need to parse class files then. In such a recommended setup, `StandardReflectionParameterNameDiscoverer` will always be able to resolve the parameter names first, so `LocalVariableTableParameterNameDiscoverer` will never actually be reached.

From that perspective, for a setup following Java 8+ recommendations, `LocalVariableTableParameterNameDiscoverer` could even be removed completely. It's only really there for backwards compatibility with older setups that got migrated without `-parameters`. Baking that assumption into our AOT arrangement - namely that you need to compile with `-parameters` when you are optimizing for AOT, completely avoiding unnecessary class file parsing - seems sensible."
3355,1321962939,sdeleuze,141109,"As discussed, I updated the PR to throw a more useful error message, removed the `NativeDetector` usage and kept the location of the check because otherwise we are forced to update the if statement as well to achieve code removal at build time."
3356,1322278350,sbrannen,104798,"This has been merged into `main` in 99ae209c250683f48d14b76daaedcfea092d7d8a and revised in 50109dd86dd94fc4be39169b917e3e91b7335019 and 0c878d2d06dff2a2c1ef0fda61faca88f8b215ba.

Thanks"
3357,1322281645,sbrannen,104798,"This has been merged into `main`.

Thanks"
3358,1322344569,sbrannen,104798,Fixed in 1ee3777ac79be7fd0fdad953ea1ec2ec9cf2f168.
3359,1322345785,sbrannen,104798,Fixed in 72b44cebea31e9db6faffa5c3e62b8f0d560e19b.
3360,1322365515,jhoeller,1263688,"This is considered complete as of Spring Framework 6.0 RC1, as per the description above: support for Hibernate ORM 6.0/6.1 in a JPA setup, with `org.springframework.orm.hibernate5` remaining in place for native Hibernate based code for the time being. Support for Hibernate 5.x is limited to Hibernate ORM 5.6.x with JPA as well as the native Hibernate API."
3361,1322775326,pivotal-cla,16822967,"@andregasser Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29538)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29538) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
3362,1322777126,pivotal-cla,16822967,@andregasser Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29538)!
3363,1323137187,divcon,7947445,"@sbrannen 
Thank you for your review.
I reflected your review.
"
3364,1323240729,bclozel,103264,"`RestTemplate` does work with TLS, thanks to the underlying client libraries that it supports.
I'm closing this issue as a result.

Feel free to reopen it with a sample application (ideally, created on start.spring.io and shared as a repository on github) that reproduces the problem. Thanks!"
3365,1323270156,bclozel,103264,"This change has [broken the Spring Boot build](https://ci.spring.io/teams/spring-boot/pipelines/spring-boot-3.0.x/jobs/build/builds/1531). The error is currently hard to reproduce locally, but the stacktrace is:

```
java -jar spring-boot-smoke-test-ant.jar 
Exception in thread ""main"" java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:49)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:95)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:58)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:65)
Caused by: java.lang.NoClassDefFoundError: org/apache/logging/log4j/spi/Provider
	at java.base/java.lang.ClassLoader.defineClass1(Native Method)
	at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1012)
	at java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:150)
	at java.base/java.net.URLClassLoader.defineClass(URLClassLoader.java:524)
	at java.base/java.net.URLClassLoader$1.run(URLClassLoader.java:427)
	at java.base/java.net.URLClassLoader$1.run(URLClassLoader.java:421)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:712)
	at java.base/java.net.URLClassLoader.findClass(URLClassLoader.java:420)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:587)
	at org.springframework.boot.loader.LaunchedURLClassLoader.loadClass(LaunchedURLClassLoader.java:149)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:467)
	at org.apache.commons.logging.LogAdapter.isPresent(LogAdapter.java:100)
	at org.apache.commons.logging.LogAdapter.<clinit>(LogAdapter.java:43)
	at org.apache.commons.logging.LogFactory.getLog(LogFactory.java:67)
	at org.apache.commons.logging.LogFactory.getLog(LogFactory.java:59)
	at org.springframework.boot.SpringApplication.<clinit>(SpringApplication.java:183)
	at smoketest.ant.SampleAntApplication.main(Unknown Source)
	... 8 more
Caused by: java.lang.ClassNotFoundException: org.apache.logging.log4j.spi.Provider
	at java.base/java.net.URLClassLoader.findClass(URLClassLoader.java:445)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:587)
	at org.springframework.boot.loader.LaunchedURLClassLoader.loadClass(LaunchedURLClassLoader.java:149)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)
	... 27 more
```
"
3366,1323274149,wilkinsona,914682,I think it's `NoClassDefFoundError` that needs to be caught in addition to the [existing catch of `ClassNotFoundException`](https://github.com/spring-projects/spring-framework/blob/04366f4129b12eb923423e34ff78b269c46b5b94/spring-jcl/src/main/java/org/apache/commons/logging/LogAdapter.java#L103).
3367,1323310561,sdeleuze,141109,"I think this is now fixed, sorry for the regression, this one was pretty hard to anticipate. I think previously this potential bug was possible but hidden by the fact the classpath checks were done lazily in the static block. Thanks for catching this with Boot tests."
3368,1323573587,pivotal-cla,16822967,"@jiangying000 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29551)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29551) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
3369,1323574290,pivotal-cla,16822967,@jiangying000 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29551)!
3370,1323618007,sbrannen,104798,"This has been merged into `main`.

Thanks"
3371,1323638584,sbrannen,104798,"It's actually documented [here](https://docs.spring.io/spring-framework/docs/5.3.x/reference/html/core.html#beans-java-lifecycle-callbacks).

But that's also a ""tip"", and it's in a completely different section of that chapter.

So there's certainly room for improvement here."
3372,1323692345,sbrannen,104798,"This has been merged into `main` in c12d93c5d1696fc030b7b2fc0fb999b99795c59c and revised in a832c98cedc56690ad606b53f497814370792d12.

Thanks"
3373,1323763459,jhoeller,1263688,"I'm afraid we'll have to return to a `NativeDetector` check here since `AotDetector` is in the higher-level `aot` package whereas `DefaultParameterNameDiscoverer` is a very low-level `core` component. Since there is no significant difference to be expected in practice, I don't think the cycle-free narrower check matters. After all, `LocalVariableTableParameterNameDiscoverer` is effectively not applicable in a native image due to its class file parsing approach, so it arguably does make sense to exclude it on that basis and rely on `-parameters` usage by convention."
3374,1323822794,poutsma,330665,"I can only see two possibilities for `new NettyDataBuffer(slice, this.dataBufferFactory)` failing:

1. either of the two parameters are `null`, or
2. the JVM is out of memory

If we assume that `ByteBuf::retainedSlice` does not return null, we can rule out option 1, which leaves us with the possibility of an `OutOfMemoryError`. If the JVM has run out of heap memory, then releasing direct memory is not going to help much.

In short: I see your point, but I don't see any way for this issue to occur. But perhaps I am missing something?
"
3375,1323998104,sdeleuze,141109,"[An interesting related blog post by Meta](https://engineering.fb.com/2022/11/22/developer-tools/meta-java-nullsafe/).

An important improvement would be IMO to update the Spring Framework build to check null-safety at build-time, not just rely on IntelliJ IDEA warnings, and potentially to publish guidelines for Spring portfolio projects and Spring applications that want to do the same."
3376,1324059033,jhoeller,1263688,"Reopening this one after a team discussion: It is ultimately preferable to deprecate `LocalVariableTableParameterNameDiscoverer` completely, not using it by default in any setup anymore, since that class file parsing strategy has been long superseded by the Java 8 `-parameters` flag on `javac` already.

We have considered doing this before and meant to address the native image impact of it in 6.0 but somehow missed this last week. So let's fix this glitch now, in time for the Boot 3.0 GA release, with a note in the upgrade wiki page."
3377,1324216595,IIShabalin,37696723,"Hi there!
Can someone assing me on this issue?"
3378,1324572710,snicoll,490484,"Thanks for the detailed report and the sample. FTR this should have been reported against the core Spring Framework as the exception you've shared doesn't contain anything Spring Boot-specifc (I've transferred it).

Unfortunately, this is something that we don't support at the moment. The AOT engine works on bean definitions and they need to define the necessary metadata so that we can translate this to generated code. The exception you're getting is because the DSL you use relies on an instance supplier (lambda style). There's no way for us to analyse the lambda and figure out what to write.

I think we should fail with a different exception though. We know it will never work and yet we attempt to locate the metadata. I've created #29556. For this particular issue at hand, we'll need to give it some thoughts."
3379,1324581867,guw,191472,"@bclozel Apologies for the direct ping. Do you know if a **directory entry** in a **jar** is required?

We have a jar with this content:
- META-INF/MANIFEST.MF
- xsd/one.xsd
- xsd/two.xsd

Spring is not finding the XSD files because there is no `xsd/` directory entry inside the jar. The jar is produced by Bazel `rules_pkg`. Question is, whether such jars should work in principle or are considered invalid."
3380,1324590840,snicoll,490484,"Thanks for the sample. I am afraid there's nothing we can do as the actual type is not exposed for AOT inference. This sample works on the JVM with AOT. It also works in Native if you add the following to the application:

```
hints.reflection().registerMethod(
		ReflectionUtils.findMethod(ControllerManager.class, ""shutdown""),
		ExecutableMode.INVOKE);
```

It also works, as you found out yourself, if you expose the actual type (which is what you should be doing regardless of AOT). 

> It's still pretty dissatisfying when I have a builder that returns Controller, and not the subclass, and I have no way of knowing what subclass it is. Plus, it works on the JVM with no issues even with just the interface.

I can see how that can be problematic but it is the very nature of building a native image where things have to be known at build time. The `shutdown` method on `ControllerManager` simply doesn't exist because there's no way for us to know that type needs to be harvested.

The only thing I can see us doing is failing early if we detect a shutdown method on a type that isn't concrete. Flagging for team attention to see what the rest of the team thinks."
3381,1324621346,snicoll,490484,"I forgot to mention that a proper fix for this would be to generate code for the method invocation, something like:

```java
bd.onShutdown((instance) -> instance.shutdown());
```

@poutsma is considering exposing an API (#29553) that could help with this, I think."
3382,1324627955,snicoll,490484,@IIShabalin thanks for the offer but we haven't triaged this one yet.
3383,1324630858,snicoll,490484,@Evgen1000end this was set to `INFO` rather than `WARN` on purpose (see https://github.com/spring-projects/spring-framework/issues/21485). The idea is that the connection can reset itself so you shouldn't get such log unless you're opting-in for more info.
3384,1324665085,IIShabalin,37696723,"> @IIShabalin thanks for the offer but we haven't triaged this one yet.

Ok.
Then, maybe, you can suggest an issue I could start from?"
3385,1324702762,bclozel,103264,"I can't speak for the entire Java ecosystem but I can tell the following:

* the official zip spec doesn't make those folder entries mandatories or even mention them
* many tools add ""0 length"" file entries for folders ending with ""/""
* the JDK `jar` tool does exactly that
* when scanning for files in a location, `PathMatchingResourcePatternResolver` resolves a parent folder location and lists files in it
* I would expect any tool creating a JAR file to follow the behavior and format of the JDK `jar` tool."
3386,1324704955,jhoeller,1263688,"As a lenient measure for the transition period, we'll keep `LocalVariableTableParameterNameDiscoverer` active on the JVM but log a warning for each successful parameter name resolution. This will only be logged when parameter names actually need to be inspected, and only when `StandardReflectionParameterNameDiscoverer` did not return anything, suggesting that compilation with `-parameters` has been missed somewhere."
3387,1324708273,PedroAlvarado,1258134,"> Thanks for the detailed report and the sample. FTR this should have been reported against the core Spring Framework as the exception you've shared doesn't contain anything Spring Boot-specifc (I've transferred it).

Understood.

Is it fair to say that in order to generate a native image in 6.0.0 it is necessary to completely abandon `CoRouterFunctionDsl`? If so, allow me to suggest for us to find a place in the documentation for folks to be warned about this limitation. Many are interested in taking advantage of native images and this can be important information when choosing between programming models.

What would be an alternate way to supply instances without lambdas that would provide the necessary metadata? In my use-case the routes are created at startup depending on application configuration parameters(application.yml).

Thank you for looking into this issue."
3388,1324713239,guw,191472,"Thanks for confirming. I can see in the code now why it works that way.

`ClassLoader.getResource` is called with the _""root""_ directory (which is the directory immediately preceding the pattern). The `getResource` call required the directory entry to exist in the jar file.

https://github.com/spring-projects/spring-framework/blob/ed5ab77397e773cfce3b17d00ceb8e84b0581aab/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java#L539

"
3389,1324715037,bclozel,103264,"Spring Framework 6.0 [brings a baseline change, including a Java 17 requirement](https://github.com/spring-projects/spring-framework/wiki/What%27s-New-in-Spring-Framework-6.x#jdk-17-and-jakarta-ee-9-baseline).

Please note that you cannot use Spring Framework 6.0 with Spring Boot 2.7.x as they are incompatible. You'll need to use Spring Boot 3.0 which will be released later this week. For further questions, please use StackOverflow."
3390,1324831734,sdeleuze,141109,"That's indeed something we don't support yet, and I understand how it can be an issue for our users that were leveraging those functional constructs because they are naturally better supported on native via the static analysis and with less hints involved.

It is currently possible to make it work with the pretty ugly code below:

```kotlin
fun beans() = ApplicationContextInitializer<GenericApplicationContext> {
	it.registerBean(RouterFunction::class.java, { customizer ->
		customizer.beanClassName = ""com.example.demo.DemoApplicationKt""
		customizer.factoryMethodName = ""writeEndpoint""
	})
}
```

We could potentially update `BeanDefinitionDsl` in `6.0.x` to support `beanClassName` and `factoryMethodName` parameters to support something like 

```kotlin
fun beans() = beans {
	bean<RouterFunction<*>>(
		beanClassName =  ""com.example.demo.DemoApplicationKt"",
		factoryMethodName = ""writeEndpoint"")
}
```

Not amazing, but at least it provides a reasonable workaround, and I think it does not hurt to add those 2 parameters with default values since we have a use case here. Depending on the feedback I may create a related issue for that refinement.

The best way to support this use case would be IMO to allow using beans instance suppliers as they are, with inference mechanism disable which IMO could make sense with this kind of functional constructs where much less hints are needed, and where having full control on what is done without hint inference could be a feature and the desired behavior. I think this could be explored as part of https://github.com/spring-projects/spring-framework/issues/29553."
3391,1325086204,Areks,1401803,"This problem also appear when we try to use coroutines in kotlin
```
// any rest method in controller
fun getById(val id: String): AnyObject {
   return runBlocking {
     someCode
   }
}
```

Also main question why we got broken bean in context and haven't finished application initialisation with fail? 
After spring call `ObjenesisCglibAopProxy.createProxyClassAndInstance` to apply validation  we receive broken bean in line `((Factory) proxyInstance).setCallbacks(callbacks);` I think spring need to check such problem and fail context initialisation
"
3392,1325265372,catherine-augustine,67876056,Where can I find this sample project?
3393,1325279911,snicoll,490484,@catherine-augustine this happened 16 years ago. I can only guess that's what Petclinic became: https://github.com/spring-projects/spring-petclinic/
3394,1325283587,sbrannen,104798,"I was just about to say the same as @snicoll, except that I do not believe we still have an example application based on Portlets."
3395,1325323439,michael-o,573017,"Can someone for the stupid explain why this violates CORS specs with ""*"" and `allowCredentials: true`? From an external point of view it does not matter how you match internally, this should just work like with previous fixed strings `allowedOrigins`.

FTR: https://stackoverflow.com/a/19744754/696632"
3396,1325424184,odrotbohm,128577,"So, the non-HATEOAS arrangement basically stumbles over the fact that the controller class and the return type of the dummy method invocation need to be proxied, and no CGLib proxy classes have been registered for these types. I guess that's due to Spring MVC not yet providing any facilities to do that.

In the HATEOAS-world we have [an AOT extension](https://github.com/spring-projects/spring-hateoas/blob/main/src/main/java/org/springframework/hateoas/aot/ControllerMethodReturnTypeAotProcessor.java) for `WebMvcContollerLinkBuilder` to work properly (which predates `MUCB`, basically does the same as that but produces `Link` instances eventually). So, I assume that we now register e.g. a CGLib proxy with a certain proxy definition (declaring `LastInvocationAware` as sole interface, a HATEOAS specific interceptor). This is done through a `ProxyFactory` instance that, under the covers, uses the same APIs that `MUCB` uses. When the code path in `MUCB` is now hit, the HATEOAS-specific CGLib proxy is used, but in a different setup (registering `MethodInvocationInfo` as interface and another dedicated interceptor), which then ultimately fails as it seems to try to add a second interceptor to the array already sized to 1.

I guess we'll have to consult the AOT team to avoid such conflicting proxy declarations."
3397,1325563562,DaveDixon,4022282,I'm updating older code to use jakarta so I have to use spring 6.0.0. The code uses the package org.springframework.web.multipart.commons which doesn't exists in 6.0.0. I can't find any information about it being deprecated or moved elsewhere.
3398,1325876585,qiufeng001,26214479,This error occurs when I am building the source code
3399,1325986752,PedroAlvarado,1258134,"I was able to verify the workaround. Thank you @sdeleuze.

Allow me to add that in our applications we make use of all the available DSLs and the only spring annotations we use are `@SpringBootApplication` and `@SpringBootTest`. In general, we would be in favor of writing more code in exchange for greater control. We have saved 100s of hours by taking advantage of the functional DSLs. 

As one example, the security and routing requirements of our APIs are different between mobile/desktop(X-Auth-Tokens, routes, etc) and browser(cookies, csrf, etc) applications while the APIs themselves are practically the same. With the functional DSL we are able to conditionally accommodate all requirements in a cross-cutting way without having to break apart services or introduce gateways. At our early stage, these APIs save cloud resources, cognitive overhead and development time. Additionally, we are finding that the functional model facilitates onboarding of developers coming in from different ecosystem as the code (wiring) is explicit and IDE-assisted.

Anyhow, thank you for providing functional DSLs and I look forward to having first-class support of native images for them.

"
3400,1326044796,sdeleuze,141109,"It is a side effect of fe5bd6751f461532d6817610c47254e0400d25f9 when Hibernate Validator is used. I can reproduce with both Kotlin and Java.

Here we have `org.springframework.boot.context.properties.ConfigurationPropertiesJsr303Validator` -> `jakarta.validation.Validator.validate(""Foooooo"")` -> `org.hibernate.validator.internal.metadata.BeanMetaDataManagerImpl.createBeanMetaData(String.class)` -> `org.hibernate.validator.internal.metadata.aggregated.BeanMetaDataBuilder#build` where [here](https://github.com/hibernate/hibernate-validator/blob/main/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/BeanMetaDataBuilder.java#L132-L134) there are 107 builders (`String` constructors and methods).

They come from `org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider#retrieveBeanConfiguration` which adds all methods and all constructors of the types validated, and then `org.hibernate.validator.internal.util.ExecutableParameterNameProvider` delegates to `org.springframework.validation.beanvalidation.LocalValidatorFactoryBean` which in turn delegates to `org.springframework.core.LocalVariableTableParameterNameDiscoverer` on `String` JDK class not compiled with `-parameters`."
3401,1326251245,jhoeller,1263688,`org.springframework.web.multipart.commons.CommonsMultipartyResolver` has been superseded by `org.springframework.web.multipart.support.StandardServletMultipartResolver` since all Servlet 5.0+ containers have built-in multipart support now. I'll make sure to document this accordingly.
3402,1326294248,snicoll,490484,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
3403,1326384191,rstoyanchev,401908,"This was the case, but [was removed](https://github.com/spring-projects/spring-framework/commit/b045e5baef0445e4feb16a5fc548bc4a7bf5555b#diff-63747db89909f3050833efe38439d4f5ba79d66baf952d1c16d6651652719d0fL80) when adding tests for all sub-classes, with the idea that the reason isn't always what should be present to the outside world. 

What I think it should say, and work, is that it uses the reason as the detail by default, but sub-classes can set the detail to something else if needed."
3404,1326479228,thinking-github,17420441, Can a function achieve this effect?
3405,1326530637,bclozel,103264,"The `ReflectionHints` API is not meant to be a 1 to 1 mapping of all the metadata available with GraalVM.
I assume that this piece of metadata [could be contributed to the community](https://github.com/oracle/graalvm-reachability-metadata) or in the Gson project directly? The feature you're pointing to is also another way to deal with this problem.

Without knowing about the actual issue, I don't know if the feature is missing something or if Gson needs additional metadata. In both cases, I don't think this is a good reason for adding this API to `ReflectionHints`. None of the Spring projects required this so far so we shouldn't publish new public API without a strong use case behind it.

Thanks!"
3406,1326627395,kse-music,33364651,your `@CustomApi` shoud add `@Retention(RetentionPolicy.RUNTIME)`
3407,1326791049,akefirad,2142363,"Right, makes sene. However unfortunately it's not quite straightforward. The hint is not needed for Gson itself. It's needed for the code using Gson.
A less strong use case is for libraries that uses Gson but don't provide runtime hints (e.g. [stripe-java](https://github.com/stripe/stripe-java/issues/1481)). Having ability to use the nice API of Spring to add hints during AoT is just wonderful.
A more stronger use case would be the normal use of Gson as the JSON mapper in Spring Boot application. At least there's one crucial piece of code in Gson that need such reflection for the application code; `TypeAdapter` (There are other cases but can't reproduce it right now). That means a normal Spring Boot application (using Gson over Jackson) won't work in native image, if the code is using any `TypeAdapter` implementation. Here's a [sample](https://github.com/spring-projects/spring-framework/files/10086930/gson-native-image.zip) project, build the native image, run and call `:8080/user`:
```log
 Type com.example.gsonnativeimage.UserJsonAdapter is instantiated reflectively but was never registered. Register the type by adding ""unsafeAllocated"" for the type in reflect-config.json.
```
Right now, the  only solution is to manually write a `reflect-config.json` file for such cases."
3408,1326865294,jaDEVirek,23500077,"Hi @alxxyz 

By default, the DispatcherServlet does not throw a NoHandlerFoundException. You need to enable that:

Check if you have right configuration in your application.properties. 
`spring.mvc.throw-exception-if-no-handler-found=true`

Besides, if you are using @EnableWebMvc then it is likely that your changes made, for example, in properties files will be overwritten.
https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-servlet-config
"
3409,1327102425,alxxyz,75482780,"I am using Webflux instead of WebMvc, does it work also for Webflux?"
3410,1327111550,bmaassenee,36533357,"Thank you, haven't worked with custom annotations much, and really thought i had found a bug. But already found it hard to belief that such a core functionality would be broken."
3411,1327141335,DaveDixon,4022282,Thanks!!
3412,1327146951,vladimirfx,1281463,"We successfully migrated a few of our microservices (Bean DSL, functional routing) to **spring-native** - it works now in production. **spring-native** is practically deprecated but Spring Boot 3 is unable to run our services in native mode. So it looks like regression to me. The idiomatic programming model is more essential for us than benefits from native runtime so we start to 'denativate' our apps. Fortunately, native-build services are not so many...

Maybe raise some epic-type ticket for first-class functional support in AOT mode (bean definitions (#29556), routing, security, and so on)? 

And clearly says these limitations in the documentation: **want to go functional (Kotlin or Java) - AOT is not an option**.

Sample bean:
```kotlin
    bean {
        val kafkaConsumerProps =
            Binder.get(env).bindOrCreate(""kafka.consumer.properties"", mapOf(String::class.java, String::class.java))
        val options = ReceiverOptions.create<String, ApiEvent>(kafkaConsumerProps as Map<String, Any>)
            .consumerProperty(
                ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,
                env.getRequiredProperty(""kafka.bootstrap-servers"")
            )
            .commitBatchSize(25)
            // 10 minutes of commit retry
            .maxCommitAttempts(1200)
            .withValueDeserializer(ApiEventDeserializer(ref()))
            .subscription(setOf(""risk-engine.api.events""))

        KafkaCloudEventReceiver<ApiEvent>(options, provider(), ref())
    }
```

Produces error:
```log
2022-11-25T08:12:44.270Z ERROR 1 --- [           main] o.s.b.d.LoggingFailureAnalysisReporter   : 

***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 0 of constructor in com.digitalfinance.riskengine.aggregation.kafka.KafkaCloudEventReceiver required a bean of type 'reactor.kafka.receiver.ReceiverOptions' that could not be found.


Action:

Consider defining a bean of type 'reactor.kafka.receiver.ReceiverOptions' in your configuration.

```"
3413,1327300915,sbrannen,104798,"This is due to the use of `{chapter}` in the IDs.

`websocket-intro.adoc` attempts to use dynamic IDs such as `[[{chapter}.websocket-intro]]`; whereas, `web-uris.adoc` uses dynamic IDs such as `[id={chapter}.web-uricomponents]`.

The latter works (at least in this particular arrangement).

I noticed the difference previously while working on a different issue and wondered if it was problematic, but I forgot to follow up on that. Now we know!
"
3414,1328692968,christophstrobl,2317257,thanks @wilkinsona - we'll take care of it.
3415,1328692971,christophstrobl,2317257,Looking at `BindingReflectionHintsRegistrar.KotlinDelegate` the `registerComponentHints` method only registers the ones where name equals `copy` which misses those named `copy$default`. \\ cc @sdeleuze 
3416,1327409065,sephiroth-j,23166289,"[The documentation suggests](https://docs.spring.io/spring-framework/docs/5.3.x/reference/html/web-reactive.html#webflux-multipart-forms), that is possible to access the requests parts of ""multipart/mixed"" in the same way as for ""multipart/form-data"" by using `@RequestPart`.

But [this demo](https://github.com/spring-projects/spring-framework/files/10092673/spring-boot-multipart-demo.zip) clearly shows that this is not the case! It only works for ""multipart/form-data"". Using ""multipart/mixed"" results in a 400 response claiming the required request part is not present. The only difference between these requests is the main content-type.

p.s.
`MultipartHttpMessageReader` supports ""multipart/mixed"" since v5.2 and ""multipart/related"" since v5.2.5 (2afae430eba0f2e3c0cae50d727b3d79bf0cf02a). However, the overall support seems to be incomplete."
3417,1327423157,aashishtyagi,16539419,"Hi,

Are we planning to remove this sorting code in some future release?

Thanks,
Aashish
"
3418,1328692976,christophstrobl,2317257,"adding reflection for the `copy$default` methods solves the issue. Think we should fix this in framework.
```kotlin
hints.reflection().registerType(Book::class.java) {
	it.withMethod(
		""copy\$default"",
		listOf(
			TypeReference.of(Book::class.java),
			TypeReference.of(java.lang.Long::class.java),
			TypeReference.of(java.lang.String::class.java),
			TypeReference.of(Int::class.java),
			TypeReference.of(java.lang.Object::class.java)),
		ExecutableMode.INVOKE
	)
}
hints.reflection().registerType(Author::class.java) {
	it.withMethod(
		""copy\$default"",
		listOf(
			TypeReference.of(Author::class.java),
			TypeReference.of(java.lang.Long::class.java),
			TypeReference.of(java.lang.String::class.java),
			TypeReference.of(java.util.Set::class.java),
			TypeReference.of(Int::class.java),
			TypeReference.of(java.lang.Object::class.java)),
		ExecutableMode.INVOKE
	)
}
```"
3419,1327488024,mhalbritter,98899556,"I've seen this message in the past and it is misleading, because in my cases I could get it working without unsafeAllocated. Are you sure that it doesn't work without `unsafeAllocated` just by registering the type and its constructors?"
3420,1327518026,bclozel,103264,"This has been asked several times, see #9008 and #23786 (and probably more).
Maintaining the documentation is a lot of work already, doing so in several languages would result in quickly outdated translations. Feel free to host and maintain your own version of the translated documentation, as long as it points back to the official documentation.

Thanks!"
3421,1327518052,mrcljx,56807,Related: #28235
3422,1327542559,bclozel,103264,"Good point @mhalbritter - libraries can use the unsafe allocation as a fallback mechanism if they don't find a constructor.

I've tested your sample with the following change and it works:

```
@RestController
@RequestMapping(""/users"")
@RegisterReflectionForBinding(UserJsonAdapter.class) // registering your adapter for reflection
public class UserController {
```

Since the adapter itself is not present anywhere in the controller signature we cannot detect it. Looking at GraalVM's [GsonFeature](https://github.com/oracle/graal/blob/master/substratevm/src/com.oracle.svm.thirdparty/src/com/oracle/svm/thirdparty/gson/GsonFeature.java), I'm not sure this is supposed to be supported at all."
3423,1327558979,rstoyanchev,401908,"Makes sense, I'll go ahead and add a getter.

Are you calling `ErrorResponse.builder(..).build()` and then `updateAndGetBody` to resolve ""detail"" and ""title"" message codes? We could add an overloaded `build(MessageSource, Locale)` to shorten that a bit as a follow-up improvement on #29462.
"
3424,1327560490,sephiroth-j,23166289,"@rstoyanchev, since you have worked on this topic in the past, would you please look into this issue?"
3425,1327598154,rstoyanchev,401908,"The way it's currently declared allows differentiating between it being set explicitly to `false` vs not set but defaulting to `false`. This is important when combining global CORS config with local config on a controller, or when combining class (including parents) with method level annotations. If higher level config is explicitly set to ""true"" and the local is ""false"", whether the local one is used depends on whether it was set explicitly or not.

@sdeleuze do you agree, and anything else I'm missing? "
3426,1327600825,rstoyanchev,401908,"@alxxyz that should be the case out of the box in WebFlux, [in DispatcherHandler](https://github.com/spring-projects/spring-framework/blob/7de8d81932c1a17d06f247b67110c3c9016fcc9d/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java#L152)."
3427,1327616086,rstoyanchev,401908,"I think ""content-type is unknown"" means when the client didn't specify it and therefore it is not known to the server, in which case the method does return `null` as the annotation correctly indicates. The Javadoc, however, should also have `@throws InvalidMediaTypeException` since it can fail with a parse error. I'll update the Javadoc there. 

As for `AbstractMessageReaderArgumentResolver`, by comparison Spring MVC's [AbstractMessageConverterMethodArgumentResolver](https://github.com/spring-projects/spring-framework/blob/4ff18741fdabf1aa762ab9d0fd75e59c2ed8c6d2/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java#L148-L153) does expect and handle this as an exception that results in a 400 response. We need to the same.

Thanks for spotting and reporting these."
3428,1327622441,akefirad,2142363,"(For some reason I cannot reproduce the exact error message I pasted here, it still fails but without the stacktrace.)
You're right. The minimal hint needed is the default constructor: `""methods"":[{""name"":""<init>"",""parameterTypes"":[] }]`.
Thanks."
3429,1327622705,bclozel,103264,Duplicates #29577
3430,1327662191,wilkinsona,914682,"Complete stacktrace:

```
java.lang.NullPointerException: null
	at org.springframework.aop.framework.AdvisedSupport$MethodCacheKey.<init>(AdvisedSupport.java:578) ~[intervenant-service:6.0.2]
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ HTTP GET ""/intervenants"" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.aop.framework.AdvisedSupport$MethodCacheKey.<init>(AdvisedSupport.java:578) ~[intervenant-service:6.0.2]
		at org.springframework.aop.framework.AdvisedSupport.getInterceptorsAndDynamicInterceptionAdvice(AdvisedSupport.java:470) ~[intervenant-service:6.0.2]
		at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[na:na]
		at org.miage.intervenantservice.boundary.IntervenantHandler$$SpringCGLIB$$0.getAllIntervenants(<generated>) ~[intervenant-service:na]
		at org.springframework.web.reactive.function.server.support.HandlerFunctionAdapter.handle(HandlerFunctionAdapter.java:61) ~[intervenant-service:6.0.2]
		at org.springframework.web.reactive.DispatcherHandler.handleRequestWith(DispatcherHandler.java:183) ~[intervenant-service:6.0.2]
		at org.springframework.web.reactive.DispatcherHandler.lambda$handle$2(DispatcherHandler.java:154) ~[intervenant-service:6.0.2]
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79) ~[na:na]
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74) ~[na:na]
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:258) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:863) ~[na:na]
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122) ~[na:na]
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200) ~[na:na]
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onNext(FluxConcatArray.java:201) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onNext(FluxConcatArray.java:201) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onNext(FluxConcatArray.java:201) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onNext(FluxConcatArray.java:201) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onNext(FluxConcatArray.java:201) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2508) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.request(FluxConcatArray.java:276) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.request(FluxConcatArray.java:276) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.request(FluxConcatArray.java:276) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.request(FluxConcatArray.java:276) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.request(FluxConcatArray.java:276) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138) ~[na:na]
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164) ~[na:na]
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2268) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:338) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2304) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2178) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:165) ~[na:na]
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:87) ~[na:na]
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) ~[na:na]
		at reactor.core.publisher.Mono.subscribe(Mono.java:4444) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:263) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51) ~[na:na]
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64) ~[intervenant-service:3.5.0]
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55) ~[na:na]
		at reactor.netty.http.server.HttpServer$HttpServerHandle.onStateChange(HttpServer.java:997) ~[na:na]
		at reactor.netty.ReactorNetty$CompositeConnectionObserver.onStateChange(ReactorNetty.java:680) ~[na:na]
		at reactor.netty.transport.ServerTransport$ChildObserver.onStateChange(ServerTransport.java:477) ~[na:na]
		at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:573) ~[intervenant-service:1.1.0]
		at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113) ~[intervenant-service:1.1.0]
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444) ~[intervenant-service:4.1.85.Final]
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420) ~[intervenant-service:4.1.85.Final]
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412) ~[intervenant-service:4.1.85.Final]
		at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:220) ~[intervenant-service:1.1.0]
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442) ~[intervenant-service:4.1.85.Final]
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420) ~[intervenant-service:4.1.85.Final]
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412) ~[intervenant-service:4.1.85.Final]
		at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436) ~[intervenant-service:4.1.85.Final]
		at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346) ~[intervenant-service:4.1.85.Final]
		at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318) ~[intervenant-service:4.1.85.Final]
		at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251) ~[intervenant-service:4.1.85.Final]
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442) ~[intervenant-service:4.1.85.Final]
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420) ~[intervenant-service:4.1.85.Final]
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412) ~[intervenant-service:4.1.85.Final]
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410) ~[intervenant-service:4.1.85.Final]
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440) ~[intervenant-service:4.1.85.Final]
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420) ~[intervenant-service:4.1.85.Final]
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919) ~[intervenant-service:4.1.85.Final]
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166) ~[intervenant-service:4.1.85.Final]
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788) ~[na:na]
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724) ~[na:na]
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650) ~[na:na]
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562) ~[na:na]
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997) ~[na:na]
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74) ~[na:na]
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) ~[na:na]
		at java.base@17.0.5/java.lang.Thread.run(Thread.java:833) ~[intervenant-service:na]
		at org.graalvm.nativeimage.builder/com.oracle.svm.core.thread.PlatformThreads.threadStartRoutine(PlatformThreads.java:775) ~[intervenant-service:na]
		at org.graalvm.nativeimage.builder/com.oracle.svm.core.posix.thread.PosixPlatformThreads.pthreadStartRoutine(PosixPlatformThreads.java:203) ~[na:na]
```"
3431,1327662192,wilkinsona,914682,It looks like a bug in the proxying that's necessary to honour the use of `@Transactional` on `IntervenantHandler`. We'll ask the Framework team to take a look.
3432,1327668195,jhoeller,1263688,"Early support for Jetty 12 is available in 6.0.3 snapshots now, along with the `JettyWebSocketClient` deprecation in #29576. This includes a reflective adaptation to `getHeaders()` which we intend to revisit based on the Jetty project issue above, as well as a commented-out optimization based on the Jetty 12 `HttpOutput` variant (to be applied once Jetty 12 beta artifacts are available)."
3433,1327694156,BictorLym,82167151,"I agree that managing documents is not easy. However, many projects such as React, fastapi, and django are undergoing open source projects to translate.
If it is not translated, it is a big barrier to entry for non-English speakers who use the project for the first time. Even if you give up document management in part, you can create an environment where more beginners, especially non-English-speaking students, are easy to enter

The people who participate in this project are mainly non-English-speaking students, and it gives them an opportunity to study this framework through official documents. All professional developers read the official documents of the project in English, so I think the problem of fragmentation of the documents is a small problem

Therefore, I think there is a good reason to proceed with the project. If you don't want to proceed with the project in Spring, I wonder if I can proceed. And I wonder if there is a possibility of integrating the project if the number of users of the project increases."
3434,1328692982,wilkinsona,914682,"Thanks, @christophstrobl. I agree that a fix for this belongs in Framework."
3435,1327910328,vpavic,1149230,"Note that some Gradle releases (and 7.6 is one of those) also update wrapper scripts and/or wrapper binary. So it's necessary to run `./gradlew wrapper` after bumping the Gradle version in `gradle-wrapper.properties`, in order for those files to self-update."
3436,1327911740,sbrannen,104798,Updated wrapper in 902f8dd1d8350bc7fbdf711fa92a8a01fd5d0036
3437,1328016120,jhoeller,1263688,"Hey Josh, this is a variant of #29309 where we obviously fail to register the reflection hints for CGLIB proxy classes. As pointed out there by Ollie and Christoph, you can register those hints manually for the time being.

We detect CGLIB proxy classes by top-level bean inspection in `GenericApplicationContext.preDetermineBeanTypes`. Any internal exposure of CGLIB proxies is captured in terms of the generated classes (since that is a CGLIB-internal hook) but not visible for proxy hint registration (which happens at bean introspection level). The capture of generated classes is wider than proxy classes (also includes fast-class helpers etc), and only actual proxy classes need reflection hints on top. Our current hint registration aims to be minimal there, avoiding unnecessary hints, and being consistent with the discovery of JDK proxy classes.

So for such scenarios, it would be good to understand why `GenericApplicationContext.preDetermineBeanTypes` is not able to see the affected CGLIB proxy classes and therefore not registering the corresponding runtime hints. Note that it would also not reliably see JDK proxy classes that got created outside of top-level beans, so this is not inherently a CGLIB problem.

In your case, it seems that `RequestContext` itself is not a scoped proxy but rather a plain scoped bean that is then covered by a lazy resolution proxy for the `ContextHttpController` constructor. Lazy resolution proxies can be hard to discover for the framework there, despite our attempts to pre-resolve them for AOT. So if you turned your `RequestContext` bean into an actual scoped proxy (e.g. through using `@RequestScope` which defaults to a target-class scoped proxy) and therefore removed the `@Lazy` part on `ContextHttpController`, I suppose it would work out of the box, based on my current understanding?"
3438,1328018761,jhoeller,1263688,"Alternatively, declaring the `ContextHttpController` constructor with an `ObjectProvider<RequestContext>` parameter instead should also work. I generally recommend avoiding proxies for lazy-resolution purposes since this can always be replaced with a lightweight `ObjectProvider` arrangement. Or in this case, with a full-scale scoped proxy bean which is more efficient as well (since it is not on-demand per constructor but rather shared application-wide)."
3439,1328022918,jhoeller,1263688,"An update after some analysis: It seems that we do indeed have a gap in our attempts to pre-resolve lazy resolution proxies for AOT where we currently detect and register JDK proxies but not CGLIB proxies in some scenarios. I'll make this consistent for 6.0.3, closing that specific gap and therefore widening the scenarios that we can discover upfront.

This should also make the above scenario work as far as I can see. However, all the recommendations above stand nevertheless since it is generally a good idea to reduce unnecessary proxy requirements or make them exposed at the bean level at least."
3440,1328062551,belingueres,1631042,"I see. So you need to specify three states in the annotation: true, false and ""use the default or whatever is defined in an outer scope"". As a result a boolean would not be enough, and to define some Enum to represent this...I don't know if it is worthwhile the change."
3441,1328074242,jhoeller,1263688,"I'm afraid this is a Spring Boot issue rather than a Spring Framework issue since the core framework does not manage the presence of specific API jars in the application classpath. It rather just happens to compile against certain API versions itself but leaves the concrete choice up to the application at runtime.

Spring Boot 3.0 is meant to choose Servlet 6.0 for Tomcat and Undertow (matching their latest versions) but downgrade to Servlet 5.0 for Jetty (where no Servlet 6.0 support is available for production yet). @wilkinsona for your awareness, I suppose the Servlet API downgrade for Jetty 11 is somehow incomplete?

In any case, please create this issue for Spring Boot instead: https://github.com/spring-projects/spring-boot/issues"
3442,1328086693,bclozel,103264,I don't think we should apply this suggestion as this would only be applied for synchronous method signatures but not on reactive ones. This would confuse developers even more. We should document this properly. 
3443,1328088461,vladimirfx,1281463,Done: https://github.com/spring-projects/spring-boot/issues/33373
3444,1328093922,mdeinum,606761,"```java
@Override
protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,																															HttpHeaders headers, HttpStatusCode status,WebRequest request) {
  var problemDetail = createProblemDetail(ex, status, ""Validation errors"", null, null, request);
  var errors = ex.getFieldErrors().stream().collect(Collectors.toMap(FieldError::getField, FieldError::getDefaultMessage));
  problemDetail.setProperty(""errors"", errors);
  return createResponseEntity(problemDetail, headers, status, request);
}
```

Is what I currently have. I also would like to use the `MessageSource` to resolve the locale specific erorr message for the `FieldError`. As that itself is a `MessageSourceResolvable` one could simply pass it to the `MessageSource.getMessage`. So I'm actually calling the methods provided from the `ResponseEntityExceptionHandler`.

I thought of using the `ErrorResponse.builder` but as I needed to call `updateAndGetBody` that let me down the path getting the `MessageSource` myself. 

It is a sample from the Spring 6 Recipes book and I now wonder what the best practice would be?

Anyway having easy access to the `MessageSource` will at least be helpful in the case of the `MethodArgumentNotValidException` to resolve locale specific detailed error messages. 

If you want I can provide a PR which adds a `protected` `getMessageSource`.

"
3445,1328110405,joshlong,54473,"I've made the changes you suggested, and this works. Thanks! 

The only oddity is that it did work with the regular (non target-proxy) on the JRE. Each new request sees a new value for the `uuid`."
3446,1328144688,pivotal-cla,16822967,"@ooeunz Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29587)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29587) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
3447,1328144894,pivotal-cla,16822967,@ooeunz Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29587)!
3448,1328199006,maciejwalkowiak,1357927,Seems I am not the only one who tries to run Spring PetClinic as native image :-)
3449,1328228120,maanasa,717279,"Hi,
I have the same problem. Will this be fixed anytime soon? 

"
3450,1329473343,mhalbritter,98899556,"Hey, could you provide a complete minimal sample (something that we can unzip or git clone, build, and deploy) that reproduces the problem?"
3451,1328738751,pivotal-cla,16822967,"@Aashay-Chapatwala Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29594)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29594) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
3452,1328742442,pivotal-cla,16822967,@Aashay-Chapatwala Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29594)!
3453,1328765867,mdeinum,606761,"This is due to the aspects. The aspects result in a proxy being generated. As the method is `final` that cannot be proxied. What now happens is that the method is invoked on the proxy instead of passing through the proxy and eventually invoking the actual method. The proxy, due to its nature, doesn't have any of the fields initialized (or injected). 


You might want to refine your pointcut expression to exclude this specific subclass of the `JpaTransactionManager`, that way it won't be proxied and it will work as it should. "
3454,1328786836,wilkinsona,914682,"> I suppose the Servlet API downgrade for Jetty 11 is somehow incomplete?

Unfortunately, it isn't possible for Boot to perform this downgrade automatically. It has to be done manually as [briefly mentioned in Boot 30's migration guide](https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#jetty). https://github.com/spring-projects/spring-boot/issues/33044 will expand on this."
3455,1328876611,sdeleuze,141109,"As you may have seen, more benchmarks on https://github.com/spring-projects/spring-framework/pull/29438 did not achieve to reproduce in a reliable way the gains I initially saw, I think it would maybe more visible with realistic workloads involving different converters. But this kind of `instanceof` checks are used in various places in the Framework, and it would be better to fix the root issue rather than artificially write bad code to workaround it in specific places. 

No promise yet, but https://bugs.openjdk.org/browse/JDK-8180450 may be backported to Java 17, so at least with this version we should be able to avoid this painful `instanceof` issue on both Spring Boot 2.7.x and 3.x lines. We will push for that short and try to make that happen asap.

@dreis2211 Except this `instanceof` issue, have you identify other low hanging fruits we could optimize to increase the throughput//latency?"
3456,1328895624,sdeleuze,141109,"We should also probably configure `queryAllDeclaredMethods` on those types, see [this comment](https://github.com/spring-projects/spring-data-commons/issues/2737?notification_referrer_id=NT_kwDOAAInNbE0OTI1ODExMDAxOjE0MTEwOQ#issuecomment-1328677161)."
3457,1328918850,dreis2211,6304496,"I've contributed some low hanging fruits already in https://github.com/spring-projects/spring-framework/pull/29428 & https://github.com/spring-projects/spring-framework/pull/29412

As noted earlier that the media-type/content-type dance is quite a big chunk - regardless of the `instanceof` and secondary supers cache problematic - but in my opinion not really low-hanging unfortunately.
<img width=""1654"" alt=""image"" src=""https://user-images.githubusercontent.com/6304496/204265237-54618a7e-7acf-4299-a8de-7d82782920d6.png"">

I think with the update to 3.x plus bullseye in the framework benchmarks, we should be able to achieve already quite some uplift. I think I will contribute this in the next days. And while being at it, probably also setting the content-type to avoid the costly computation."
3458,1328919355,rstoyanchev,401908,"Thanks for the extra detail. 

The `ErrorResponse` builder is for exceptions that are not an `ErrorResponse`. `MethodArgumentNotValidException` is, and it already contains a `ProblemDetail`, so you can just change it, e.g. `ex.getBody().setProperty(..)`. It actually exposes ""detail"" message arguments with the lists of global errors at `{0}` and the list of field errors at `{1}`. So, if that works for you, you can include those in the ""detail""  by [adding a message](https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-ann-rest-exceptions-i18n) for this exception.

There are also utility methods in `MethodArgumentNotValidException` to turn errors into a list of strings with a `MessageSource`. They are mainly used from `WebExchangeBindException`, but you could use them too. Now that I've added the getters, it looks like this:

```java
protected ResponseEntity<Object> handleMethodArgumentNotValid(
		MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatusCode status, WebRequest request) {

	var errors = MethodArgumentNotValidException.errorsToStringList(
			ex.getFieldErrors(), getMessageSource(), LocaleContextHolder.getLocale());

	ex.getBody().setProperty(""errors"", errors);

	return handleExceptionInternal(ex, null, headers, status, request);
}
```

It makes me wonder if we should expose similar, instance methods on `MethodArgumentNotValidException`, one for global and one for local fields, just taking a `MessageSource` and a `Locale`. This would support creating an ""errors"" property vs formatting them within the ""detail"" message as our current support aims to facilitate.

 "
3459,1329038626,sbrannen,104798,Update: added a section with additional resources regarding changes in behavior in URL constructors beginning with Java 20.
3460,1329040004,mdeinum,606761,"Thanks for the hint on the helper methods on the `MethodArgumentNotValidException` and the reminder that it itself is a `ErrorResponse`, I should have looked at the javadoc for those. This code looks cleaner then what I had, will update my sample for the book. 

I do like the idea of an `errors` property."
3461,1329085695,rstoyanchev,401908,"Okay, thanks. I'll experiment with that."
3462,1329180622,sdeleuze,141109,"Great, thanks a lot for your various contributions. Could be great if TechEmpower benchmark could be updated with Spring Boot 3.0.x, explicit content type and compare with the previous figures. Do you plan to do it?

@rstoyanchev I am wondering if you could have a look on if you see some reasonable way to skip some content type resolution part for more common use cases, if we should drop a note in our reference documentation to advise configuring explicitly the content type for better performances, etc."
3463,1329181046,sbrannen,104798,"This has been merged into `main`.

Thanks"
3464,1329211078,dreis2211,6304496,"Yeah, I will likely do that somewhen this week. Fill do another comparison then as well on my local machine. But this week is busy, so might be something for the weekend."
3465,1329224325,sdeleuze,141109,"No rush, thanks for your help on this, much appreciated."
3466,1329292607,sbrannen,104798,"Hi @Aashay-Chapatwala,

Congratulations on submitting your first PR for the Spring Framework! 👍 
"
3467,1329317640,sbrannen,104798,"@rstoyanchev, do you think this should be performed for the prelude in `HtmlFileTransportHandler` as well?"
3468,1329337167,sbrannen,104798,"This has been merged into `main` in 650875468cf37cd334dfac5e7d2e732cd9f8ffdb and revised in 6e5dd64025774e57502ee587b456169dcef5027a and 164141a63e93c5ad326f41441fc475e5ebaf6cdb.

In the future, please make sure you run a full local build before submitting a PR to ensure that the changes do not break existing tests.

Thanks"
3469,1329473348,jhg023,18515648,"I was able to narrow down the issue to a bean in one of my dependencies (which I also own). It turns out to be caused by this (written in Kotlin):
```
@Configuration
class EnvironmentConfig @Autowired constructor(
	private val environment: Environment
) {

	private fun acceptsProfile(profile: String): Boolean = environment.acceptsProfiles(Profiles.of(profile))

	@Bean
	@Qualifier(""isDevProfile"")
	fun isDevProfile(): Boolean = acceptsProfile(""dev"")

	@Bean
	@Qualifier(""isLocalProfile"")
	fun isLocalProfile(): Boolean = acceptsProfile(""local"")

	@Bean
	@Qualifier(""isProdProfile"")
	fun isProdProfile(): Boolean = acceptsProfile(""prod"")
}
```"
3470,1329370378,sbrannen,104798,"> You might want to refine your pointcut expression to exclude this specific subclass of the `JpaTransactionManager`, that way it won't be proxied and it will work as it should.

Indeed.

Before @mdeinum posted his comment, I was going to point out that your pointcut is too broad: it's rarely a good idea to have an aspect applied to every single bean in your project. Rather, you should apply aspects based on certain packages/types or based on the presence of specific annotations.

In light of the above, I am closing this issue as ""works as designed"".


"
3471,1329374650,sbrannen,104798,"Closed in 332d2a36bb92021739ad5a083923467bf21be6ef, 92af390ed28464975e59cf597855fbabca8db141, and 5e55558a9364dd6e5d35d7f425bde40f8ecb70e0."
3472,1329473350,jhg023,18515648,"I simplified the class to this, and the same error still occurs (both with and without `@Qualifier`):
```
@Configuration
class EnvironmentConfig {

	@Bean
	@Qualifier(""someBoolean"")
	fun someBoolean(): Boolean = true
}
```"
3473,1329473361,jhg023,18515648,"Changing `Boolean` to `Int` results in a similar error message: `java.lang.IllegalArgumentException: invalid type parameter: int`

I suppose this is happening for all primitive types 🤔 "
3474,1329473367,jhg023,18515648,"I've found that using a nullable type (`Boolean?` vs `Boolean`) resolves the issue, but this seems undesirable for beans meant to be non-null."
3475,1329424157,wilkinsona,914682,"We discussed this today and we think that there would be some value in the generated code not producing any compilation warnings. The warnings aren't helpful as the user can't do anything to the generated code to fix them.

We could configure Boot to compile the code with `-Xlint:none` but the warnings will still be present when viewed in an IDE. To avoid them entirely, `@SuppressWarnings` would have to be generated at build time. This would have to be done in Spring Framework where the code generation is performed. We'll transfer this issue to Framework for their consideration."
3476,1329450170,brendsanchez,57324268,with spring 2.5.8 and tomcat 9.0.59 works to me
3477,1329473370,wilkinsona,914682,"> I suppose this is happening for all primitive types 

I suspect so.

I don't think I've ever seen a `Boolean` bean before. The most ""plain"" that I've seen in a `String`. That said, as it works normally, I think we should aim for it to work with an AOT-processed context as well. The code in question is part of Spring Framework so we'll transfer this issue to the Framework repository."
3478,1329473374,jhg023,18515648,"Thank you, I appreciate it!"
3479,1329683910,dreis2211,6304496,"There you go: https://github.com/TechEmpower/FrameworkBenchmarks/pull/7749

**2.6.9 (Before)**
<img width=""1158"" alt=""image"" src=""https://user-images.githubusercontent.com/6304496/204369142-9e4a431c-03c5-4a08-aabf-b5f87411061c.png"">

**3.0.0 (After)**
<img width=""1158"" alt=""image"" src=""https://user-images.githubusercontent.com/6304496/204369101-e79dbb9c-0255-4c00-a4a4-17a57fc375e2.png"">

Compared to previous results, I updated my Mac, Docker etc.. The results were already better & worse before, but I think the head-to-head comparison from this evening is already a good step into the right direction"
3480,1330136065,bclozel,103264,Thanks but this action doesn't run Gradle at all so caching is not useful here.
3481,1330137169,bclozel,103264,"Thanks for getting in touch, but it feels like this is a question that would be better suited to [Stack Overflow](http://stackoverflow.com/). As mentioned in [the guidelines for contributing](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#discuss), we prefer to use the issue tracker only for bugs and enhancements. Feel free to update this issue with a link to the re-posted question (so that other people can find it) or add some more details if you feel this is a genuine bug."
3482,1330144337,guy1699,15769295,Thanks for the explanation @mdeinum 
3483,1330173511,bclozel,103264,"[Quoting the spec](https://fetch.spec.whatwg.org/#http-responses):

> Any other kind of HTTP response is not successful and will either end up not being shared or fail the CORS-preflight request. Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.

I think this might be covered in chapter 6 of your book. We can discuss each error case in our implementation but I guess your point was in general for all error responses. Closing this issue for now. "
3484,1330306767,mp911de,1035015,Can you please attach the full stack trace?
3485,1330306770,ahmedeewo,116060235,"> Can you please attach the full stack trace?
thank you for response 

```
com.oracle.svm.core.jdk.UnsupportedFeatureError: Proxy class defined by interfaces [interface org.hibernate.query.sql.spi.NativeQueryImplementor, interface org.hibernate.query.spi.DomainQueryExecutionContext, interface org.hibernate.query.internal.ResultSetMappingResolutionContext, interface org.hibernate.query.spi.QueryImplementor, interface org.hibernate.query.SelectionQuery, interface org.hibernate.query.CommonQueryContract] not found. Generating proxy classes at runtime is not supported. Proxy classes need to be defined at image build time by specifying the list of interfaces that they implement. To define proxy classes use -H:DynamicProxyConfigurationFiles=<comma-separated-config-files> and -H:DynamicProxyConfigurationResources=<comma-separated-config-resources> options.
        at org.graalvm.nativeimage.builder/com.oracle.svm.core.util.VMError.unsupportedFeature(VMError.java:89)
        Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
        *__checkpoint ⇢ org.springframework.web.filter.reactive.ServerHttpObservationFilter [DefaultWebFilterChain]
        *__checkpoint ⇢ com.demo.spring3.configs.CustomClientWebFilter [DefaultWebFilterChain]
        *__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
        *__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
        *__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
        *__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
        *__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
        *__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
        *__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
        *__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
        *__checkpoint ⇢ HTTP POST ""/api/data/v1/oauth/token"" [ExceptionHandlingWebHandler]
Original Stack Trace:
                at org.graalvm.nativeimage.builder/com.oracle.svm.core.util.VMError.unsupportedFeature(VMError.java:89)
                at org.graalvm.nativeimage.builder/com.oracle.svm.core.reflect.proxy.DynamicProxySupport.getProxyClass(DynamicProxySupport.java:171)
                at java.base@19.0.1/java.lang.reflect.Proxy.getProxyConstructor(Proxy.java:47)
                at java.base@19.0.1/java.lang.reflect.Proxy.newProxyInstance(Proxy.java:1037)
                at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:312)
                at jdk.proxy4/jdk.proxy4.$Proxy107.createNativeQuery(Unknown Source)
                at org.springframework.data.jpa.repository.query.NativeJpaQuery.createJpaQuery(NativeJpaQuery.java:74)
                at org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery.doCreateQuery(AbstractStringBasedJpaQuery.java:100)
                at org.springframework.data.jpa.repository.query.AbstractJpaQuery.createQuery(AbstractJpaQuery.java:234)
                at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:193)
                at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:90)
                at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:148)
                at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:136)
                at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:136)
                at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:120)
                at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
                at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
                at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
                at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:77)
                at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
                at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
                at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
                at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
                at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
                at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
                at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
                at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:134)
                at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
                at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
                at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
                at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:218)
                at jdk.proxy4/jdk.proxy4.$Proxy68.getApiUserByKey(Unknown Source)
                at com.demo.spring3.resources.api.AuthController.user(AuthController.java:57)
                at java.base@19.0.1/java.lang.reflect.Method.invoke(Method.java:578)
                at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:145)
                at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
                at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:293)
                at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:474)
                at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
                at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
                at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
                at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
                at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
                at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
                at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
                at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
                at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
                at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2034)
                at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
                at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
                at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
                at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
                at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
                at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
                at reactor.netty.channel.FluxReceive.request(FluxReceive.java:134)
                at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
                at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
                at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
                at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2004)
                at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
                at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
                at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
                at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
                at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2304)
                at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
                at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
                at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
                at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
                at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
                at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:1988)
                at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
                at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
                at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
                at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:172)
                at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:151)
                at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:174)
                at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:167)
                at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)
                at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
                at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
                at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
                at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
                at java.base@19.0.1/java.lang.Thread.run(Thread.java:1589)
                at org.graalvm.nativeimage.builder/com.oracle.svm.core.thread.PlatformThreads.threadStartRoutine(PlatformThreads.java:775)
                at org.graalvm.nativeimage.builder/com.oracle.svm.core.posix.thread.PosixPlatformThreads.pthreadStartRoutine(PosixPlatformThreads.java:203)
```
"
3486,1330306930,mp911de,1035015,Thanks a lot. This looks like a Spring Framework core issue as the proxy is being generated by `org.springframework.orm.jpa.SharedEntityManagerCreator`.
3487,1330376737,ahmedeewo,116060235,"@mp911de you're welcome, thank you for your time and work, it's a great improvement 
"
3488,1330432543,bclozel,103264,The license information [is shipped with our artifacts](https://search.maven.org/artifact/org.springframework/spring-core/4.3.16.RELEASE/jar) and is available on the repository. [Note that Spring Framework 4.3.x is EOL](https://spring.io/projects/spring-framework#support) and is vulnerable to several known CVEs so you should upgrade as soon as possible.
3489,1330673093,pivotal-cla,16822967,"@singhbaljit Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29608)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29608) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
3490,1330674047,pivotal-cla,16822967,@singhbaljit Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29608)!
3491,1330676024,singhbaljit,43472235,@rstoyanchev Where would I write the integration tests for this?
3492,1330718661,sbrannen,104798,"## Related Issues

- #14254
- #28356
- #29463"
3493,1330797491,spring-projects-issues,16028288,"If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.
"
3494,1330838917,alxxyz,75482780,"@rstoyanchev can you please advise how I can catch it and override the response?
As I can not catch it in the `@ControllerAdvice`"
3495,1331032410,rstoyanchev,401908,"@alxxyz, catching early exceptions from before a handler is chosen was added recently for 6.0 with #22991, so it's not supported in 5.3.x. Are you trying to add a body to the error response or something else?"
3496,1331043833,rstoyanchev,401908,"We need the 3 states, yes, and can't use `Boolean` either, nor is an enum worth it. Thanks for the question anyway."
3497,1331115441,chrylis,2394512,"A plus-one for this ticket: The out-of-the-box experience with Spring Integration in Boot is to blow up in a surprising manner (I didn't even realize that JMX MBeans were getting added in the first place, since I haven't included Actuator)! This is on a bare-bones Initializr project with tutorial inclusions of `spring-boot-starter-integration` and `spring-integration-aws`."
3498,1331168882,singhbaljit,43472235,"That test seems flaky, its passing locally."
3499,1331647712,spsheni,7766450,"Hi, Any updates on fix for this issue?"
3500,1331654288,sdeleuze,141109,"Yes I agree, sorry for the late feedback."
3501,1331817021,alxxyz,75482780,"Yes, we have an API contract and I need to send a custom body"
3502,1331826417,rstoyanchev,401908,"I see, so that's supported from 6.0 onwards. In 5.3.x, you can use a `WebExceptionHandler` as a workaround, or Boot's [error handling](https://docs.spring.io/spring-boot/docs/2.7.x/reference/htmlsingle/#web.reactive.webflux.error-handling)."
3503,1331832869,alxxyz,75482780,Thank you @rstoyanchev 
3504,1331959947,slimane-deb,6917133,And here I am again too checking for any updates. Still find it relevant
3505,1332002456,wilkinsona,914682,https://github.com/spring-projects/spring-boot/issues/33374 is another example of beans that aren't needed after AOT processing.
3506,1332214066,kuku20045,17181124,- Related issue: #26199
3507,1332294703,bclozel,103264,"Thanks for the suggestion, but these days we're trying to keep the number of values low here - even if the media type is well known, we tend to add values only if Spring uses it for building a specific feature or support.

See #26087 #25491 #2055 #1589 #1054 and more"
3508,1332314834,rstoyanchev,401908,"We evaluate conditions in `RequestMappingInfo#getMatchingCondition` in a specific order and return as soon as one returns `false`. Patterns has always been at the bottom with String path matching, but with parsed `PathPattern` in place, I wonder if we should move the `PathPatternsRequestCondition` near the top, right after the HTTP method check. We could compare some more involved pattern vs consumes or produces.

That said, the `ProducesRequestCondition` does cache the accepted media types in a request attribute, so at least that should be done only once per request withing `RequestMappingHandlerMapping`. The same is not true for `ConsumesRequestCondition` so there is an optimization to be made there.

None of this would impact the benchmark which now sets the response content-type directly, but there might be some new hotspots to be optimized in its present form, perhaps in `AbstractMessageConverterMethodProcessor` that was discussed earlier.





"
3509,1332554793,singhbaljit,43472235,I cant seem to retrigger to the CI pipeline.
3510,1332950015,in-fke,73228413,"Why not open the Jar File _while turning off the verification_?
`public JarFile(File file, boolean verify, int mode)`
see related https://github.com/AdoptOpenJDK/IcedTea-Web/issues/889"
3511,1333314306,bclozel,103264,@in-fke what would be the point of signed jars in the first place then? Shouldn't the user start the JVM with the noverify option in this case?
3512,1333340464,in-fke,73228413,"> @in-fke what would be the point of signed jars in the first place then? Shouldn't the user start the JVM with the noverify option in this case?

If the Jar is opened for classloading, it should be verified, but if it's also opened for component scanning, it may not be necessary? Just wondering if there is potential for optimization if the Jar is opened on different occasions."
3513,1333350498,bclozel,103264,"We've added a mode where this task is performed at build time (see [Juergen's comment](https://github.com/spring-projects/spring-framework/issues/9371#issuecomment-453329546)) and I don't think any other optimization can beat that. As for not performing verifications when scanning, this could have unintended security effects. Given the current state of things, I don't see a good reason for us to invest in this now."
3514,1333495636,in-fke,73228413,"Ok, thank you for following up on this so quickly. Your response makes sense to me."
3515,1333497931,jhoeller,1263688,"Why are those Jasypt/Jetty classes getting introspected in the first place? Do you have bean configuration that refers to their constructor parameter names or the like?

Generally speaking, Spring-driven parameter name introspection is only being triggered by actual demand at runtime. Some step has to trigger the introspection attempt through asking for a parameter name on a specific method/constructor. It would be very helpful to find out what it is in your scenario.

We intend to remove debug symbol introspection completely in 6.1, exclusively relying on `-parameters`. That's the main reason for that warn logging. Aside from missing `-parameters`, we also found quite a few places where parameter names were introspected but effectively not used - which is quite costly since we are unnecessarily parsing the class file for every affected class there. We'd like to identify and fix all such remaining cases."
3516,1333530664,leonchen83,5235764,"@jhoeller 
I create a simple project to reproduce our scenario.

please refer to [spring-test](https://github.com/leonchen83/spring-test)

```
<beans xmlns=""http://www.springframework.org/schema/beans""
    xmlns:p=""http://www.springframework.org/schema/p"" xmlns:c=""http://www.springframework.org/schema/c""
    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:util=""http://www.springframework.org/schema/util""
    xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/util  http://www.springframework.org/schema/util/spring-util.xsd"">
    
    <!-- server -->
    <bean id=""jetty.server"" class=""org.eclipse.jetty.server.Server"">
        <property name=""stopAtShutdown"" value=""true""/>
        <property name=""dumpAfterStart"" value=""false""/>
        <property name=""dumpBeforeStop"" value=""false""/>
        <property name=""connectors"" ref=""jetty.connectors""/>
    </bean>
    
    <util:list id=""jetty.connectors"" list-class=""java.util.ArrayList"">
        <bean id=""jetty.connector.server"" class=""org.eclipse.jetty.server.ServerConnector"">
            <constructor-arg index=""0"" ref=""jetty.server""/>
            <constructor-arg index=""1"" ref=""jetty.connections""/>
            <property name=""port"" value = ""8080""/>
            <property name=""host"" value = ""127.0.0.1""/>
            <property name=""idleTimeout"" value = ""30000""/>
        </bean>
    </util:list>
    
    <util:list id=""jetty.connections"" list-class=""java.util.ArrayList"">
        <bean id=""jetty.connection.http"" class=""org.eclipse.jetty.server.HttpConnectionFactory"">
            <constructor-arg>
                <bean class=""org.eclipse.jetty.server.HttpConfiguration"">
                    <property name=""securePort"" value=""8442""/><property name=""secureScheme"" value=""https""/>
                    <property name=""headerCacheSize"" value=""512""/><property name=""outputBufferSize"" value=""32768""/>
                    <property name=""sendDateHeader"" value=""false""/><property name=""sendServerVersion"" value=""false""/>
                    <property name=""requestHeaderSize"" value=""8192""/><property name=""responseHeaderSize"" value=""8192""/>
                </bean>
            </constructor-arg>
        </bean>
    </util:list>
</beans>
```"
3517,1333705627,jhoeller,1263688,"It looks like the core bean factory is unnecessarily retrieving constructor parameter names during the constructor autowiring algorithm, despite no constructor argument names having been specified. That's a bug we're going to fix in 6.0.3.

Thanks for the configuration snippet! There is no need to change anything there as far as I can see. The warnings should disappear when running that same code on 6.0.3 then."
3518,1333724067,jhoeller,1263688,"For the time being, you may simply disable the warn log category for `org.springframework.core.LocalVariableTableParameterNameDiscoverer`. There is unnecessary reading of class files in the meantime but otherwise no harm for your application."
3519,1334040086,bclozel,103264,Thanks a lot @izeye !
3520,1334199078,jhoeller,1263688,"Revised support for Jetty is available in 6.0.3 snapshots now, tested against Jetty 12.0.0.alpha2. This avoids the `HttpFields` optimization completely now, relying on Servlet header access instead. Support for the Jetty 12 `HttpOutput` variant remains commented out for the time being, waiting for Jetty 12 beta artifacts to be released."
3521,1335072653,Ahmdmslb238,107887510,اديس -صعب *
3522,1335119748,emeraldhieu,951656,This still happens in spring 6.0.2. Spring Boot 3.0.0.
3523,1335247065,rstoyanchev,401908,"Thanks for bringing this up. Please, go ahead with submitting a PR. It seems reasonable to make such an optimization."
3524,1335264888,rstoyanchev,401908,"I don't understand what the problem is. Each `HandlerMapping` has its own registrations, and `HandlerMapping`s are invoked in order until one of them returns a match. If the second is called, it means the ones before didn't find a match. Or, if the first one finds a match, then the second one is not called. 
"
3525,1335273066,rstoyanchev,401908,"`WebFilter`s are called first and are not meant to know what the `DispatcherHandler` will do or what controller method it will choose. You can of course call a `HandlerMapping` from a `WebFilter`, but that is not something that we recommend or support.

"
3526,1335304437,rstoyanchev,401908,This is merged now. Thanks for the pull request!
3527,1335348502,MartinHaeusler,16356998,"This little stunt just cost us over 10 man-hours of pure frustration staring at 404 issues. We debugged through the entire security filter chain, the servlet, everything (great fun!) - until we arrived at the path matchers where it became apparent that the difference between the pattern (and its path placeholders) and the provided path was only the trailing slash. This may be apparent in small applications, but we have over 300 endpoint mappings. If the little phrase `404` would have appeared somewhere in the lengthy migration notes, we would have found it."
3528,1335363732,bclozel,103264,@MartinHaeusler I'm sorry you went through this. Maybe we can improve the documentation to avoid the same issue for other developers. Can you share at which documentation you were looking at while working on this?
3529,1335372605,MartinHaeusler,16356998,"@bclozel we were looking at this:

https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide

But given how big Spring Boot is (with all its modules) it's hard to tell which parts of this document are even relevant for any given application. We spent some time on google looking for ""Spring Boot 3 404"", but the search results produced nothing specific for the latest version. Up to this point, we were not even **aware** that some clients were sending trailing slashes to our endpoints, it just ""happened to work"". That's why the section on trailing slashes didn't really catch any attention. Making the migration guide easier to search through (i.e. ""if you do not update X, you will receive error Y"") would have been great. If there was any mention of ""if your application relied on this behavior, you will receive HTTP 404 errors"" in the migration guide, we would have found it instantly... No hard feelings. We are now aware of it and can move on."
3530,1335374716,plause,158945,"> This still happens in spring 6.0.2. Spring Boot 3.0.0.

Adding `-java-parameters`(Kotlin)/`-parameters`(Java) flag to the compiler options helps get rid of these warnings.

````kts
tasks.withType<KotlinCompile> {
    kotlinOptions {
        freeCompilerArgs = listOf(""-java-parameters"")
    }
}
````

````gradle
compileJava {
    options.compilerArgs << '-parameters'
}
````

Note: you should read/know the [Drawbacks of javac -parameters flag](https://stackoverflow.com/questions/44067477/drawbacks-of-javac-parameters-flag)"
3531,1335386017,bclozel,103264,"@MartinHaeusler I've added a quick mention of ""HTTP 404 errors"" in [the dedicated section of the Spring Boot migration guide](https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#spring-mvc-and-webflux-url-matching-changes), hopefully this will help others. Thanks for bringing this up."
3532,1335438246,jcthalys,139313,"This is still not working for me:
```java 
// using spring boot 3.0.0 and framework 6.0.2
@SpringBootApplication
public class HttpInterfaceApplication {

	public static void main(String[] args) {
		SpringApplication.run(HttpInterfaceApplication.class, args);
	}

	@Bean
	ApplicationListener<ApplicationReadyEvent> ready(GoogleClient googleClient) {
		return event -> {
			String googlePage = googleClient.getGooglePage();
			System.out.println(googlePage);
		};
	}

	@Bean
	GoogleClient googleClient(HttpServiceProxyFactory factory) {
		return factory.createClient(GoogleClient.class);
	}

	@Bean
	HttpServiceProxyFactory getHttpServiceProxyFactory(WebClient.Builder builder) {
		return HttpServiceProxyFactory.builder()
				.clientAdapter(WebClientAdapter.forClient(builder.build())).build();
	}
}

@HttpExchange(url = ""${google.url}"")
interface GoogleClient {
	@GetExchange
	String getGooglePage();
}
```
Error:
```log
java.lang.IllegalArgumentException: Map has no value for 'google.url'
	at org.springframework.web.util.UriComponents$MapTemplateVariables.getValue(UriComponents.java:348) ~[spring-web-6.0.2.jar:6.0.2]
	at org.springframework.web.util.UriComponents.expandUriComponent(UriComponents.java:263) ~[spring-web-6.0.2.jar:6.0.2]
	at org.springframework.web.util.HierarchicalUriComponents$FullPathComponent.expand(HierarchicalUriComponents.java:921) ~[spring-web-6.0.2.jar:6.0.2]
	at org.springframework.web.util.HierarchicalUriComponents.expandInternal(HierarchicalUriComponents.java:439) ~[spring-web-6.0.2.jar:6.0.2]
	at org.springframework.web.util.HierarchicalUriComponents.expandInternal(HierarchicalUriComponents.java:52) ~[spring-web-6.0.2.jar:6.0.2]
	at org.springframework.web.util.UriComponents.expand(UriComponents.java:161) ~[spring-web-6.0.2.jar:6.0.2]
	at org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.build(DefaultUriBuilderFactory.java:391) ~[spring-web-6.0.2.jar:6.0.2]
	at org.springframework.web.util.DefaultUriBuilderFactory.expand(DefaultUriBuilderFactory.java:149) ~[spring-web-6.0.2.jar:6.0.2]
	at org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.uri(DefaultWebClient.java:228) ~[spring-webflux-6.0.2.jar:6.0.2]
	at org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.uri(DefaultWebClient.java:189) ~[spring-webflux-6.0.2.jar:6.0.2]
	at org.springframework.web.reactive.function.client.support.WebClientAdapter.newRequest(WebClientAdapter.java:105) ~[spring-webflux-6.0.2.jar:6.0.2]
	at org.springframework.web.reactive.function.client.support.WebClientAdapter.requestToBody(WebClientAdapter.java:69) ~[spring-webflux-6.0.2.jar:6.0.2]
	at org.springframework.web.service.invoker.HttpServiceMethod$ResponseFunction.lambda$initBodyFunction$5(HttpServiceMethod.java:378) ~[spring-web-6.0.2.jar:6.0.2]
	at org.springframework.web.service.invoker.HttpServiceMethod$ResponseFunction.execute(HttpServiceMethod.java:288) ~[spring-web-6.0.2.jar:6.0.2]
	at org.springframework.web.service.invoker.HttpServiceMethod.invoke(HttpServiceMethod.java:105) ~[spring-web-6.0.2.jar:6.0.2]
	at org.springframework.web.service.invoker.HttpServiceProxyFactory$HttpServiceMethodInterceptor.invoke(HttpServiceProxyFactory.java:271) ~[spring-web-6.0.2.jar:6.0.2]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.0.2.jar:6.0.2]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:218) ~[spring-aop-6.0.2.jar:6.0.2]

```
When I use the url directly it works fine"
3533,1335544083,rstoyanchev,401908,Thanks for the report. This should be fixed with the above commit. 
3534,1335694919,renatomrcosta,1334354,"> This is still not working for me:

I stumbled in the same issue, and found out perhaps a clue to clarify if the URL field considers `application properties` at all, or just URI placeholders.

This error indicates that the application properties with placeholders are not considered at all: If you try, it just considers it a path: (like when you call `""/v1/api/customer/{customerId}""`. The `$` sign in java or `\$` in Kotlin were not parsed.

```kotlin
@HttpExchange(url = ""{httpbin}"") // I chose a single name here, because if we try to simply remove the braces and add the $ back, it still doesn't work, but it's easy enough to use to test.
interface HttpBinClient {
    @GetExchange(""/anything"")
    fun anything(@PathVariable(""httpbin"") httpbin: String): Mono<String>
}
```

(Repo with working example here: [LINK](https://github.com/renatomrcosta/springboot3releaseplayground/blob/spring-issue-28492/src/main/kotlin/com/xunfos/springboot3releaseplayground/Springboot3releaseplaygroundApplication.kt))

so, in this case: is it truly intended that the URL and other fields can be parameterized with application properties at all? If so, then this ticket shouldn't be closed as completed. 

Otherwise @jcthalys , I recommend taking the more verbose approach of providing a webClient with its baseUrl set per httpProxyFactory you need to build for the time being, and not setting the URL property at the annotation level. It's the approach I'll be taking for the time being."
3535,1335800111,osiegmar,1918869,"I figured out that a part of the problem is caused by the Content-Type. The command

```bash
curl -X POST -d '{""foo"":""bar""}' http://localhost:8080/non-existent
{""timestamp"":""2022-12-02T18:48:36.587+00:00"",""status"":404,""error"":""Not Found"",""path"":""/non-existent""}
```
sends a Content-Type of `application/x-www-form-urlencoded` which causes an exception:

```
org.springframework.http.converter.HttpMessageNotWritableException: No converter for [class org.springframework.http.ProblemDetail] with preset Content-Type 'application/x-www-form-urlencoded;charset=UTF-8'
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:319) ~[spring-webmvc-6.0.2.jar:6.0.2]
```

But sending a Content-Type of `application/json` makes things even worse:

```bash
curl -v -H ""Content-Type: application/json"" -d '{""foo"":""bar""}' http://localhost:8080/non-existent
*   Trying 127.0.0.1:8080...
* Connected to localhost (127.0.0.1) port 8080 (#0)
> POST /non-existent HTTP/1.1
> Host: localhost:8080
> User-Agent: curl/7.84.0
> Accept: */*
> Content-Type: application/json
> Content-Length: 13
>
* Mark bundle as not supporting multiuse
< HTTP/1.1 404
< host: localhost:8080
< user-agent: curl/7.84.0
< accept: */*
< Content-Type: application/json;charset=UTF-8
< Content-Length: 13
< Date: Fri, 02 Dec 2022 20:13:00 GMT
<
* Connection #0 to host localhost left intact
{""type"":""abou
```

The response body is truncated and no exception is logged! I also noted that the Content-Length of the response is identical to the one of the request. If I change the size of the request, the size of the response changes accordingly.
"
3536,1335922656,harryssuperman,6017066,"I had a similar problem and after taking the answer from @mazhewei and @invzbl3 got it working.

The main problem here could be a Intellij-Settings-Problem.

For me following Setting for the argLine for the Tests with Maven was disabled.

![Unbenannt](https://user-images.githubusercontent.com/6017066/205401099-0f579925-94fb-4198-aae3-cecdafb4e372.PNG)

So when i runned the Test in the console with mvn clean install Test was ok but into IntelliJ was failed.

Then i wrote in the pom.xml some configuration for the surefire plugin:

```
<plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven-surefire-plugin.version}</version>
                    <configuration>
                        <argLine>
                            --add-opens java.base/java.lang=ALL-UNNAMED
                            --add-opens java.base/java.lang.invoke=ALL-UNNAMED
                            --add-opens java.base/java.lang.reflect=ALL-UNNAMED
                            --add-opens java.base/java.util=ALL-UNNAMED
                            --add-opens java.base/java.text=ALL-UNNAMED
                            --add-opens java.desktop/java.awt.font=ALL-UNNAMED
                            --add-opens java.desktop/java.awt.geom=ALL-UNNAMED
                            @{surefireArgLine}
                        </argLine>
                    </configuration>
                </plugin>
```

In my case, i have more package/module opened because of another tests but the point is after doing this i had not to write the add-opens package/module for the single test.

Maybe @SuperEdison could try this solution and if all is fine issue could be close.



"
3537,1336173195,CoderYellow,43698473,"Are there built-in supports for reactive multipart response for server side, like `MultipartBodyBuilder` so that we don't have to implement it ourselves? Because all the `Part` implementations in spring is not public. 
I can only find the client side implementation in the [doc](https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html#webflux-fn-response)"
3538,1336179598,pivotal-cla,16822967,"@CoderYellow Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29631)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29631) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
3539,1336180765,pivotal-cla,16822967,@CoderYellow Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29631)!
3540,1336182536,hantsy,854520,"Verified in Spring Boot 3.0, it seems Hibernate Validator 8.0 Final adds record support, check my updated example test: https://github.com/hantsy/spring6-sandbox/blob/master/boot/src/test/java/com/example/demo/web/PostControllerTest.java#L134"
3541,1336192528,hantsy,854520,"I think Spring should remove `jakarta.annotation.Resource` support(like removing EJB support).

Jakarta EE itself is cleaning up the dependency injection support in all specs, and trying to move all injection provider to CDI. Such as erasing the injection provider in JSF, REST etc.

The `jakarta.annotation.Resource`(mainly for JNDI resource inject), JNDI Lookup, EJB are almost deprecated, I think they will not be updated in future.  "
3542,1336194926,pivotal-cla,16822967,"@Spark61 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29632)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29632) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."
3543,1336195827,pivotal-cla,16822967,@Spark61 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=29632)!
3544,1336257933,sbrannen,104798,"This has been merged into `main`.

Thanks"
3545,1336273540,sbrannen,104798,"Thanks for reporting this @brucelwl.

This applies to files within the `spring-core` JAR for 6.0.x as well."
3546,1336276494,bclozel,103264,It looks like it was intentional. Maybe we should apply this for all Spring modules? See 50a0094a47bc
3547,1336332329,koo-taejin,10057874,"I have worked for Only the initialization part mentioned in the issue. 
The performance of Stream itself is not good, so it would be better if other parts were improved.
http://www.angelikalanger.com/Conferences/Videos/Conference-Video-GeeCon-2015-Performance-Model-of-Streams-in-Java-8-Angelika-Langer.html

If you want to change the other parts to the collector's loop as before.
Please let me know, then I am going to work for it. 

Thanks :)"
